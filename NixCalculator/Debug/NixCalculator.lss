
NixCalculator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ee4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000594  20000000  00002ee4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000a54  200005a0  00003490  000205a0  2**4
                  ALLOC
  3 .stack        00001004  20000ff4  00003ee4  000205a0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020594  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000205bc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001693b  00000000  00000000  00020615  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b7c  00000000  00000000  00036f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001944  00000000  00000000  00038acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000350  00000000  00000000  0003a410  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000318  00000000  00000000  0003a760  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000153d3  00000000  00000000  0003aa78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006636  00000000  00000000  0004fe4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00078f64  00000000  00000000  00056481  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000008e4  00000000  00000000  000cf3e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 1f 00 20 f5 03 00 00 f1 03 00 00 f1 03 00 00     ... ............
	...
      2c:	f1 03 00 00 00 00 00 00 00 00 00 00 f1 03 00 00     ................
      3c:	4d 12 00 00 f1 03 00 00 f1 03 00 00 f1 03 00 00     M...............
      4c:	f1 03 00 00 f1 03 00 00 f1 03 00 00 c9 05 00 00     ................
      5c:	f1 03 00 00 f1 03 00 00 f1 03 00 00 f1 03 00 00     ................
      6c:	f1 03 00 00 f1 03 00 00 f1 03 00 00 f1 03 00 00     ................
      7c:	f1 03 00 00 f1 03 00 00 f1 03 00 00 f1 03 00 00     ................
      8c:	f1 03 00 00 f1 03 00 00 f1 03 00 00 f1 03 00 00     ................
      9c:	f1 03 00 00 f1 03 00 00 f1 03 00 00 f1 03 00 00     ................
      ac:	f1 03 00 00 00 00 00 00 f1 03 00 00                 ............

000000b8 <__do_global_dtors_aux>:
      b8:	b510      	push	{r4, lr}
      ba:	4c06      	ldr	r4, [pc, #24]	; (d4 <__do_global_dtors_aux+0x1c>)
      bc:	7823      	ldrb	r3, [r4, #0]
      be:	2b00      	cmp	r3, #0
      c0:	d107      	bne.n	d2 <__do_global_dtors_aux+0x1a>
      c2:	4b05      	ldr	r3, [pc, #20]	; (d8 <__do_global_dtors_aux+0x20>)
      c4:	2b00      	cmp	r3, #0
      c6:	d002      	beq.n	ce <__do_global_dtors_aux+0x16>
      c8:	4804      	ldr	r0, [pc, #16]	; (dc <__do_global_dtors_aux+0x24>)
      ca:	e000      	b.n	ce <__do_global_dtors_aux+0x16>
      cc:	bf00      	nop
      ce:	2301      	movs	r3, #1
      d0:	7023      	strb	r3, [r4, #0]
      d2:	bd10      	pop	{r4, pc}
      d4:	200005a0 	.word	0x200005a0
      d8:	00000000 	.word	0x00000000
      dc:	00002ee4 	.word	0x00002ee4

000000e0 <frame_dummy>:
      e0:	4b08      	ldr	r3, [pc, #32]	; (104 <frame_dummy+0x24>)
      e2:	b510      	push	{r4, lr}
      e4:	2b00      	cmp	r3, #0
      e6:	d003      	beq.n	f0 <frame_dummy+0x10>
      e8:	4907      	ldr	r1, [pc, #28]	; (108 <frame_dummy+0x28>)
      ea:	4808      	ldr	r0, [pc, #32]	; (10c <frame_dummy+0x2c>)
      ec:	e000      	b.n	f0 <frame_dummy+0x10>
      ee:	bf00      	nop
      f0:	4807      	ldr	r0, [pc, #28]	; (110 <frame_dummy+0x30>)
      f2:	6803      	ldr	r3, [r0, #0]
      f4:	2b00      	cmp	r3, #0
      f6:	d100      	bne.n	fa <frame_dummy+0x1a>
      f8:	bd10      	pop	{r4, pc}
      fa:	4b06      	ldr	r3, [pc, #24]	; (114 <frame_dummy+0x34>)
      fc:	2b00      	cmp	r3, #0
      fe:	d0fb      	beq.n	f8 <frame_dummy+0x18>
     100:	4798      	blx	r3
     102:	e7f9      	b.n	f8 <frame_dummy+0x18>
     104:	00000000 	.word	0x00000000
     108:	200005a4 	.word	0x200005a4
     10c:	00002ee4 	.word	0x00002ee4
     110:	00002ee4 	.word	0x00002ee4
     114:	00000000 	.word	0x00000000

00000118 <buzzer_init>:
	uint8_t active;
} current_tone = { 0 };

void buzzer_init() {
	// Enable clock for TC6
	PM->APBCMASK.bit.TC6_ = 1;
     118:	4b19      	ldr	r3, [pc, #100]	; (180 <buzzer_init+0x68>)
     11a:	6a18      	ldr	r0, [r3, #32]
     11c:	2180      	movs	r1, #128	; 0x80
     11e:	01c9      	lsls	r1, r1, #7
     120:	0002      	movs	r2, r0
     122:	430a      	orrs	r2, r1
     124:	621a      	str	r2, [r3, #32]
		
	GCLK->CLKCTRL.bit.ID = GCLK_CLKCTRL_ID_TC6_TC7_Val;
     126:	4b17      	ldr	r3, [pc, #92]	; (184 <buzzer_init+0x6c>)
     128:	885a      	ldrh	r2, [r3, #2]
     12a:	203f      	movs	r0, #63	; 0x3f
     12c:	4382      	bics	r2, r0
     12e:	201d      	movs	r0, #29
     130:	4302      	orrs	r2, r0
     132:	805a      	strh	r2, [r3, #2]
		
	GCLK->CLKCTRL.bit.GEN = GCLK_CLKCTRL_GEN_GCLK0_Val;
     134:	885a      	ldrh	r2, [r3, #2]
     136:	4814      	ldr	r0, [pc, #80]	; (188 <buzzer_init+0x70>)
     138:	4002      	ands	r2, r0
     13a:	805a      	strh	r2, [r3, #2]
	GCLK->CLKCTRL.bit.CLKEN = 1;
     13c:	885a      	ldrh	r2, [r3, #2]
     13e:	4311      	orrs	r1, r2
     140:	8059      	strh	r1, [r3, #2]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     142:	4a12      	ldr	r2, [pc, #72]	; (18c <buzzer_init+0x74>)
     144:	805a      	strh	r2, [r3, #2]
						GCLK_CLKCTRL_GEN_GCLK0 |  // source is generic clock generator 0
						GCLK_CLKCTRL_ID_TC6_TC7;  // route to tc6&7
	
	// Setup timer
	TC6->COUNT16.CTRLA.reg |= TC_CTRLA_MODE_COUNT16; // 16 bit mode
     146:	4b12      	ldr	r3, [pc, #72]	; (190 <buzzer_init+0x78>)
     148:	881a      	ldrh	r2, [r3, #0]
     14a:	b292      	uxth	r2, r2
     14c:	801a      	strh	r2, [r3, #0]
	
	TC6->COUNT16.CTRLA.reg |= TC_CTRLA_WAVEGEN_MFRQ; // Match Frequency generation
     14e:	881a      	ldrh	r2, [r3, #0]
     150:	2120      	movs	r1, #32
     152:	430a      	orrs	r2, r1
     154:	b292      	uxth	r2, r2
     156:	801a      	strh	r2, [r3, #0]
	// 48MHz / 512 = 46875 Hz tick
	TC6->COUNT16.CTRLA.reg |= TC_CTRLA_PRESCALER_DIV1024;
     158:	881a      	ldrh	r2, [r3, #0]
     15a:	21e0      	movs	r1, #224	; 0xe0
     15c:	00c9      	lsls	r1, r1, #3
     15e:	430a      	orrs	r2, r1
     160:	801a      	strh	r2, [r3, #0]
	// CC0 will control the period
	
	// Set pin for TC6 output
	PORT->Group[BUZZER_PORT].PINCFG[BUZZER_PIN].bit.PMUXEN = 1;
     162:	4a0c      	ldr	r2, [pc, #48]	; (194 <buzzer_init+0x7c>)
     164:	21d0      	movs	r1, #208	; 0xd0
     166:	5c53      	ldrb	r3, [r2, r1]
     168:	2001      	movs	r0, #1
     16a:	4303      	orrs	r3, r0
     16c:	5453      	strb	r3, [r2, r1]
	PORT->Group[BUZZER_PORT].PMUX[BUZZER_PIN/2].bit.PMUXE = BUZZER_PMUX;
     16e:	3918      	subs	r1, #24
     170:	5c53      	ldrb	r3, [r2, r1]
     172:	200f      	movs	r0, #15
     174:	4383      	bics	r3, r0
     176:	2004      	movs	r0, #4
     178:	4303      	orrs	r3, r0
     17a:	5453      	strb	r3, [r2, r1]
		
}
     17c:	4770      	bx	lr
     17e:	46c0      	nop			; (mov r8, r8)
     180:	40000400 	.word	0x40000400
     184:	40000c00 	.word	0x40000c00
     188:	fffff0ff 	.word	0xfffff0ff
     18c:	0000401d 	.word	0x0000401d
     190:	42003800 	.word	0x42003800
     194:	41004400 	.word	0x41004400

00000198 <buzzer_tone_start>:

void buzzer_tone_start(uint16_t duration_ms, uint16_t freq_hz) {
     198:	b510      	push	{r4, lr}
	if (freq_hz == 0 || freq_hz > 23438 || duration_ms == 0) {
     19a:	1e4b      	subs	r3, r1, #1
     19c:	b29b      	uxth	r3, r3
     19e:	4a0a      	ldr	r2, [pc, #40]	; (1c8 <buzzer_tone_start+0x30>)
     1a0:	4293      	cmp	r3, r2
     1a2:	d810      	bhi.n	1c6 <buzzer_tone_start+0x2e>
     1a4:	2800      	cmp	r0, #0
     1a6:	d00e      	beq.n	1c6 <buzzer_tone_start+0x2e>
		return;
	}
	current_tone.remaining_time_ms = duration_ms;
     1a8:	4b08      	ldr	r3, [pc, #32]	; (1cc <buzzer_tone_start+0x34>)
     1aa:	8018      	strh	r0, [r3, #0]
	current_tone.freq_hz = freq_hz;
     1ac:	8059      	strh	r1, [r3, #2]
	current_tone.active = 1;
     1ae:	2201      	movs	r2, #1
     1b0:	711a      	strb	r2, [r3, #4]
	// Set timer for waveform generation
	TC6->COUNT16.CC[0].reg = (uint16_t)(23438 / freq_hz);
     1b2:	4807      	ldr	r0, [pc, #28]	; (1d0 <buzzer_tone_start+0x38>)
     1b4:	4b07      	ldr	r3, [pc, #28]	; (1d4 <buzzer_tone_start+0x3c>)
     1b6:	4798      	blx	r3
     1b8:	b280      	uxth	r0, r0
     1ba:	4b07      	ldr	r3, [pc, #28]	; (1d8 <buzzer_tone_start+0x40>)
     1bc:	8318      	strh	r0, [r3, #24]
	
	TC6->COUNT16.CTRLA.bit.ENABLE = 1;
     1be:	881a      	ldrh	r2, [r3, #0]
     1c0:	2102      	movs	r1, #2
     1c2:	430a      	orrs	r2, r1
     1c4:	801a      	strh	r2, [r3, #0]
}
     1c6:	bd10      	pop	{r4, pc}
     1c8:	00005b8d 	.word	0x00005b8d
     1cc:	200005bc 	.word	0x200005bc
     1d0:	00005b8e 	.word	0x00005b8e
     1d4:	00001e09 	.word	0x00001e09
     1d8:	42003800 	.word	0x42003800

000001dc <buzzer_timer_tick>:

void buzzer_timer_tick() {
	if (current_tone.active && --current_tone.remaining_time_ms <= 0) {
     1dc:	4b09      	ldr	r3, [pc, #36]	; (204 <buzzer_timer_tick+0x28>)
     1de:	791b      	ldrb	r3, [r3, #4]
     1e0:	2b00      	cmp	r3, #0
     1e2:	d00e      	beq.n	202 <buzzer_timer_tick+0x26>
     1e4:	4a07      	ldr	r2, [pc, #28]	; (204 <buzzer_timer_tick+0x28>)
     1e6:	8813      	ldrh	r3, [r2, #0]
     1e8:	3b01      	subs	r3, #1
     1ea:	b29b      	uxth	r3, r3
     1ec:	8013      	strh	r3, [r2, #0]
     1ee:	2b00      	cmp	r3, #0
     1f0:	d107      	bne.n	202 <buzzer_timer_tick+0x26>
		// TODO: Stop tone
		TC6->COUNT16.CTRLA.bit.ENABLE = 0;
     1f2:	4a05      	ldr	r2, [pc, #20]	; (208 <buzzer_timer_tick+0x2c>)
     1f4:	8813      	ldrh	r3, [r2, #0]
     1f6:	2102      	movs	r1, #2
     1f8:	438b      	bics	r3, r1
     1fa:	8013      	strh	r3, [r2, #0]
		current_tone.active = 0;
     1fc:	2200      	movs	r2, #0
     1fe:	4b01      	ldr	r3, [pc, #4]	; (204 <buzzer_timer_tick+0x28>)
     200:	711a      	strb	r2, [r3, #4]
	}
     202:	4770      	bx	lr
     204:	200005bc 	.word	0x200005bc
     208:	42003800 	.word	0x42003800

0000020c <ClocksInit>:
// Constants for Clock multiplexers
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void ClocksInit() {
	/* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
	NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     20c:	493a      	ldr	r1, [pc, #232]	; (2f8 <ClocksInit+0xec>)
     20e:	684a      	ldr	r2, [r1, #4]
     210:	231e      	movs	r3, #30
     212:	439a      	bics	r2, r3
     214:	3b1c      	subs	r3, #28
     216:	4313      	orrs	r3, r2
     218:	604b      	str	r3, [r1, #4]

	/* Turn on the digital interface clock */
	PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     21a:	4a38      	ldr	r2, [pc, #224]	; (2fc <ClocksInit+0xf0>)
     21c:	6993      	ldr	r3, [r2, #24]
     21e:	2108      	movs	r1, #8
     220:	430b      	orrs	r3, r1
     222:	6193      	str	r3, [r2, #24]

	/* Enable XOSC32K clock (External on-board 32.768Hz oscillator) */
	SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     224:	4b36      	ldr	r3, [pc, #216]	; (300 <ClocksInit+0xf4>)
     226:	4a37      	ldr	r2, [pc, #220]	; (304 <ClocksInit+0xf8>)
     228:	829a      	strh	r2, [r3, #20]
	SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
	SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
     22a:	8a9a      	ldrh	r2, [r3, #20]
     22c:	2102      	movs	r1, #2
     22e:	430a      	orrs	r2, r1
     230:	829a      	strh	r2, [r3, #20]
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
     232:	4b33      	ldr	r3, [pc, #204]	; (300 <ClocksInit+0xf4>)
     234:	68db      	ldr	r3, [r3, #12]
     236:	079b      	lsls	r3, r3, #30
     238:	d5fb      	bpl.n	232 <ClocksInit+0x26>
	{
		/* Wait for oscillator stabilization */
	}

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
     23a:	2201      	movs	r2, #1
     23c:	4b32      	ldr	r3, [pc, #200]	; (308 <ClocksInit+0xfc>)
     23e:	701a      	strb	r2, [r3, #0]
	while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     240:	4b31      	ldr	r3, [pc, #196]	; (308 <ClocksInit+0xfc>)
     242:	781b      	ldrb	r3, [r3, #0]
     244:	07db      	lsls	r3, r3, #31
     246:	d504      	bpl.n	252 <ClocksInit+0x46>
     248:	4b2f      	ldr	r3, [pc, #188]	; (308 <ClocksInit+0xfc>)
     24a:	785b      	ldrb	r3, [r3, #1]
     24c:	b25b      	sxtb	r3, r3
     24e:	2b00      	cmp	r3, #0
     250:	dbf6      	blt.n	240 <ClocksInit+0x34>
	{
		/* Wait for reset to complete */
	}

	/* Put XOSC32K as source of Generic Clock Generator 1 */
	GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
     252:	2201      	movs	r2, #1
     254:	4b2c      	ldr	r3, [pc, #176]	; (308 <ClocksInit+0xfc>)
     256:	609a      	str	r2, [r3, #8]
	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     258:	4b2b      	ldr	r3, [pc, #172]	; (308 <ClocksInit+0xfc>)
     25a:	785b      	ldrb	r3, [r3, #1]
     25c:	b25b      	sxtb	r3, r3
     25e:	2b00      	cmp	r3, #0
     260:	dbfa      	blt.n	258 <ClocksInit+0x4c>
	{
		/* Wait for synchronization */
	}

	/* Write Generic Clock Generator 1 configuration */
	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
     262:	4a2a      	ldr	r2, [pc, #168]	; (30c <ClocksInit+0x100>)
     264:	4b28      	ldr	r3, [pc, #160]	; (308 <ClocksInit+0xfc>)
     266:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
	//                  GCLK_GENCTRL_OE | // Output clock to a pin for tests
	GCLK_GENCTRL_GENEN ;
	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     268:	4b27      	ldr	r3, [pc, #156]	; (308 <ClocksInit+0xfc>)
     26a:	785b      	ldrb	r3, [r3, #1]
     26c:	b25b      	sxtb	r3, r3
     26e:	2b00      	cmp	r3, #0
     270:	dbfa      	blt.n	268 <ClocksInit+0x5c>
	{
		/* Wait for synchronization */
	}

	/* Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference) */
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
     272:	2282      	movs	r2, #130	; 0x82
     274:	01d2      	lsls	r2, r2, #7
     276:	4b24      	ldr	r3, [pc, #144]	; (308 <ClocksInit+0xfc>)
     278:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
	GCLK_CLKCTRL_CLKEN ;
	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     27a:	4b23      	ldr	r3, [pc, #140]	; (308 <ClocksInit+0xfc>)
     27c:	785b      	ldrb	r3, [r3, #1]
     27e:	b25b      	sxtb	r3, r3
     280:	2b00      	cmp	r3, #0
     282:	dbfa      	blt.n	27a <ClocksInit+0x6e>
	{
		/* Wait for synchronization */
	}

	/* Enable DFLL48M clock */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     284:	2202      	movs	r2, #2
     286:	4b1e      	ldr	r3, [pc, #120]	; (300 <ClocksInit+0xf4>)
     288:	849a      	strh	r2, [r3, #36]	; 0x24
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     28a:	4b1d      	ldr	r3, [pc, #116]	; (300 <ClocksInit+0xf4>)
     28c:	68db      	ldr	r3, [r3, #12]
     28e:	06db      	lsls	r3, r3, #27
     290:	d5fb      	bpl.n	28a <ClocksInit+0x7e>
	{
		/* Wait for synchronization */
	}
	SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
     292:	4a1f      	ldr	r2, [pc, #124]	; (310 <ClocksInit+0x104>)
     294:	4b1a      	ldr	r3, [pc, #104]	; (300 <ClocksInit+0xf4>)
     296:	62da      	str	r2, [r3, #44]	; 0x2c
	SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
	SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     298:	4b19      	ldr	r3, [pc, #100]	; (300 <ClocksInit+0xf4>)
     29a:	68db      	ldr	r3, [r3, #12]
     29c:	06db      	lsls	r3, r3, #27
     29e:	d5fb      	bpl.n	298 <ClocksInit+0x8c>
	{
		/* Wait for synchronization */
	}

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
     2a0:	4a17      	ldr	r2, [pc, #92]	; (300 <ClocksInit+0xf4>)
     2a2:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     2a4:	491b      	ldr	r1, [pc, #108]	; (314 <ClocksInit+0x108>)
     2a6:	430b      	orrs	r3, r1
     2a8:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL_DFLLCTRL_WAITLOCK |
	SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     2aa:	4b15      	ldr	r3, [pc, #84]	; (300 <ClocksInit+0xf4>)
     2ac:	68db      	ldr	r3, [r3, #12]
     2ae:	06db      	lsls	r3, r3, #27
     2b0:	d5fb      	bpl.n	2aa <ClocksInit+0x9e>
	{
		/* Wait for synchronization */
	}

	/* Enable the DFLL */
	SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     2b2:	4a13      	ldr	r2, [pc, #76]	; (300 <ClocksInit+0xf4>)
     2b4:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     2b6:	2102      	movs	r1, #2
     2b8:	430b      	orrs	r3, r1
     2ba:	b29b      	uxth	r3, r3
     2bc:	8493      	strh	r3, [r2, #36]	; 0x24
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     2be:	4b10      	ldr	r3, [pc, #64]	; (300 <ClocksInit+0xf4>)
     2c0:	68db      	ldr	r3, [r3, #12]
     2c2:	061b      	lsls	r3, r3, #24
     2c4:	d5fb      	bpl.n	2be <ClocksInit+0xb2>
	(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     2c6:	4b0e      	ldr	r3, [pc, #56]	; (300 <ClocksInit+0xf4>)
     2c8:	68db      	ldr	r3, [r3, #12]
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     2ca:	065b      	lsls	r3, r3, #25
     2cc:	d5f7      	bpl.n	2be <ClocksInit+0xb2>
	{
		/* Wait for locks flags */
	}
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     2ce:	4b0c      	ldr	r3, [pc, #48]	; (300 <ClocksInit+0xf4>)
     2d0:	68db      	ldr	r3, [r3, #12]
     2d2:	06db      	lsls	r3, r3, #27
     2d4:	d5fb      	bpl.n	2ce <ClocksInit+0xc2>
	{
		/* Wait for synchronization */
	}

	/* Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz. */
	GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
     2d6:	2200      	movs	r2, #0
     2d8:	4b0b      	ldr	r3, [pc, #44]	; (308 <ClocksInit+0xfc>)
     2da:	609a      	str	r2, [r3, #8]
	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     2dc:	4b0a      	ldr	r3, [pc, #40]	; (308 <ClocksInit+0xfc>)
     2de:	785b      	ldrb	r3, [r3, #1]
     2e0:	b25b      	sxtb	r3, r3
     2e2:	2b00      	cmp	r3, #0
     2e4:	dbfa      	blt.n	2dc <ClocksInit+0xd0>
	{
		/* Wait for synchronization */
	}

	/* Write Generic Clock Generator 0 configuration */
	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
     2e6:	4a0c      	ldr	r2, [pc, #48]	; (318 <ClocksInit+0x10c>)
     2e8:	4b07      	ldr	r3, [pc, #28]	; (308 <ClocksInit+0xfc>)
     2ea:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
	//                  GCLK_GENCTRL_OE | // Output clock to a pin for tests
	GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
	GCLK_GENCTRL_GENEN ;
	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     2ec:	4b06      	ldr	r3, [pc, #24]	; (308 <ClocksInit+0xfc>)
     2ee:	785b      	ldrb	r3, [r3, #1]
     2f0:	b25b      	sxtb	r3, r3
     2f2:	2b00      	cmp	r3, #0
     2f4:	dbfa      	blt.n	2ec <ClocksInit+0xe0>
	{
		/* Wait for synchronization */
	}
}
     2f6:	4770      	bx	lr
     2f8:	41004000 	.word	0x41004000
     2fc:	40000400 	.word	0x40000400
     300:	40000800 	.word	0x40000800
     304:	0000060c 	.word	0x0000060c
     308:	40000c00 	.word	0x40000c00
     30c:	00010501 	.word	0x00010501
     310:	7dff05b9 	.word	0x7dff05b9
     314:	00000a04 	.word	0x00000a04
     318:	00030700 	.word	0x00030700

0000031c <binary_op_availableQ>:
#include "command.h"
#include "../types.h"

static int binary_op_availableQ(const calc_state_t * calc_state, const sys_state_t * sys_state) {
	return 1; // TODO: implement availability
}
     31c:	2001      	movs	r0, #1
     31e:	4770      	bx	lr

00000320 <unary_op_availableQ>:
static int unary_op_availableQ(const calc_state_t * calc_state, const sys_state_t * sys_state) {
	return 0; // TODO: implement availability
}
     320:	2000      	movs	r0, #0
     322:	4770      	bx	lr

00000324 <available_always>:
static int available_always(const calc_state_t * calc_state, const sys_state_t * sys_state) {
	return 1; // TODO: implement availability
}
     324:	2001      	movs	r0, #1
     326:	4770      	bx	lr

00000328 <cmd_re_im_func>:

static int cmd_re_im_func(calc_state_t * calc_state, sys_state_t * sys_state) {
	switch (sys_state->ui.cpx_view) {
     328:	7a4b      	ldrb	r3, [r1, #9]
     32a:	2b01      	cmp	r3, #1
     32c:	d00a      	beq.n	344 <cmd_re_im_func+0x1c>
     32e:	2b00      	cmp	r3, #0
     330:	d005      	beq.n	33e <cmd_re_im_func+0x16>
     332:	2b02      	cmp	r3, #2
     334:	d009      	beq.n	34a <cmd_re_im_func+0x22>
     336:	2b03      	cmp	r3, #3
     338:	d00a      	beq.n	350 <cmd_re_im_func+0x28>
		case cv_theta:
			sys_state->ui.cpx_view = cv_r;
			break;
	}
	return 0;
}
     33a:	2000      	movs	r0, #0
     33c:	4770      	bx	lr
			sys_state->ui.cpx_view = cv_im;
     33e:	2301      	movs	r3, #1
     340:	724b      	strb	r3, [r1, #9]
			break;
     342:	e7fa      	b.n	33a <cmd_re_im_func+0x12>
			sys_state->ui.cpx_view = cv_re;
     344:	2300      	movs	r3, #0
     346:	724b      	strb	r3, [r1, #9]
			break;
     348:	e7f7      	b.n	33a <cmd_re_im_func+0x12>
			sys_state->ui.cpx_view = cv_theta;
     34a:	2303      	movs	r3, #3
     34c:	724b      	strb	r3, [r1, #9]
			break;
     34e:	e7f4      	b.n	33a <cmd_re_im_func+0x12>
			sys_state->ui.cpx_view = cv_r;
     350:	2302      	movs	r3, #2
     352:	724b      	strb	r3, [r1, #9]
			break;
     354:	e7f1      	b.n	33a <cmd_re_im_func+0x12>

00000356 <cmd_rec_pol_func>:
	.num_operands = 0,
	.op_func = cmd_re_im_func
};

static int cmd_rec_pol_func(calc_state_t * calc_state, sys_state_t * sys_state) {
	switch (sys_state->ui.cpx_view) {
     356:	7a4b      	ldrb	r3, [r1, #9]
     358:	2b01      	cmp	r3, #1
     35a:	d00a      	beq.n	372 <cmd_rec_pol_func+0x1c>
     35c:	2b00      	cmp	r3, #0
     35e:	d005      	beq.n	36c <cmd_rec_pol_func+0x16>
     360:	2b02      	cmp	r3, #2
     362:	d009      	beq.n	378 <cmd_rec_pol_func+0x22>
     364:	2b03      	cmp	r3, #3
     366:	d00a      	beq.n	37e <cmd_rec_pol_func+0x28>
		case cv_theta:
			sys_state->ui.cpx_view = cv_re;
			break;
	}
	return 0;
}
     368:	2000      	movs	r0, #0
     36a:	4770      	bx	lr
			sys_state->ui.cpx_view = cv_r;
     36c:	2302      	movs	r3, #2
     36e:	724b      	strb	r3, [r1, #9]
			break;
     370:	e7fa      	b.n	368 <cmd_rec_pol_func+0x12>
			sys_state->ui.cpx_view = cv_r;
     372:	2302      	movs	r3, #2
     374:	724b      	strb	r3, [r1, #9]
			break;
     376:	e7f7      	b.n	368 <cmd_rec_pol_func+0x12>
			sys_state->ui.cpx_view = cv_re;
     378:	2300      	movs	r3, #0
     37a:	724b      	strb	r3, [r1, #9]
			break;
     37c:	e7f4      	b.n	368 <cmd_rec_pol_func+0x12>
			sys_state->ui.cpx_view = cv_re;
     37e:	2300      	movs	r3, #0
     380:	724b      	strb	r3, [r1, #9]
			break;
     382:	e7f1      	b.n	368 <cmd_rec_pol_func+0x12>

00000384 <cmd_reint_drg_func>:
	.num_operands = 0,
	.op_func = cmd_rec_pol_func
};

static int cmd_reint_drg_func(calc_state_t * calc_state, sys_state_t * sys_state) {
	switch (sys_state->sys.angle_units) {
     384:	788b      	ldrb	r3, [r1, #2]
     386:	2b01      	cmp	r3, #1
     388:	d008      	beq.n	39c <cmd_reint_drg_func+0x18>
     38a:	2b00      	cmp	r3, #0
     38c:	d003      	beq.n	396 <cmd_reint_drg_func+0x12>
     38e:	2b02      	cmp	r3, #2
     390:	d00c      	beq.n	3ac <cmd_reint_drg_func+0x28>
		case au_grad:
			sys_state->sys.angle_units = au_deg;
			break;
	}
	return 0;
}
     392:	2000      	movs	r0, #0
     394:	4770      	bx	lr
			sys_state->sys.angle_units = au_rad;
     396:	2301      	movs	r3, #1
     398:	708b      	strb	r3, [r1, #2]
			break;
     39a:	e7fa      	b.n	392 <cmd_reint_drg_func+0xe>
			sys_state->sys.angle_units = sys_state->settings.grad_enabled ? au_grad : au_deg;
     39c:	780b      	ldrb	r3, [r1, #0]
     39e:	2b00      	cmp	r3, #0
     3a0:	d102      	bne.n	3a8 <cmd_reint_drg_func+0x24>
     3a2:	2300      	movs	r3, #0
     3a4:	708b      	strb	r3, [r1, #2]
			break;
     3a6:	e7f4      	b.n	392 <cmd_reint_drg_func+0xe>
			sys_state->sys.angle_units = sys_state->settings.grad_enabled ? au_grad : au_deg;
     3a8:	2302      	movs	r3, #2
     3aa:	e7fb      	b.n	3a4 <cmd_reint_drg_func+0x20>
			sys_state->sys.angle_units = au_deg;
     3ac:	2300      	movs	r3, #0
     3ae:	708b      	strb	r3, [r1, #2]
			break;
     3b0:	e7ef      	b.n	392 <cmd_reint_drg_func+0xe>
	...

000003b4 <cmd_add_func>:
	.op_func = cmd_reint_drg_func
};



static int cmd_add_func(calc_state_t * calc_state, sys_state_t * sys_state) {
     3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3b6:	0004      	movs	r4, r0
	if (sys_state->sys.entry_mode == em_rpn) {
     3b8:	790b      	ldrb	r3, [r1, #4]
     3ba:	2b01      	cmp	r3, #1
     3bc:	d001      	beq.n	3c2 <cmd_add_func+0xe>
		calc_state->rpn.stack[0] = calc_state->rpn.stack[0] + calc_state->rpn.stack[1];
	} else {
		
	}
	return 0;
}
     3be:	2000      	movs	r0, #0
     3c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		calc_state->rpn.stack[0] = calc_state->rpn.stack[0] + calc_state->rpn.stack[1];
     3c2:	4d09      	ldr	r5, [pc, #36]	; (3e8 <cmd_add_func+0x34>)
     3c4:	6902      	ldr	r2, [r0, #16]
     3c6:	6943      	ldr	r3, [r0, #20]
     3c8:	6841      	ldr	r1, [r0, #4]
     3ca:	6800      	ldr	r0, [r0, #0]
     3cc:	47a8      	blx	r5
     3ce:	0006      	movs	r6, r0
     3d0:	000f      	movs	r7, r1
     3d2:	69a2      	ldr	r2, [r4, #24]
     3d4:	69e3      	ldr	r3, [r4, #28]
     3d6:	68a0      	ldr	r0, [r4, #8]
     3d8:	68e1      	ldr	r1, [r4, #12]
     3da:	47a8      	blx	r5
     3dc:	6026      	str	r6, [r4, #0]
     3de:	6067      	str	r7, [r4, #4]
     3e0:	60a0      	str	r0, [r4, #8]
     3e2:	60e1      	str	r1, [r4, #12]
     3e4:	e7eb      	b.n	3be <cmd_add_func+0xa>
     3e6:	46c0      	nop			; (mov r8, r8)
     3e8:	00001fe1 	.word	0x00001fe1

000003ec <cmd_stdnumber>:
};


static int cmd_stdnumber(calc_state_t * calc_state, sys_state_t * sys_state, int number) {
	return 0;
}
     3ec:	2000      	movs	r0, #0
     3ee:	4770      	bx	lr

000003f0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     3f0:	e7fe      	b.n	3f0 <Dummy_Handler>
	...

000003f4 <Reset_Handler>:
{
     3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     3f6:	4a23      	ldr	r2, [pc, #140]	; (484 <Reset_Handler+0x90>)
     3f8:	4b23      	ldr	r3, [pc, #140]	; (488 <Reset_Handler+0x94>)
     3fa:	429a      	cmp	r2, r3
     3fc:	d009      	beq.n	412 <Reset_Handler+0x1e>
     3fe:	4b22      	ldr	r3, [pc, #136]	; (488 <Reset_Handler+0x94>)
     400:	4a20      	ldr	r2, [pc, #128]	; (484 <Reset_Handler+0x90>)
     402:	e003      	b.n	40c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     404:	6811      	ldr	r1, [r2, #0]
     406:	6019      	str	r1, [r3, #0]
     408:	3304      	adds	r3, #4
     40a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     40c:	491f      	ldr	r1, [pc, #124]	; (48c <Reset_Handler+0x98>)
     40e:	428b      	cmp	r3, r1
     410:	d3f8      	bcc.n	404 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     412:	4b1f      	ldr	r3, [pc, #124]	; (490 <Reset_Handler+0x9c>)
     414:	e002      	b.n	41c <Reset_Handler+0x28>
                *pDest++ = 0;
     416:	2200      	movs	r2, #0
     418:	601a      	str	r2, [r3, #0]
     41a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     41c:	4a1d      	ldr	r2, [pc, #116]	; (494 <Reset_Handler+0xa0>)
     41e:	4293      	cmp	r3, r2
     420:	d3f9      	bcc.n	416 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     422:	4a1d      	ldr	r2, [pc, #116]	; (498 <Reset_Handler+0xa4>)
     424:	21ff      	movs	r1, #255	; 0xff
     426:	4b1d      	ldr	r3, [pc, #116]	; (49c <Reset_Handler+0xa8>)
     428:	438b      	bics	r3, r1
     42a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     42c:	39fd      	subs	r1, #253	; 0xfd
     42e:	2390      	movs	r3, #144	; 0x90
     430:	005b      	lsls	r3, r3, #1
     432:	4a1b      	ldr	r2, [pc, #108]	; (4a0 <Reset_Handler+0xac>)
     434:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     436:	4a1b      	ldr	r2, [pc, #108]	; (4a4 <Reset_Handler+0xb0>)
     438:	78d3      	ldrb	r3, [r2, #3]
     43a:	2503      	movs	r5, #3
     43c:	43ab      	bics	r3, r5
     43e:	2402      	movs	r4, #2
     440:	4323      	orrs	r3, r4
     442:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     444:	78d3      	ldrb	r3, [r2, #3]
     446:	270c      	movs	r7, #12
     448:	43bb      	bics	r3, r7
     44a:	2608      	movs	r6, #8
     44c:	4333      	orrs	r3, r6
     44e:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     450:	4b15      	ldr	r3, [pc, #84]	; (4a8 <Reset_Handler+0xb4>)
     452:	7b98      	ldrb	r0, [r3, #14]
     454:	2230      	movs	r2, #48	; 0x30
     456:	4390      	bics	r0, r2
     458:	2220      	movs	r2, #32
     45a:	4310      	orrs	r0, r2
     45c:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     45e:	7b99      	ldrb	r1, [r3, #14]
     460:	43b9      	bics	r1, r7
     462:	4331      	orrs	r1, r6
     464:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     466:	7b9a      	ldrb	r2, [r3, #14]
     468:	43aa      	bics	r2, r5
     46a:	4322      	orrs	r2, r4
     46c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     46e:	4a0f      	ldr	r2, [pc, #60]	; (4ac <Reset_Handler+0xb8>)
     470:	6851      	ldr	r1, [r2, #4]
     472:	2380      	movs	r3, #128	; 0x80
     474:	430b      	orrs	r3, r1
     476:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     478:	4b0d      	ldr	r3, [pc, #52]	; (4b0 <Reset_Handler+0xbc>)
     47a:	4798      	blx	r3
        main();
     47c:	4b0d      	ldr	r3, [pc, #52]	; (4b4 <Reset_Handler+0xc0>)
     47e:	4798      	blx	r3
     480:	e7fe      	b.n	480 <Reset_Handler+0x8c>
     482:	46c0      	nop			; (mov r8, r8)
     484:	00002ee4 	.word	0x00002ee4
     488:	20000000 	.word	0x20000000
     48c:	20000594 	.word	0x20000594
     490:	200005a0 	.word	0x200005a0
     494:	20000ff4 	.word	0x20000ff4
     498:	e000ed00 	.word	0xe000ed00
     49c:	00000000 	.word	0x00000000
     4a0:	41007000 	.word	0x41007000
     4a4:	41005000 	.word	0x41005000
     4a8:	41004800 	.word	0x41004800
     4ac:	41004000 	.word	0x41004000
     4b0:	0000263d 	.word	0x0000263d
     4b4:	000016a1 	.word	0x000016a1

000004b8 <DMA_init>:

void DMA_init(void)
{
	static int initialized = 0;
	
	if (!initialized)
     4b8:	4b15      	ldr	r3, [pc, #84]	; (510 <DMA_init+0x58>)
     4ba:	681b      	ldr	r3, [r3, #0]
     4bc:	2b00      	cmp	r3, #0
     4be:	d126      	bne.n	50e <DMA_init+0x56>
	{
		/* enable peripheral clock */
		PM->APBBMASK.bit.DMAC_ = 1;
     4c0:	4b14      	ldr	r3, [pc, #80]	; (514 <DMA_init+0x5c>)
     4c2:	69d9      	ldr	r1, [r3, #28]
     4c4:	2210      	movs	r2, #16
     4c6:	430a      	orrs	r2, r1
     4c8:	61da      	str	r2, [r3, #28]
		
		/* enable AHB master clock */
		PM->AHBMASK.bit.DMAC_ = 1;
     4ca:	6959      	ldr	r1, [r3, #20]
     4cc:	2220      	movs	r2, #32
     4ce:	430a      	orrs	r2, r1
     4d0:	615a      	str	r2, [r3, #20]

		/* configure DMA controller */
		DMAC->BASEADDR.reg = (uint32_t)descriptor_section;                    // descriptor memory section start
     4d2:	4a0f      	ldr	r2, [pc, #60]	; (510 <DMA_init+0x58>)
     4d4:	0011      	movs	r1, r2
     4d6:	3110      	adds	r1, #16
     4d8:	4b0f      	ldr	r3, [pc, #60]	; (518 <DMA_init+0x60>)
     4da:	6359      	str	r1, [r3, #52]	; 0x34
		DMAC->WRBADDR.reg = (uint32_t)write_back_section;                     // descriptor write-back memory section start
     4dc:	0011      	movs	r1, r2
     4de:	3130      	adds	r1, #48	; 0x30
     4e0:	6399      	str	r1, [r3, #56]	; 0x38
		DMAC->CTRL.bit.LVLEN0 = 1;                                            // enable level 0 priority
     4e2:	8818      	ldrh	r0, [r3, #0]
     4e4:	2180      	movs	r1, #128	; 0x80
     4e6:	0049      	lsls	r1, r1, #1
     4e8:	4301      	orrs	r1, r0
     4ea:	8019      	strh	r1, [r3, #0]
		DMAC->CTRL.bit.LVLEN1 = 1;                                            // enable level 1 priority
     4ec:	8818      	ldrh	r0, [r3, #0]
     4ee:	2180      	movs	r1, #128	; 0x80
     4f0:	0089      	lsls	r1, r1, #2
     4f2:	4301      	orrs	r1, r0
     4f4:	8019      	strh	r1, [r3, #0]
		DMAC->CTRL.bit.LVLEN2 = 1;                                            // enable level 2 priority
     4f6:	8818      	ldrh	r0, [r3, #0]
     4f8:	2180      	movs	r1, #128	; 0x80
     4fa:	00c9      	lsls	r1, r1, #3
     4fc:	4301      	orrs	r1, r0
     4fe:	8019      	strh	r1, [r3, #0]
		DMAC->CTRL.bit.LVLEN3 = 1;                                            // enable level 3 priority
     500:	8818      	ldrh	r0, [r3, #0]
     502:	2180      	movs	r1, #128	; 0x80
     504:	0109      	lsls	r1, r1, #4
     506:	4301      	orrs	r1, r0
     508:	8019      	strh	r1, [r3, #0]
		
		/* DMA is initialized */
		initialized = 1;
     50a:	2301      	movs	r3, #1
     50c:	6013      	str	r3, [r2, #0]
	}
}
     50e:	4770      	bx	lr
     510:	200005d0 	.word	0x200005d0
     514:	40000400 	.word	0x40000400
     518:	41004800 	.word	0x41004800

0000051c <DMA_add_channel>:

/* add the first least significant free channel with its descriptor (TODO: implement linked descriptors) */
void DMA_add_channel(int source, DmacDescriptor *descriptor)
{
     51c:	b570      	push	{r4, r5, r6, lr}
     51e:	0004      	movs	r4, r0
	/* disable DMA if enabled */
	if (DMAC->CTRL.bit.DMAENABLE)
     520:	4b1f      	ldr	r3, [pc, #124]	; (5a0 <DMA_add_channel+0x84>)
     522:	881b      	ldrh	r3, [r3, #0]
     524:	079b      	lsls	r3, r3, #30
     526:	d504      	bpl.n	532 <DMA_add_channel+0x16>
		DMAC->CTRL.bit.DMAENABLE = 0;
     528:	4a1d      	ldr	r2, [pc, #116]	; (5a0 <DMA_add_channel+0x84>)
     52a:	8813      	ldrh	r3, [r2, #0]
     52c:	2002      	movs	r0, #2
     52e:	4383      	bics	r3, r0
     530:	8013      	strh	r3, [r2, #0]
	while (DMAC->CTRL.bit.DMAENABLE)
     532:	4b1b      	ldr	r3, [pc, #108]	; (5a0 <DMA_add_channel+0x84>)
     534:	881b      	ldrh	r3, [r3, #0]
     536:	079b      	lsls	r3, r3, #30
     538:	d4fb      	bmi.n	532 <DMA_add_channel+0x16>
		;
		
	/* add transfer descriptor to transfer descriptor section (before enabling channel!) */
	memcpy(descriptor_section + used_channels * sizeof(DmacDescriptor), descriptor, sizeof(DmacDescriptor));
     53a:	4e1a      	ldr	r6, [pc, #104]	; (5a4 <DMA_add_channel+0x88>)
     53c:	6d35      	ldr	r5, [r6, #80]	; 0x50
     53e:	0030      	movs	r0, r6
     540:	3010      	adds	r0, #16
     542:	022b      	lsls	r3, r5, #8
     544:	18c0      	adds	r0, r0, r3
     546:	2210      	movs	r2, #16
     548:	4b17      	ldr	r3, [pc, #92]	; (5a8 <DMA_add_channel+0x8c>)
     54a:	4798      	blx	r3
		
	/* configure and enable first least significant free channel */
	DMAC->CHID.bit.ID = used_channels++;                                  // use first free channel 
     54c:	1c6b      	adds	r3, r5, #1
     54e:	6533      	str	r3, [r6, #80]	; 0x50
     550:	4b13      	ldr	r3, [pc, #76]	; (5a0 <DMA_add_channel+0x84>)
     552:	203f      	movs	r0, #63	; 0x3f
     554:	5c1a      	ldrb	r2, [r3, r0]
     556:	210f      	movs	r1, #15
     558:	4029      	ands	r1, r5
     55a:	250f      	movs	r5, #15
     55c:	43aa      	bics	r2, r5
     55e:	430a      	orrs	r2, r1
     560:	541a      	strb	r2, [r3, r0]
	DMAC->CHCTRLB.bit.LVL = 0x00;                                         // channel priority level 0
     562:	6c59      	ldr	r1, [r3, #68]	; 0x44
     564:	2260      	movs	r2, #96	; 0x60
     566:	4391      	bics	r1, r2
     568:	6459      	str	r1, [r3, #68]	; 0x44
	DMAC->CHCTRLB.bit.TRIGACT = 0x02;                                     // one trigger each beat transfer
     56a:	6c59      	ldr	r1, [r3, #68]	; 0x44
     56c:	4a0f      	ldr	r2, [pc, #60]	; (5ac <DMA_add_channel+0x90>)
     56e:	4011      	ands	r1, r2
     570:	2280      	movs	r2, #128	; 0x80
     572:	0412      	lsls	r2, r2, #16
     574:	430a      	orrs	r2, r1
     576:	645a      	str	r2, [r3, #68]	; 0x44
	DMAC->CHCTRLB.bit.TRIGSRC = source;                                   // select trigger source
     578:	4020      	ands	r0, r4
     57a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     57c:	0200      	lsls	r0, r0, #8
     57e:	490c      	ldr	r1, [pc, #48]	; (5b0 <DMA_add_channel+0x94>)
     580:	400a      	ands	r2, r1
     582:	4310      	orrs	r0, r2
     584:	6458      	str	r0, [r3, #68]	; 0x44
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;                             // enable channel 
     586:	2140      	movs	r1, #64	; 0x40
     588:	5c5a      	ldrb	r2, [r3, r1]
     58a:	2402      	movs	r4, #2
     58c:	4322      	orrs	r2, r4
     58e:	b2d2      	uxtb	r2, r2
     590:	545a      	strb	r2, [r3, r1]
		
	/* enable DMA block transfer complete interrupt */
	DMAC->CHINTENSET.bit.TCMPL = 1;                                       // enable DMA block transfer complete interrupt
     592:	204d      	movs	r0, #77	; 0x4d
     594:	5c1a      	ldrb	r2, [r3, r0]
     596:	4322      	orrs	r2, r4
     598:	541a      	strb	r2, [r3, r0]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     59a:	4b06      	ldr	r3, [pc, #24]	; (5b4 <DMA_add_channel+0x98>)
     59c:	6019      	str	r1, [r3, #0]
	NVIC_EnableIRQ(DMAC_IRQn);                                            // enable DMA interrupt in NVIC
}
     59e:	bd70      	pop	{r4, r5, r6, pc}
     5a0:	41004800 	.word	0x41004800
     5a4:	200005d0 	.word	0x200005d0
     5a8:	00002685 	.word	0x00002685
     5ac:	ff3fffff 	.word	0xff3fffff
     5b0:	ffffc0ff 	.word	0xffffc0ff
     5b4:	e000e100 	.word	0xe000e100

000005b8 <DMA_enable>:

void DMA_enable(void)
{
	/* enable DMA controller */
	DMAC->CTRL.bit.DMAENABLE = 1;
     5b8:	4a02      	ldr	r2, [pc, #8]	; (5c4 <DMA_enable+0xc>)
     5ba:	8813      	ldrh	r3, [r2, #0]
     5bc:	2102      	movs	r1, #2
     5be:	430b      	orrs	r3, r1
     5c0:	8013      	strh	r3, [r2, #0]
}
     5c2:	4770      	bx	lr
     5c4:	41004800 	.word	0x41004800

000005c8 <DMAC_Handler>:

void DMAC_Handler(void)
{
     5c8:	b530      	push	{r4, r5, lr}
	//static int count;
	for (int channel = 0 ; channel < used_channels ; channel++)  // check interrupt for every registered channel
     5ca:	2200      	movs	r2, #0
     5cc:	e000      	b.n	5d0 <DMAC_Handler+0x8>
     5ce:	3201      	adds	r2, #1
     5d0:	4b12      	ldr	r3, [pc, #72]	; (61c <DMAC_Handler+0x54>)
     5d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
     5d4:	429a      	cmp	r2, r3
     5d6:	da1f      	bge.n	618 <DMAC_Handler+0x50>
	{
		DMAC->CHID.bit.ID = channel;      
     5d8:	4911      	ldr	r1, [pc, #68]	; (620 <DMAC_Handler+0x58>)
     5da:	243f      	movs	r4, #63	; 0x3f
     5dc:	5d0b      	ldrb	r3, [r1, r4]
     5de:	200f      	movs	r0, #15
     5e0:	4010      	ands	r0, r2
     5e2:	250f      	movs	r5, #15
     5e4:	43ab      	bics	r3, r5
     5e6:	4303      	orrs	r3, r0
     5e8:	550b      	strb	r3, [r1, r4]
		if (DMAC->CHINTFLAG.bit.TCMPL && DMAC->CHINTENSET.bit.TCMPL)
     5ea:	234e      	movs	r3, #78	; 0x4e
     5ec:	5ccb      	ldrb	r3, [r1, r3]
     5ee:	079b      	lsls	r3, r3, #30
     5f0:	d5ed      	bpl.n	5ce <DMAC_Handler+0x6>
     5f2:	234d      	movs	r3, #77	; 0x4d
     5f4:	5ccb      	ldrb	r3, [r1, r3]
     5f6:	079b      	lsls	r3, r3, #30
     5f8:	d5e9      	bpl.n	5ce <DMAC_Handler+0x6>
		{
			if (DMAC->CHID.bit.ID == 0x00)   // handle SPI transfer complete interrupt
     5fa:	233f      	movs	r3, #63	; 0x3f
     5fc:	5ccb      	ldrb	r3, [r1, r3]
     5fe:	071b      	lsls	r3, r3, #28
     600:	d1e5      	bne.n	5ce <DMAC_Handler+0x6>
			{
				DMAC->CHINTFLAG.bit.TCMPL = 1;                 // acknowledge interrupt
     602:	334e      	adds	r3, #78	; 0x4e
     604:	5cc8      	ldrb	r0, [r1, r3]
     606:	2402      	movs	r4, #2
     608:	4320      	orrs	r0, r4
     60a:	54c8      	strb	r0, [r1, r3]
				DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;      // re-enable DMA channel
     60c:	2040      	movs	r0, #64	; 0x40
     60e:	5c0b      	ldrb	r3, [r1, r0]
     610:	4323      	orrs	r3, r4
     612:	b2db      	uxtb	r3, r3
     614:	540b      	strb	r3, [r1, r0]
     616:	e7da      	b.n	5ce <DMAC_Handler+0x6>
			}
		}
	}
}
     618:	bd30      	pop	{r4, r5, pc}
     61a:	46c0      	nop			; (mov r8, r8)
     61c:	200005d0 	.word	0x200005d0
     620:	41004800 	.word	0x41004800

00000624 <gpio_set_pin>:
	} else if (port == PORTB) {
		REG_PORT_OUTTGL1 = 1 << pin;
	}
}
void gpio_set_pin(unsigned int port, unsigned long pin, int val) {
	if (port == PORTA) {
     624:	2800      	cmp	r0, #0
     626:	d10b      	bne.n	640 <gpio_set_pin+0x1c>
		if (val)
     628:	2a00      	cmp	r2, #0
     62a:	d004      	beq.n	636 <gpio_set_pin+0x12>
			REG_PORT_OUTSET0 = 1 << pin;
     62c:	2301      	movs	r3, #1
     62e:	408b      	lsls	r3, r1
     630:	4a0b      	ldr	r2, [pc, #44]	; (660 <gpio_set_pin+0x3c>)
     632:	6013      	str	r3, [r2, #0]
     634:	e006      	b.n	644 <gpio_set_pin+0x20>
		else
			REG_PORT_OUTCLR0 = 1 << pin;
     636:	2301      	movs	r3, #1
     638:	408b      	lsls	r3, r1
     63a:	4a0a      	ldr	r2, [pc, #40]	; (664 <gpio_set_pin+0x40>)
     63c:	6013      	str	r3, [r2, #0]
     63e:	e001      	b.n	644 <gpio_set_pin+0x20>
	} else if (port == PORTB) {
     640:	2801      	cmp	r0, #1
     642:	d000      	beq.n	646 <gpio_set_pin+0x22>
		if (val)
			REG_PORT_OUTSET1 = 1 << pin;
		else
			REG_PORT_OUTCLR1 = 1 << pin;
	}
}
     644:	4770      	bx	lr
		if (val)
     646:	2a00      	cmp	r2, #0
     648:	d104      	bne.n	654 <gpio_set_pin+0x30>
			REG_PORT_OUTCLR1 = 1 << pin;
     64a:	2301      	movs	r3, #1
     64c:	408b      	lsls	r3, r1
     64e:	4a06      	ldr	r2, [pc, #24]	; (668 <gpio_set_pin+0x44>)
     650:	6013      	str	r3, [r2, #0]
}
     652:	e7f7      	b.n	644 <gpio_set_pin+0x20>
			REG_PORT_OUTSET1 = 1 << pin;
     654:	2301      	movs	r3, #1
     656:	408b      	lsls	r3, r1
     658:	4a04      	ldr	r2, [pc, #16]	; (66c <gpio_set_pin+0x48>)
     65a:	6013      	str	r3, [r2, #0]
     65c:	e7f2      	b.n	644 <gpio_set_pin+0x20>
     65e:	46c0      	nop			; (mov r8, r8)
     660:	41004418 	.word	0x41004418
     664:	41004414 	.word	0x41004414
     668:	41004494 	.word	0x41004494
     66c:	41004498 	.word	0x41004498

00000670 <gpio_set_pin_dir>:

void gpio_set_pin_dir(unsigned int port, unsigned long pin, int val) {
	
	if (port == PORTA) {
     670:	2800      	cmp	r0, #0
     672:	d11f      	bne.n	6b4 <gpio_set_pin_dir+0x44>
		if (val == GPIO_DIR_OUT) {
     674:	2a01      	cmp	r2, #1
     676:	d00e      	beq.n	696 <gpio_set_pin_dir+0x26>
			REG_PORT_DIRSET0 = 1 << pin;
			PORT->Group[port].PINCFG[pin].bit.INEN = 0;
		} else {
			REG_PORT_DIRCLR0 = 1 << pin;
     678:	2301      	movs	r3, #1
     67a:	408b      	lsls	r3, r1
     67c:	4a1e      	ldr	r2, [pc, #120]	; (6f8 <gpio_set_pin_dir+0x88>)
     67e:	6013      	str	r3, [r2, #0]
			PORT->Group[port].PINCFG[pin].bit.INEN = 1;
     680:	01c0      	lsls	r0, r0, #7
     682:	4b1e      	ldr	r3, [pc, #120]	; (6fc <gpio_set_pin_dir+0x8c>)
     684:	469c      	mov	ip, r3
     686:	4460      	add	r0, ip
     688:	1841      	adds	r1, r0, r1
     68a:	3140      	adds	r1, #64	; 0x40
     68c:	780b      	ldrb	r3, [r1, #0]
     68e:	2202      	movs	r2, #2
     690:	4313      	orrs	r3, r2
     692:	700b      	strb	r3, [r1, #0]
			REG_PORT_DIRCLR1 = 1 << pin;
			PORT->Group[port].PINCFG[pin].bit.INEN = 1;
		}
	}

}
     694:	4770      	bx	lr
			REG_PORT_DIRSET0 = 1 << pin;
     696:	2301      	movs	r3, #1
     698:	408b      	lsls	r3, r1
     69a:	4a19      	ldr	r2, [pc, #100]	; (700 <gpio_set_pin_dir+0x90>)
     69c:	6013      	str	r3, [r2, #0]
			PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     69e:	01c0      	lsls	r0, r0, #7
     6a0:	4b16      	ldr	r3, [pc, #88]	; (6fc <gpio_set_pin_dir+0x8c>)
     6a2:	469c      	mov	ip, r3
     6a4:	4460      	add	r0, ip
     6a6:	1841      	adds	r1, r0, r1
     6a8:	3140      	adds	r1, #64	; 0x40
     6aa:	780b      	ldrb	r3, [r1, #0]
     6ac:	2202      	movs	r2, #2
     6ae:	4393      	bics	r3, r2
     6b0:	700b      	strb	r3, [r1, #0]
     6b2:	e7ef      	b.n	694 <gpio_set_pin_dir+0x24>
	} else if (port == PORTB) {
     6b4:	2801      	cmp	r0, #1
     6b6:	d1ed      	bne.n	694 <gpio_set_pin_dir+0x24>
		if (val == GPIO_DIR_OUT) {
     6b8:	2a01      	cmp	r2, #1
     6ba:	d00e      	beq.n	6da <gpio_set_pin_dir+0x6a>
			REG_PORT_DIRCLR1 = 1 << pin;
     6bc:	2301      	movs	r3, #1
     6be:	408b      	lsls	r3, r1
     6c0:	4a10      	ldr	r2, [pc, #64]	; (704 <gpio_set_pin_dir+0x94>)
     6c2:	6013      	str	r3, [r2, #0]
			PORT->Group[port].PINCFG[pin].bit.INEN = 1;
     6c4:	01c0      	lsls	r0, r0, #7
     6c6:	4b0d      	ldr	r3, [pc, #52]	; (6fc <gpio_set_pin_dir+0x8c>)
     6c8:	469c      	mov	ip, r3
     6ca:	4460      	add	r0, ip
     6cc:	1841      	adds	r1, r0, r1
     6ce:	3140      	adds	r1, #64	; 0x40
     6d0:	780b      	ldrb	r3, [r1, #0]
     6d2:	2202      	movs	r2, #2
     6d4:	4313      	orrs	r3, r2
     6d6:	700b      	strb	r3, [r1, #0]
}
     6d8:	e7dc      	b.n	694 <gpio_set_pin_dir+0x24>
			REG_PORT_DIRSET1 = 1 << pin;
     6da:	2301      	movs	r3, #1
     6dc:	408b      	lsls	r3, r1
     6de:	4a0a      	ldr	r2, [pc, #40]	; (708 <gpio_set_pin_dir+0x98>)
     6e0:	6013      	str	r3, [r2, #0]
			PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     6e2:	01c0      	lsls	r0, r0, #7
     6e4:	4b05      	ldr	r3, [pc, #20]	; (6fc <gpio_set_pin_dir+0x8c>)
     6e6:	469c      	mov	ip, r3
     6e8:	4460      	add	r0, ip
     6ea:	1841      	adds	r1, r0, r1
     6ec:	3140      	adds	r1, #64	; 0x40
     6ee:	780b      	ldrb	r3, [r1, #0]
     6f0:	2202      	movs	r2, #2
     6f2:	4393      	bics	r3, r2
     6f4:	700b      	strb	r3, [r1, #0]
     6f6:	e7cd      	b.n	694 <gpio_set_pin_dir+0x24>
     6f8:	41004404 	.word	0x41004404
     6fc:	41004400 	.word	0x41004400
     700:	41004408 	.word	0x41004408
     704:	41004484 	.word	0x41004484
     708:	41004488 	.word	0x41004488

0000070c <gpio_set_pin_drvstr>:
void gpio_set_pin_drvstr(unsigned int port, unsigned long pin, int val) {
	if (port != PORTA && port != PORTB) {
     70c:	2801      	cmp	r0, #1
     70e:	d900      	bls.n	712 <gpio_set_pin_drvstr+0x6>
		return;
	}
	PORT->Group[port].PINCFG[pin].bit.DRVSTR = (val ? 1 : 0);
}
     710:	4770      	bx	lr
	PORT->Group[port].PINCFG[pin].bit.DRVSTR = (val ? 1 : 0);
     712:	1e53      	subs	r3, r2, #1
     714:	419a      	sbcs	r2, r3
     716:	01c0      	lsls	r0, r0, #7
     718:	4b05      	ldr	r3, [pc, #20]	; (730 <gpio_set_pin_drvstr+0x24>)
     71a:	469c      	mov	ip, r3
     71c:	4460      	add	r0, ip
     71e:	1841      	adds	r1, r0, r1
     720:	3140      	adds	r1, #64	; 0x40
     722:	780b      	ldrb	r3, [r1, #0]
     724:	0192      	lsls	r2, r2, #6
     726:	2040      	movs	r0, #64	; 0x40
     728:	4383      	bics	r3, r0
     72a:	431a      	orrs	r2, r3
     72c:	700a      	strb	r2, [r1, #0]
     72e:	e7ef      	b.n	710 <gpio_set_pin_drvstr+0x4>
     730:	41004400 	.word	0x41004400

00000734 <gpio_set_pin_pull>:
void gpio_set_pin_pull(unsigned int port, unsigned long pin, int val) {
     734:	b510      	push	{r4, lr}
	if (port != PORTA && port != PORTB) {
     736:	2801      	cmp	r0, #1
     738:	d900      	bls.n	73c <gpio_set_pin_pull+0x8>
		PORT->Group[port].PINCFG[pin].bit.PULLEN = 1;
		PORT->Group[port].OUTSET.reg = 1 << pin;
	} else {
		PORT->Group[port].PINCFG[pin].bit.PULLEN = 0;
	}
}
     73a:	bd10      	pop	{r4, pc}
	if (val == GPIO_PULL_DOWN) {
     73c:	2a02      	cmp	r2, #2
     73e:	d00c      	beq.n	75a <gpio_set_pin_pull+0x26>
	} else if (val == GPIO_PULL_UP) {
     740:	2a01      	cmp	r2, #1
     742:	d018      	beq.n	776 <gpio_set_pin_pull+0x42>
		PORT->Group[port].PINCFG[pin].bit.PULLEN = 0;
     744:	01c0      	lsls	r0, r0, #7
     746:	4b13      	ldr	r3, [pc, #76]	; (794 <gpio_set_pin_pull+0x60>)
     748:	469c      	mov	ip, r3
     74a:	4460      	add	r0, ip
     74c:	1841      	adds	r1, r0, r1
     74e:	3140      	adds	r1, #64	; 0x40
     750:	780b      	ldrb	r3, [r1, #0]
     752:	2204      	movs	r2, #4
     754:	4393      	bics	r3, r2
     756:	700b      	strb	r3, [r1, #0]
     758:	e7ef      	b.n	73a <gpio_set_pin_pull+0x6>
		PORT->Group[port].PINCFG[pin].bit.PULLEN = 1;
     75a:	01c0      	lsls	r0, r0, #7
     75c:	4b0d      	ldr	r3, [pc, #52]	; (794 <gpio_set_pin_pull+0x60>)
     75e:	469c      	mov	ip, r3
     760:	4460      	add	r0, ip
     762:	1843      	adds	r3, r0, r1
     764:	3340      	adds	r3, #64	; 0x40
     766:	781a      	ldrb	r2, [r3, #0]
     768:	2404      	movs	r4, #4
     76a:	4322      	orrs	r2, r4
     76c:	701a      	strb	r2, [r3, #0]
		PORT->Group[port].OUTCLR.reg = 1 << pin;
     76e:	2301      	movs	r3, #1
     770:	408b      	lsls	r3, r1
     772:	6143      	str	r3, [r0, #20]
     774:	e7e1      	b.n	73a <gpio_set_pin_pull+0x6>
		PORT->Group[port].PINCFG[pin].bit.PULLEN = 1;
     776:	01c0      	lsls	r0, r0, #7
     778:	4b06      	ldr	r3, [pc, #24]	; (794 <gpio_set_pin_pull+0x60>)
     77a:	469c      	mov	ip, r3
     77c:	4460      	add	r0, ip
     77e:	1843      	adds	r3, r0, r1
     780:	3340      	adds	r3, #64	; 0x40
     782:	781a      	ldrb	r2, [r3, #0]
     784:	2404      	movs	r4, #4
     786:	4322      	orrs	r2, r4
     788:	701a      	strb	r2, [r3, #0]
		PORT->Group[port].OUTSET.reg = 1 << pin;
     78a:	2301      	movs	r3, #1
     78c:	408b      	lsls	r3, r1
     78e:	6183      	str	r3, [r0, #24]
     790:	e7d3      	b.n	73a <gpio_set_pin_pull+0x6>
     792:	46c0      	nop			; (mov r8, r8)
     794:	41004400 	.word	0x41004400

00000798 <gpio_read_pin>:


int gpio_read_pin(unsigned int port, unsigned long pin) {
	if (port == PORTA) {
     798:	2800      	cmp	r0, #0
     79a:	d009      	beq.n	7b0 <gpio_read_pin+0x18>
		return (PORT->Group[0].IN.reg & (1 << pin)) ? 1 : 0;
	} else if (port == PORTB) {
     79c:	2801      	cmp	r0, #1
     79e:	d10f      	bne.n	7c0 <gpio_read_pin+0x28>
		return (PORT->Group[1].IN.reg & (1 << pin)) ? 1 : 0;
     7a0:	23a0      	movs	r3, #160	; 0xa0
     7a2:	4a09      	ldr	r2, [pc, #36]	; (7c8 <gpio_read_pin+0x30>)
     7a4:	58d3      	ldr	r3, [r2, r3]
     7a6:	4088      	lsls	r0, r1
     7a8:	4018      	ands	r0, r3
     7aa:	1e43      	subs	r3, r0, #1
     7ac:	4198      	sbcs	r0, r3
	}
	return -1;
}
     7ae:	4770      	bx	lr
		return (PORT->Group[0].IN.reg & (1 << pin)) ? 1 : 0;
     7b0:	4b05      	ldr	r3, [pc, #20]	; (7c8 <gpio_read_pin+0x30>)
     7b2:	6a1b      	ldr	r3, [r3, #32]
     7b4:	3001      	adds	r0, #1
     7b6:	4088      	lsls	r0, r1
     7b8:	4018      	ands	r0, r3
     7ba:	1e43      	subs	r3, r0, #1
     7bc:	4198      	sbcs	r0, r3
     7be:	e7f6      	b.n	7ae <gpio_read_pin+0x16>
	return -1;
     7c0:	2001      	movs	r0, #1
     7c2:	4240      	negs	r0, r0
     7c4:	e7f3      	b.n	7ae <gpio_read_pin+0x16>
     7c6:	46c0      	nop			; (mov r8, r8)
     7c8:	41004400 	.word	0x41004400

000007cc <fplights_init>:
#define L_CPX_RE	(1 << 3)
#define L_CPX_IM	(1 << 2)
#define L_CPX_R		(1 << 1)
#define L_CPX_THETA (1 << 0)

void fplights_init() {
     7cc:	b510      	push	{r4, lr}
	gpio_set_pin_dir(GPIO(FPLIGHT_MOSI), GPIO_DIR_OUT);
     7ce:	2201      	movs	r2, #1
     7d0:	210e      	movs	r1, #14
     7d2:	2001      	movs	r0, #1
     7d4:	4c0f      	ldr	r4, [pc, #60]	; (814 <fplights_init+0x48>)
     7d6:	47a0      	blx	r4
	gpio_set_pin_dir(GPIO(FPLIGHT_SCK), GPIO_DIR_OUT);
     7d8:	2201      	movs	r2, #1
     7da:	210f      	movs	r1, #15
     7dc:	2001      	movs	r0, #1
     7de:	47a0      	blx	r4
	gpio_set_pin_dir(GPIO(FPLIGHT_LATCH), GPIO_DIR_OUT);
     7e0:	2201      	movs	r2, #1
     7e2:	211b      	movs	r1, #27
     7e4:	2000      	movs	r0, #0
     7e6:	47a0      	blx	r4
	gpio_set_pin_dir(GPIO(FPLIGHT_OE), GPIO_DIR_OUT);
     7e8:	2201      	movs	r2, #1
     7ea:	211c      	movs	r1, #28
     7ec:	2000      	movs	r0, #0
     7ee:	47a0      	blx	r4
	gpio_set_pin(GPIO(FPLIGHT_MOSI), 0);
     7f0:	2200      	movs	r2, #0
     7f2:	210e      	movs	r1, #14
     7f4:	2001      	movs	r0, #1
     7f6:	4c08      	ldr	r4, [pc, #32]	; (818 <fplights_init+0x4c>)
     7f8:	47a0      	blx	r4
	gpio_set_pin(GPIO(FPLIGHT_SCK), 0);
     7fa:	2200      	movs	r2, #0
     7fc:	210f      	movs	r1, #15
     7fe:	2001      	movs	r0, #1
     800:	47a0      	blx	r4
	gpio_set_pin(GPIO(FPLIGHT_LATCH), 0);
     802:	2200      	movs	r2, #0
     804:	211b      	movs	r1, #27
     806:	2000      	movs	r0, #0
     808:	47a0      	blx	r4
	gpio_set_pin(GPIO(FPLIGHT_OE), 1);
     80a:	2201      	movs	r2, #1
     80c:	211c      	movs	r1, #28
     80e:	2000      	movs	r0, #0
     810:	47a0      	blx	r4
}
     812:	bd10      	pop	{r4, pc}
     814:	00000671 	.word	0x00000671
     818:	00000625 	.word	0x00000625

0000081c <fplights_show>:

void fplights_show(const sys_state_t *sys_state) {
     81c:	b570      	push	{r4, r5, r6, lr}
	uint8_t lights = 0;
	switch (sys_state->sys.angle_units) {
     81e:	7883      	ldrb	r3, [r0, #2]
     820:	2b01      	cmp	r3, #1
     822:	d01b      	beq.n	85c <fplights_show+0x40>
     824:	2b00      	cmp	r3, #0
     826:	d01d      	beq.n	864 <fplights_show+0x48>
     828:	2b02      	cmp	r3, #2
     82a:	d019      	beq.n	860 <fplights_show+0x44>
	uint8_t lights = 0;
     82c:	2500      	movs	r5, #0
		break;
		case au_grad:
		lights |= (L_GRAD);
		break;
	}
	lights |= sys_state->ui.view_is_real ? L_REAL : 0;
     82e:	68c1      	ldr	r1, [r0, #12]
     830:	2900      	cmp	r1, #0
     832:	d019      	beq.n	868 <fplights_show+0x4c>
     834:	2310      	movs	r3, #16
     836:	432b      	orrs	r3, r5
     838:	b25b      	sxtb	r3, r3
     83a:	b2dd      	uxtb	r5, r3
	switch (sys_state->ui.cpx_view) {
     83c:	7a42      	ldrb	r2, [r0, #9]
     83e:	2a01      	cmp	r2, #1
     840:	d01c      	beq.n	87c <fplights_show+0x60>
     842:	2a00      	cmp	r2, #0
     844:	d012      	beq.n	86c <fplights_show+0x50>
     846:	2a02      	cmp	r2, #2
     848:	d01c      	beq.n	884 <fplights_show+0x68>
     84a:	2a03      	cmp	r2, #3
     84c:	d01e      	beq.n	88c <fplights_show+0x70>
		break;
		case cv_theta:
			lights |= L_CPX_THETA;
		break;
	}
	gpio_set_pin(GPIO(FPLIGHT_OE), 1);
     84e:	2201      	movs	r2, #1
     850:	211c      	movs	r1, #28
     852:	2000      	movs	r0, #0
     854:	4b2b      	ldr	r3, [pc, #172]	; (904 <fplights_show+0xe8>)
     856:	4798      	blx	r3

	for (int i = 0; i < 8; i++) {
     858:	2600      	movs	r6, #0
     85a:	e035      	b.n	8c8 <fplights_show+0xac>
		lights |= (L_RAD);
     85c:	2540      	movs	r5, #64	; 0x40
		break;
     85e:	e7e6      	b.n	82e <fplights_show+0x12>
		lights |= (L_GRAD);
     860:	2520      	movs	r5, #32
		break;
     862:	e7e4      	b.n	82e <fplights_show+0x12>
		lights |= (L_DEG);
     864:	2580      	movs	r5, #128	; 0x80
     866:	e7e2      	b.n	82e <fplights_show+0x12>
	lights |= sys_state->ui.view_is_real ? L_REAL : 0;
     868:	2300      	movs	r3, #0
     86a:	e7e4      	b.n	836 <fplights_show+0x1a>
			lights |= sys_state->ui.view_is_real ? L_REAL : L_CPX_RE;
     86c:	2900      	cmp	r1, #0
     86e:	d003      	beq.n	878 <fplights_show+0x5c>
     870:	2510      	movs	r5, #16
     872:	431d      	orrs	r5, r3
     874:	b2ed      	uxtb	r5, r5
		break;
     876:	e7ea      	b.n	84e <fplights_show+0x32>
			lights |= sys_state->ui.view_is_real ? L_REAL : L_CPX_RE;
     878:	2508      	movs	r5, #8
     87a:	e7fa      	b.n	872 <fplights_show+0x56>
			lights |= L_CPX_IM;
     87c:	2304      	movs	r3, #4
     87e:	431d      	orrs	r5, r3
     880:	b2ed      	uxtb	r5, r5
		break;
     882:	e7e4      	b.n	84e <fplights_show+0x32>
			lights |= L_CPX_R;
     884:	2302      	movs	r3, #2
     886:	431d      	orrs	r5, r3
     888:	b2ed      	uxtb	r5, r5
		break;
     88a:	e7e0      	b.n	84e <fplights_show+0x32>
			lights |= L_CPX_THETA;
     88c:	2301      	movs	r3, #1
     88e:	431d      	orrs	r5, r3
     890:	b2ed      	uxtb	r5, r5
		break;
     892:	e7dc      	b.n	84e <fplights_show+0x32>
		gpio_set_pin(GPIO(FPLIGHT_SCK), 0);
     894:	2200      	movs	r2, #0
     896:	210f      	movs	r1, #15
     898:	2001      	movs	r0, #1
     89a:	4c1a      	ldr	r4, [pc, #104]	; (904 <fplights_show+0xe8>)
     89c:	47a0      	blx	r4
		gpio_set_pin(GPIO(FPLIGHT_MOSI), lights & 1);
     89e:	2201      	movs	r2, #1
     8a0:	402a      	ands	r2, r5
     8a2:	210e      	movs	r1, #14
     8a4:	2001      	movs	r0, #1
     8a6:	47a0      	blx	r4
		asm("nop\nnop\nnop\nnop\nnop");
     8a8:	46c0      	nop			; (mov r8, r8)
     8aa:	46c0      	nop			; (mov r8, r8)
     8ac:	46c0      	nop			; (mov r8, r8)
     8ae:	46c0      	nop			; (mov r8, r8)
     8b0:	46c0      	nop			; (mov r8, r8)
		gpio_set_pin(GPIO(FPLIGHT_SCK), 1);
     8b2:	2201      	movs	r2, #1
     8b4:	210f      	movs	r1, #15
     8b6:	2001      	movs	r0, #1
     8b8:	47a0      	blx	r4
		asm("nop\nnop\nnop\nnop\nnop");
     8ba:	46c0      	nop			; (mov r8, r8)
     8bc:	46c0      	nop			; (mov r8, r8)
     8be:	46c0      	nop			; (mov r8, r8)
     8c0:	46c0      	nop			; (mov r8, r8)
     8c2:	46c0      	nop			; (mov r8, r8)
		lights >>= 1;
     8c4:	086d      	lsrs	r5, r5, #1
	for (int i = 0; i < 8; i++) {
     8c6:	3601      	adds	r6, #1
     8c8:	2e07      	cmp	r6, #7
     8ca:	dde3      	ble.n	894 <fplights_show+0x78>
	}
	gpio_set_pin(GPIO(FPLIGHT_LATCH), 0);
     8cc:	2200      	movs	r2, #0
     8ce:	211b      	movs	r1, #27
     8d0:	2000      	movs	r0, #0
     8d2:	4c0c      	ldr	r4, [pc, #48]	; (904 <fplights_show+0xe8>)
     8d4:	47a0      	blx	r4
	asm("nop\nnop\nnop\nnop\nnop");
     8d6:	46c0      	nop			; (mov r8, r8)
     8d8:	46c0      	nop			; (mov r8, r8)
     8da:	46c0      	nop			; (mov r8, r8)
     8dc:	46c0      	nop			; (mov r8, r8)
     8de:	46c0      	nop			; (mov r8, r8)
	gpio_set_pin(GPIO(FPLIGHT_LATCH), 1);
     8e0:	2201      	movs	r2, #1
     8e2:	211b      	movs	r1, #27
     8e4:	2000      	movs	r0, #0
     8e6:	47a0      	blx	r4
	asm("nop\nnop\nnop\nnop\nnop");
     8e8:	46c0      	nop			; (mov r8, r8)
     8ea:	46c0      	nop			; (mov r8, r8)
     8ec:	46c0      	nop			; (mov r8, r8)
     8ee:	46c0      	nop			; (mov r8, r8)
     8f0:	46c0      	nop			; (mov r8, r8)
	gpio_set_pin(GPIO(FPLIGHT_LATCH), 0);
     8f2:	2200      	movs	r2, #0
     8f4:	211b      	movs	r1, #27
     8f6:	2000      	movs	r0, #0
     8f8:	47a0      	blx	r4
	gpio_set_pin(GPIO(FPLIGHT_OE), 0);
     8fa:	2200      	movs	r2, #0
     8fc:	211c      	movs	r1, #28
     8fe:	2000      	movs	r0, #0
     900:	47a0      	blx	r4

}
     902:	bd70      	pop	{r4, r5, r6, pc}
     904:	00000625 	.word	0x00000625

00000908 <re_im_key_color>:
},
*/
//const kp_key keypad_map[KEYPAD_NUM_COLS * KEYPAD_NUM_ROWS] = {0};

// Determines the lighting of the re/im key based on the current view
static color_rgb re_im_key_color(const calc_state_t * calc_state, const sys_state_t * sys_state) {
     908:	b500      	push	{lr}
     90a:	b083      	sub	sp, #12
	switch (sys_state->ui.cpx_view) {
     90c:	7a4b      	ldrb	r3, [r1, #9]
     90e:	2b01      	cmp	r3, #1
     910:	d02d      	beq.n	96e <re_im_key_color+0x66>
     912:	2b00      	cmp	r3, #0
     914:	d009      	beq.n	92a <re_im_key_color+0x22>
     916:	2b02      	cmp	r3, #2
     918:	d02f      	beq.n	97a <re_im_key_color+0x72>
     91a:	2b03      	cmp	r3, #3
     91c:	d033      	beq.n	986 <re_im_key_color+0x7e>
		case cv_r:
		return color_cplx_r;
		case cv_theta:
		return color_cplx_theta;
	}
	return color_off;
     91e:	2203      	movs	r2, #3
     920:	491c      	ldr	r1, [pc, #112]	; (994 <re_im_key_color+0x8c>)
     922:	4668      	mov	r0, sp
     924:	4b1c      	ldr	r3, [pc, #112]	; (998 <re_im_key_color+0x90>)
     926:	4798      	blx	r3
     928:	e00d      	b.n	946 <re_im_key_color+0x3e>
		return sys_state->ui.view_is_real ? color_normal : color_cplx_re;
     92a:	68cb      	ldr	r3, [r1, #12]
     92c:	2b00      	cmp	r3, #0
     92e:	d018      	beq.n	962 <re_im_key_color+0x5a>
     930:	2203      	movs	r2, #3
     932:	491a      	ldr	r1, [pc, #104]	; (99c <re_im_key_color+0x94>)
     934:	a801      	add	r0, sp, #4
     936:	4b18      	ldr	r3, [pc, #96]	; (998 <re_im_key_color+0x90>)
     938:	4798      	blx	r3
     93a:	ab01      	add	r3, sp, #4
     93c:	881a      	ldrh	r2, [r3, #0]
     93e:	4669      	mov	r1, sp
     940:	800a      	strh	r2, [r1, #0]
     942:	789b      	ldrb	r3, [r3, #2]
     944:	708b      	strb	r3, [r1, #2]
     946:	466b      	mov	r3, sp
     948:	781b      	ldrb	r3, [r3, #0]
     94a:	466a      	mov	r2, sp
     94c:	7852      	ldrb	r2, [r2, #1]
     94e:	0212      	lsls	r2, r2, #8
     950:	20ff      	movs	r0, #255	; 0xff
     952:	4018      	ands	r0, r3
     954:	466b      	mov	r3, sp
     956:	789b      	ldrb	r3, [r3, #2]
     958:	041b      	lsls	r3, r3, #16
     95a:	4310      	orrs	r0, r2
     95c:	4318      	orrs	r0, r3
}
     95e:	b003      	add	sp, #12
     960:	bd00      	pop	{pc}
		return sys_state->ui.view_is_real ? color_normal : color_cplx_re;
     962:	2203      	movs	r2, #3
     964:	490e      	ldr	r1, [pc, #56]	; (9a0 <re_im_key_color+0x98>)
     966:	a801      	add	r0, sp, #4
     968:	4b0b      	ldr	r3, [pc, #44]	; (998 <re_im_key_color+0x90>)
     96a:	4798      	blx	r3
     96c:	e7e5      	b.n	93a <re_im_key_color+0x32>
		return color_cplx_im;
     96e:	2203      	movs	r2, #3
     970:	490c      	ldr	r1, [pc, #48]	; (9a4 <re_im_key_color+0x9c>)
     972:	4668      	mov	r0, sp
     974:	4b08      	ldr	r3, [pc, #32]	; (998 <re_im_key_color+0x90>)
     976:	4798      	blx	r3
     978:	e7e5      	b.n	946 <re_im_key_color+0x3e>
		return color_cplx_r;
     97a:	2203      	movs	r2, #3
     97c:	490a      	ldr	r1, [pc, #40]	; (9a8 <re_im_key_color+0xa0>)
     97e:	4668      	mov	r0, sp
     980:	4b05      	ldr	r3, [pc, #20]	; (998 <re_im_key_color+0x90>)
     982:	4798      	blx	r3
     984:	e7df      	b.n	946 <re_im_key_color+0x3e>
		return color_cplx_theta;
     986:	2203      	movs	r2, #3
     988:	4908      	ldr	r1, [pc, #32]	; (9ac <re_im_key_color+0xa4>)
     98a:	4668      	mov	r0, sp
     98c:	4b02      	ldr	r3, [pc, #8]	; (998 <re_im_key_color+0x90>)
     98e:	4798      	blx	r3
     990:	e7d9      	b.n	946 <re_im_key_color+0x3e>
     992:	46c0      	nop			; (mov r8, r8)
     994:	00002930 	.word	0x00002930
     998:	00002685 	.word	0x00002685
     99c:	0000292c 	.word	0x0000292c
     9a0:	0000290c 	.word	0x0000290c
     9a4:	00002908 	.word	0x00002908
     9a8:	00002904 	.word	0x00002904
     9ac:	00002900 	.word	0x00002900

000009b0 <drg_key_color>:

static color_rgb drg_key_color(const calc_state_t * calc_state, const sys_state_t * sys_state) {
     9b0:	b500      	push	{lr}
     9b2:	b083      	sub	sp, #12
	switch (sys_state->sys.angle_units) {
     9b4:	788b      	ldrb	r3, [r1, #2]
     9b6:	2b01      	cmp	r3, #1
     9b8:	d01a      	beq.n	9f0 <drg_key_color+0x40>
     9ba:	2b00      	cmp	r3, #0
     9bc:	d007      	beq.n	9ce <drg_key_color+0x1e>
     9be:	2b02      	cmp	r3, #2
     9c0:	d01c      	beq.n	9fc <drg_key_color+0x4c>
		case au_rad:
		return color_drg_r;
		case au_grad:
		return color_drg_g;
	}
	return color_off;
     9c2:	2203      	movs	r2, #3
     9c4:	4910      	ldr	r1, [pc, #64]	; (a08 <drg_key_color+0x58>)
     9c6:	a801      	add	r0, sp, #4
     9c8:	4b10      	ldr	r3, [pc, #64]	; (a0c <drg_key_color+0x5c>)
     9ca:	4798      	blx	r3
     9cc:	e004      	b.n	9d8 <drg_key_color+0x28>
		return color_drg_d;
     9ce:	2203      	movs	r2, #3
     9d0:	490f      	ldr	r1, [pc, #60]	; (a10 <drg_key_color+0x60>)
     9d2:	a801      	add	r0, sp, #4
     9d4:	4b0d      	ldr	r3, [pc, #52]	; (a0c <drg_key_color+0x5c>)
     9d6:	4798      	blx	r3
     9d8:	ab01      	add	r3, sp, #4
     9da:	7819      	ldrb	r1, [r3, #0]
     9dc:	785a      	ldrb	r2, [r3, #1]
     9de:	0212      	lsls	r2, r2, #8
     9e0:	20ff      	movs	r0, #255	; 0xff
     9e2:	4008      	ands	r0, r1
     9e4:	789b      	ldrb	r3, [r3, #2]
     9e6:	041b      	lsls	r3, r3, #16
     9e8:	4310      	orrs	r0, r2
     9ea:	4318      	orrs	r0, r3
}
     9ec:	b003      	add	sp, #12
     9ee:	bd00      	pop	{pc}
		return color_drg_r;
     9f0:	2203      	movs	r2, #3
     9f2:	4908      	ldr	r1, [pc, #32]	; (a14 <drg_key_color+0x64>)
     9f4:	a801      	add	r0, sp, #4
     9f6:	4b05      	ldr	r3, [pc, #20]	; (a0c <drg_key_color+0x5c>)
     9f8:	4798      	blx	r3
     9fa:	e7ed      	b.n	9d8 <drg_key_color+0x28>
		return color_drg_g;
     9fc:	2203      	movs	r2, #3
     9fe:	4906      	ldr	r1, [pc, #24]	; (a18 <drg_key_color+0x68>)
     a00:	a801      	add	r0, sp, #4
     a02:	4b02      	ldr	r3, [pc, #8]	; (a0c <drg_key_color+0x5c>)
     a04:	4798      	blx	r3
     a06:	e7e7      	b.n	9d8 <drg_key_color+0x28>
     a08:	00002930 	.word	0x00002930
     a0c:	00002685 	.word	0x00002685
     a10:	000028fc 	.word	0x000028fc
     a14:	000028f8 	.word	0x000028f8
     a18:	000028f4 	.word	0x000028f4

00000a1c <shift_key_color>:

static color_rgb shift_key_color(const calc_state_t * calc_state, const sys_state_t * sys_state) {
     a1c:	b500      	push	{lr}
     a1e:	b083      	sub	sp, #12
	return sys_state->sys.modifiers.shift ? (sys_state->sys.modifiers.hyp ? color_shift_hyp : color_shift) : color_normal;
     a20:	794b      	ldrb	r3, [r1, #5]
     a22:	2b00      	cmp	r3, #0
     a24:	d00e      	beq.n	a44 <shift_key_color+0x28>
     a26:	798b      	ldrb	r3, [r1, #6]
     a28:	2b00      	cmp	r3, #0
     a2a:	d005      	beq.n	a38 <shift_key_color+0x1c>
     a2c:	2203      	movs	r2, #3
     a2e:	490f      	ldr	r1, [pc, #60]	; (a6c <shift_key_color+0x50>)
     a30:	a801      	add	r0, sp, #4
     a32:	4b0f      	ldr	r3, [pc, #60]	; (a70 <shift_key_color+0x54>)
     a34:	4798      	blx	r3
     a36:	e00a      	b.n	a4e <shift_key_color+0x32>
     a38:	2203      	movs	r2, #3
     a3a:	490e      	ldr	r1, [pc, #56]	; (a74 <shift_key_color+0x58>)
     a3c:	a801      	add	r0, sp, #4
     a3e:	4b0c      	ldr	r3, [pc, #48]	; (a70 <shift_key_color+0x54>)
     a40:	4798      	blx	r3
     a42:	e004      	b.n	a4e <shift_key_color+0x32>
     a44:	2203      	movs	r2, #3
     a46:	490c      	ldr	r1, [pc, #48]	; (a78 <shift_key_color+0x5c>)
     a48:	a801      	add	r0, sp, #4
     a4a:	4b09      	ldr	r3, [pc, #36]	; (a70 <shift_key_color+0x54>)
     a4c:	4798      	blx	r3
     a4e:	a901      	add	r1, sp, #4
     a50:	880b      	ldrh	r3, [r1, #0]
     a52:	0a1a      	lsrs	r2, r3, #8
     a54:	0212      	lsls	r2, r2, #8
     a56:	20ff      	movs	r0, #255	; 0xff
     a58:	4018      	ands	r0, r3
     a5a:	4310      	orrs	r0, r2
     a5c:	788a      	ldrb	r2, [r1, #2]
     a5e:	0412      	lsls	r2, r2, #16
     a60:	4b06      	ldr	r3, [pc, #24]	; (a7c <shift_key_color+0x60>)
     a62:	4018      	ands	r0, r3
     a64:	4310      	orrs	r0, r2
}
     a66:	b003      	add	sp, #12
     a68:	bd00      	pop	{pc}
     a6a:	46c0      	nop			; (mov r8, r8)
     a6c:	00002920 	.word	0x00002920
     a70:	00002685 	.word	0x00002685
     a74:	00002928 	.word	0x00002928
     a78:	0000292c 	.word	0x0000292c
     a7c:	ff00ffff 	.word	0xff00ffff

00000a80 <hyp_key_color>:
static color_rgb hyp_key_color(const calc_state_t * calc_state, const sys_state_t * sys_state) {
     a80:	b500      	push	{lr}
     a82:	b083      	sub	sp, #12
	return sys_state->sys.modifiers.hyp ? (sys_state->sys.modifiers.shift ? color_shift_hyp : color_hyp) : color_normal;
     a84:	798b      	ldrb	r3, [r1, #6]
     a86:	2b00      	cmp	r3, #0
     a88:	d00e      	beq.n	aa8 <hyp_key_color+0x28>
     a8a:	794b      	ldrb	r3, [r1, #5]
     a8c:	2b00      	cmp	r3, #0
     a8e:	d005      	beq.n	a9c <hyp_key_color+0x1c>
     a90:	2203      	movs	r2, #3
     a92:	490f      	ldr	r1, [pc, #60]	; (ad0 <hyp_key_color+0x50>)
     a94:	a801      	add	r0, sp, #4
     a96:	4b0f      	ldr	r3, [pc, #60]	; (ad4 <hyp_key_color+0x54>)
     a98:	4798      	blx	r3
     a9a:	e00a      	b.n	ab2 <hyp_key_color+0x32>
     a9c:	2203      	movs	r2, #3
     a9e:	490e      	ldr	r1, [pc, #56]	; (ad8 <hyp_key_color+0x58>)
     aa0:	a801      	add	r0, sp, #4
     aa2:	4b0c      	ldr	r3, [pc, #48]	; (ad4 <hyp_key_color+0x54>)
     aa4:	4798      	blx	r3
     aa6:	e004      	b.n	ab2 <hyp_key_color+0x32>
     aa8:	2203      	movs	r2, #3
     aaa:	490c      	ldr	r1, [pc, #48]	; (adc <hyp_key_color+0x5c>)
     aac:	a801      	add	r0, sp, #4
     aae:	4b09      	ldr	r3, [pc, #36]	; (ad4 <hyp_key_color+0x54>)
     ab0:	4798      	blx	r3
     ab2:	a901      	add	r1, sp, #4
     ab4:	880b      	ldrh	r3, [r1, #0]
     ab6:	0a1a      	lsrs	r2, r3, #8
     ab8:	0212      	lsls	r2, r2, #8
     aba:	20ff      	movs	r0, #255	; 0xff
     abc:	4018      	ands	r0, r3
     abe:	4310      	orrs	r0, r2
     ac0:	788a      	ldrb	r2, [r1, #2]
     ac2:	0412      	lsls	r2, r2, #16
     ac4:	4b06      	ldr	r3, [pc, #24]	; (ae0 <hyp_key_color+0x60>)
     ac6:	4018      	ands	r0, r3
     ac8:	4310      	orrs	r0, r2
}
     aca:	b003      	add	sp, #12
     acc:	bd00      	pop	{pc}
     ace:	46c0      	nop			; (mov r8, r8)
     ad0:	00002920 	.word	0x00002920
     ad4:	00002685 	.word	0x00002685
     ad8:	00002924 	.word	0x00002924
     adc:	0000292c 	.word	0x0000292c
     ae0:	ff00ffff 	.word	0xff00ffff

00000ae4 <build_keymap>:



void build_keymap() {
     ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ae6:	46d6      	mov	lr, sl
     ae8:	464f      	mov	r7, r9
     aea:	4646      	mov	r6, r8
     aec:	b5c0      	push	{r6, r7, lr}
	keypad_map[0] = (kp_key){0};
     aee:	4cfd      	ldr	r4, [pc, #1012]	; (ee4 <build_keymap+0x400>)
     af0:	221c      	movs	r2, #28
     af2:	2100      	movs	r1, #0
     af4:	0020      	movs	r0, r4
     af6:	4bfc      	ldr	r3, [pc, #1008]	; (ee8 <build_keymap+0x404>)
     af8:	4698      	mov	r8, r3
     afa:	4798      	blx	r3
	keypad_map[1] = (kp_key){0};
     afc:	0020      	movs	r0, r4
     afe:	301c      	adds	r0, #28
     b00:	221c      	movs	r2, #28
     b02:	2100      	movs	r1, #0
     b04:	47c0      	blx	r8
	keypad_map[2] = (kp_key){ //menu/pwr key
     b06:	4bf9      	ldr	r3, [pc, #996]	; (eec <build_keymap+0x408>)
     b08:	469a      	mov	sl, r3
     b0a:	0023      	movs	r3, r4
     b0c:	3338      	adds	r3, #56	; 0x38
     b0e:	4652      	mov	r2, sl
     b10:	ca23      	ldmia	r2!, {r0, r1, r5}
     b12:	c323      	stmia	r3!, {r0, r1, r5}
     b14:	ca23      	ldmia	r2!, {r0, r1, r5}
     b16:	c323      	stmia	r3!, {r0, r1, r5}
     b18:	6812      	ldr	r2, [r2, #0]
     b1a:	601a      	str	r2, [r3, #0]
		.pixel_idx = 12,
		.special_color = NULL
	};
	keypad_map[3] = (kp_key){ //drg key
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_drg_reint, //TODO: reinterpret drg
     b1c:	4bf4      	ldr	r3, [pc, #976]	; (ef0 <build_keymap+0x40c>)
     b1e:	681b      	ldr	r3, [r3, #0]
     b20:	65a3      	str	r3, [r4, #88]	; 0x58
	keypad_map[3] = (kp_key){ //drg key
     b22:	2601      	movs	r6, #1
     b24:	2354      	movs	r3, #84	; 0x54
     b26:	54e6      	strb	r6, [r4, r3]
     b28:	2500      	movs	r5, #0
     b2a:	65e5      	str	r5, [r4, #92]	; 0x5c
     b2c:	6625      	str	r5, [r4, #96]	; 0x60
     b2e:	6665      	str	r5, [r4, #100]	; 0x64
     b30:	3b39      	subs	r3, #57	; 0x39
     b32:	66a3      	str	r3, [r4, #104]	; 0x68
     b34:	4bef      	ldr	r3, [pc, #956]	; (ef4 <build_keymap+0x410>)
     b36:	66e3      	str	r3, [r4, #108]	; 0x6c
		.pixel_idx = 27,
		.special_color = drg_key_color
	};
	keypad_map[4] = (kp_key){ //re/im key
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_re_im,
     b38:	4bef      	ldr	r3, [pc, #956]	; (ef8 <build_keymap+0x414>)
     b3a:	681b      	ldr	r3, [r3, #0]
     b3c:	6763      	str	r3, [r4, #116]	; 0x74
		.shift_cmd = (cmd_generic*)cmd_rec_pol,
     b3e:	4bef      	ldr	r3, [pc, #956]	; (efc <build_keymap+0x418>)
     b40:	681b      	ldr	r3, [r3, #0]
     b42:	67a3      	str	r3, [r4, #120]	; 0x78
	keypad_map[4] = (kp_key){ //re/im key
     b44:	2370      	movs	r3, #112	; 0x70
     b46:	54e6      	strb	r6, [r4, r3]
     b48:	67e5      	str	r5, [r4, #124]	; 0x7c
     b4a:	3310      	adds	r3, #16
     b4c:	50e5      	str	r5, [r4, r3]
     b4e:	3304      	adds	r3, #4
     b50:	221c      	movs	r2, #28
     b52:	50e2      	str	r2, [r4, r3]
     b54:	4aea      	ldr	r2, [pc, #936]	; (f00 <build_keymap+0x41c>)
     b56:	3304      	adds	r3, #4
     b58:	50e2      	str	r2, [r4, r3]
		.pixel_idx = 28,
		.special_color = re_im_key_color
	};
		
	// COL 1 ////////////////////////////
	keypad_map[5] = (kp_key){0};
     b5a:	0020      	movs	r0, r4
     b5c:	308c      	adds	r0, #140	; 0x8c
     b5e:	221c      	movs	r2, #28
     b60:	2100      	movs	r1, #0
     b62:	47c0      	blx	r8
	keypad_map[6] = (kp_key){0};
     b64:	0020      	movs	r0, r4
     b66:	30a8      	adds	r0, #168	; 0xa8
     b68:	221c      	movs	r2, #28
     b6a:	2100      	movs	r1, #0
     b6c:	47c0      	blx	r8
	keypad_map[7] = (kp_key){ // EEX
     b6e:	0023      	movs	r3, r4
     b70:	33c4      	adds	r3, #196	; 0xc4
     b72:	4652      	mov	r2, sl
     b74:	321c      	adds	r2, #28
     b76:	ca83      	ldmia	r2!, {r0, r1, r7}
     b78:	c383      	stmia	r3!, {r0, r1, r7}
     b7a:	ca83      	ldmia	r2!, {r0, r1, r7}
     b7c:	c383      	stmia	r3!, {r0, r1, r7}
     b7e:	6812      	ldr	r2, [r2, #0]
     b80:	601a      	str	r2, [r3, #0]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 13,
		.special_color = NULL
	};
	keypad_map[8] = (kp_key){ // roll up/down
     b82:	0023      	movs	r3, r4
     b84:	33e0      	adds	r3, #224	; 0xe0
     b86:	4652      	mov	r2, sl
     b88:	3238      	adds	r2, #56	; 0x38
     b8a:	ca83      	ldmia	r2!, {r0, r1, r7}
     b8c:	c383      	stmia	r3!, {r0, r1, r7}
     b8e:	ca83      	ldmia	r2!, {r0, r1, r7}
     b90:	c383      	stmia	r3!, {r0, r1, r7}
     b92:	6812      	ldr	r2, [r2, #0]
     b94:	601a      	str	r2, [r3, #0]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 26,
		.special_color = NULL
	};
	keypad_map[9] = (kp_key){ // 2nd
     b96:	0023      	movs	r3, r4
     b98:	33fc      	adds	r3, #252	; 0xfc
     b9a:	4652      	mov	r2, sl
     b9c:	3254      	adds	r2, #84	; 0x54
     b9e:	ca83      	ldmia	r2!, {r0, r1, r7}
     ba0:	c383      	stmia	r3!, {r0, r1, r7}
     ba2:	ca83      	ldmia	r2!, {r0, r1, r7}
     ba4:	c383      	stmia	r3!, {r0, r1, r7}
     ba6:	6812      	ldr	r2, [r2, #0]
     ba8:	601a      	str	r2, [r3, #0]
		.pixel_idx = 29,
		.special_color = shift_key_color
	};
		
	// COL 2 ////////////////////////////
	keypad_map[10] = (kp_key){ // C/AC
     baa:	2309      	movs	r3, #9
     bac:	4699      	mov	r9, r3
     bae:	3310      	adds	r3, #16
     bb0:	33ff      	adds	r3, #255	; 0xff
     bb2:	464a      	mov	r2, r9
     bb4:	54e2      	strb	r2, [r4, r3]
     bb6:	3304      	adds	r3, #4
     bb8:	50e5      	str	r5, [r4, r3]
     bba:	3304      	adds	r3, #4
     bbc:	50e5      	str	r5, [r4, r3]
     bbe:	3304      	adds	r3, #4
     bc0:	50e5      	str	r5, [r4, r3]
     bc2:	3304      	adds	r3, #4
     bc4:	50e5      	str	r5, [r4, r3]
     bc6:	3304      	adds	r3, #4
     bc8:	50e5      	str	r5, [r4, r3]
     bca:	3304      	adds	r3, #4
     bcc:	50e5      	str	r5, [r4, r3]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 0,
		.special_color = NULL // TODO: clear colors?
	};
	keypad_map[11] = (kp_key){ // bksp
     bce:	0022      	movs	r2, r4
     bd0:	3235      	adds	r2, #53	; 0x35
     bd2:	32ff      	adds	r2, #255	; 0xff
     bd4:	4657      	mov	r7, sl
     bd6:	3770      	adds	r7, #112	; 0x70
     bd8:	cf0b      	ldmia	r7!, {r0, r1, r3}
     bda:	c20b      	stmia	r2!, {r0, r1, r3}
     bdc:	cf0b      	ldmia	r7!, {r0, r1, r3}
     bde:	c20b      	stmia	r2!, {r0, r1, r3}
     be0:	683b      	ldr	r3, [r7, #0]
     be2:	6013      	str	r3, [r2, #0]
		.special_color = NULL
	};
	keypad_map[12] = (kp_key){ // +/-
		.key_type = KEY_TYPE_STD,
		.base_cmd = NULL, // TODO: +/-
		.shift_cmd = (cmd_generic*)cmd_abs,
     be4:	4bc7      	ldr	r3, [pc, #796]	; (f04 <build_keymap+0x420>)
     be6:	681a      	ldr	r2, [r3, #0]
	keypad_map[12] = (kp_key){ // +/-
     be8:	23a8      	movs	r3, #168	; 0xa8
     bea:	005b      	lsls	r3, r3, #1
     bec:	54e6      	strb	r6, [r4, r3]
     bee:	3304      	adds	r3, #4
     bf0:	50e5      	str	r5, [r4, r3]
     bf2:	3304      	adds	r3, #4
     bf4:	50e2      	str	r2, [r4, r3]
     bf6:	3304      	adds	r3, #4
     bf8:	50e5      	str	r5, [r4, r3]
     bfa:	3304      	adds	r3, #4
     bfc:	50e5      	str	r5, [r4, r3]
     bfe:	220e      	movs	r2, #14
     c00:	3304      	adds	r3, #4
     c02:	50e2      	str	r2, [r4, r3]
     c04:	3304      	adds	r3, #4
     c06:	50e5      	str	r5, [r4, r3]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 14,
		.special_color = NULL
	};
	keypad_map[13] = (kp_key){ // enter
     c08:	4bbf      	ldr	r3, [pc, #764]	; (f08 <build_keymap+0x424>)
     c0a:	469a      	mov	sl, r3
     c0c:	0023      	movs	r3, r4
     c0e:	336d      	adds	r3, #109	; 0x6d
     c10:	33ff      	adds	r3, #255	; 0xff
     c12:	4652      	mov	r2, sl
     c14:	320c      	adds	r2, #12
     c16:	ca83      	ldmia	r2!, {r0, r1, r7}
     c18:	c383      	stmia	r3!, {r0, r1, r7}
     c1a:	ca83      	ldmia	r2!, {r0, r1, r7}
     c1c:	c383      	stmia	r3!, {r0, r1, r7}
     c1e:	6812      	ldr	r2, [r2, #0]
     c20:	601a      	str	r2, [r3, #0]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 25,
		.special_color = NULL
	};
	keypad_map[14] = (kp_key){0};
     c22:	0020      	movs	r0, r4
     c24:	3089      	adds	r0, #137	; 0x89
     c26:	30ff      	adds	r0, #255	; 0xff
     c28:	221c      	movs	r2, #28
     c2a:	2100      	movs	r1, #0
     c2c:	47c0      	blx	r8
		
	// COL 3 ////////////////////////////
	keypad_map[15] = (kp_key){ // sin
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_sin,
     c2e:	4bb7      	ldr	r3, [pc, #732]	; (f0c <build_keymap+0x428>)
     c30:	681b      	ldr	r3, [r3, #0]
     c32:	469c      	mov	ip, r3
		.shift_cmd = (cmd_generic*)cmd_asin,
     c34:	4bb6      	ldr	r3, [pc, #728]	; (f10 <build_keymap+0x42c>)
     c36:	6818      	ldr	r0, [r3, #0]
		.hyp_cmd = (cmd_generic*)cmd_sinh,
     c38:	4bb6      	ldr	r3, [pc, #728]	; (f14 <build_keymap+0x430>)
     c3a:	6819      	ldr	r1, [r3, #0]
		.shift_hyp_cmd = (cmd_generic*)cmd_asinh,
     c3c:	4bb6      	ldr	r3, [pc, #728]	; (f18 <build_keymap+0x434>)
     c3e:	681a      	ldr	r2, [r3, #0]
	keypad_map[15] = (kp_key){ // sin
     c40:	23d2      	movs	r3, #210	; 0xd2
     c42:	005b      	lsls	r3, r3, #1
     c44:	54e6      	strb	r6, [r4, r3]
     c46:	3304      	adds	r3, #4
     c48:	4667      	mov	r7, ip
     c4a:	50e7      	str	r7, [r4, r3]
     c4c:	3304      	adds	r3, #4
     c4e:	50e0      	str	r0, [r4, r3]
     c50:	3304      	adds	r3, #4
     c52:	50e1      	str	r1, [r4, r3]
     c54:	3304      	adds	r3, #4
     c56:	50e2      	str	r2, [r4, r3]
     c58:	3304      	adds	r3, #4
     c5a:	50e6      	str	r6, [r4, r3]
     c5c:	3304      	adds	r3, #4
     c5e:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 1,
		.special_color = NULL
	};
	keypad_map[16] = (kp_key){ // 7
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_7,
     c60:	4bae      	ldr	r3, [pc, #696]	; (f1c <build_keymap+0x438>)
     c62:	681a      	ldr	r2, [r3, #0]
	keypad_map[16] = (kp_key){ // 7
     c64:	23e0      	movs	r3, #224	; 0xe0
     c66:	005b      	lsls	r3, r3, #1
     c68:	54e6      	strb	r6, [r4, r3]
     c6a:	3304      	adds	r3, #4
     c6c:	50e2      	str	r2, [r4, r3]
     c6e:	3304      	adds	r3, #4
     c70:	50e5      	str	r5, [r4, r3]
     c72:	3304      	adds	r3, #4
     c74:	50e5      	str	r5, [r4, r3]
     c76:	3304      	adds	r3, #4
     c78:	50e5      	str	r5, [r4, r3]
     c7a:	220a      	movs	r2, #10
     c7c:	3304      	adds	r3, #4
     c7e:	50e2      	str	r2, [r4, r3]
     c80:	3304      	adds	r3, #4
     c82:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 10,
		.special_color = NULL
	};
	keypad_map[17] = (kp_key){ // 4
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_4,
     c84:	4ba6      	ldr	r3, [pc, #664]	; (f20 <build_keymap+0x43c>)
     c86:	681a      	ldr	r2, [r3, #0]
	keypad_map[17] = (kp_key){ // 4
     c88:	23ee      	movs	r3, #238	; 0xee
     c8a:	005b      	lsls	r3, r3, #1
     c8c:	54e6      	strb	r6, [r4, r3]
     c8e:	3304      	adds	r3, #4
     c90:	50e2      	str	r2, [r4, r3]
     c92:	3304      	adds	r3, #4
     c94:	50e5      	str	r5, [r4, r3]
     c96:	3304      	adds	r3, #4
     c98:	50e5      	str	r5, [r4, r3]
     c9a:	3304      	adds	r3, #4
     c9c:	50e5      	str	r5, [r4, r3]
     c9e:	220f      	movs	r2, #15
     ca0:	3304      	adds	r3, #4
     ca2:	50e2      	str	r2, [r4, r3]
     ca4:	3304      	adds	r3, #4
     ca6:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 15,
		.special_color = NULL
	};
	keypad_map[18] = (kp_key){ // 1
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_1,
     ca8:	4b9e      	ldr	r3, [pc, #632]	; (f24 <build_keymap+0x440>)
     caa:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_i,
     cac:	4b9e      	ldr	r3, [pc, #632]	; (f28 <build_keymap+0x444>)
     cae:	681a      	ldr	r2, [r3, #0]
	keypad_map[18] = (kp_key){ // 1
     cb0:	23fc      	movs	r3, #252	; 0xfc
     cb2:	005b      	lsls	r3, r3, #1
     cb4:	54e6      	strb	r6, [r4, r3]
     cb6:	3304      	adds	r3, #4
     cb8:	50e1      	str	r1, [r4, r3]
     cba:	3304      	adds	r3, #4
     cbc:	50e2      	str	r2, [r4, r3]
     cbe:	3304      	adds	r3, #4
     cc0:	50e5      	str	r5, [r4, r3]
     cc2:	3304      	adds	r3, #4
     cc4:	50e5      	str	r5, [r4, r3]
     cc6:	2218      	movs	r2, #24
     cc8:	3304      	adds	r3, #4
     cca:	50e2      	str	r2, [r4, r3]
     ccc:	3304      	adds	r3, #4
     cce:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 24,
		.special_color = NULL
	};
	keypad_map[19] = (kp_key){ // 0
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_0,
     cd0:	4b96      	ldr	r3, [pc, #600]	; (f2c <build_keymap+0x448>)
     cd2:	681a      	ldr	r2, [r3, #0]
	keypad_map[19] = (kp_key){ // 0
     cd4:	2385      	movs	r3, #133	; 0x85
     cd6:	009b      	lsls	r3, r3, #2
     cd8:	54e6      	strb	r6, [r4, r3]
     cda:	3304      	adds	r3, #4
     cdc:	50e2      	str	r2, [r4, r3]
     cde:	3304      	adds	r3, #4
     ce0:	50e5      	str	r5, [r4, r3]
     ce2:	3304      	adds	r3, #4
     ce4:	50e5      	str	r5, [r4, r3]
     ce6:	3304      	adds	r3, #4
     ce8:	50e5      	str	r5, [r4, r3]
     cea:	221e      	movs	r2, #30
     cec:	3304      	adds	r3, #4
     cee:	50e2      	str	r2, [r4, r3]
     cf0:	3304      	adds	r3, #4
     cf2:	50e5      	str	r5, [r4, r3]
	};
		
	// COL 4 ////////////////////////////
	keypad_map[20] = (kp_key){ // cos
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_cos,
     cf4:	4b8e      	ldr	r3, [pc, #568]	; (f30 <build_keymap+0x44c>)
     cf6:	681b      	ldr	r3, [r3, #0]
     cf8:	469c      	mov	ip, r3
		.shift_cmd = (cmd_generic*)cmd_acos,
     cfa:	4b8e      	ldr	r3, [pc, #568]	; (f34 <build_keymap+0x450>)
     cfc:	6818      	ldr	r0, [r3, #0]
		.hyp_cmd = (cmd_generic*)cmd_cosh,
     cfe:	4b8e      	ldr	r3, [pc, #568]	; (f38 <build_keymap+0x454>)
     d00:	6819      	ldr	r1, [r3, #0]
		.shift_hyp_cmd = (cmd_generic*)cmd_acosh,
     d02:	4b8e      	ldr	r3, [pc, #568]	; (f3c <build_keymap+0x458>)
     d04:	681a      	ldr	r2, [r3, #0]
	keypad_map[20] = (kp_key){ // cos
     d06:	238c      	movs	r3, #140	; 0x8c
     d08:	009b      	lsls	r3, r3, #2
     d0a:	54e6      	strb	r6, [r4, r3]
     d0c:	3304      	adds	r3, #4
     d0e:	4667      	mov	r7, ip
     d10:	50e7      	str	r7, [r4, r3]
     d12:	3304      	adds	r3, #4
     d14:	50e0      	str	r0, [r4, r3]
     d16:	3304      	adds	r3, #4
     d18:	50e1      	str	r1, [r4, r3]
     d1a:	3304      	adds	r3, #4
     d1c:	50e2      	str	r2, [r4, r3]
     d1e:	2202      	movs	r2, #2
     d20:	3304      	adds	r3, #4
     d22:	50e2      	str	r2, [r4, r3]
     d24:	3304      	adds	r3, #4
     d26:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 2,
		.special_color = NULL
	};
	keypad_map[21] = (kp_key){ // 8
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_8,
     d28:	4b85      	ldr	r3, [pc, #532]	; (f40 <build_keymap+0x45c>)
     d2a:	681a      	ldr	r2, [r3, #0]
	keypad_map[21] = (kp_key){ // 8
     d2c:	2393      	movs	r3, #147	; 0x93
     d2e:	009b      	lsls	r3, r3, #2
     d30:	54e6      	strb	r6, [r4, r3]
     d32:	3304      	adds	r3, #4
     d34:	50e2      	str	r2, [r4, r3]
     d36:	3304      	adds	r3, #4
     d38:	50e5      	str	r5, [r4, r3]
     d3a:	3304      	adds	r3, #4
     d3c:	50e5      	str	r5, [r4, r3]
     d3e:	3304      	adds	r3, #4
     d40:	50e5      	str	r5, [r4, r3]
     d42:	3304      	adds	r3, #4
     d44:	464a      	mov	r2, r9
     d46:	50e2      	str	r2, [r4, r3]
     d48:	3304      	adds	r3, #4
     d4a:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 9,
		.special_color = NULL
	};
	keypad_map[22] = (kp_key){ // 5
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_5,
     d4c:	4b7d      	ldr	r3, [pc, #500]	; (f44 <build_keymap+0x460>)
     d4e:	681a      	ldr	r2, [r3, #0]
	keypad_map[22] = (kp_key){ // 5
     d50:	239a      	movs	r3, #154	; 0x9a
     d52:	009b      	lsls	r3, r3, #2
     d54:	54e6      	strb	r6, [r4, r3]
     d56:	3304      	adds	r3, #4
     d58:	50e2      	str	r2, [r4, r3]
     d5a:	3304      	adds	r3, #4
     d5c:	50e5      	str	r5, [r4, r3]
     d5e:	3304      	adds	r3, #4
     d60:	50e5      	str	r5, [r4, r3]
     d62:	3304      	adds	r3, #4
     d64:	50e5      	str	r5, [r4, r3]
     d66:	2210      	movs	r2, #16
     d68:	3304      	adds	r3, #4
     d6a:	50e2      	str	r2, [r4, r3]
     d6c:	3304      	adds	r3, #4
     d6e:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 16,
		.special_color = NULL
	};
	keypad_map[23] = (kp_key){ // 2
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_2,
     d70:	4b75      	ldr	r3, [pc, #468]	; (f48 <build_keymap+0x464>)
     d72:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_e,
     d74:	4b75      	ldr	r3, [pc, #468]	; (f4c <build_keymap+0x468>)
     d76:	681a      	ldr	r2, [r3, #0]
	keypad_map[23] = (kp_key){ // 2
     d78:	23a1      	movs	r3, #161	; 0xa1
     d7a:	009b      	lsls	r3, r3, #2
     d7c:	54e6      	strb	r6, [r4, r3]
     d7e:	3304      	adds	r3, #4
     d80:	50e1      	str	r1, [r4, r3]
     d82:	3304      	adds	r3, #4
     d84:	50e2      	str	r2, [r4, r3]
     d86:	3304      	adds	r3, #4
     d88:	50e5      	str	r5, [r4, r3]
     d8a:	3304      	adds	r3, #4
     d8c:	50e5      	str	r5, [r4, r3]
     d8e:	2217      	movs	r2, #23
     d90:	3304      	adds	r3, #4
     d92:	50e2      	str	r2, [r4, r3]
     d94:	3304      	adds	r3, #4
     d96:	50e5      	str	r5, [r4, r3]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 23,
		.special_color = NULL
	};
	keypad_map[24] = (kp_key){0};
     d98:	3304      	adds	r3, #4
     d9a:	18e0      	adds	r0, r4, r3
     d9c:	3205      	adds	r2, #5
     d9e:	2100      	movs	r1, #0
     da0:	47c0      	blx	r8

	// COL 5 ////////////////////////////
	keypad_map[25] = (kp_key){ // tan
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_tan,
     da2:	4b6b      	ldr	r3, [pc, #428]	; (f50 <build_keymap+0x46c>)
     da4:	681b      	ldr	r3, [r3, #0]
     da6:	469c      	mov	ip, r3
		.shift_cmd = (cmd_generic*)cmd_atan,
     da8:	4b6a      	ldr	r3, [pc, #424]	; (f54 <build_keymap+0x470>)
     daa:	6818      	ldr	r0, [r3, #0]
		.hyp_cmd = (cmd_generic*)cmd_tanh,
     dac:	4b6a      	ldr	r3, [pc, #424]	; (f58 <build_keymap+0x474>)
     dae:	6819      	ldr	r1, [r3, #0]
		.shift_hyp_cmd = (cmd_generic*)cmd_atanh,
     db0:	4b6a      	ldr	r3, [pc, #424]	; (f5c <build_keymap+0x478>)
     db2:	681a      	ldr	r2, [r3, #0]
	keypad_map[25] = (kp_key){ // tan
     db4:	23af      	movs	r3, #175	; 0xaf
     db6:	009b      	lsls	r3, r3, #2
     db8:	54e6      	strb	r6, [r4, r3]
     dba:	3304      	adds	r3, #4
     dbc:	4667      	mov	r7, ip
     dbe:	50e7      	str	r7, [r4, r3]
     dc0:	3304      	adds	r3, #4
     dc2:	50e0      	str	r0, [r4, r3]
     dc4:	3304      	adds	r3, #4
     dc6:	50e1      	str	r1, [r4, r3]
     dc8:	3304      	adds	r3, #4
     dca:	50e2      	str	r2, [r4, r3]
     dcc:	2203      	movs	r2, #3
     dce:	3304      	adds	r3, #4
     dd0:	50e2      	str	r2, [r4, r3]
     dd2:	3304      	adds	r3, #4
     dd4:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 3,
		.special_color = NULL
	};
	keypad_map[26] = (kp_key){ // 9
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_9,
     dd6:	4b62      	ldr	r3, [pc, #392]	; (f60 <build_keymap+0x47c>)
     dd8:	681a      	ldr	r2, [r3, #0]
	keypad_map[26] = (kp_key){ // 9
     dda:	23b6      	movs	r3, #182	; 0xb6
     ddc:	009b      	lsls	r3, r3, #2
     dde:	54e6      	strb	r6, [r4, r3]
     de0:	3304      	adds	r3, #4
     de2:	50e2      	str	r2, [r4, r3]
     de4:	3304      	adds	r3, #4
     de6:	50e5      	str	r5, [r4, r3]
     de8:	3304      	adds	r3, #4
     dea:	50e5      	str	r5, [r4, r3]
     dec:	3304      	adds	r3, #4
     dee:	50e5      	str	r5, [r4, r3]
     df0:	2208      	movs	r2, #8
     df2:	3304      	adds	r3, #4
     df4:	50e2      	str	r2, [r4, r3]
     df6:	3304      	adds	r3, #4
     df8:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 8,
		.special_color = NULL
	};
	keypad_map[27] = (kp_key){ // 6
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_6,
     dfa:	4b5a      	ldr	r3, [pc, #360]	; (f64 <build_keymap+0x480>)
     dfc:	681a      	ldr	r2, [r3, #0]
	keypad_map[27] = (kp_key){ // 6
     dfe:	23bd      	movs	r3, #189	; 0xbd
     e00:	009b      	lsls	r3, r3, #2
     e02:	54e6      	strb	r6, [r4, r3]
     e04:	3304      	adds	r3, #4
     e06:	50e2      	str	r2, [r4, r3]
     e08:	3304      	adds	r3, #4
     e0a:	50e5      	str	r5, [r4, r3]
     e0c:	3304      	adds	r3, #4
     e0e:	50e5      	str	r5, [r4, r3]
     e10:	3304      	adds	r3, #4
     e12:	50e5      	str	r5, [r4, r3]
     e14:	2211      	movs	r2, #17
     e16:	3304      	adds	r3, #4
     e18:	50e2      	str	r2, [r4, r3]
     e1a:	3304      	adds	r3, #4
     e1c:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 17,
		.special_color = NULL
	};
	keypad_map[28] = (kp_key){ // 3
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_3,
     e1e:	4b52      	ldr	r3, [pc, #328]	; (f68 <build_keymap+0x484>)
     e20:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_pi,
     e22:	4b52      	ldr	r3, [pc, #328]	; (f6c <build_keymap+0x488>)
     e24:	681a      	ldr	r2, [r3, #0]
	keypad_map[28] = (kp_key){ // 3
     e26:	23c4      	movs	r3, #196	; 0xc4
     e28:	009b      	lsls	r3, r3, #2
     e2a:	54e6      	strb	r6, [r4, r3]
     e2c:	3304      	adds	r3, #4
     e2e:	50e1      	str	r1, [r4, r3]
     e30:	3304      	adds	r3, #4
     e32:	50e2      	str	r2, [r4, r3]
     e34:	3304      	adds	r3, #4
     e36:	50e5      	str	r5, [r4, r3]
     e38:	3304      	adds	r3, #4
     e3a:	50e5      	str	r5, [r4, r3]
     e3c:	2216      	movs	r2, #22
     e3e:	3304      	adds	r3, #4
     e40:	50e2      	str	r2, [r4, r3]
     e42:	3304      	adds	r3, #4
     e44:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 22,
		.special_color = NULL
	};
	keypad_map[29] = (kp_key){ // .
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_decimal,
     e46:	4b4a      	ldr	r3, [pc, #296]	; (f70 <build_keymap+0x48c>)
     e48:	681a      	ldr	r2, [r3, #0]
	keypad_map[29] = (kp_key){ // .
     e4a:	23cb      	movs	r3, #203	; 0xcb
     e4c:	009b      	lsls	r3, r3, #2
     e4e:	54e6      	strb	r6, [r4, r3]
     e50:	3304      	adds	r3, #4
     e52:	50e2      	str	r2, [r4, r3]
     e54:	3304      	adds	r3, #4
     e56:	50e5      	str	r5, [r4, r3]
     e58:	3304      	adds	r3, #4
     e5a:	50e5      	str	r5, [r4, r3]
     e5c:	3304      	adds	r3, #4
     e5e:	50e5      	str	r5, [r4, r3]
     e60:	221f      	movs	r2, #31
     e62:	3304      	adds	r3, #4
     e64:	50e2      	str	r2, [r4, r3]
     e66:	3304      	adds	r3, #4
     e68:	50e5      	str	r5, [r4, r3]
	};
		
	// COL 6 ////////////////////////////
	keypad_map[30] = (kp_key){ // div
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_div,
     e6a:	4b42      	ldr	r3, [pc, #264]	; (f74 <build_keymap+0x490>)
     e6c:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_inv,
     e6e:	4b42      	ldr	r3, [pc, #264]	; (f78 <build_keymap+0x494>)
     e70:	681a      	ldr	r2, [r3, #0]
	keypad_map[30] = (kp_key){ // div
     e72:	23d2      	movs	r3, #210	; 0xd2
     e74:	009b      	lsls	r3, r3, #2
     e76:	54e6      	strb	r6, [r4, r3]
     e78:	3304      	adds	r3, #4
     e7a:	50e1      	str	r1, [r4, r3]
     e7c:	3304      	adds	r3, #4
     e7e:	50e2      	str	r2, [r4, r3]
     e80:	3304      	adds	r3, #4
     e82:	50e5      	str	r5, [r4, r3]
     e84:	3304      	adds	r3, #4
     e86:	50e5      	str	r5, [r4, r3]
     e88:	2204      	movs	r2, #4
     e8a:	3304      	adds	r3, #4
     e8c:	50e2      	str	r2, [r4, r3]
     e8e:	3304      	adds	r3, #4
     e90:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 4,
		.special_color = NULL
	};
	keypad_map[31] = (kp_key){ // mul
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_mul,
     e92:	4b3a      	ldr	r3, [pc, #232]	; (f7c <build_keymap+0x498>)
     e94:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_phasor,
     e96:	4b3a      	ldr	r3, [pc, #232]	; (f80 <build_keymap+0x49c>)
     e98:	681a      	ldr	r2, [r3, #0]
	keypad_map[31] = (kp_key){ // mul
     e9a:	23d9      	movs	r3, #217	; 0xd9
     e9c:	009b      	lsls	r3, r3, #2
     e9e:	54e6      	strb	r6, [r4, r3]
     ea0:	3304      	adds	r3, #4
     ea2:	50e1      	str	r1, [r4, r3]
     ea4:	3304      	adds	r3, #4
     ea6:	50e2      	str	r2, [r4, r3]
     ea8:	3304      	adds	r3, #4
     eaa:	50e5      	str	r5, [r4, r3]
     eac:	3304      	adds	r3, #4
     eae:	50e5      	str	r5, [r4, r3]
     eb0:	2207      	movs	r2, #7
     eb2:	3304      	adds	r3, #4
     eb4:	50e2      	str	r2, [r4, r3]
     eb6:	3304      	adds	r3, #4
     eb8:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 7,
		.special_color = NULL
	};
	keypad_map[32] = (kp_key){ // sub
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_sub,
     eba:	4b32      	ldr	r3, [pc, #200]	; (f84 <build_keymap+0x4a0>)
     ebc:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_parallel,
     ebe:	4b32      	ldr	r3, [pc, #200]	; (f88 <build_keymap+0x4a4>)
     ec0:	681a      	ldr	r2, [r3, #0]
	keypad_map[32] = (kp_key){ // sub
     ec2:	23e0      	movs	r3, #224	; 0xe0
     ec4:	009b      	lsls	r3, r3, #2
     ec6:	54e6      	strb	r6, [r4, r3]
     ec8:	3304      	adds	r3, #4
     eca:	50e1      	str	r1, [r4, r3]
     ecc:	3304      	adds	r3, #4
     ece:	50e2      	str	r2, [r4, r3]
     ed0:	3304      	adds	r3, #4
     ed2:	50e5      	str	r5, [r4, r3]
     ed4:	3304      	adds	r3, #4
     ed6:	50e5      	str	r5, [r4, r3]
     ed8:	2212      	movs	r2, #18
     eda:	3304      	adds	r3, #4
     edc:	50e2      	str	r2, [r4, r3]
     ede:	3304      	adds	r3, #4
     ee0:	50e5      	str	r5, [r4, r3]
     ee2:	e053      	b.n	f8c <build_keymap+0x4a8>
     ee4:	20000b0c 	.word	0x20000b0c
     ee8:	00002709 	.word	0x00002709
     eec:	00002984 	.word	0x00002984
     ef0:	00002978 	.word	0x00002978
     ef4:	000009b1 	.word	0x000009b1
     ef8:	00002980 	.word	0x00002980
     efc:	0000297c 	.word	0x0000297c
     f00:	00000909 	.word	0x00000909
     f04:	20000f80 	.word	0x20000f80
     f08:	00002a04 	.word	0x00002a04
     f0c:	00002968 	.word	0x00002968
     f10:	00002960 	.word	0x00002960
     f14:	00002964 	.word	0x00002964
     f18:	0000295c 	.word	0x0000295c
     f1c:	0000293c 	.word	0x0000293c
     f20:	00002948 	.word	0x00002948
     f24:	00002954 	.word	0x00002954
     f28:	20000ae0 	.word	0x20000ae0
     f2c:	00002958 	.word	0x00002958
     f30:	20000af8 	.word	0x20000af8
     f34:	20000aec 	.word	0x20000aec
     f38:	20000ad8 	.word	0x20000ad8
     f3c:	20000afc 	.word	0x20000afc
     f40:	00002938 	.word	0x00002938
     f44:	00002944 	.word	0x00002944
     f48:	00002950 	.word	0x00002950
     f4c:	20000ae4 	.word	0x20000ae4
     f50:	20000f90 	.word	0x20000f90
     f54:	20000f84 	.word	0x20000f84
     f58:	20000f98 	.word	0x20000f98
     f5c:	20000b04 	.word	0x20000b04
     f60:	00002934 	.word	0x00002934
     f64:	00002940 	.word	0x00002940
     f68:	0000294c 	.word	0x0000294c
     f6c:	20000ad0 	.word	0x20000ad0
     f70:	20000af4 	.word	0x20000af4
     f74:	20000f74 	.word	0x20000f74
     f78:	20000f94 	.word	0x20000f94
     f7c:	0000296c 	.word	0x0000296c
     f80:	20000f8c 	.word	0x20000f8c
     f84:	00002970 	.word	0x00002970
     f88:	20000f6c 	.word	0x20000f6c
		.pixel_idx = 18,
		.special_color = NULL
	};
	keypad_map[33] = (kp_key){ // add
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_add,
     f8c:	4b3a      	ldr	r3, [pc, #232]	; (1078 <STACK_SIZE+0x78>)
     f8e:	681a      	ldr	r2, [r3, #0]
	keypad_map[33] = (kp_key){ // add
     f90:	23e7      	movs	r3, #231	; 0xe7
     f92:	009b      	lsls	r3, r3, #2
     f94:	54e6      	strb	r6, [r4, r3]
     f96:	3304      	adds	r3, #4
     f98:	50e2      	str	r2, [r4, r3]
     f9a:	3304      	adds	r3, #4
     f9c:	50e5      	str	r5, [r4, r3]
     f9e:	3304      	adds	r3, #4
     fa0:	50e5      	str	r5, [r4, r3]
     fa2:	3304      	adds	r3, #4
     fa4:	50e5      	str	r5, [r4, r3]
     fa6:	2215      	movs	r2, #21
     fa8:	3304      	adds	r3, #4
     faa:	50e2      	str	r2, [r4, r3]
     fac:	3304      	adds	r3, #4
     fae:	50e5      	str	r5, [r4, r3]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 21,
		.special_color = NULL
	};
	keypad_map[34] = (kp_key){0};
     fb0:	3304      	adds	r3, #4
     fb2:	18e0      	adds	r0, r4, r3
     fb4:	3207      	adds	r2, #7
     fb6:	2100      	movs	r1, #0
     fb8:	47c0      	blx	r8
		
	// COL 7 ////////////////////////////
	keypad_map[35] = (kp_key){ // hyp
     fba:	23f5      	movs	r3, #245	; 0xf5
     fbc:	009b      	lsls	r3, r3, #2
     fbe:	18e2      	adds	r2, r4, r3
     fc0:	4657      	mov	r7, sl
     fc2:	3728      	adds	r7, #40	; 0x28
     fc4:	cf0b      	ldmia	r7!, {r0, r1, r3}
     fc6:	c20b      	stmia	r2!, {r0, r1, r3}
     fc8:	cf0b      	ldmia	r7!, {r0, r1, r3}
     fca:	c20b      	stmia	r2!, {r0, r1, r3}
     fcc:	683b      	ldr	r3, [r7, #0]
     fce:	6013      	str	r3, [r2, #0]
		.pixel_idx = 5,
		.special_color = hyp_key_color
	};
	keypad_map[36] = (kp_key){ // pow
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_pow,
     fd0:	4b2a      	ldr	r3, [pc, #168]	; (107c <STACK_SIZE+0x7c>)
     fd2:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_root,
     fd4:	4b2a      	ldr	r3, [pc, #168]	; (1080 <STACK_SIZE+0x80>)
     fd6:	681a      	ldr	r2, [r3, #0]
	keypad_map[36] = (kp_key){ // pow
     fd8:	23fc      	movs	r3, #252	; 0xfc
     fda:	009b      	lsls	r3, r3, #2
     fdc:	54e6      	strb	r6, [r4, r3]
     fde:	3304      	adds	r3, #4
     fe0:	50e1      	str	r1, [r4, r3]
     fe2:	3304      	adds	r3, #4
     fe4:	50e2      	str	r2, [r4, r3]
     fe6:	3304      	adds	r3, #4
     fe8:	50e5      	str	r5, [r4, r3]
     fea:	3304      	adds	r3, #4
     fec:	50e5      	str	r5, [r4, r3]
     fee:	2206      	movs	r2, #6
     ff0:	4b24      	ldr	r3, [pc, #144]	; (1084 <STACK_SIZE+0x84>)
     ff2:	50e2      	str	r2, [r4, r3]
     ff4:	3304      	adds	r3, #4
     ff6:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 6,
		.special_color = NULL
	};
	keypad_map[37] = (kp_key){ // sqr
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_sqr,
     ff8:	4b23      	ldr	r3, [pc, #140]	; (1088 <STACK_SIZE+0x88>)
     ffa:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_sqrt,
     ffc:	4b23      	ldr	r3, [pc, #140]	; (108c <STACK_SIZE+0x8c>)
     ffe:	681a      	ldr	r2, [r3, #0]
	keypad_map[37] = (kp_key){ // sqr
    1000:	4b23      	ldr	r3, [pc, #140]	; (1090 <STACK_SIZE+0x90>)
    1002:	54e6      	strb	r6, [r4, r3]
    1004:	3304      	adds	r3, #4
    1006:	50e1      	str	r1, [r4, r3]
    1008:	4b22      	ldr	r3, [pc, #136]	; (1094 <STACK_SIZE+0x94>)
    100a:	50e2      	str	r2, [r4, r3]
    100c:	3304      	adds	r3, #4
    100e:	50e5      	str	r5, [r4, r3]
    1010:	4b21      	ldr	r3, [pc, #132]	; (1098 <STACK_SIZE+0x98>)
    1012:	50e5      	str	r5, [r4, r3]
    1014:	2213      	movs	r2, #19
    1016:	3304      	adds	r3, #4
    1018:	50e2      	str	r2, [r4, r3]
    101a:	4b20      	ldr	r3, [pc, #128]	; (109c <STACK_SIZE+0x9c>)
    101c:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 19,
		.special_color = NULL
	};
	keypad_map[38] = (kp_key){ // log
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_log,
    101e:	4b20      	ldr	r3, [pc, #128]	; (10a0 <STACK_SIZE+0xa0>)
    1020:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_alog,
    1022:	4b20      	ldr	r3, [pc, #128]	; (10a4 <STACK_SIZE+0xa4>)
    1024:	681a      	ldr	r2, [r3, #0]
	keypad_map[38] = (kp_key){ // log
    1026:	2385      	movs	r3, #133	; 0x85
    1028:	00db      	lsls	r3, r3, #3
    102a:	54e6      	strb	r6, [r4, r3]
    102c:	4b1e      	ldr	r3, [pc, #120]	; (10a8 <STACK_SIZE+0xa8>)
    102e:	50e1      	str	r1, [r4, r3]
    1030:	3304      	adds	r3, #4
    1032:	50e2      	str	r2, [r4, r3]
    1034:	4b1d      	ldr	r3, [pc, #116]	; (10ac <STACK_SIZE+0xac>)
    1036:	50e5      	str	r5, [r4, r3]
    1038:	3304      	adds	r3, #4
    103a:	50e5      	str	r5, [r4, r3]
    103c:	2214      	movs	r2, #20
    103e:	4b1c      	ldr	r3, [pc, #112]	; (10b0 <STACK_SIZE+0xb0>)
    1040:	50e2      	str	r2, [r4, r3]
    1042:	3304      	adds	r3, #4
    1044:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 20,
		.special_color = NULL
	};
	keypad_map[39] = (kp_key){ // ln
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_ln,
    1046:	4b1b      	ldr	r3, [pc, #108]	; (10b4 <STACK_SIZE+0xb4>)
    1048:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_exp,
    104a:	4b1b      	ldr	r3, [pc, #108]	; (10b8 <STACK_SIZE+0xb8>)
    104c:	681a      	ldr	r2, [r3, #0]
	keypad_map[39] = (kp_key){ // ln
    104e:	4b1b      	ldr	r3, [pc, #108]	; (10bc <STACK_SIZE+0xbc>)
    1050:	54e6      	strb	r6, [r4, r3]
    1052:	3304      	adds	r3, #4
    1054:	50e1      	str	r1, [r4, r3]
    1056:	4b1a      	ldr	r3, [pc, #104]	; (10c0 <STACK_SIZE+0xc0>)
    1058:	50e2      	str	r2, [r4, r3]
    105a:	3304      	adds	r3, #4
    105c:	50e5      	str	r5, [r4, r3]
    105e:	4b19      	ldr	r3, [pc, #100]	; (10c4 <STACK_SIZE+0xc4>)
    1060:	50e5      	str	r5, [r4, r3]
    1062:	2220      	movs	r2, #32
    1064:	3304      	adds	r3, #4
    1066:	50e2      	str	r2, [r4, r3]
    1068:	4b17      	ldr	r3, [pc, #92]	; (10c8 <STACK_SIZE+0xc8>)
    106a:	50e5      	str	r5, [r4, r3]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 32,
		.special_color = NULL
	};
}
    106c:	bc1c      	pop	{r2, r3, r4}
    106e:	4690      	mov	r8, r2
    1070:	4699      	mov	r9, r3
    1072:	46a2      	mov	sl, r4
    1074:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1076:	46c0      	nop			; (mov r8, r8)
    1078:	00002974 	.word	0x00002974
    107c:	20000b08 	.word	0x20000b08
    1080:	20000ad4 	.word	0x20000ad4
    1084:	00000404 	.word	0x00000404
    1088:	20000f88 	.word	0x20000f88
    108c:	20000f78 	.word	0x20000f78
    1090:	0000040c 	.word	0x0000040c
    1094:	00000414 	.word	0x00000414
    1098:	0000041c 	.word	0x0000041c
    109c:	00000424 	.word	0x00000424
    10a0:	20000b00 	.word	0x20000b00
    10a4:	20000adc 	.word	0x20000adc
    10a8:	0000042c 	.word	0x0000042c
    10ac:	00000434 	.word	0x00000434
    10b0:	0000043c 	.word	0x0000043c
    10b4:	20000af0 	.word	0x20000af0
    10b8:	20000ae8 	.word	0x20000ae8
    10bc:	00000444 	.word	0x00000444
    10c0:	0000044c 	.word	0x0000044c
    10c4:	00000454 	.word	0x00000454
    10c8:	0000045c 	.word	0x0000045c

000010cc <keypad_scan_keys>:
	uint64_t newkeys = keypad_inst->rawKeys & (~previous_scan);
	previous_scan = keypad_inst->rawKeys;
	return newkeys;
}

void keypad_scan_keys() {
    10cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    10ce:	46d6      	mov	lr, sl
    10d0:	464f      	mov	r7, r9
    10d2:	4646      	mov	r6, r8
    10d4:	b5c0      	push	{r6, r7, lr}
    10d6:	b082      	sub	sp, #8
	keypad_inst->rawKeys = 0ULL;
    10d8:	4b3c      	ldr	r3, [pc, #240]	; (11cc <keypad_scan_keys+0x100>)
    10da:	681b      	ldr	r3, [r3, #0]
    10dc:	2000      	movs	r0, #0
    10de:	2100      	movs	r1, #0
    10e0:	6098      	str	r0, [r3, #8]
    10e2:	60d9      	str	r1, [r3, #12]
	gpio_set_pin(colPorts[0], colPins[0], 0);
    10e4:	2200      	movs	r2, #0
    10e6:	2106      	movs	r1, #6
    10e8:	3001      	adds	r0, #1
    10ea:	4b39      	ldr	r3, [pc, #228]	; (11d0 <keypad_scan_keys+0x104>)
    10ec:	4798      	blx	r3
	for (int col = 0; col < KEYPAD_NUM_COLS; col++) {
    10ee:	2300      	movs	r3, #0
    10f0:	4698      	mov	r8, r3
    10f2:	e03d      	b.n	1170 <keypad_scan_keys+0xa4>
		gpio_set_pin(colPorts[col], colPins[col], 1);
		
		for (int row = 0; row < KEYPAD_NUM_ROWS; row++) {
			int key=gpio_read_pin(rowPorts[row], rowPins[row]);
			keypad_inst->rawKeys |= (key ? (1ULL << (row + col * 5)) : 0ULL);
    10f4:	2320      	movs	r3, #32
    10f6:	464e      	mov	r6, r9
    10f8:	1b9b      	subs	r3, r3, r6
    10fa:	469a      	mov	sl, r3
    10fc:	2301      	movs	r3, #1
    10fe:	4656      	mov	r6, sl
    1100:	40f3      	lsrs	r3, r6
    1102:	469c      	mov	ip, r3
    1104:	2601      	movs	r6, #1
    1106:	464b      	mov	r3, r9
    1108:	409e      	lsls	r6, r3
    110a:	0033      	movs	r3, r6
    110c:	430b      	orrs	r3, r1
    110e:	001c      	movs	r4, r3
    1110:	4663      	mov	r3, ip
    1112:	4313      	orrs	r3, r2
    1114:	001d      	movs	r5, r3
    1116:	6084      	str	r4, [r0, #8]
    1118:	60c5      	str	r5, [r0, #12]
		for (int row = 0; row < KEYPAD_NUM_ROWS; row++) {
    111a:	3701      	adds	r7, #1
    111c:	2f04      	cmp	r7, #4
    111e:	dc1f      	bgt.n	1160 <keypad_scan_keys+0x94>
			int key=gpio_read_pin(rowPorts[row], rowPins[row]);
    1120:	00ba      	lsls	r2, r7, #2
    1122:	4b2c      	ldr	r3, [pc, #176]	; (11d4 <keypad_scan_keys+0x108>)
    1124:	189b      	adds	r3, r3, r2
    1126:	6c18      	ldr	r0, [r3, #64]	; 0x40
    1128:	6d59      	ldr	r1, [r3, #84]	; 0x54
    112a:	4b2b      	ldr	r3, [pc, #172]	; (11d8 <keypad_scan_keys+0x10c>)
    112c:	4798      	blx	r3
    112e:	0003      	movs	r3, r0
			keypad_inst->rawKeys |= (key ? (1ULL << (row + col * 5)) : 0ULL);
    1130:	4a26      	ldr	r2, [pc, #152]	; (11cc <keypad_scan_keys+0x100>)
    1132:	6810      	ldr	r0, [r2, #0]
    1134:	6881      	ldr	r1, [r0, #8]
    1136:	68c2      	ldr	r2, [r0, #12]
    1138:	2b00      	cmp	r3, #0
    113a:	d00d      	beq.n	1158 <keypad_scan_keys+0x8c>
    113c:	4643      	mov	r3, r8
    113e:	009b      	lsls	r3, r3, #2
    1140:	4443      	add	r3, r8
    1142:	4699      	mov	r9, r3
    1144:	44b9      	add	r9, r7
    1146:	464e      	mov	r6, r9
    1148:	3e20      	subs	r6, #32
    114a:	46b2      	mov	sl, r6
    114c:	d4d2      	bmi.n	10f4 <keypad_scan_keys+0x28>
    114e:	2601      	movs	r6, #1
    1150:	4653      	mov	r3, sl
    1152:	409e      	lsls	r6, r3
    1154:	46b4      	mov	ip, r6
    1156:	e7d5      	b.n	1104 <keypad_scan_keys+0x38>
    1158:	2300      	movs	r3, #0
    115a:	2600      	movs	r6, #0
    115c:	46b4      	mov	ip, r6
    115e:	e7d5      	b.n	110c <keypad_scan_keys+0x40>
		}
		gpio_set_pin(colPorts[col], colPins[col], 0);
    1160:	2200      	movs	r2, #0
    1162:	9901      	ldr	r1, [sp, #4]
    1164:	9800      	ldr	r0, [sp, #0]
    1166:	4b1a      	ldr	r3, [pc, #104]	; (11d0 <keypad_scan_keys+0x104>)
    1168:	4798      	blx	r3
	for (int col = 0; col < KEYPAD_NUM_COLS; col++) {
    116a:	2301      	movs	r3, #1
    116c:	469c      	mov	ip, r3
    116e:	44e0      	add	r8, ip
    1170:	4643      	mov	r3, r8
    1172:	2b07      	cmp	r3, #7
    1174:	dc0e      	bgt.n	1194 <keypad_scan_keys+0xc8>
		gpio_set_pin(colPorts[col], colPins[col], 1);
    1176:	4b17      	ldr	r3, [pc, #92]	; (11d4 <keypad_scan_keys+0x108>)
    1178:	4642      	mov	r2, r8
    117a:	0092      	lsls	r2, r2, #2
    117c:	58d1      	ldr	r1, [r2, r3]
    117e:	0008      	movs	r0, r1
    1180:	9100      	str	r1, [sp, #0]
    1182:	189b      	adds	r3, r3, r2
    1184:	6a1b      	ldr	r3, [r3, #32]
    1186:	9301      	str	r3, [sp, #4]
    1188:	2201      	movs	r2, #1
    118a:	0019      	movs	r1, r3
    118c:	4b10      	ldr	r3, [pc, #64]	; (11d0 <keypad_scan_keys+0x104>)
    118e:	4798      	blx	r3
		for (int row = 0; row < KEYPAD_NUM_ROWS; row++) {
    1190:	2700      	movs	r7, #0
    1192:	e7c3      	b.n	111c <keypad_scan_keys+0x50>
	}
	keypad_inst->changed |= keypad_inst->rawKeys & (~keypad_inst->previous);
    1194:	4b0d      	ldr	r3, [pc, #52]	; (11cc <keypad_scan_keys+0x100>)
    1196:	681b      	ldr	r3, [r3, #0]
    1198:	6898      	ldr	r0, [r3, #8]
    119a:	68d9      	ldr	r1, [r3, #12]
    119c:	699c      	ldr	r4, [r3, #24]
    119e:	69dd      	ldr	r5, [r3, #28]
    11a0:	0006      	movs	r6, r0
    11a2:	43a6      	bics	r6, r4
    11a4:	000a      	movs	r2, r1
    11a6:	43aa      	bics	r2, r5
    11a8:	691c      	ldr	r4, [r3, #16]
    11aa:	695d      	ldr	r5, [r3, #20]
    11ac:	4326      	orrs	r6, r4
    11ae:	0030      	movs	r0, r6
    11b0:	432a      	orrs	r2, r5
    11b2:	0011      	movs	r1, r2
    11b4:	6118      	str	r0, [r3, #16]
    11b6:	6159      	str	r1, [r3, #20]
	keypad_inst->previous = keypad_inst->rawKeys;
    11b8:	6898      	ldr	r0, [r3, #8]
    11ba:	68d9      	ldr	r1, [r3, #12]
    11bc:	6198      	str	r0, [r3, #24]
    11be:	61d9      	str	r1, [r3, #28]
}
    11c0:	b002      	add	sp, #8
    11c2:	bc1c      	pop	{r2, r3, r4}
    11c4:	4690      	mov	r8, r2
    11c6:	4699      	mov	r9, r3
    11c8:	46a2      	mov	sl, r4
    11ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11cc:	20000628 	.word	0x20000628
    11d0:	00000625 	.word	0x00000625
    11d4:	00002a48 	.word	0x00002a48
    11d8:	00000799 	.word	0x00000799

000011dc <keypad_init>:

void keypad_init(keypad *status) {
    11dc:	b570      	push	{r4, r5, r6, lr}
	keypad_inst = status;
    11de:	4b17      	ldr	r3, [pc, #92]	; (123c <keypad_init+0x60>)
    11e0:	6018      	str	r0, [r3, #0]
	for (int i = 0; i < KEYPAD_NUM_COLS; i++) {
    11e2:	2400      	movs	r4, #0
    11e4:	e008      	b.n	11f8 <keypad_init+0x1c>
		gpio_set_pin_dir(colPorts[i], colPins[i], GPIO_DIR_OUT);
    11e6:	4b16      	ldr	r3, [pc, #88]	; (1240 <keypad_init+0x64>)
    11e8:	00a2      	lsls	r2, r4, #2
    11ea:	58d0      	ldr	r0, [r2, r3]
    11ec:	189b      	adds	r3, r3, r2
    11ee:	6a19      	ldr	r1, [r3, #32]
    11f0:	2201      	movs	r2, #1
    11f2:	4b14      	ldr	r3, [pc, #80]	; (1244 <keypad_init+0x68>)
    11f4:	4798      	blx	r3
	for (int i = 0; i < KEYPAD_NUM_COLS; i++) {
    11f6:	3401      	adds	r4, #1
    11f8:	2c07      	cmp	r4, #7
    11fa:	ddf4      	ble.n	11e6 <keypad_init+0xa>
    11fc:	2400      	movs	r4, #0
    11fe:	e00f      	b.n	1220 <keypad_init+0x44>
	}
	for (int i = 0; i < KEYPAD_NUM_ROWS; i++) {
		gpio_set_pin_dir(rowPorts[i], rowPins[i], GPIO_DIR_IN);
    1200:	00a2      	lsls	r2, r4, #2
    1202:	4b0f      	ldr	r3, [pc, #60]	; (1240 <keypad_init+0x64>)
    1204:	189b      	adds	r3, r3, r2
    1206:	6c1d      	ldr	r5, [r3, #64]	; 0x40
    1208:	6d5e      	ldr	r6, [r3, #84]	; 0x54
    120a:	2200      	movs	r2, #0
    120c:	0031      	movs	r1, r6
    120e:	0028      	movs	r0, r5
    1210:	4b0c      	ldr	r3, [pc, #48]	; (1244 <keypad_init+0x68>)
    1212:	4798      	blx	r3
		gpio_set_pin_pull(rowPorts[i], rowPins[i], GPIO_PULL_DOWN);
    1214:	2202      	movs	r2, #2
    1216:	0031      	movs	r1, r6
    1218:	0028      	movs	r0, r5
    121a:	4b0b      	ldr	r3, [pc, #44]	; (1248 <keypad_init+0x6c>)
    121c:	4798      	blx	r3
	for (int i = 0; i < KEYPAD_NUM_ROWS; i++) {
    121e:	3401      	adds	r4, #1
    1220:	2c04      	cmp	r4, #4
    1222:	dded      	ble.n	1200 <keypad_init+0x24>
	}
	keypad_inst->rawKeys = 0;
    1224:	4b05      	ldr	r3, [pc, #20]	; (123c <keypad_init+0x60>)
    1226:	681b      	ldr	r3, [r3, #0]
    1228:	2000      	movs	r0, #0
    122a:	2100      	movs	r1, #0
    122c:	6098      	str	r0, [r3, #8]
    122e:	60d9      	str	r1, [r3, #12]
	keypad_inst->changed = 0;
    1230:	6118      	str	r0, [r3, #16]
    1232:	6159      	str	r1, [r3, #20]
	keypad_inst->previous = 0;
    1234:	6198      	str	r0, [r3, #24]
    1236:	61d9      	str	r1, [r3, #28]
} //Keypad
    1238:	bd70      	pop	{r4, r5, r6, pc}
    123a:	46c0      	nop			; (mov r8, r8)
    123c:	20000628 	.word	0x20000628
    1240:	00002a48 	.word	0x00002a48
    1244:	00000671 	.word	0x00000671
    1248:	00000735 	.word	0x00000735

0000124c <SysTick_Handler>:
NXConfig nxconfig = {
	.dp_space = 1,
	.dp_template = NX_DPR
};

void SysTick_Handler(void) {
    124c:	b510      	push	{r4, lr}
	static unsigned int tickCountSci = 0, tickCountKeys = 0;
	tickCountSci++; tickCountKeys++;
    124e:	4a11      	ldr	r2, [pc, #68]	; (1294 <SysTick_Handler+0x48>)
    1250:	6813      	ldr	r3, [r2, #0]
    1252:	3301      	adds	r3, #1
    1254:	6013      	str	r3, [r2, #0]
    1256:	6851      	ldr	r1, [r2, #4]
    1258:	3101      	adds	r1, #1
    125a:	6051      	str	r1, [r2, #4]
	if (tickCountSci > io_devices.ssd.update_period_ticks) {
    125c:	4a0e      	ldr	r2, [pc, #56]	; (1298 <SysTick_Handler+0x4c>)
    125e:	8812      	ldrh	r2, [r2, #0]
    1260:	4293      	cmp	r3, r2
    1262:	d80a      	bhi.n	127a <SysTick_Handler+0x2e>
		tickCountSci = 0;
		SSD_updateDisp();
	}
	if (tickCountKeys > 10) {
    1264:	4b0b      	ldr	r3, [pc, #44]	; (1294 <SysTick_Handler+0x48>)
    1266:	685b      	ldr	r3, [r3, #4]
    1268:	2b0a      	cmp	r3, #10
    126a:	d80c      	bhi.n	1286 <SysTick_Handler+0x3a>
		tickCountKeys = 0;
		keypad_scan_keys();
	}
	buzzer_timer_tick();
    126c:	4b0b      	ldr	r3, [pc, #44]	; (129c <SysTick_Handler+0x50>)
    126e:	4798      	blx	r3
	systick_timer_ms++;
    1270:	4a08      	ldr	r2, [pc, #32]	; (1294 <SysTick_Handler+0x48>)
    1272:	6893      	ldr	r3, [r2, #8]
    1274:	3301      	adds	r3, #1
    1276:	6093      	str	r3, [r2, #8]
}
    1278:	bd10      	pop	{r4, pc}
		tickCountSci = 0;
    127a:	2200      	movs	r2, #0
    127c:	4b05      	ldr	r3, [pc, #20]	; (1294 <SysTick_Handler+0x48>)
    127e:	601a      	str	r2, [r3, #0]
		SSD_updateDisp();
    1280:	4b07      	ldr	r3, [pc, #28]	; (12a0 <SysTick_Handler+0x54>)
    1282:	4798      	blx	r3
    1284:	e7ee      	b.n	1264 <SysTick_Handler+0x18>
		tickCountKeys = 0;
    1286:	2200      	movs	r2, #0
    1288:	4b02      	ldr	r3, [pc, #8]	; (1294 <SysTick_Handler+0x48>)
    128a:	605a      	str	r2, [r3, #4]
		keypad_scan_keys();
    128c:	4b05      	ldr	r3, [pc, #20]	; (12a4 <SysTick_Handler+0x58>)
    128e:	4798      	blx	r3
    1290:	e7ec      	b.n	126c <SysTick_Handler+0x20>
    1292:	46c0      	nop			; (mov r8, r8)
    1294:	20000638 	.word	0x20000638
    1298:	20000fa0 	.word	0x20000fa0
    129c:	000001dd 	.word	0x000001dd
    12a0:	00001bfd 	.word	0x00001bfd
    12a4:	000010cd 	.word	0x000010cd

000012a8 <GpioInit>:
		case uimode_mainmenu:
		break;
	}
}

void GpioInit() {
    12a8:	b570      	push	{r4, r5, r6, lr}
	gpio_set_pin_dir(GPIO(PWR_LED), GPIO_DIR_OUT);
    12aa:	2201      	movs	r2, #1
    12ac:	2116      	movs	r1, #22
    12ae:	2001      	movs	r0, #1
    12b0:	4c09      	ldr	r4, [pc, #36]	; (12d8 <GpioInit+0x30>)
    12b2:	47a0      	blx	r4
	gpio_set_pin_dir(GPIO(BUSY_LED), GPIO_DIR_OUT);
    12b4:	2201      	movs	r2, #1
    12b6:	2117      	movs	r1, #23
    12b8:	2001      	movs	r0, #1
    12ba:	47a0      	blx	r4
	gpio_set_pin_drvstr(GPIO(PWR_LED), 1);
    12bc:	2201      	movs	r2, #1
    12be:	2116      	movs	r1, #22
    12c0:	2001      	movs	r0, #1
    12c2:	4d06      	ldr	r5, [pc, #24]	; (12dc <GpioInit+0x34>)
    12c4:	47a8      	blx	r5
	gpio_set_pin_drvstr(GPIO(BUSY_LED), 1);
    12c6:	2201      	movs	r2, #1
    12c8:	2117      	movs	r1, #23
    12ca:	2001      	movs	r0, #1
    12cc:	47a8      	blx	r5
	gpio_set_pin_dir(GPIO(PWR_CTRL), GPIO_DIR_OUT);
    12ce:	2201      	movs	r2, #1
    12d0:	2111      	movs	r1, #17
    12d2:	2001      	movs	r0, #1
    12d4:	47a0      	blx	r4
}
    12d6:	bd70      	pop	{r4, r5, r6, pc}
    12d8:	00000671 	.word	0x00000671
    12dc:	0000070d 	.word	0x0000070d

000012e0 <enable_pwr>:

void enable_pwr() {
    12e0:	b510      	push	{r4, lr}
	// TODO: check voltage level
	gpio_set_pin(GPIO(PWR_CTRL), 1);
    12e2:	2201      	movs	r2, #1
    12e4:	2111      	movs	r1, #17
    12e6:	2001      	movs	r0, #1
    12e8:	4b01      	ldr	r3, [pc, #4]	; (12f0 <enable_pwr+0x10>)
    12ea:	4798      	blx	r3
}
    12ec:	bd10      	pop	{r4, pc}
    12ee:	46c0      	nop			; (mov r8, r8)
    12f0:	00000625 	.word	0x00000625

000012f4 <LvPeripheralsInit>:

void LvPeripheralsInit() {
    12f4:	b510      	push	{r4, lr}
	SSD_init(&io_devices.ssd);
    12f6:	4c07      	ldr	r4, [pc, #28]	; (1314 <LvPeripheralsInit+0x20>)
    12f8:	0020      	movs	r0, r4
    12fa:	4b07      	ldr	r3, [pc, #28]	; (1318 <LvPeripheralsInit+0x24>)
    12fc:	4798      	blx	r3
	keypad_init(&io_devices.keypad);
    12fe:	0020      	movs	r0, r4
    1300:	3010      	adds	r0, #16
    1302:	4b06      	ldr	r3, [pc, #24]	; (131c <LvPeripheralsInit+0x28>)
    1304:	4798      	blx	r3
	build_keymap();
    1306:	4b06      	ldr	r3, [pc, #24]	; (1320 <LvPeripheralsInit+0x2c>)
    1308:	4798      	blx	r3
	
	buzzer_init();
    130a:	4b06      	ldr	r3, [pc, #24]	; (1324 <LvPeripheralsInit+0x30>)
    130c:	4798      	blx	r3
	fplights_init();
    130e:	4b06      	ldr	r3, [pc, #24]	; (1328 <LvPeripheralsInit+0x34>)
    1310:	4798      	blx	r3
}
    1312:	bd10      	pop	{r4, pc}
    1314:	20000fa0 	.word	0x20000fa0
    1318:	00001dd9 	.word	0x00001dd9
    131c:	000011dd 	.word	0x000011dd
    1320:	00000ae5 	.word	0x00000ae5
    1324:	00000119 	.word	0x00000119
    1328:	000007cd 	.word	0x000007cd

0000132c <HvPeripheralsInit>:

void HvPeripheralsInit() {
    132c:	b510      	push	{r4, lr}
	enable_pwr();
    132e:	4b04      	ldr	r3, [pc, #16]	; (1340 <HvPeripheralsInit+0x14>)
    1330:	4798      	blx	r3
	
	NeoPixel_init();
    1332:	4b04      	ldr	r3, [pc, #16]	; (1344 <HvPeripheralsInit+0x18>)
    1334:	4798      	blx	r3
	NXDisplay_init(&nxconfig);
    1336:	4804      	ldr	r0, [pc, #16]	; (1348 <HvPeripheralsInit+0x1c>)
    1338:	4b04      	ldr	r3, [pc, #16]	; (134c <HvPeripheralsInit+0x20>)
    133a:	4798      	blx	r3
}
    133c:	bd10      	pop	{r4, pc}
    133e:	46c0      	nop			; (mov r8, r8)
    1340:	000012e1 	.word	0x000012e1
    1344:	000017b5 	.word	0x000017b5
    1348:	20000140 	.word	0x20000140
    134c:	0000194d 	.word	0x0000194d

00001350 <normal_keypad_lighting>:


const color_rgb colors[] = {{32, 32, 32}, {128, 128, 128}, {255, 255, 255}, {0, 64, 200}, {0, 220, 0}, {255, 0, 0}, {190, 0, 128}};

void normal_keypad_lighting() {
    1350:	b530      	push	{r4, r5, lr}
    1352:	b083      	sub	sp, #12
	for (int i = 0; i < KEYPAD_GRID_SIZE; i++) {
    1354:	2400      	movs	r4, #0
    1356:	e04b      	b.n	13f0 <normal_keypad_lighting+0xa0>
			if (currentkey->special_color) {
				// If the key has special color rules, apply that instead
				c = currentkey->special_color(&calc_state, &sys_state);
			} else {
				// Lighting depends on modifiers and command availability
				if (sys_state.sys.modifiers.shift && sys_state.sys.modifiers.hyp) {
    1358:	4b5d      	ldr	r3, [pc, #372]	; (14d0 <normal_keypad_lighting+0x180>)
    135a:	7a5b      	ldrb	r3, [r3, #9]
    135c:	2b00      	cmp	r3, #0
    135e:	d021      	beq.n	13a4 <normal_keypad_lighting+0x54>
    1360:	4a5b      	ldr	r2, [pc, #364]	; (14d0 <normal_keypad_lighting+0x180>)
    1362:	7a92      	ldrb	r2, [r2, #10]
    1364:	2a00      	cmp	r2, #0
    1366:	d01d      	beq.n	13a4 <normal_keypad_lighting+0x54>
					if (currentkey->shift_hyp_cmd && currentkey->shift_hyp_cmd->available != NULL) {
    1368:	00e3      	lsls	r3, r4, #3
    136a:	1b1b      	subs	r3, r3, r4
    136c:	009a      	lsls	r2, r3, #2
    136e:	4b59      	ldr	r3, [pc, #356]	; (14d4 <normal_keypad_lighting+0x184>)
    1370:	189b      	adds	r3, r3, r2
    1372:	691b      	ldr	r3, [r3, #16]
    1374:	2b00      	cmp	r3, #0
    1376:	d007      	beq.n	1388 <normal_keypad_lighting+0x38>
    1378:	685b      	ldr	r3, [r3, #4]
    137a:	2b00      	cmp	r3, #0
    137c:	d004      	beq.n	1388 <normal_keypad_lighting+0x38>
						available = currentkey->shift_hyp_cmd->available(&calc_state, &sys_state);
    137e:	4954      	ldr	r1, [pc, #336]	; (14d0 <normal_keypad_lighting+0x180>)
    1380:	3104      	adds	r1, #4
    1382:	4855      	ldr	r0, [pc, #340]	; (14d8 <normal_keypad_lighting+0x188>)
    1384:	3010      	adds	r0, #16
    1386:	4798      	blx	r3
					}
					c = available ? color_shift_hyp : color_shift_hyp_unavail;
    1388:	2800      	cmp	r0, #0
    138a:	d005      	beq.n	1398 <normal_keypad_lighting+0x48>
    138c:	2203      	movs	r2, #3
    138e:	4953      	ldr	r1, [pc, #332]	; (14dc <normal_keypad_lighting+0x18c>)
    1390:	a801      	add	r0, sp, #4
    1392:	4b53      	ldr	r3, [pc, #332]	; (14e0 <normal_keypad_lighting+0x190>)
    1394:	4798      	blx	r3
    1396:	e01e      	b.n	13d6 <normal_keypad_lighting+0x86>
    1398:	2203      	movs	r2, #3
    139a:	4952      	ldr	r1, [pc, #328]	; (14e4 <normal_keypad_lighting+0x194>)
    139c:	a801      	add	r0, sp, #4
    139e:	4b50      	ldr	r3, [pc, #320]	; (14e0 <normal_keypad_lighting+0x190>)
    13a0:	4798      	blx	r3
    13a2:	e018      	b.n	13d6 <normal_keypad_lighting+0x86>
				} else if (sys_state.sys.modifiers.shift) {
    13a4:	2b00      	cmp	r3, #0
    13a6:	d04a      	beq.n	143e <normal_keypad_lighting+0xee>
					if (currentkey->shift_cmd && currentkey->shift_cmd->available != NULL) {
    13a8:	00e3      	lsls	r3, r4, #3
    13aa:	1b1b      	subs	r3, r3, r4
    13ac:	009a      	lsls	r2, r3, #2
    13ae:	4b49      	ldr	r3, [pc, #292]	; (14d4 <normal_keypad_lighting+0x184>)
    13b0:	189b      	adds	r3, r3, r2
    13b2:	689b      	ldr	r3, [r3, #8]
    13b4:	2b00      	cmp	r3, #0
    13b6:	d007      	beq.n	13c8 <normal_keypad_lighting+0x78>
    13b8:	685b      	ldr	r3, [r3, #4]
    13ba:	2b00      	cmp	r3, #0
    13bc:	d004      	beq.n	13c8 <normal_keypad_lighting+0x78>
						available = currentkey->shift_cmd->available(&calc_state, &sys_state);
    13be:	4944      	ldr	r1, [pc, #272]	; (14d0 <normal_keypad_lighting+0x180>)
    13c0:	3104      	adds	r1, #4
    13c2:	4845      	ldr	r0, [pc, #276]	; (14d8 <normal_keypad_lighting+0x188>)
    13c4:	3010      	adds	r0, #16
    13c6:	4798      	blx	r3
					}
					c = available ? color_shift : color_shift_unavail;
    13c8:	2800      	cmp	r0, #0
    13ca:	d032      	beq.n	1432 <normal_keypad_lighting+0xe2>
    13cc:	2203      	movs	r2, #3
    13ce:	4946      	ldr	r1, [pc, #280]	; (14e8 <normal_keypad_lighting+0x198>)
    13d0:	a801      	add	r0, sp, #4
    13d2:	4b43      	ldr	r3, [pc, #268]	; (14e0 <normal_keypad_lighting+0x190>)
    13d4:	4798      	blx	r3
						available = currentkey->base_cmd->available(&calc_state, &sys_state);
					}
					c = available ? color_normal : color_normal_unavail;
				}
			}
			NeoPixel_set_pixel(currentkey->pixel_idx, c.r, c.g, c.b);
    13d6:	a901      	add	r1, sp, #4
    13d8:	788b      	ldrb	r3, [r1, #2]
    13da:	784a      	ldrb	r2, [r1, #1]
    13dc:	7809      	ldrb	r1, [r1, #0]
    13de:	00e0      	lsls	r0, r4, #3
    13e0:	1b00      	subs	r0, r0, r4
    13e2:	0085      	lsls	r5, r0, #2
    13e4:	483b      	ldr	r0, [pc, #236]	; (14d4 <normal_keypad_lighting+0x184>)
    13e6:	1940      	adds	r0, r0, r5
    13e8:	6940      	ldr	r0, [r0, #20]
    13ea:	4d40      	ldr	r5, [pc, #256]	; (14ec <normal_keypad_lighting+0x19c>)
    13ec:	47a8      	blx	r5
	for (int i = 0; i < KEYPAD_GRID_SIZE; i++) {
    13ee:	3401      	adds	r4, #1
    13f0:	2c27      	cmp	r4, #39	; 0x27
    13f2:	dc64      	bgt.n	14be <normal_keypad_lighting+0x16e>
		if (currentkey->key_type != 0) {
    13f4:	00e3      	lsls	r3, r4, #3
    13f6:	1b1b      	subs	r3, r3, r4
    13f8:	009a      	lsls	r2, r3, #2
    13fa:	4b36      	ldr	r3, [pc, #216]	; (14d4 <normal_keypad_lighting+0x184>)
    13fc:	5cd0      	ldrb	r0, [r2, r3]
    13fe:	2800      	cmp	r0, #0
    1400:	d0f5      	beq.n	13ee <normal_keypad_lighting+0x9e>
			int available = (currentkey->key_type & KEY_TYPE_MOD_MASK) ? 1 : 0;
    1402:	230f      	movs	r3, #15
    1404:	4398      	bics	r0, r3
    1406:	1e43      	subs	r3, r0, #1
    1408:	4198      	sbcs	r0, r3
    140a:	b2c0      	uxtb	r0, r0
			if (currentkey->special_color) {
    140c:	4b31      	ldr	r3, [pc, #196]	; (14d4 <normal_keypad_lighting+0x184>)
    140e:	189b      	adds	r3, r3, r2
    1410:	699b      	ldr	r3, [r3, #24]
    1412:	2b00      	cmp	r3, #0
    1414:	d0a0      	beq.n	1358 <normal_keypad_lighting+0x8>
				c = currentkey->special_color(&calc_state, &sys_state);
    1416:	492e      	ldr	r1, [pc, #184]	; (14d0 <normal_keypad_lighting+0x180>)
    1418:	3104      	adds	r1, #4
    141a:	482f      	ldr	r0, [pc, #188]	; (14d8 <normal_keypad_lighting+0x188>)
    141c:	3010      	adds	r0, #16
    141e:	4798      	blx	r3
    1420:	ab01      	add	r3, sp, #4
    1422:	7018      	strb	r0, [r3, #0]
    1424:	0402      	lsls	r2, r0, #16
    1426:	0e12      	lsrs	r2, r2, #24
    1428:	705a      	strb	r2, [r3, #1]
    142a:	0200      	lsls	r0, r0, #8
    142c:	0e00      	lsrs	r0, r0, #24
    142e:	7098      	strb	r0, [r3, #2]
    1430:	e7d1      	b.n	13d6 <normal_keypad_lighting+0x86>
					c = available ? color_shift : color_shift_unavail;
    1432:	2203      	movs	r2, #3
    1434:	492e      	ldr	r1, [pc, #184]	; (14f0 <normal_keypad_lighting+0x1a0>)
    1436:	a801      	add	r0, sp, #4
    1438:	4b29      	ldr	r3, [pc, #164]	; (14e0 <normal_keypad_lighting+0x190>)
    143a:	4798      	blx	r3
    143c:	e7cb      	b.n	13d6 <normal_keypad_lighting+0x86>
				} else if (sys_state.sys.modifiers.hyp) {
    143e:	4b24      	ldr	r3, [pc, #144]	; (14d0 <normal_keypad_lighting+0x180>)
    1440:	7a9b      	ldrb	r3, [r3, #10]
    1442:	2b00      	cmp	r3, #0
    1444:	d01d      	beq.n	1482 <normal_keypad_lighting+0x132>
					if (currentkey->hyp_cmd && currentkey->hyp_cmd->available != NULL) {
    1446:	00e3      	lsls	r3, r4, #3
    1448:	1b1b      	subs	r3, r3, r4
    144a:	009a      	lsls	r2, r3, #2
    144c:	4b21      	ldr	r3, [pc, #132]	; (14d4 <normal_keypad_lighting+0x184>)
    144e:	189b      	adds	r3, r3, r2
    1450:	68db      	ldr	r3, [r3, #12]
    1452:	2b00      	cmp	r3, #0
    1454:	d007      	beq.n	1466 <normal_keypad_lighting+0x116>
    1456:	685b      	ldr	r3, [r3, #4]
    1458:	2b00      	cmp	r3, #0
    145a:	d004      	beq.n	1466 <normal_keypad_lighting+0x116>
						available = currentkey->hyp_cmd->available(&calc_state, &sys_state);
    145c:	491c      	ldr	r1, [pc, #112]	; (14d0 <normal_keypad_lighting+0x180>)
    145e:	3104      	adds	r1, #4
    1460:	481d      	ldr	r0, [pc, #116]	; (14d8 <normal_keypad_lighting+0x188>)
    1462:	3010      	adds	r0, #16
    1464:	4798      	blx	r3
					c = available ? color_hyp : color_hyp_unavail;
    1466:	2800      	cmp	r0, #0
    1468:	d005      	beq.n	1476 <normal_keypad_lighting+0x126>
    146a:	2203      	movs	r2, #3
    146c:	4921      	ldr	r1, [pc, #132]	; (14f4 <normal_keypad_lighting+0x1a4>)
    146e:	a801      	add	r0, sp, #4
    1470:	4b1b      	ldr	r3, [pc, #108]	; (14e0 <normal_keypad_lighting+0x190>)
    1472:	4798      	blx	r3
    1474:	e7af      	b.n	13d6 <normal_keypad_lighting+0x86>
    1476:	2203      	movs	r2, #3
    1478:	491f      	ldr	r1, [pc, #124]	; (14f8 <normal_keypad_lighting+0x1a8>)
    147a:	a801      	add	r0, sp, #4
    147c:	4b18      	ldr	r3, [pc, #96]	; (14e0 <normal_keypad_lighting+0x190>)
    147e:	4798      	blx	r3
    1480:	e7a9      	b.n	13d6 <normal_keypad_lighting+0x86>
					if (currentkey->base_cmd && currentkey->base_cmd->available != NULL) {
    1482:	00e3      	lsls	r3, r4, #3
    1484:	1b1b      	subs	r3, r3, r4
    1486:	009a      	lsls	r2, r3, #2
    1488:	4b12      	ldr	r3, [pc, #72]	; (14d4 <normal_keypad_lighting+0x184>)
    148a:	189b      	adds	r3, r3, r2
    148c:	685b      	ldr	r3, [r3, #4]
    148e:	2b00      	cmp	r3, #0
    1490:	d007      	beq.n	14a2 <normal_keypad_lighting+0x152>
    1492:	685b      	ldr	r3, [r3, #4]
    1494:	2b00      	cmp	r3, #0
    1496:	d004      	beq.n	14a2 <normal_keypad_lighting+0x152>
						available = currentkey->base_cmd->available(&calc_state, &sys_state);
    1498:	490d      	ldr	r1, [pc, #52]	; (14d0 <normal_keypad_lighting+0x180>)
    149a:	3104      	adds	r1, #4
    149c:	480e      	ldr	r0, [pc, #56]	; (14d8 <normal_keypad_lighting+0x188>)
    149e:	3010      	adds	r0, #16
    14a0:	4798      	blx	r3
					c = available ? color_normal : color_normal_unavail;
    14a2:	2800      	cmp	r0, #0
    14a4:	d005      	beq.n	14b2 <normal_keypad_lighting+0x162>
    14a6:	2203      	movs	r2, #3
    14a8:	4914      	ldr	r1, [pc, #80]	; (14fc <normal_keypad_lighting+0x1ac>)
    14aa:	a801      	add	r0, sp, #4
    14ac:	4b0c      	ldr	r3, [pc, #48]	; (14e0 <normal_keypad_lighting+0x190>)
    14ae:	4798      	blx	r3
    14b0:	e791      	b.n	13d6 <normal_keypad_lighting+0x86>
    14b2:	2203      	movs	r2, #3
    14b4:	4912      	ldr	r1, [pc, #72]	; (1500 <normal_keypad_lighting+0x1b0>)
    14b6:	a801      	add	r0, sp, #4
    14b8:	4b09      	ldr	r3, [pc, #36]	; (14e0 <normal_keypad_lighting+0x190>)
    14ba:	4798      	blx	r3
    14bc:	e78b      	b.n	13d6 <normal_keypad_lighting+0x86>
		}
	}
	NeoPixel_update();
    14be:	4b11      	ldr	r3, [pc, #68]	; (1504 <normal_keypad_lighting+0x1b4>)
    14c0:	4798      	blx	r3
	fplights_show(&sys_state);
    14c2:	4803      	ldr	r0, [pc, #12]	; (14d0 <normal_keypad_lighting+0x180>)
    14c4:	3004      	adds	r0, #4
    14c6:	4b10      	ldr	r3, [pc, #64]	; (1508 <normal_keypad_lighting+0x1b8>)
    14c8:	4798      	blx	r3
}
    14ca:	b003      	add	sp, #12
    14cc:	bd30      	pop	{r4, r5, pc}
    14ce:	46c0      	nop			; (mov r8, r8)
    14d0:	20000140 	.word	0x20000140
    14d4:	20000b0c 	.word	0x20000b0c
    14d8:	20000638 	.word	0x20000638
    14dc:	00002920 	.word	0x00002920
    14e0:	00002685 	.word	0x00002685
    14e4:	00002910 	.word	0x00002910
    14e8:	00002928 	.word	0x00002928
    14ec:	00001781 	.word	0x00001781
    14f0:	00002918 	.word	0x00002918
    14f4:	00002924 	.word	0x00002924
    14f8:	00002914 	.word	0x00002914
    14fc:	0000292c 	.word	0x0000292c
    1500:	0000291c 	.word	0x0000291c
    1504:	00001871 	.word	0x00001871
    1508:	0000081d 	.word	0x0000081d

0000150c <process_keypress>:

void process_modifiers() {
	
}

cmd_generic *process_keypress() {
    150c:	b570      	push	{r4, r5, r6, lr}
	uint64_t keys = io_devices.keypad.changed;
    150e:	4b40      	ldr	r3, [pc, #256]	; (1610 <process_keypress+0x104>)
    1510:	6a18      	ldr	r0, [r3, #32]
    1512:	6a59      	ldr	r1, [r3, #36]	; 0x24
	// clear the pending key press
	io_devices.keypad.changed = 0ULL;
    1514:	2400      	movs	r4, #0
    1516:	2500      	movs	r5, #0
    1518:	621c      	str	r4, [r3, #32]
    151a:	625d      	str	r5, [r3, #36]	; 0x24
	
	for (int i = 0; i < KEYPAD_GRID_SIZE; i++) {
    151c:	2300      	movs	r3, #0
    151e:	e04c      	b.n	15ba <process_keypress+0xae>
		// TODO: special rules?
		if (keys & (1ULL << i)) {
    1520:	2220      	movs	r2, #32
    1522:	1ad2      	subs	r2, r2, r3
    1524:	000c      	movs	r4, r1
    1526:	4094      	lsls	r4, r2
    1528:	0002      	movs	r2, r0
    152a:	40da      	lsrs	r2, r3
    152c:	4322      	orrs	r2, r4
    152e:	e04d      	b.n	15cc <process_keypress+0xc0>
			if (currentkey->key_type != 0) {
				cmd_generic *cmd = NULL;
				uint8_t modifier = (currentkey->key_type & KEY_TYPE_MOD_MASK);
				if (modifier) {
					// Set modifiers if button pressed. If modifier is already active, let it be changed to 'held'
					if (modifier == KEY_TYPE_SHIFT && !sys_state.sys.modifiers.shift) {
    1530:	4938      	ldr	r1, [pc, #224]	; (1614 <process_keypress+0x108>)
    1532:	7a49      	ldrb	r1, [r1, #9]
    1534:	2900      	cmp	r1, #0
    1536:	d157      	bne.n	15e8 <process_keypress+0xdc>
						sys_state.sys.modifiers.shift = mod_active;
    1538:	3a0f      	subs	r2, #15
    153a:	4b36      	ldr	r3, [pc, #216]	; (1614 <process_keypress+0x108>)
    153c:	725a      	strb	r2, [r3, #9]
						BUZZER_TONE_GOOD();
    153e:	21e1      	movs	r1, #225	; 0xe1
    1540:	00c9      	lsls	r1, r1, #3
    1542:	200c      	movs	r0, #12
    1544:	4b34      	ldr	r3, [pc, #208]	; (1618 <process_keypress+0x10c>)
    1546:	4798      	blx	r3
						return NULL; // No command
    1548:	2000      	movs	r0, #0
    154a:	e05f      	b.n	160c <process_keypress+0x100>
					}
					if (modifier == KEY_TYPE_HYP && !sys_state.sys.modifiers.hyp) {
    154c:	4a31      	ldr	r2, [pc, #196]	; (1614 <process_keypress+0x108>)
    154e:	7a92      	ldrb	r2, [r2, #10]
    1550:	2a00      	cmp	r2, #0
    1552:	d14b      	bne.n	15ec <process_keypress+0xe0>
						sys_state.sys.modifiers.hyp = mod_active;
    1554:	3201      	adds	r2, #1
    1556:	4b2f      	ldr	r3, [pc, #188]	; (1614 <process_keypress+0x108>)
    1558:	729a      	strb	r2, [r3, #10]
						BUZZER_TONE_GOOD();
    155a:	21e1      	movs	r1, #225	; 0xe1
    155c:	00c9      	lsls	r1, r1, #3
    155e:	200c      	movs	r0, #12
    1560:	4b2d      	ldr	r3, [pc, #180]	; (1618 <process_keypress+0x10c>)
    1562:	4798      	blx	r3
						return NULL; // No command
    1564:	2000      	movs	r0, #0
    1566:	e051      	b.n	160c <process_keypress+0x100>
				}
				
				// find the command based on the modifiers
				if (sys_state.sys.modifiers.shift && sys_state.sys.modifiers.hyp) {
					cmd = currentkey->shift_hyp_cmd;
				} else if (sys_state.sys.modifiers.shift) {
    1568:	2a00      	cmp	r2, #0
    156a:	d00f      	beq.n	158c <process_keypress+0x80>
					cmd = currentkey->shift_cmd;
    156c:	00d9      	lsls	r1, r3, #3
    156e:	1acb      	subs	r3, r1, r3
    1570:	0099      	lsls	r1, r3, #2
    1572:	4b2a      	ldr	r3, [pc, #168]	; (161c <process_keypress+0x110>)
    1574:	185b      	adds	r3, r3, r1
    1576:	6898      	ldr	r0, [r3, #8]
					cmd = currentkey->hyp_cmd;
				} else if (currentkey->base_cmd) {
					cmd = currentkey->base_cmd;
				}
				// Set any modifiers to 'held'
				if (sys_state.sys.modifiers.shift == mod_active) {
    1578:	2a01      	cmp	r2, #1
    157a:	d019      	beq.n	15b0 <process_keypress+0xa4>
					sys_state.sys.modifiers.shift = mod_held;
				}
				if (sys_state.sys.modifiers.hyp == mod_active) {
    157c:	4b25      	ldr	r3, [pc, #148]	; (1614 <process_keypress+0x108>)
    157e:	7a9b      	ldrb	r3, [r3, #10]
    1580:	2b01      	cmp	r3, #1
    1582:	d143      	bne.n	160c <process_keypress+0x100>
					sys_state.sys.modifiers.hyp = mod_held;
    1584:	2202      	movs	r2, #2
    1586:	4b23      	ldr	r3, [pc, #140]	; (1614 <process_keypress+0x108>)
    1588:	729a      	strb	r2, [r3, #10]
    158a:	e03f      	b.n	160c <process_keypress+0x100>
				} else if (sys_state.sys.modifiers.hyp) {
    158c:	4921      	ldr	r1, [pc, #132]	; (1614 <process_keypress+0x108>)
    158e:	7a89      	ldrb	r1, [r1, #10]
    1590:	2900      	cmp	r1, #0
    1592:	d006      	beq.n	15a2 <process_keypress+0x96>
					cmd = currentkey->hyp_cmd;
    1594:	00d9      	lsls	r1, r3, #3
    1596:	1acb      	subs	r3, r1, r3
    1598:	0099      	lsls	r1, r3, #2
    159a:	4b20      	ldr	r3, [pc, #128]	; (161c <process_keypress+0x110>)
    159c:	185b      	adds	r3, r3, r1
    159e:	68d8      	ldr	r0, [r3, #12]
    15a0:	e7ea      	b.n	1578 <process_keypress+0x6c>
				} else if (currentkey->base_cmd) {
    15a2:	00d9      	lsls	r1, r3, #3
    15a4:	1acb      	subs	r3, r1, r3
    15a6:	0099      	lsls	r1, r3, #2
    15a8:	4b1c      	ldr	r3, [pc, #112]	; (161c <process_keypress+0x110>)
    15aa:	185b      	adds	r3, r3, r1
    15ac:	6858      	ldr	r0, [r3, #4]
    15ae:	e7e3      	b.n	1578 <process_keypress+0x6c>
					sys_state.sys.modifiers.shift = mod_held;
    15b0:	3201      	adds	r2, #1
    15b2:	4b18      	ldr	r3, [pc, #96]	; (1614 <process_keypress+0x108>)
    15b4:	725a      	strb	r2, [r3, #9]
    15b6:	e7e1      	b.n	157c <process_keypress+0x70>
	for (int i = 0; i < KEYPAD_GRID_SIZE; i++) {
    15b8:	3301      	adds	r3, #1
    15ba:	2b27      	cmp	r3, #39	; 0x27
    15bc:	dc25      	bgt.n	160a <process_keypress+0xfe>
		if (keys & (1ULL << i)) {
    15be:	2220      	movs	r2, #32
    15c0:	4252      	negs	r2, r2
    15c2:	189a      	adds	r2, r3, r2
    15c4:	d4ac      	bmi.n	1520 <process_keypress+0x14>
    15c6:	000c      	movs	r4, r1
    15c8:	40d4      	lsrs	r4, r2
    15ca:	0022      	movs	r2, r4
    15cc:	07d2      	lsls	r2, r2, #31
    15ce:	d5f3      	bpl.n	15b8 <process_keypress+0xac>
			if (currentkey->key_type != 0) {
    15d0:	00da      	lsls	r2, r3, #3
    15d2:	1ad2      	subs	r2, r2, r3
    15d4:	0094      	lsls	r4, r2, #2
    15d6:	4a11      	ldr	r2, [pc, #68]	; (161c <process_keypress+0x110>)
    15d8:	5ca2      	ldrb	r2, [r4, r2]
    15da:	2a00      	cmp	r2, #0
    15dc:	d0ec      	beq.n	15b8 <process_keypress+0xac>
				uint8_t modifier = (currentkey->key_type & KEY_TYPE_MOD_MASK);
    15de:	210f      	movs	r1, #15
    15e0:	438a      	bics	r2, r1
				if (modifier) {
    15e2:	d003      	beq.n	15ec <process_keypress+0xe0>
					if (modifier == KEY_TYPE_SHIFT && !sys_state.sys.modifiers.shift) {
    15e4:	2a10      	cmp	r2, #16
    15e6:	d0a3      	beq.n	1530 <process_keypress+0x24>
					if (modifier == KEY_TYPE_HYP && !sys_state.sys.modifiers.hyp) {
    15e8:	2a20      	cmp	r2, #32
    15ea:	d0af      	beq.n	154c <process_keypress+0x40>
				if (sys_state.sys.modifiers.shift && sys_state.sys.modifiers.hyp) {
    15ec:	4a09      	ldr	r2, [pc, #36]	; (1614 <process_keypress+0x108>)
    15ee:	7a52      	ldrb	r2, [r2, #9]
    15f0:	2a00      	cmp	r2, #0
    15f2:	d0b9      	beq.n	1568 <process_keypress+0x5c>
    15f4:	4907      	ldr	r1, [pc, #28]	; (1614 <process_keypress+0x108>)
    15f6:	7a89      	ldrb	r1, [r1, #10]
    15f8:	2900      	cmp	r1, #0
    15fa:	d0b5      	beq.n	1568 <process_keypress+0x5c>
					cmd = currentkey->shift_hyp_cmd;
    15fc:	00d9      	lsls	r1, r3, #3
    15fe:	1acb      	subs	r3, r1, r3
    1600:	0099      	lsls	r1, r3, #2
    1602:	4b06      	ldr	r3, [pc, #24]	; (161c <process_keypress+0x110>)
    1604:	185b      	adds	r3, r3, r1
    1606:	6918      	ldr	r0, [r3, #16]
    1608:	e7b6      	b.n	1578 <process_keypress+0x6c>
				}
				return cmd;
			}
		}
	}
	return NULL;
    160a:	2000      	movs	r0, #0
}
    160c:	bd70      	pop	{r4, r5, r6, pc}
    160e:	46c0      	nop			; (mov r8, r8)
    1610:	20000fa0 	.word	0x20000fa0
    1614:	20000140 	.word	0x20000140
    1618:	00000199 	.word	0x00000199
    161c:	20000b0c 	.word	0x20000b0c

00001620 <exec_cmd>:

void exec_cmd(const cmd_generic *cmd) {
    1620:	b530      	push	{r4, r5, lr}
    1622:	b085      	sub	sp, #20
    1624:	0004      	movs	r4, r0
	if (cmd->available && cmd->available(&calc_state, &sys_state)) {
    1626:	6843      	ldr	r3, [r0, #4]
    1628:	2b00      	cmp	r3, #0
    162a:	d006      	beq.n	163a <exec_cmd+0x1a>
    162c:	4917      	ldr	r1, [pc, #92]	; (168c <exec_cmd+0x6c>)
    162e:	3104      	adds	r1, #4
    1630:	4817      	ldr	r0, [pc, #92]	; (1690 <exec_cmd+0x70>)
    1632:	3010      	adds	r0, #16
    1634:	4798      	blx	r3
    1636:	2800      	cmp	r0, #0
    1638:	d106      	bne.n	1648 <exec_cmd+0x28>
			char buf[10] = " -0.00000";
			buf[2] = '0'+cmd_num->number;
			NXDisplay_dispStr(buf);
		}
	} else {
		BUZZER_TONE_BAD();
    163a:	2196      	movs	r1, #150	; 0x96
    163c:	0089      	lsls	r1, r1, #2
    163e:	2050      	movs	r0, #80	; 0x50
    1640:	4b14      	ldr	r3, [pc, #80]	; (1694 <exec_cmd+0x74>)
    1642:	4798      	blx	r3
		// TODO: unavailable command pressed
	}
}
    1644:	b005      	add	sp, #20
    1646:	bd30      	pop	{r4, r5, pc}
		BUZZER_TONE_GOOD();
    1648:	21e1      	movs	r1, #225	; 0xe1
    164a:	00c9      	lsls	r1, r1, #3
    164c:	200c      	movs	r0, #12
    164e:	4b11      	ldr	r3, [pc, #68]	; (1694 <exec_cmd+0x74>)
    1650:	4798      	blx	r3
		if ((cmd->cmd_type & CMD_TYPE_MASK) == CMD_TYPE_OP) {
    1652:	7823      	ldrb	r3, [r4, #0]
    1654:	220f      	movs	r2, #15
    1656:	4393      	bics	r3, r2
    1658:	2b10      	cmp	r3, #16
    165a:	d010      	beq.n	167e <exec_cmd+0x5e>
		} else if ((cmd->cmd_type & CMD_TYPE_MASK) == CMD_TYPE_MENU) {
    165c:	2b20      	cmp	r3, #32
    165e:	d0f1      	beq.n	1644 <exec_cmd+0x24>
		} else if ((cmd->cmd_type & CMD_TYPE_MASK) == CMD_TYPE_NUM) {
    1660:	2b30      	cmp	r3, #48	; 0x30
    1662:	d1ef      	bne.n	1644 <exec_cmd+0x24>
			char buf[10] = " -0.00000";
    1664:	a801      	add	r0, sp, #4
    1666:	4b0c      	ldr	r3, [pc, #48]	; (1698 <exec_cmd+0x78>)
    1668:	0002      	movs	r2, r0
    166a:	cb22      	ldmia	r3!, {r1, r5}
    166c:	c222      	stmia	r2!, {r1, r5}
    166e:	881b      	ldrh	r3, [r3, #0]
    1670:	8013      	strh	r3, [r2, #0]
			buf[2] = '0'+cmd_num->number;
    1672:	68a3      	ldr	r3, [r4, #8]
    1674:	3330      	adds	r3, #48	; 0x30
    1676:	7083      	strb	r3, [r0, #2]
			NXDisplay_dispStr(buf);
    1678:	4b08      	ldr	r3, [pc, #32]	; (169c <exec_cmd+0x7c>)
    167a:	4798      	blx	r3
    167c:	e7e2      	b.n	1644 <exec_cmd+0x24>
			op->op_func(&calc_state, &sys_state);
    167e:	68e3      	ldr	r3, [r4, #12]
    1680:	4902      	ldr	r1, [pc, #8]	; (168c <exec_cmd+0x6c>)
    1682:	3104      	adds	r1, #4
    1684:	4802      	ldr	r0, [pc, #8]	; (1690 <exec_cmd+0x70>)
    1686:	3010      	adds	r0, #16
    1688:	4798      	blx	r3
    168a:	e7db      	b.n	1644 <exec_cmd+0x24>
    168c:	20000140 	.word	0x20000140
    1690:	20000638 	.word	0x20000638
    1694:	00000199 	.word	0x00000199
    1698:	00002ab0 	.word	0x00002ab0
    169c:	00001995 	.word	0x00001995

000016a0 <main>:

int main(void) {
    16a0:	b570      	push	{r4, r5, r6, lr}
    GpioInit();
    16a2:	4b2a      	ldr	r3, [pc, #168]	; (174c <main+0xac>)
    16a4:	4798      	blx	r3
	gpio_set_pin(GPIO(PWR_LED), 1);
    16a6:	2201      	movs	r2, #1
    16a8:	2116      	movs	r1, #22
    16aa:	2001      	movs	r0, #1
    16ac:	4c28      	ldr	r4, [pc, #160]	; (1750 <main+0xb0>)
    16ae:	47a0      	blx	r4
	gpio_set_pin(GPIO(BUSY_LED), 1);
    16b0:	2201      	movs	r2, #1
    16b2:	2117      	movs	r1, #23
    16b4:	2001      	movs	r0, #1
    16b6:	47a0      	blx	r4
	ClocksInit();
    16b8:	4b26      	ldr	r3, [pc, #152]	; (1754 <main+0xb4>)
    16ba:	4798      	blx	r3

	LvPeripheralsInit();
    16bc:	4b26      	ldr	r3, [pc, #152]	; (1758 <main+0xb8>)
    16be:	4798      	blx	r3
	HvPeripheralsInit();
    16c0:	4b26      	ldr	r3, [pc, #152]	; (175c <main+0xbc>)
    16c2:	4798      	blx	r3
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    16c4:	4a26      	ldr	r2, [pc, #152]	; (1760 <main+0xc0>)
    16c6:	4b27      	ldr	r3, [pc, #156]	; (1764 <main+0xc4>)
    16c8:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    16ca:	4827      	ldr	r0, [pc, #156]	; (1768 <main+0xc8>)
    16cc:	6a03      	ldr	r3, [r0, #32]
    16ce:	021b      	lsls	r3, r3, #8
    16d0:	0a1b      	lsrs	r3, r3, #8
    16d2:	21c0      	movs	r1, #192	; 0xc0
    16d4:	0609      	lsls	r1, r1, #24
    16d6:	430b      	orrs	r3, r1
    16d8:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    16da:	2300      	movs	r3, #0
    16dc:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    16de:	3307      	adds	r3, #7
    16e0:	6013      	str	r3, [r2, #0]
	//enable_pwr();
	//NeoPixel_init();

	SysTick_Config(4800ul);
	gpio_set_pin(GPIO(BUSY_LED), 0);
    16e2:	2200      	movs	r2, #0
    16e4:	2117      	movs	r1, #23
    16e6:	2001      	movs	r0, #1
    16e8:	47a0      	blx	r4
    16ea:	e015      	b.n	1718 <main+0x78>

	while (1) {
		// Clear modifier keys if needed
		if (sys_state.sys.modifiers.shift == mod_held && !(io_devices.keypad.rawKeys & KEY_MOD_SHIFT_IDX)) {
    16ec:	4b1f      	ldr	r3, [pc, #124]	; (176c <main+0xcc>)
    16ee:	699a      	ldr	r2, [r3, #24]
    16f0:	69db      	ldr	r3, [r3, #28]
    16f2:	2380      	movs	r3, #128	; 0x80
    16f4:	009b      	lsls	r3, r3, #2
    16f6:	4213      	tst	r3, r2
    16f8:	d112      	bne.n	1720 <main+0x80>
			 sys_state.sys.modifiers.shift = mod_inactive;
    16fa:	2200      	movs	r2, #0
    16fc:	4b1c      	ldr	r3, [pc, #112]	; (1770 <main+0xd0>)
    16fe:	725a      	strb	r2, [r3, #9]
    1700:	e00e      	b.n	1720 <main+0x80>
		}
		if (sys_state.sys.modifiers.hyp == mod_held && !(io_devices.keypad.rawKeys & KEY_MOD_HYP_IDX)) {
    1702:	4b1a      	ldr	r3, [pc, #104]	; (176c <main+0xcc>)
    1704:	699a      	ldr	r2, [r3, #24]
    1706:	69db      	ldr	r3, [r3, #28]
    1708:	071b      	lsls	r3, r3, #28
    170a:	d40d      	bmi.n	1728 <main+0x88>
			 sys_state.sys.modifiers.hyp = mod_inactive;
    170c:	2200      	movs	r2, #0
    170e:	4b18      	ldr	r3, [pc, #96]	; (1770 <main+0xd0>)
    1710:	729a      	strb	r2, [r3, #10]
    1712:	e009      	b.n	1728 <main+0x88>
			gpio_set_pin(GPIO(BUSY_LED), 1);
			exec_cmd(pressed_cmd);
			gpio_set_pin(GPIO(BUSY_LED), 0);
		}
		
		normal_keypad_lighting();
    1714:	4b17      	ldr	r3, [pc, #92]	; (1774 <main+0xd4>)
    1716:	4798      	blx	r3
		if (sys_state.sys.modifiers.shift == mod_held && !(io_devices.keypad.rawKeys & KEY_MOD_SHIFT_IDX)) {
    1718:	4b15      	ldr	r3, [pc, #84]	; (1770 <main+0xd0>)
    171a:	7a5b      	ldrb	r3, [r3, #9]
    171c:	2b02      	cmp	r3, #2
    171e:	d0e5      	beq.n	16ec <main+0x4c>
		if (sys_state.sys.modifiers.hyp == mod_held && !(io_devices.keypad.rawKeys & KEY_MOD_HYP_IDX)) {
    1720:	4b13      	ldr	r3, [pc, #76]	; (1770 <main+0xd0>)
    1722:	7a9b      	ldrb	r3, [r3, #10]
    1724:	2b02      	cmp	r3, #2
    1726:	d0ec      	beq.n	1702 <main+0x62>
		cmd_generic *pressed_cmd = process_keypress();
    1728:	4b13      	ldr	r3, [pc, #76]	; (1778 <main+0xd8>)
    172a:	4798      	blx	r3
    172c:	1e04      	subs	r4, r0, #0
		if (pressed_cmd) {
    172e:	d0f1      	beq.n	1714 <main+0x74>
			gpio_set_pin(GPIO(BUSY_LED), 1);
    1730:	2201      	movs	r2, #1
    1732:	2117      	movs	r1, #23
    1734:	2001      	movs	r0, #1
    1736:	4d06      	ldr	r5, [pc, #24]	; (1750 <main+0xb0>)
    1738:	47a8      	blx	r5
			exec_cmd(pressed_cmd);
    173a:	0020      	movs	r0, r4
    173c:	4b0f      	ldr	r3, [pc, #60]	; (177c <main+0xdc>)
    173e:	4798      	blx	r3
			gpio_set_pin(GPIO(BUSY_LED), 0);
    1740:	2200      	movs	r2, #0
    1742:	2117      	movs	r1, #23
    1744:	2001      	movs	r0, #1
    1746:	47a8      	blx	r5
    1748:	e7e4      	b.n	1714 <main+0x74>
    174a:	46c0      	nop			; (mov r8, r8)
    174c:	000012a9 	.word	0x000012a9
    1750:	00000625 	.word	0x00000625
    1754:	0000020d 	.word	0x0000020d
    1758:	000012f5 	.word	0x000012f5
    175c:	0000132d 	.word	0x0000132d
    1760:	e000e010 	.word	0xe000e010
    1764:	000012bf 	.word	0x000012bf
    1768:	e000ed00 	.word	0xe000ed00
    176c:	20000fa0 	.word	0x20000fa0
    1770:	20000140 	.word	0x20000140
    1774:	00001351 	.word	0x00001351
    1778:	0000150d 	.word	0x0000150d
    177c:	00001621 	.word	0x00001621

00001780 <NeoPixel_set_pixel>:
	ws2812_SPI_init();
}

/* set pixel color (pixel are numbered from 0 to NUM_PIXELS - 1) */
void NeoPixel_set_pixel(int pixel, uint8_t red, uint8_t green, uint8_t blue)
{
    1780:	b510      	push	{r4, lr}
	if (pixel < 0 || pixel >= NUM_PIXELS)
    1782:	2820      	cmp	r0, #32
    1784:	d807      	bhi.n	1796 <NeoPixel_set_pixel+0x16>
		return;
	int n = pixel * 3;
    1786:	0044      	lsls	r4, r0, #1
    1788:	1820      	adds	r0, r4, r0
	pixel_buffer[n] = green;
    178a:	4c03      	ldr	r4, [pc, #12]	; (1798 <NeoPixel_set_pixel+0x18>)
    178c:	5422      	strb	r2, [r4, r0]
	pixel_buffer[n + 1] = red;
    178e:	1c42      	adds	r2, r0, #1
    1790:	54a1      	strb	r1, [r4, r2]
	pixel_buffer[n + 2] = blue; 
    1792:	3002      	adds	r0, #2
    1794:	5423      	strb	r3, [r4, r0]
}
    1796:	bd10      	pop	{r4, pc}
    1798:	200008d0 	.word	0x200008d0

0000179c <NeoPixel_clear_pixels>:

/* all pixels off */
void NeoPixel_clear_pixels(void)
{
	for (int i = 0 ; i < NUM_PIXELS * 3 ; i++)
    179c:	2300      	movs	r3, #0
    179e:	e003      	b.n	17a8 <NeoPixel_clear_pixels+0xc>
		pixel_buffer[i] = 0;
    17a0:	2100      	movs	r1, #0
    17a2:	4a03      	ldr	r2, [pc, #12]	; (17b0 <NeoPixel_clear_pixels+0x14>)
    17a4:	54d1      	strb	r1, [r2, r3]
	for (int i = 0 ; i < NUM_PIXELS * 3 ; i++)
    17a6:	3301      	adds	r3, #1
    17a8:	2b62      	cmp	r3, #98	; 0x62
    17aa:	ddf9      	ble.n	17a0 <NeoPixel_clear_pixels+0x4>
}
    17ac:	4770      	bx	lr
    17ae:	46c0      	nop			; (mov r8, r8)
    17b0:	200008d0 	.word	0x200008d0

000017b4 <NeoPixel_init>:
{
    17b4:	b500      	push	{lr}
    17b6:	b085      	sub	sp, #20
	NeoPixel_clear_pixels();
    17b8:	4b24      	ldr	r3, [pc, #144]	; (184c <NeoPixel_init+0x98>)
    17ba:	4798      	blx	r3
	for (int i = 0 ; i < sizeof dma_buffer ; i++)
    17bc:	2300      	movs	r3, #0
    17be:	e005      	b.n	17cc <NeoPixel_init+0x18>
		dma_buffer[i] = 0x00;
    17c0:	4a23      	ldr	r2, [pc, #140]	; (1850 <NeoPixel_init+0x9c>)
    17c2:	18d2      	adds	r2, r2, r3
    17c4:	2000      	movs	r0, #0
    17c6:	2164      	movs	r1, #100	; 0x64
    17c8:	5450      	strb	r0, [r2, r1]
	for (int i = 0 ; i < sizeof dma_buffer ; i++)
    17ca:	3301      	adds	r3, #1
    17cc:	22c1      	movs	r2, #193	; 0xc1
    17ce:	0052      	lsls	r2, r2, #1
    17d0:	4293      	cmp	r3, r2
    17d2:	d9f5      	bls.n	17c0 <NeoPixel_init+0xc>
	descriptor.DSTADDR.reg = (uint32_t)&SERCOM2->SPI.DATA;                // destination address is SPI DATA register
    17d4:	4b1f      	ldr	r3, [pc, #124]	; (1854 <NeoPixel_init+0xa0>)
    17d6:	9302      	str	r3, [sp, #8]
	descriptor.SRCADDR.reg = (uint32_t)(dma_buffer + sizeof dma_buffer);  // source address is the DMA buffer
    17d8:	4b1d      	ldr	r3, [pc, #116]	; (1850 <NeoPixel_init+0x9c>)
    17da:	33e8      	adds	r3, #232	; 0xe8
    17dc:	33ff      	adds	r3, #255	; 0xff
    17de:	9301      	str	r3, [sp, #4]
	descriptor.DESCADDR.reg = 0;                                          // only one transfer descriptor
    17e0:	2300      	movs	r3, #0
    17e2:	9303      	str	r3, [sp, #12]
	descriptor.BTCTRL.bit.BEATSIZE = DMAC_BTCTRL_BEATSIZE_BYTE_Val;       // beat size is one byte
    17e4:	466b      	mov	r3, sp
    17e6:	881b      	ldrh	r3, [r3, #0]
    17e8:	4a1b      	ldr	r2, [pc, #108]	; (1858 <NeoPixel_init+0xa4>)
    17ea:	4013      	ands	r3, r2
    17ec:	466a      	mov	r2, sp
    17ee:	8013      	strh	r3, [r2, #0]
	descriptor.BTCTRL.bit.DSTINC = 0;                                     // destination address increment disabled
    17f0:	8813      	ldrh	r3, [r2, #0]
    17f2:	4a1a      	ldr	r2, [pc, #104]	; (185c <NeoPixel_init+0xa8>)
    17f4:	4013      	ands	r3, r2
    17f6:	466a      	mov	r2, sp
    17f8:	8013      	strh	r3, [r2, #0]
	descriptor.BTCTRL.bit.SRCINC = 1;                                     // source address increment enabled
    17fa:	8812      	ldrh	r2, [r2, #0]
    17fc:	2380      	movs	r3, #128	; 0x80
    17fe:	00db      	lsls	r3, r3, #3
    1800:	4313      	orrs	r3, r2
    1802:	466a      	mov	r2, sp
    1804:	8013      	strh	r3, [r2, #0]
	descriptor.BTCTRL.bit.STEPSEL = DMAC_BTCTRL_STEPSEL_SRC_Val;          // flexible source address increment size
    1806:	8812      	ldrh	r2, [r2, #0]
    1808:	2380      	movs	r3, #128	; 0x80
    180a:	015b      	lsls	r3, r3, #5
    180c:	4313      	orrs	r3, r2
    180e:	466a      	mov	r2, sp
    1810:	8013      	strh	r3, [r2, #0]
	descriptor.BTCTRL.bit.STEPSIZE = DMAC_BTCTRL_STEPSIZE_X1_Val;         // source address increment is one byte
    1812:	8813      	ldrh	r3, [r2, #0]
    1814:	04db      	lsls	r3, r3, #19
    1816:	0cdb      	lsrs	r3, r3, #19
    1818:	8013      	strh	r3, [r2, #0]
	descriptor.BTCTRL.bit.BLOCKACT = DMAC_BTCTRL_BLOCKACT_NOACT_Val;      // request interrupt at end of block transfer
    181a:	8813      	ldrh	r3, [r2, #0]
    181c:	2218      	movs	r2, #24
    181e:	4393      	bics	r3, r2
    1820:	466a      	mov	r2, sp
    1822:	8013      	strh	r3, [r2, #0]
	descriptor.BTCNT.reg = sizeof dma_buffer;                             // beat count
    1824:	2384      	movs	r3, #132	; 0x84
    1826:	33ff      	adds	r3, #255	; 0xff
    1828:	8053      	strh	r3, [r2, #2]
	descriptor.BTCTRL.bit.VALID = 1;                                      // descriptor is valid
    182a:	8813      	ldrh	r3, [r2, #0]
    182c:	2201      	movs	r2, #1
    182e:	4313      	orrs	r3, r2
    1830:	466a      	mov	r2, sp
    1832:	8013      	strh	r3, [r2, #0]
	DMA_init();
    1834:	4b0a      	ldr	r3, [pc, #40]	; (1860 <NeoPixel_init+0xac>)
    1836:	4798      	blx	r3
	DMA_add_channel(DMA_SOURCE_SERCOM2, &descriptor);
    1838:	4669      	mov	r1, sp
    183a:	2006      	movs	r0, #6
    183c:	4b09      	ldr	r3, [pc, #36]	; (1864 <NeoPixel_init+0xb0>)
    183e:	4798      	blx	r3
	DMA_enable();
    1840:	4b09      	ldr	r3, [pc, #36]	; (1868 <NeoPixel_init+0xb4>)
    1842:	4798      	blx	r3
	ws2812_SPI_init();
    1844:	4b09      	ldr	r3, [pc, #36]	; (186c <NeoPixel_init+0xb8>)
    1846:	4798      	blx	r3
}
    1848:	b005      	add	sp, #20
    184a:	bd00      	pop	{pc}
    184c:	0000179d 	.word	0x0000179d
    1850:	200008d0 	.word	0x200008d0
    1854:	42001028 	.word	0x42001028
    1858:	fffffcff 	.word	0xfffffcff
    185c:	fffff7ff 	.word	0xfffff7ff
    1860:	000004b9 	.word	0x000004b9
    1864:	0000051d 	.word	0x0000051d
    1868:	000005b9 	.word	0x000005b9
    186c:	00001a91 	.word	0x00001a91

00001870 <NeoPixel_update>:
#endif


/* update DMA buffer */
void NeoPixel_update(void)
{
    1870:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0, j = 0 ; i < sizeof pixel_buffer ; i++, j += 3)
    1872:	2200      	movs	r2, #0
    1874:	2100      	movs	r1, #0
    1876:	e011      	b.n	189c <NeoPixel_update+0x2c>
	{
		#if USELUT
		uint32_t expanded = bit_expand[pixel_buffer[i]];
    1878:	4b0a      	ldr	r3, [pc, #40]	; (18a4 <NeoPixel_update+0x34>)
    187a:	5c58      	ldrb	r0, [r3, r1]
    187c:	0080      	lsls	r0, r0, #2
    187e:	4c0a      	ldr	r4, [pc, #40]	; (18a8 <NeoPixel_update+0x38>)
    1880:	5904      	ldr	r4, [r0, r4]
		for (int bit = 1; bit < 8; bit++) {
			expanded |= (pixel_buffer[i] & (1 << bit)) << (2 * bit + 1);
		}
		#endif

		dma_buffer[j] = expanded >> 16;
    1882:	0c26      	lsrs	r6, r4, #16
    1884:	2064      	movs	r0, #100	; 0x64
    1886:	189d      	adds	r5, r3, r2
    1888:	542e      	strb	r6, [r5, r0]
		dma_buffer[j + 1] = expanded >> 8;
    188a:	1c55      	adds	r5, r2, #1
    188c:	0a26      	lsrs	r6, r4, #8
    188e:	195d      	adds	r5, r3, r5
    1890:	542e      	strb	r6, [r5, r0]
		dma_buffer[j + 2] = expanded;
    1892:	1c95      	adds	r5, r2, #2
    1894:	195b      	adds	r3, r3, r5
    1896:	541c      	strb	r4, [r3, r0]
	for (int i = 0, j = 0 ; i < sizeof pixel_buffer ; i++, j += 3)
    1898:	3101      	adds	r1, #1
    189a:	3203      	adds	r2, #3
    189c:	2962      	cmp	r1, #98	; 0x62
    189e:	d9eb      	bls.n	1878 <NeoPixel_update+0x8>
	}
}
    18a0:	bd70      	pop	{r4, r5, r6, pc}
    18a2:	46c0      	nop			; (mov r8, r8)
    18a4:	200008d0 	.word	0x200008d0
    18a8:	00002abc 	.word	0x00002abc

000018ac <NXDisplay_loadData>:
static NXConfig *config;

static uint8_t dispdata[NX_SR_BYTES];


void NXDisplay_loadData(uint16_t buf[NX_NUM_TUBES]) {
    18ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	//  Put array of 9 digits (12 bits each) into the byte aligned display data buffer
	for (int i = 0, j = 0; i < NX_NUM_TUBES - 1; i += 2, j +=3) {
    18ae:	2400      	movs	r4, #0
    18b0:	2100      	movs	r1, #0
    18b2:	e016      	b.n	18e2 <NXDisplay_loadData+0x36>
		dispdata[j] = buf[i] & 0xff;
    18b4:	004b      	lsls	r3, r1, #1
    18b6:	18c3      	adds	r3, r0, r3
    18b8:	881a      	ldrh	r2, [r3, #0]
    18ba:	4d0d      	ldr	r5, [pc, #52]	; (18f0 <NXDisplay_loadData+0x44>)
    18bc:	552a      	strb	r2, [r5, r4]
		dispdata[j+1] = ((buf[i] >> 8) & 0xf) | ((buf[i+1] & 0xf) << 4);
    18be:	1c67      	adds	r7, r4, #1
    18c0:	881b      	ldrh	r3, [r3, #0]
    18c2:	0a1b      	lsrs	r3, r3, #8
    18c4:	220f      	movs	r2, #15
    18c6:	401a      	ands	r2, r3
    18c8:	1c4b      	adds	r3, r1, #1
    18ca:	005b      	lsls	r3, r3, #1
    18cc:	18c3      	adds	r3, r0, r3
    18ce:	881e      	ldrh	r6, [r3, #0]
    18d0:	0136      	lsls	r6, r6, #4
    18d2:	4332      	orrs	r2, r6
    18d4:	55ea      	strb	r2, [r5, r7]
		dispdata[j+2] = (buf[i+1] >> 4) & 0xff;
    18d6:	1ca2      	adds	r2, r4, #2
    18d8:	881b      	ldrh	r3, [r3, #0]
    18da:	091b      	lsrs	r3, r3, #4
    18dc:	54ab      	strb	r3, [r5, r2]
	for (int i = 0, j = 0; i < NX_NUM_TUBES - 1; i += 2, j +=3) {
    18de:	3102      	adds	r1, #2
    18e0:	3403      	adds	r4, #3
    18e2:	2907      	cmp	r1, #7
    18e4:	dde6      	ble.n	18b4 <NXDisplay_loadData+0x8>
	}
	dispdata[NX_SR_BYTES - 1] = buf[NX_SIGNTUBE_IDX] & 0xff;
    18e6:	8a02      	ldrh	r2, [r0, #16]
    18e8:	4b01      	ldr	r3, [pc, #4]	; (18f0 <NXDisplay_loadData+0x44>)
    18ea:	731a      	strb	r2, [r3, #12]
}
    18ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18ee:	46c0      	nop			; (mov r8, r8)
    18f0:	20000ab8 	.word	0x20000ab8

000018f4 <NXDisplay_updateDisp>:

void NXDisplay_updateDisp() {
    18f4:	b510      	push	{r4, lr}
		gpio_set_pin(NXD_SCK_PORT, NXD_SCK_PIN, 1);
	}
	asm("nop\nnop\nnop\nnop\nnop");				// delay at least 100 ns

	#else
	for (int i = 12; i >= 0; i--) {
    18f6:	210c      	movs	r1, #12
    18f8:	e010      	b.n	191c <NXDisplay_updateDisp+0x28>
		// Wait for data register to be ready
		SERCOM5->SPI.DATA.bit.DATA = dispdata[i];
    18fa:	4811      	ldr	r0, [pc, #68]	; (1940 <NXDisplay_updateDisp+0x4c>)
    18fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
    18fe:	4a11      	ldr	r2, [pc, #68]	; (1944 <NXDisplay_updateDisp+0x50>)
    1900:	5c52      	ldrb	r2, [r2, r1]
    1902:	0a5b      	lsrs	r3, r3, #9
    1904:	025b      	lsls	r3, r3, #9
    1906:	431a      	orrs	r2, r3
    1908:	6282      	str	r2, [r0, #40]	; 0x28
		while (!SERCOM5->SPI.INTFLAG.bit.DRE || !SERCOM5->SPI.INTFLAG.bit.TXC);
    190a:	4b0d      	ldr	r3, [pc, #52]	; (1940 <NXDisplay_updateDisp+0x4c>)
    190c:	7e1b      	ldrb	r3, [r3, #24]
    190e:	07db      	lsls	r3, r3, #31
    1910:	d5fb      	bpl.n	190a <NXDisplay_updateDisp+0x16>
    1912:	4b0b      	ldr	r3, [pc, #44]	; (1940 <NXDisplay_updateDisp+0x4c>)
    1914:	7e1b      	ldrb	r3, [r3, #24]
    1916:	079b      	lsls	r3, r3, #30
    1918:	d5f7      	bpl.n	190a <NXDisplay_updateDisp+0x16>
	for (int i = 12; i >= 0; i--) {
    191a:	3901      	subs	r1, #1
    191c:	2900      	cmp	r1, #0
    191e:	daec      	bge.n	18fa <NXDisplay_updateDisp+0x6>
	}
	// Wait for data register to be ready
	//while (!SERCOM5->SPI.INTFLAG.bit.DRE || !SERCOM5->SPI.INTFLAG.bit.TXC);
	#endif
	gpio_set_pin(NXD_STR_PORT, NXD_STR_PIN, 0); // latch data (active low)
    1920:	2200      	movs	r2, #0
    1922:	2105      	movs	r1, #5
    1924:	2001      	movs	r0, #1
    1926:	4c08      	ldr	r4, [pc, #32]	; (1948 <NXDisplay_updateDisp+0x54>)
    1928:	47a0      	blx	r4
	asm("nop\nnop\nnop\nnop\nnop");				// delay at least 100 ns
    192a:	46c0      	nop			; (mov r8, r8)
    192c:	46c0      	nop			; (mov r8, r8)
    192e:	46c0      	nop			; (mov r8, r8)
    1930:	46c0      	nop			; (mov r8, r8)
    1932:	46c0      	nop			; (mov r8, r8)
	gpio_set_pin(NXD_STR_PORT, NXD_STR_PIN, 1);
    1934:	2201      	movs	r2, #1
    1936:	2105      	movs	r1, #5
    1938:	2001      	movs	r0, #1
    193a:	47a0      	blx	r4
}
    193c:	bd10      	pop	{r4, pc}
    193e:	46c0      	nop			; (mov r8, r8)
    1940:	42001c00 	.word	0x42001c00
    1944:	20000ab8 	.word	0x20000ab8
    1948:	00000625 	.word	0x00000625

0000194c <NXDisplay_init>:

void NXDisplay_init(NXConfig *nxconfig) {
    194c:	b510      	push	{r4, lr}
	config = nxconfig;
    194e:	4c0b      	ldr	r4, [pc, #44]	; (197c <NXDisplay_init+0x30>)
    1950:	6120      	str	r0, [r4, #16]
	gpio_set_pin_dir(NXD_STR_PORT, NXD_STR_PIN, GPIO_DIR_OUT);
    1952:	2201      	movs	r2, #1
    1954:	2105      	movs	r1, #5
    1956:	2001      	movs	r0, #1
    1958:	4b09      	ldr	r3, [pc, #36]	; (1980 <NXDisplay_init+0x34>)
    195a:	4798      	blx	r3
	gpio_set_pin(NXD_STR_PORT, NXD_STR_PIN, 1);
    195c:	2201      	movs	r2, #1
    195e:	2105      	movs	r1, #5
    1960:	2001      	movs	r0, #1
    1962:	4b08      	ldr	r3, [pc, #32]	; (1984 <NXDisplay_init+0x38>)
    1964:	4798      	blx	r3
	gpio_set_pin_dir(NXD_MOSI_PORT, NXD_MOSI_PIN, GPIO_DIR_OUT);
	gpio_set_pin(NXD_MOSI_PORT, NXD_MOSI_PIN, 1);
	gpio_set_pin_dir(NXD_SCK_PORT, NXD_SCK_PIN, GPIO_DIR_OUT);
	gpio_set_pin(NXD_SCK_PORT, NXD_SCK_PIN, 1);
	#else
	nxdisp_SPI_init();
    1966:	4b08      	ldr	r3, [pc, #32]	; (1988 <NXDisplay_init+0x3c>)
    1968:	4798      	blx	r3
	#endif
	memset(dispdata, 0, sizeof(dispdata));
    196a:	220d      	movs	r2, #13
    196c:	2100      	movs	r1, #0
    196e:	0020      	movs	r0, r4
    1970:	4b06      	ldr	r3, [pc, #24]	; (198c <NXDisplay_init+0x40>)
    1972:	4798      	blx	r3
	NXDisplay_updateDisp();
    1974:	4b06      	ldr	r3, [pc, #24]	; (1990 <NXDisplay_init+0x44>)
    1976:	4798      	blx	r3
}
    1978:	bd10      	pop	{r4, pc}
    197a:	46c0      	nop			; (mov r8, r8)
    197c:	20000ab8 	.word	0x20000ab8
    1980:	00000671 	.word	0x00000671
    1984:	00000625 	.word	0x00000625
    1988:	00001b3d 	.word	0x00001b3d
    198c:	00002709 	.word	0x00002709
    1990:	000018f5 	.word	0x000018f5

00001994 <NXDisplay_dispStr>:


void NXDisplay_dispStr(const char *text) {
    1994:	b5f0      	push	{r4, r5, r6, r7, lr}
    1996:	46ce      	mov	lr, r9
    1998:	4647      	mov	r7, r8
    199a:	b580      	push	{r7, lr}
    199c:	b087      	sub	sp, #28
    199e:	0005      	movs	r5, r0
	int firstChar = 0; // encountered the first character yet? (for allowing numbers with space)
	uint16_t buf[NX_NUM_TUBES];
	memset(buf, 0, sizeof(buf));
    19a0:	2212      	movs	r2, #18
    19a2:	2100      	movs	r1, #0
    19a4:	a801      	add	r0, sp, #4
    19a6:	4b36      	ldr	r3, [pc, #216]	; (1a80 <NXDisplay_dispStr+0xec>)
    19a8:	4798      	blx	r3
	for (int i = 0, dig = NX_NUM_TUBES - 2; dig >= 0 && text[i]; i++) {
    19aa:	2107      	movs	r1, #7
    19ac:	2000      	movs	r0, #0
	int firstChar = 0; // encountered the first character yet? (for allowing numbers with space)
    19ae:	2300      	movs	r3, #0
    19b0:	4699      	mov	r9, r3
	for (int i = 0, dig = NX_NUM_TUBES - 2; dig >= 0 && text[i]; i++) {
    19b2:	e00c      	b.n	19ce <NXDisplay_dispStr+0x3a>
		if (text[i] >= '0' && text[i] <= '9') {
			buf[dig] |= NUM_TO_NX(text[i] - '0');
    19b4:	2301      	movs	r3, #1
    19b6:	004f      	lsls	r7, r1, #1
    19b8:	4662      	mov	r2, ip
    19ba:	4313      	orrs	r3, r2
    19bc:	aa01      	add	r2, sp, #4
    19be:	52bb      	strh	r3, [r7, r2]
			dig--;
    19c0:	3901      	subs	r1, #1
					if (config->dp_space)
						dig--;
				break;
			}
		}
		firstChar = (text[i] != ' ') || firstChar;
    19c2:	7823      	ldrb	r3, [r4, #0]
    19c4:	2b20      	cmp	r3, #32
    19c6:	d001      	beq.n	19cc <NXDisplay_dispStr+0x38>
    19c8:	2301      	movs	r3, #1
    19ca:	4699      	mov	r9, r3
	for (int i = 0, dig = NX_NUM_TUBES - 2; dig >= 0 && text[i]; i++) {
    19cc:	3001      	adds	r0, #1
    19ce:	2900      	cmp	r1, #0
    19d0:	db4b      	blt.n	1a6a <NXDisplay_dispStr+0xd6>
    19d2:	182c      	adds	r4, r5, r0
    19d4:	7823      	ldrb	r3, [r4, #0]
    19d6:	2b00      	cmp	r3, #0
    19d8:	d047      	beq.n	1a6a <NXDisplay_dispStr+0xd6>
		if (text[i] >= '0' && text[i] <= '9') {
    19da:	001a      	movs	r2, r3
    19dc:	3a30      	subs	r2, #48	; 0x30
    19de:	b2d2      	uxtb	r2, r2
    19e0:	2a09      	cmp	r2, #9
    19e2:	d80b      	bhi.n	19fc <NXDisplay_dispStr+0x68>
			buf[dig] |= NUM_TO_NX(text[i] - '0');
    19e4:	004a      	lsls	r2, r1, #1
    19e6:	af01      	add	r7, sp, #4
    19e8:	5fd2      	ldrsh	r2, [r2, r7]
    19ea:	4694      	mov	ip, r2
    19ec:	2b30      	cmp	r3, #48	; 0x30
    19ee:	d0e1      	beq.n	19b4 <NXDisplay_dispStr+0x20>
    19f0:	3b30      	subs	r3, #48	; 0x30
    19f2:	2280      	movs	r2, #128	; 0x80
    19f4:	00d2      	lsls	r2, r2, #3
    19f6:	411a      	asrs	r2, r3
    19f8:	0013      	movs	r3, r2
    19fa:	e7dc      	b.n	19b6 <NXDisplay_dispStr+0x22>
			switch (text[i]) {
    19fc:	2b2e      	cmp	r3, #46	; 0x2e
    19fe:	d025      	beq.n	1a4c <NXDisplay_dispStr+0xb8>
    1a00:	d80a      	bhi.n	1a18 <NXDisplay_dispStr+0x84>
    1a02:	2b20      	cmp	r3, #32
    1a04:	d020      	beq.n	1a48 <NXDisplay_dispStr+0xb4>
    1a06:	2b2d      	cmp	r3, #45	; 0x2d
    1a08:	d1db      	bne.n	19c2 <NXDisplay_dispStr+0x2e>
					if(!firstChar) {
    1a0a:	464b      	mov	r3, r9
    1a0c:	2b00      	cmp	r3, #0
    1a0e:	d1d8      	bne.n	19c2 <NXDisplay_dispStr+0x2e>
						buf[NX_SIGNTUBE_IDX] = NX_MINUS;
    1a10:	2202      	movs	r2, #2
    1a12:	ab01      	add	r3, sp, #4
    1a14:	821a      	strh	r2, [r3, #16]
    1a16:	e7d4      	b.n	19c2 <NXDisplay_dispStr+0x2e>
			switch (text[i]) {
    1a18:	2b5b      	cmp	r3, #91	; 0x5b
    1a1a:	d00b      	beq.n	1a34 <NXDisplay_dispStr+0xa0>
    1a1c:	2b5d      	cmp	r3, #93	; 0x5d
    1a1e:	d1d0      	bne.n	19c2 <NXDisplay_dispStr+0x2e>
					buf[dig] |= NX_DPR;
    1a20:	aa01      	add	r2, sp, #4
    1a22:	004f      	lsls	r7, r1, #1
    1a24:	5abb      	ldrh	r3, [r7, r2]
    1a26:	469c      	mov	ip, r3
    1a28:	2380      	movs	r3, #128	; 0x80
    1a2a:	011b      	lsls	r3, r3, #4
    1a2c:	4666      	mov	r6, ip
    1a2e:	4333      	orrs	r3, r6
    1a30:	52bb      	strh	r3, [r7, r2]
				break;
    1a32:	e7c6      	b.n	19c2 <NXDisplay_dispStr+0x2e>
					buf[dig] |= NX_DPL;
    1a34:	aa01      	add	r2, sp, #4
    1a36:	004f      	lsls	r7, r1, #1
    1a38:	5abb      	ldrh	r3, [r7, r2]
    1a3a:	469c      	mov	ip, r3
    1a3c:	2380      	movs	r3, #128	; 0x80
    1a3e:	00db      	lsls	r3, r3, #3
    1a40:	4666      	mov	r6, ip
    1a42:	4333      	orrs	r3, r6
    1a44:	52bb      	strh	r3, [r7, r2]
				break;
    1a46:	e7bc      	b.n	19c2 <NXDisplay_dispStr+0x2e>
					dig--;
    1a48:	3901      	subs	r1, #1
				break;
    1a4a:	e7ba      	b.n	19c2 <NXDisplay_dispStr+0x2e>
					buf[dig] |= config->dp_template; // TODO: recalc position if invalid
    1a4c:	4b0d      	ldr	r3, [pc, #52]	; (1a84 <NXDisplay_dispStr+0xf0>)
    1a4e:	691f      	ldr	r7, [r3, #16]
    1a50:	887b      	ldrh	r3, [r7, #2]
    1a52:	aa01      	add	r2, sp, #4
    1a54:	004e      	lsls	r6, r1, #1
    1a56:	46b4      	mov	ip, r6
    1a58:	5ab6      	ldrh	r6, [r6, r2]
    1a5a:	4333      	orrs	r3, r6
    1a5c:	4666      	mov	r6, ip
    1a5e:	52b3      	strh	r3, [r6, r2]
					if (config->dp_space)
    1a60:	783b      	ldrb	r3, [r7, #0]
    1a62:	2b00      	cmp	r3, #0
    1a64:	d0ad      	beq.n	19c2 <NXDisplay_dispStr+0x2e>
						dig--;
    1a66:	3901      	subs	r1, #1
    1a68:	e7ab      	b.n	19c2 <NXDisplay_dispStr+0x2e>
	}
	NXDisplay_loadData(buf);
    1a6a:	a801      	add	r0, sp, #4
    1a6c:	4b06      	ldr	r3, [pc, #24]	; (1a88 <NXDisplay_dispStr+0xf4>)
    1a6e:	4798      	blx	r3
	NXDisplay_updateDisp();
    1a70:	4b06      	ldr	r3, [pc, #24]	; (1a8c <NXDisplay_dispStr+0xf8>)
    1a72:	4798      	blx	r3
}
    1a74:	b007      	add	sp, #28
    1a76:	bc0c      	pop	{r2, r3}
    1a78:	4690      	mov	r8, r2
    1a7a:	4699      	mov	r9, r3
    1a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a7e:	46c0      	nop			; (mov r8, r8)
    1a80:	00002709 	.word	0x00002709
    1a84:	20000ab8 	.word	0x20000ab8
    1a88:	000018ad 	.word	0x000018ad
    1a8c:	000018f5 	.word	0x000018f5

00001a90 <ws2812_SPI_init>:
 * Based on code from Luca Davidian
 * http://www.lucadavidian.com/2018/03/08/wifi-controlled-neo-pixels-strips/
 */
void ws2812_SPI_init() {
	/* enable peripheral clock */
	PM->APBCMASK.bit.SERCOM2_ = 1;
    1a90:	4a21      	ldr	r2, [pc, #132]	; (1b18 <ws2812_SPI_init+0x88>)
    1a92:	6a11      	ldr	r1, [r2, #32]
    1a94:	2310      	movs	r3, #16
    1a96:	430b      	orrs	r3, r1
    1a98:	6213      	str	r3, [r2, #32]
	
	/* enable generic clock */
	GCLK->CLKCTRL.bit.ID = GCLK_CLKCTRL_ID_SERCOM2_CORE_Val;     // configure generic clock for SERCOM2
    1a9a:	4b20      	ldr	r3, [pc, #128]	; (1b1c <ws2812_SPI_init+0x8c>)
    1a9c:	885a      	ldrh	r2, [r3, #2]
    1a9e:	213f      	movs	r1, #63	; 0x3f
    1aa0:	438a      	bics	r2, r1
    1aa2:	2116      	movs	r1, #22
    1aa4:	430a      	orrs	r2, r1
    1aa6:	805a      	strh	r2, [r3, #2]
	
	GCLK->CLKCTRL.bit.GEN = GCLK_CLKCTRL_GEN_GCLK0_Val;          // source is generic clock generator 0 
    1aa8:	885a      	ldrh	r2, [r3, #2]
    1aaa:	491d      	ldr	r1, [pc, #116]	; (1b20 <ws2812_SPI_init+0x90>)
    1aac:	400a      	ands	r2, r1
    1aae:	805a      	strh	r2, [r3, #2]
	GCLK->CLKCTRL.bit.CLKEN = 1;                                 // enable generic clock
    1ab0:	8859      	ldrh	r1, [r3, #2]
    1ab2:	2280      	movs	r2, #128	; 0x80
    1ab4:	01d2      	lsls	r2, r2, #7
    1ab6:	430a      	orrs	r2, r1
    1ab8:	805a      	strh	r2, [r3, #2]
	
	/* select GPIO pins alternative function */
	PORT->Group[BACKLIGHT_MOSI_PORT].PINCFG[BACKLIGHT_MOSI_PIN].bit.PMUXEN = 1;                // enable alternative function for pin
    1aba:	4a1a      	ldr	r2, [pc, #104]	; (1b24 <ws2812_SPI_init+0x94>)
    1abc:	214c      	movs	r1, #76	; 0x4c
    1abe:	5c53      	ldrb	r3, [r2, r1]
    1ac0:	2001      	movs	r0, #1
    1ac2:	4303      	orrs	r3, r0
    1ac4:	5453      	strb	r3, [r2, r1]
	PORT->Group[BACKLIGHT_MOSI_PORT].PMUX[BACKLIGHT_MOSI_PIN/2].bit.PMUXE = BACKLIGHT_MOSI_PMUX; // PMUX->SERCOM2
    1ac6:	3916      	subs	r1, #22
    1ac8:	5c53      	ldrb	r3, [r2, r1]
    1aca:	200f      	movs	r0, #15
    1acc:	4383      	bics	r3, r0
    1ace:	2002      	movs	r0, #2
    1ad0:	4303      	orrs	r3, r0
    1ad2:	5453      	strb	r3, [r2, r1]
	
	/* configure peripheral */
	BACKLIGHT_SERCOM->SPI.CTRLA.bit.DOPO = BACKLIGHT_MOSI_PAD;            // MOSI on pad 0 (pin PA12)
    1ad4:	4b14      	ldr	r3, [pc, #80]	; (1b28 <ws2812_SPI_init+0x98>)
    1ad6:	6819      	ldr	r1, [r3, #0]
    1ad8:	4a14      	ldr	r2, [pc, #80]	; (1b2c <ws2812_SPI_init+0x9c>)
    1ada:	400a      	ands	r2, r1
    1adc:	601a      	str	r2, [r3, #0]
	BACKLIGHT_SERCOM->SPI.CTRLA.bit.CPHA = 0x00;  
    1ade:	6819      	ldr	r1, [r3, #0]
    1ae0:	4a13      	ldr	r2, [pc, #76]	; (1b30 <ws2812_SPI_init+0xa0>)
    1ae2:	400a      	ands	r2, r1
    1ae4:	601a      	str	r2, [r3, #0]
	BACKLIGHT_SERCOM->SPI.CTRLA.bit.CPOL = 0x00;                          // transfer mode 0
    1ae6:	6819      	ldr	r1, [r3, #0]
    1ae8:	4a12      	ldr	r2, [pc, #72]	; (1b34 <ws2812_SPI_init+0xa4>)
    1aea:	400a      	ands	r2, r1
    1aec:	601a      	str	r2, [r3, #0]
	BACKLIGHT_SERCOM->SPI.CTRLA.bit.DORD = 0x00;                          // MSB first
    1aee:	6819      	ldr	r1, [r3, #0]
    1af0:	4a11      	ldr	r2, [pc, #68]	; (1b38 <ws2812_SPI_init+0xa8>)
    1af2:	400a      	ands	r2, r1
    1af4:	601a      	str	r2, [r3, #0]
	BACKLIGHT_SERCOM->SPI.CTRLA.bit.MODE = 0x03;                          // SPI master operation
    1af6:	6819      	ldr	r1, [r3, #0]
    1af8:	221c      	movs	r2, #28
    1afa:	4391      	bics	r1, r2
    1afc:	3a10      	subs	r2, #16
    1afe:	430a      	orrs	r2, r1
    1b00:	601a      	str	r2, [r3, #0]
	BACKLIGHT_SERCOM->SPI.CTRLB.bit.CHSIZE = 0x00;                        // 8 bit character size
    1b02:	6859      	ldr	r1, [r3, #4]
    1b04:	2207      	movs	r2, #7
    1b06:	4391      	bics	r1, r2
    1b08:	6059      	str	r1, [r3, #4]
	BACKLIGHT_SERCOM->SPI.BAUD.reg = 9;                                   // SPI frequency 2.4 MHz (BAUD = gclk/(2*f_baud) - 1)
    1b0a:	2209      	movs	r2, #9
    1b0c:	731a      	strb	r2, [r3, #12]
	
	/* enable peripheral */
	SERCOM2->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1b0e:	681a      	ldr	r2, [r3, #0]
    1b10:	2102      	movs	r1, #2
    1b12:	430a      	orrs	r2, r1
    1b14:	601a      	str	r2, [r3, #0]
}
    1b16:	4770      	bx	lr
    1b18:	40000400 	.word	0x40000400
    1b1c:	40000c00 	.word	0x40000c00
    1b20:	fffff0ff 	.word	0xfffff0ff
    1b24:	41004400 	.word	0x41004400
    1b28:	42001000 	.word	0x42001000
    1b2c:	fffcffff 	.word	0xfffcffff
    1b30:	efffffff 	.word	0xefffffff
    1b34:	dfffffff 	.word	0xdfffffff
    1b38:	bfffffff 	.word	0xbfffffff

00001b3c <nxdisp_SPI_init>:

/* Initialize nxdisplay SPI on sercom 5 */
void nxdisp_SPI_init() {
    1b3c:	b510      	push	{r4, lr}
	/* enable peripheral clock */
	PM->APBCMASK.bit.SERCOM5_ = 1;
    1b3e:	4a27      	ldr	r2, [pc, #156]	; (1bdc <nxdisp_SPI_init+0xa0>)
    1b40:	6a11      	ldr	r1, [r2, #32]
    1b42:	2380      	movs	r3, #128	; 0x80
    1b44:	430b      	orrs	r3, r1
    1b46:	6213      	str	r3, [r2, #32]
	
	GCLK->CLKCTRL.bit.ID = GCLK_CLKCTRL_ID_SERCOM5_CORE_Val;
    1b48:	4b25      	ldr	r3, [pc, #148]	; (1be0 <nxdisp_SPI_init+0xa4>)
    1b4a:	885a      	ldrh	r2, [r3, #2]
    1b4c:	213f      	movs	r1, #63	; 0x3f
    1b4e:	438a      	bics	r2, r1
    1b50:	2119      	movs	r1, #25
    1b52:	430a      	orrs	r2, r1
    1b54:	805a      	strh	r2, [r3, #2]
	
	GCLK->CLKCTRL.bit.GEN = GCLK_CLKCTRL_GEN_GCLK0_Val;          // source is generic clock generator 0
    1b56:	885a      	ldrh	r2, [r3, #2]
    1b58:	4922      	ldr	r1, [pc, #136]	; (1be4 <nxdisp_SPI_init+0xa8>)
    1b5a:	400a      	ands	r2, r1
    1b5c:	805a      	strh	r2, [r3, #2]
	GCLK->CLKCTRL.bit.CLKEN = 1;                                 // enable generic clock
    1b5e:	8859      	ldrh	r1, [r3, #2]
    1b60:	2280      	movs	r2, #128	; 0x80
    1b62:	01d2      	lsls	r2, r2, #7
    1b64:	430a      	orrs	r2, r1
    1b66:	805a      	strh	r2, [r3, #2]

	/* select GPIO pins alternative function */
	PORT->Group[NXD_MOSI_PORT].PINCFG[NXD_MOSI_PIN].bit.PMUXEN = 1;				// enable alternative function for pin
    1b68:	4b1f      	ldr	r3, [pc, #124]	; (1be8 <nxdisp_SPI_init+0xac>)
    1b6a:	22de      	movs	r2, #222	; 0xde
    1b6c:	5c99      	ldrb	r1, [r3, r2]
    1b6e:	2401      	movs	r4, #1
    1b70:	4321      	orrs	r1, r4
    1b72:	5499      	strb	r1, [r3, r2]
	PORT->Group[NXD_MOSI_PORT].PMUX[NXD_MOSI_PIN/2].bit.PMUXE = NXD_MOSI_PMUX;	// PMUX->SERCOM5
    1b74:	21bf      	movs	r1, #191	; 0xbf
    1b76:	5c5a      	ldrb	r2, [r3, r1]
    1b78:	200f      	movs	r0, #15
    1b7a:	4382      	bics	r2, r0
    1b7c:	2003      	movs	r0, #3
    1b7e:	4302      	orrs	r2, r0
    1b80:	545a      	strb	r2, [r3, r1]
	
	PORT->Group[NXD_SCK_PORT].PINCFG[NXD_SCK_PIN].bit.PMUXEN = 1;				// enable alternative function for pin
    1b82:	20df      	movs	r0, #223	; 0xdf
    1b84:	5c1a      	ldrb	r2, [r3, r0]
    1b86:	4322      	orrs	r2, r4
    1b88:	541a      	strb	r2, [r3, r0]
	PORT->Group[NXD_SCK_PORT].PMUX[NXD_SCK_PIN/2].bit.PMUXO = NXD_SCK_PMUX;		// PMUX->SERCOM5
    1b8a:	5c58      	ldrb	r0, [r3, r1]
    1b8c:	220f      	movs	r2, #15
    1b8e:	4002      	ands	r2, r0
    1b90:	2030      	movs	r0, #48	; 0x30
    1b92:	4302      	orrs	r2, r0
    1b94:	545a      	strb	r2, [r3, r1]

	SERCOM5->SPI.CTRLA.bit.DOPO = 0x0;		// DO = Pad0, SCK = Pad1
    1b96:	4b15      	ldr	r3, [pc, #84]	; (1bec <nxdisp_SPI_init+0xb0>)
    1b98:	6819      	ldr	r1, [r3, #0]
    1b9a:	4a15      	ldr	r2, [pc, #84]	; (1bf0 <nxdisp_SPI_init+0xb4>)
    1b9c:	400a      	ands	r2, r1
    1b9e:	601a      	str	r2, [r3, #0]
	SERCOM5->SPI.CTRLA.bit.CPOL = 0x00;		// Falling edge active (since clock is inverted)
    1ba0:	6819      	ldr	r1, [r3, #0]
    1ba2:	4a14      	ldr	r2, [pc, #80]	; (1bf4 <nxdisp_SPI_init+0xb8>)
    1ba4:	400a      	ands	r2, r1
    1ba6:	601a      	str	r2, [r3, #0]
	SERCOM5->SPI.CTRLA.bit.DORD = 0x00;		// MSB first
    1ba8:	6819      	ldr	r1, [r3, #0]
    1baa:	4a13      	ldr	r2, [pc, #76]	; (1bf8 <nxdisp_SPI_init+0xbc>)
    1bac:	400a      	ands	r2, r1
    1bae:	601a      	str	r2, [r3, #0]
	SERCOM5->SPI.CTRLA.bit.MODE = 0x03;		// SPI master operation
    1bb0:	6819      	ldr	r1, [r3, #0]
    1bb2:	221c      	movs	r2, #28
    1bb4:	4391      	bics	r1, r2
    1bb6:	3a10      	subs	r2, #16
    1bb8:	430a      	orrs	r2, r1
    1bba:	601a      	str	r2, [r3, #0]
	SERCOM5->SPI.CTRLB.bit.CHSIZE = 0x00;	// 8 bit character size
    1bbc:	6859      	ldr	r1, [r3, #4]
    1bbe:	2207      	movs	r2, #7
    1bc0:	4391      	bics	r1, r2
    1bc2:	6059      	str	r1, [r3, #4]
	
	SERCOM5->SPI.BAUD.reg = 39;				// SPI frequency 600 kHz 48M/(2*600k) - 1
    1bc4:	2227      	movs	r2, #39	; 0x27
    1bc6:	731a      	strb	r2, [r3, #12]
	
	// Enable the peripheral
	SERCOM5->SPI.CTRLA.bit.ENABLE = 1;
    1bc8:	6819      	ldr	r1, [r3, #0]
    1bca:	3a25      	subs	r2, #37	; 0x25
    1bcc:	430a      	orrs	r2, r1
    1bce:	601a      	str	r2, [r3, #0]
	while (SERCOM5->SPI.SYNCBUSY.bit.ENABLE); // Wait for the operation to complete
    1bd0:	4b06      	ldr	r3, [pc, #24]	; (1bec <nxdisp_SPI_init+0xb0>)
    1bd2:	69db      	ldr	r3, [r3, #28]
    1bd4:	079b      	lsls	r3, r3, #30
    1bd6:	d4fb      	bmi.n	1bd0 <nxdisp_SPI_init+0x94>
}
    1bd8:	bd10      	pop	{r4, pc}
    1bda:	46c0      	nop			; (mov r8, r8)
    1bdc:	40000400 	.word	0x40000400
    1be0:	40000c00 	.word	0x40000c00
    1be4:	fffff0ff 	.word	0xfffff0ff
    1be8:	41004400 	.word	0x41004400
    1bec:	42001c00 	.word	0x42001c00
    1bf0:	fffcffff 	.word	0xfffcffff
    1bf4:	dfffffff 	.word	0xdfffffff
    1bf8:	bfffffff 	.word	0xbfffffff

00001bfc <SSD_updateDisp>:
			}
		}
	}
}

void SSD_updateDisp() {
    1bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	gpio_set_pin(SSD_DIG0_PORT, SSD_DIG0_PIN, 1); // Active low, clear display to prevent ghosting
    1bfe:	2201      	movs	r2, #1
    1c00:	2103      	movs	r1, #3
    1c02:	2001      	movs	r0, #1
    1c04:	4c46      	ldr	r4, [pc, #280]	; (1d20 <SSD_updateDisp+0x124>)
    1c06:	47a0      	blx	r4
	gpio_set_pin(SSD_DIG1_PORT, SSD_DIG1_PIN, 1);
    1c08:	2201      	movs	r2, #1
    1c0a:	2102      	movs	r1, #2
    1c0c:	2001      	movs	r0, #1
    1c0e:	47a0      	blx	r4
	gpio_set_pin(SSD_DIG2_PORT, SSD_DIG2_PIN, 1);
    1c10:	2201      	movs	r2, #1
    1c12:	2101      	movs	r1, #1
    1c14:	2001      	movs	r0, #1
    1c16:	47a0      	blx	r4
	gpio_set_pin(SSD_DIG3_PORT, SSD_DIG3_PIN, 1);
    1c18:	2201      	movs	r2, #1
    1c1a:	2100      	movs	r1, #0
    1c1c:	2001      	movs	r0, #1
    1c1e:	47a0      	blx	r4

	gpio_set_pin(SSD_SEG_PORT, SSD_SEGA_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_A));
    1c20:	4d40      	ldr	r5, [pc, #256]	; (1d24 <SSD_updateDisp+0x128>)
    1c22:	682b      	ldr	r3, [r5, #0]
    1c24:	789a      	ldrb	r2, [r3, #2]
    1c26:	189b      	adds	r3, r3, r2
    1c28:	78da      	ldrb	r2, [r3, #3]
    1c2a:	2601      	movs	r6, #1
    1c2c:	2701      	movs	r7, #1
    1c2e:	407a      	eors	r2, r7
    1c30:	4032      	ands	r2, r6
    1c32:	2110      	movs	r1, #16
    1c34:	2000      	movs	r0, #0
    1c36:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGB_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_B));
    1c38:	682b      	ldr	r3, [r5, #0]
    1c3a:	789a      	ldrb	r2, [r3, #2]
    1c3c:	189b      	adds	r3, r3, r2
    1c3e:	78da      	ldrb	r2, [r3, #3]
    1c40:	0852      	lsrs	r2, r2, #1
    1c42:	407a      	eors	r2, r7
    1c44:	4032      	ands	r2, r6
    1c46:	2111      	movs	r1, #17
    1c48:	2000      	movs	r0, #0
    1c4a:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGC_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_C));
    1c4c:	682b      	ldr	r3, [r5, #0]
    1c4e:	789a      	ldrb	r2, [r3, #2]
    1c50:	189b      	adds	r3, r3, r2
    1c52:	78da      	ldrb	r2, [r3, #3]
    1c54:	0892      	lsrs	r2, r2, #2
    1c56:	407a      	eors	r2, r7
    1c58:	4032      	ands	r2, r6
    1c5a:	2112      	movs	r1, #18
    1c5c:	2000      	movs	r0, #0
    1c5e:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGD_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_D));
    1c60:	682b      	ldr	r3, [r5, #0]
    1c62:	789a      	ldrb	r2, [r3, #2]
    1c64:	189b      	adds	r3, r3, r2
    1c66:	78da      	ldrb	r2, [r3, #3]
    1c68:	08d2      	lsrs	r2, r2, #3
    1c6a:	407a      	eors	r2, r7
    1c6c:	4032      	ands	r2, r6
    1c6e:	2113      	movs	r1, #19
    1c70:	2000      	movs	r0, #0
    1c72:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGE_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_E));
    1c74:	682b      	ldr	r3, [r5, #0]
    1c76:	789a      	ldrb	r2, [r3, #2]
    1c78:	189b      	adds	r3, r3, r2
    1c7a:	78da      	ldrb	r2, [r3, #3]
    1c7c:	0912      	lsrs	r2, r2, #4
    1c7e:	407a      	eors	r2, r7
    1c80:	4032      	ands	r2, r6
    1c82:	2115      	movs	r1, #21
    1c84:	2000      	movs	r0, #0
    1c86:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGF_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_F));
    1c88:	682b      	ldr	r3, [r5, #0]
    1c8a:	789a      	ldrb	r2, [r3, #2]
    1c8c:	189b      	adds	r3, r3, r2
    1c8e:	78da      	ldrb	r2, [r3, #3]
    1c90:	0952      	lsrs	r2, r2, #5
    1c92:	407a      	eors	r2, r7
    1c94:	4032      	ands	r2, r6
    1c96:	210f      	movs	r1, #15
    1c98:	2000      	movs	r0, #0
    1c9a:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGG_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_G));
    1c9c:	682b      	ldr	r3, [r5, #0]
    1c9e:	789a      	ldrb	r2, [r3, #2]
    1ca0:	189b      	adds	r3, r3, r2
    1ca2:	78da      	ldrb	r2, [r3, #3]
    1ca4:	0992      	lsrs	r2, r2, #6
    1ca6:	407a      	eors	r2, r7
    1ca8:	4032      	ands	r2, r6
    1caa:	2116      	movs	r1, #22
    1cac:	2000      	movs	r0, #0
    1cae:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGDP_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_DP));
    1cb0:	682b      	ldr	r3, [r5, #0]
    1cb2:	789a      	ldrb	r2, [r3, #2]
    1cb4:	189b      	adds	r3, r3, r2
    1cb6:	78da      	ldrb	r2, [r3, #3]
    1cb8:	b252      	sxtb	r2, r2
    1cba:	43d2      	mvns	r2, r2
    1cbc:	0fd2      	lsrs	r2, r2, #31
    1cbe:	2117      	movs	r1, #23
    1cc0:	2000      	movs	r0, #0
    1cc2:	47a0      	blx	r4

	gpio_set_pin(SSD_DIG0_PORT, SSD_DIG0_PIN, ssd->currentDig != 0); // Active low
    1cc4:	682b      	ldr	r3, [r5, #0]
    1cc6:	789a      	ldrb	r2, [r3, #2]
    1cc8:	1e53      	subs	r3, r2, #1
    1cca:	419a      	sbcs	r2, r3
    1ccc:	2103      	movs	r1, #3
    1cce:	2001      	movs	r0, #1
    1cd0:	47a0      	blx	r4
	gpio_set_pin(SSD_DIG1_PORT, SSD_DIG1_PIN, ssd->currentDig != 1);
    1cd2:	682b      	ldr	r3, [r5, #0]
    1cd4:	789a      	ldrb	r2, [r3, #2]
    1cd6:	3a01      	subs	r2, #1
    1cd8:	1e53      	subs	r3, r2, #1
    1cda:	419a      	sbcs	r2, r3
    1cdc:	2102      	movs	r1, #2
    1cde:	2001      	movs	r0, #1
    1ce0:	47a0      	blx	r4
	gpio_set_pin(SSD_DIG2_PORT, SSD_DIG2_PIN, ssd->currentDig != 2);
    1ce2:	682b      	ldr	r3, [r5, #0]
    1ce4:	789a      	ldrb	r2, [r3, #2]
    1ce6:	3a02      	subs	r2, #2
    1ce8:	1e53      	subs	r3, r2, #1
    1cea:	419a      	sbcs	r2, r3
    1cec:	2101      	movs	r1, #1
    1cee:	2001      	movs	r0, #1
    1cf0:	47a0      	blx	r4
	gpio_set_pin(SSD_DIG3_PORT, SSD_DIG3_PIN, ssd->currentDig != 3);
    1cf2:	682b      	ldr	r3, [r5, #0]
    1cf4:	789a      	ldrb	r2, [r3, #2]
    1cf6:	3a03      	subs	r2, #3
    1cf8:	1e53      	subs	r3, r2, #1
    1cfa:	419a      	sbcs	r2, r3
    1cfc:	2100      	movs	r1, #0
    1cfe:	2001      	movs	r0, #1
    1d00:	47a0      	blx	r4
	ssd->currentDig++;
    1d02:	682a      	ldr	r2, [r5, #0]
    1d04:	7893      	ldrb	r3, [r2, #2]
    1d06:	3301      	adds	r3, #1
    1d08:	b2db      	uxtb	r3, r3
    1d0a:	7093      	strb	r3, [r2, #2]
	if (ssd->currentDig >= DISP_SIZE + ssd->blankInterval) {
    1d0c:	7891      	ldrb	r1, [r2, #2]
    1d0e:	b2c9      	uxtb	r1, r1
    1d10:	8913      	ldrh	r3, [r2, #8]
    1d12:	3304      	adds	r3, #4
    1d14:	4299      	cmp	r1, r3
    1d16:	db01      	blt.n	1d1c <SSD_updateDisp+0x120>
		ssd->currentDig = 0;
    1d18:	2300      	movs	r3, #0
    1d1a:	7093      	strb	r3, [r2, #2]
	}
}
    1d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d1e:	46c0      	nop			; (mov r8, r8)
    1d20:	00000625 	.word	0x00000625
    1d24:	20000acc 	.word	0x20000acc

00001d28 <SSDgpioInit>:
void SSD_setBrightness(int brightness) {
	
}


void SSDgpioInit() {
    1d28:	b570      	push	{r4, r5, r6, lr}
	gpio_set_pin_dir(SSD_DIG0_PORT, SSD_DIG0_PIN, GPIO_DIR_OUT); // Active low
    1d2a:	2201      	movs	r2, #1
    1d2c:	2103      	movs	r1, #3
    1d2e:	2001      	movs	r0, #1
    1d30:	4c27      	ldr	r4, [pc, #156]	; (1dd0 <SSDgpioInit+0xa8>)
    1d32:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_DIG1_PORT, SSD_DIG1_PIN, GPIO_DIR_OUT);
    1d34:	2201      	movs	r2, #1
    1d36:	2102      	movs	r1, #2
    1d38:	2001      	movs	r0, #1
    1d3a:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_DIG2_PORT, SSD_DIG2_PIN, GPIO_DIR_OUT);
    1d3c:	2201      	movs	r2, #1
    1d3e:	2101      	movs	r1, #1
    1d40:	2001      	movs	r0, #1
    1d42:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_DIG3_PORT, SSD_DIG3_PIN, GPIO_DIR_OUT);
    1d44:	2201      	movs	r2, #1
    1d46:	2100      	movs	r1, #0
    1d48:	2001      	movs	r0, #1
    1d4a:	47a0      	blx	r4
	
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGA_PIN, 1);
    1d4c:	2201      	movs	r2, #1
    1d4e:	2110      	movs	r1, #16
    1d50:	2000      	movs	r0, #0
    1d52:	4d20      	ldr	r5, [pc, #128]	; (1dd4 <SSDgpioInit+0xac>)
    1d54:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGB_PIN, 1);
    1d56:	2201      	movs	r2, #1
    1d58:	2111      	movs	r1, #17
    1d5a:	2000      	movs	r0, #0
    1d5c:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGC_PIN, 1);
    1d5e:	2201      	movs	r2, #1
    1d60:	2112      	movs	r1, #18
    1d62:	2000      	movs	r0, #0
    1d64:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGD_PIN, 1);
    1d66:	2201      	movs	r2, #1
    1d68:	2113      	movs	r1, #19
    1d6a:	2000      	movs	r0, #0
    1d6c:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGE_PIN, 1);
    1d6e:	2201      	movs	r2, #1
    1d70:	2115      	movs	r1, #21
    1d72:	2000      	movs	r0, #0
    1d74:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGF_PIN, 1);
    1d76:	2201      	movs	r2, #1
    1d78:	210f      	movs	r1, #15
    1d7a:	2000      	movs	r0, #0
    1d7c:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGG_PIN, 1);
    1d7e:	2201      	movs	r2, #1
    1d80:	2116      	movs	r1, #22
    1d82:	2000      	movs	r0, #0
    1d84:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGDP_PIN, 1);
    1d86:	2201      	movs	r2, #1
    1d88:	2117      	movs	r1, #23
    1d8a:	2000      	movs	r0, #0
    1d8c:	47a8      	blx	r5

	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGA_PIN, GPIO_DIR_OUT);
    1d8e:	2201      	movs	r2, #1
    1d90:	2110      	movs	r1, #16
    1d92:	2000      	movs	r0, #0
    1d94:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGB_PIN, GPIO_DIR_OUT);
    1d96:	2201      	movs	r2, #1
    1d98:	2111      	movs	r1, #17
    1d9a:	2000      	movs	r0, #0
    1d9c:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGC_PIN, GPIO_DIR_OUT);
    1d9e:	2201      	movs	r2, #1
    1da0:	2112      	movs	r1, #18
    1da2:	2000      	movs	r0, #0
    1da4:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGD_PIN, GPIO_DIR_OUT);
    1da6:	2201      	movs	r2, #1
    1da8:	2113      	movs	r1, #19
    1daa:	2000      	movs	r0, #0
    1dac:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGE_PIN, GPIO_DIR_OUT);
    1dae:	2201      	movs	r2, #1
    1db0:	2115      	movs	r1, #21
    1db2:	2000      	movs	r0, #0
    1db4:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGF_PIN, GPIO_DIR_OUT);
    1db6:	2201      	movs	r2, #1
    1db8:	210f      	movs	r1, #15
    1dba:	2000      	movs	r0, #0
    1dbc:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGG_PIN, GPIO_DIR_OUT);
    1dbe:	2201      	movs	r2, #1
    1dc0:	2116      	movs	r1, #22
    1dc2:	2000      	movs	r0, #0
    1dc4:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGDP_PIN, GPIO_DIR_OUT);
    1dc6:	2201      	movs	r2, #1
    1dc8:	2117      	movs	r1, #23
    1dca:	2000      	movs	r0, #0
    1dcc:	47a0      	blx	r4
}
    1dce:	bd70      	pop	{r4, r5, r6, pc}
    1dd0:	00000671 	.word	0x00000671
    1dd4:	0000070d 	.word	0x0000070d

00001dd8 <SSD_init>:

void SSD_init(SSDisplay* disp_status) {
    1dd8:	b510      	push	{r4, lr}
	ssd = disp_status;
    1dda:	4b09      	ldr	r3, [pc, #36]	; (1e00 <SSD_init+0x28>)
    1ddc:	6018      	str	r0, [r3, #0]
	ssd->update_period_ticks = 16;
    1dde:	2310      	movs	r3, #16
    1de0:	8003      	strh	r3, [r0, #0]
	ssd->currentDig = 0;
    1de2:	2300      	movs	r3, #0
    1de4:	7083      	strb	r3, [r0, #2]
	for (int i = 0; i < DISP_SIZE; i++) {
    1de6:	e003      	b.n	1df0 <SSD_init+0x18>
		ssd->currentData[i] = 0;
    1de8:	18c2      	adds	r2, r0, r3
    1dea:	2100      	movs	r1, #0
    1dec:	70d1      	strb	r1, [r2, #3]
	for (int i = 0; i < DISP_SIZE; i++) {
    1dee:	3301      	adds	r3, #1
    1df0:	2b03      	cmp	r3, #3
    1df2:	ddf9      	ble.n	1de8 <SSD_init+0x10>
	}
	ssd->blankInterval = 0;
    1df4:	2300      	movs	r3, #0
    1df6:	8103      	strh	r3, [r0, #8]
	SSDgpioInit();
    1df8:	4b02      	ldr	r3, [pc, #8]	; (1e04 <SSD_init+0x2c>)
    1dfa:	4798      	blx	r3
}
    1dfc:	bd10      	pop	{r4, pc}
    1dfe:	46c0      	nop			; (mov r8, r8)
    1e00:	20000acc 	.word	0x20000acc
    1e04:	00001d29 	.word	0x00001d29

00001e08 <__divsi3>:
    1e08:	4603      	mov	r3, r0
    1e0a:	430b      	orrs	r3, r1
    1e0c:	d47f      	bmi.n	1f0e <__divsi3+0x106>
    1e0e:	2200      	movs	r2, #0
    1e10:	0843      	lsrs	r3, r0, #1
    1e12:	428b      	cmp	r3, r1
    1e14:	d374      	bcc.n	1f00 <__divsi3+0xf8>
    1e16:	0903      	lsrs	r3, r0, #4
    1e18:	428b      	cmp	r3, r1
    1e1a:	d35f      	bcc.n	1edc <__divsi3+0xd4>
    1e1c:	0a03      	lsrs	r3, r0, #8
    1e1e:	428b      	cmp	r3, r1
    1e20:	d344      	bcc.n	1eac <__divsi3+0xa4>
    1e22:	0b03      	lsrs	r3, r0, #12
    1e24:	428b      	cmp	r3, r1
    1e26:	d328      	bcc.n	1e7a <__divsi3+0x72>
    1e28:	0c03      	lsrs	r3, r0, #16
    1e2a:	428b      	cmp	r3, r1
    1e2c:	d30d      	bcc.n	1e4a <__divsi3+0x42>
    1e2e:	22ff      	movs	r2, #255	; 0xff
    1e30:	0209      	lsls	r1, r1, #8
    1e32:	ba12      	rev	r2, r2
    1e34:	0c03      	lsrs	r3, r0, #16
    1e36:	428b      	cmp	r3, r1
    1e38:	d302      	bcc.n	1e40 <__divsi3+0x38>
    1e3a:	1212      	asrs	r2, r2, #8
    1e3c:	0209      	lsls	r1, r1, #8
    1e3e:	d065      	beq.n	1f0c <__divsi3+0x104>
    1e40:	0b03      	lsrs	r3, r0, #12
    1e42:	428b      	cmp	r3, r1
    1e44:	d319      	bcc.n	1e7a <__divsi3+0x72>
    1e46:	e000      	b.n	1e4a <__divsi3+0x42>
    1e48:	0a09      	lsrs	r1, r1, #8
    1e4a:	0bc3      	lsrs	r3, r0, #15
    1e4c:	428b      	cmp	r3, r1
    1e4e:	d301      	bcc.n	1e54 <__divsi3+0x4c>
    1e50:	03cb      	lsls	r3, r1, #15
    1e52:	1ac0      	subs	r0, r0, r3
    1e54:	4152      	adcs	r2, r2
    1e56:	0b83      	lsrs	r3, r0, #14
    1e58:	428b      	cmp	r3, r1
    1e5a:	d301      	bcc.n	1e60 <__divsi3+0x58>
    1e5c:	038b      	lsls	r3, r1, #14
    1e5e:	1ac0      	subs	r0, r0, r3
    1e60:	4152      	adcs	r2, r2
    1e62:	0b43      	lsrs	r3, r0, #13
    1e64:	428b      	cmp	r3, r1
    1e66:	d301      	bcc.n	1e6c <__divsi3+0x64>
    1e68:	034b      	lsls	r3, r1, #13
    1e6a:	1ac0      	subs	r0, r0, r3
    1e6c:	4152      	adcs	r2, r2
    1e6e:	0b03      	lsrs	r3, r0, #12
    1e70:	428b      	cmp	r3, r1
    1e72:	d301      	bcc.n	1e78 <__divsi3+0x70>
    1e74:	030b      	lsls	r3, r1, #12
    1e76:	1ac0      	subs	r0, r0, r3
    1e78:	4152      	adcs	r2, r2
    1e7a:	0ac3      	lsrs	r3, r0, #11
    1e7c:	428b      	cmp	r3, r1
    1e7e:	d301      	bcc.n	1e84 <__divsi3+0x7c>
    1e80:	02cb      	lsls	r3, r1, #11
    1e82:	1ac0      	subs	r0, r0, r3
    1e84:	4152      	adcs	r2, r2
    1e86:	0a83      	lsrs	r3, r0, #10
    1e88:	428b      	cmp	r3, r1
    1e8a:	d301      	bcc.n	1e90 <__divsi3+0x88>
    1e8c:	028b      	lsls	r3, r1, #10
    1e8e:	1ac0      	subs	r0, r0, r3
    1e90:	4152      	adcs	r2, r2
    1e92:	0a43      	lsrs	r3, r0, #9
    1e94:	428b      	cmp	r3, r1
    1e96:	d301      	bcc.n	1e9c <__divsi3+0x94>
    1e98:	024b      	lsls	r3, r1, #9
    1e9a:	1ac0      	subs	r0, r0, r3
    1e9c:	4152      	adcs	r2, r2
    1e9e:	0a03      	lsrs	r3, r0, #8
    1ea0:	428b      	cmp	r3, r1
    1ea2:	d301      	bcc.n	1ea8 <__divsi3+0xa0>
    1ea4:	020b      	lsls	r3, r1, #8
    1ea6:	1ac0      	subs	r0, r0, r3
    1ea8:	4152      	adcs	r2, r2
    1eaa:	d2cd      	bcs.n	1e48 <__divsi3+0x40>
    1eac:	09c3      	lsrs	r3, r0, #7
    1eae:	428b      	cmp	r3, r1
    1eb0:	d301      	bcc.n	1eb6 <__divsi3+0xae>
    1eb2:	01cb      	lsls	r3, r1, #7
    1eb4:	1ac0      	subs	r0, r0, r3
    1eb6:	4152      	adcs	r2, r2
    1eb8:	0983      	lsrs	r3, r0, #6
    1eba:	428b      	cmp	r3, r1
    1ebc:	d301      	bcc.n	1ec2 <__divsi3+0xba>
    1ebe:	018b      	lsls	r3, r1, #6
    1ec0:	1ac0      	subs	r0, r0, r3
    1ec2:	4152      	adcs	r2, r2
    1ec4:	0943      	lsrs	r3, r0, #5
    1ec6:	428b      	cmp	r3, r1
    1ec8:	d301      	bcc.n	1ece <__divsi3+0xc6>
    1eca:	014b      	lsls	r3, r1, #5
    1ecc:	1ac0      	subs	r0, r0, r3
    1ece:	4152      	adcs	r2, r2
    1ed0:	0903      	lsrs	r3, r0, #4
    1ed2:	428b      	cmp	r3, r1
    1ed4:	d301      	bcc.n	1eda <__divsi3+0xd2>
    1ed6:	010b      	lsls	r3, r1, #4
    1ed8:	1ac0      	subs	r0, r0, r3
    1eda:	4152      	adcs	r2, r2
    1edc:	08c3      	lsrs	r3, r0, #3
    1ede:	428b      	cmp	r3, r1
    1ee0:	d301      	bcc.n	1ee6 <__divsi3+0xde>
    1ee2:	00cb      	lsls	r3, r1, #3
    1ee4:	1ac0      	subs	r0, r0, r3
    1ee6:	4152      	adcs	r2, r2
    1ee8:	0883      	lsrs	r3, r0, #2
    1eea:	428b      	cmp	r3, r1
    1eec:	d301      	bcc.n	1ef2 <__divsi3+0xea>
    1eee:	008b      	lsls	r3, r1, #2
    1ef0:	1ac0      	subs	r0, r0, r3
    1ef2:	4152      	adcs	r2, r2
    1ef4:	0843      	lsrs	r3, r0, #1
    1ef6:	428b      	cmp	r3, r1
    1ef8:	d301      	bcc.n	1efe <__divsi3+0xf6>
    1efa:	004b      	lsls	r3, r1, #1
    1efc:	1ac0      	subs	r0, r0, r3
    1efe:	4152      	adcs	r2, r2
    1f00:	1a41      	subs	r1, r0, r1
    1f02:	d200      	bcs.n	1f06 <__divsi3+0xfe>
    1f04:	4601      	mov	r1, r0
    1f06:	4152      	adcs	r2, r2
    1f08:	4610      	mov	r0, r2
    1f0a:	4770      	bx	lr
    1f0c:	e05d      	b.n	1fca <__divsi3+0x1c2>
    1f0e:	0fca      	lsrs	r2, r1, #31
    1f10:	d000      	beq.n	1f14 <__divsi3+0x10c>
    1f12:	4249      	negs	r1, r1
    1f14:	1003      	asrs	r3, r0, #32
    1f16:	d300      	bcc.n	1f1a <__divsi3+0x112>
    1f18:	4240      	negs	r0, r0
    1f1a:	4053      	eors	r3, r2
    1f1c:	2200      	movs	r2, #0
    1f1e:	469c      	mov	ip, r3
    1f20:	0903      	lsrs	r3, r0, #4
    1f22:	428b      	cmp	r3, r1
    1f24:	d32d      	bcc.n	1f82 <__divsi3+0x17a>
    1f26:	0a03      	lsrs	r3, r0, #8
    1f28:	428b      	cmp	r3, r1
    1f2a:	d312      	bcc.n	1f52 <__divsi3+0x14a>
    1f2c:	22fc      	movs	r2, #252	; 0xfc
    1f2e:	0189      	lsls	r1, r1, #6
    1f30:	ba12      	rev	r2, r2
    1f32:	0a03      	lsrs	r3, r0, #8
    1f34:	428b      	cmp	r3, r1
    1f36:	d30c      	bcc.n	1f52 <__divsi3+0x14a>
    1f38:	0189      	lsls	r1, r1, #6
    1f3a:	1192      	asrs	r2, r2, #6
    1f3c:	428b      	cmp	r3, r1
    1f3e:	d308      	bcc.n	1f52 <__divsi3+0x14a>
    1f40:	0189      	lsls	r1, r1, #6
    1f42:	1192      	asrs	r2, r2, #6
    1f44:	428b      	cmp	r3, r1
    1f46:	d304      	bcc.n	1f52 <__divsi3+0x14a>
    1f48:	0189      	lsls	r1, r1, #6
    1f4a:	d03a      	beq.n	1fc2 <__divsi3+0x1ba>
    1f4c:	1192      	asrs	r2, r2, #6
    1f4e:	e000      	b.n	1f52 <__divsi3+0x14a>
    1f50:	0989      	lsrs	r1, r1, #6
    1f52:	09c3      	lsrs	r3, r0, #7
    1f54:	428b      	cmp	r3, r1
    1f56:	d301      	bcc.n	1f5c <__divsi3+0x154>
    1f58:	01cb      	lsls	r3, r1, #7
    1f5a:	1ac0      	subs	r0, r0, r3
    1f5c:	4152      	adcs	r2, r2
    1f5e:	0983      	lsrs	r3, r0, #6
    1f60:	428b      	cmp	r3, r1
    1f62:	d301      	bcc.n	1f68 <__divsi3+0x160>
    1f64:	018b      	lsls	r3, r1, #6
    1f66:	1ac0      	subs	r0, r0, r3
    1f68:	4152      	adcs	r2, r2
    1f6a:	0943      	lsrs	r3, r0, #5
    1f6c:	428b      	cmp	r3, r1
    1f6e:	d301      	bcc.n	1f74 <__divsi3+0x16c>
    1f70:	014b      	lsls	r3, r1, #5
    1f72:	1ac0      	subs	r0, r0, r3
    1f74:	4152      	adcs	r2, r2
    1f76:	0903      	lsrs	r3, r0, #4
    1f78:	428b      	cmp	r3, r1
    1f7a:	d301      	bcc.n	1f80 <__divsi3+0x178>
    1f7c:	010b      	lsls	r3, r1, #4
    1f7e:	1ac0      	subs	r0, r0, r3
    1f80:	4152      	adcs	r2, r2
    1f82:	08c3      	lsrs	r3, r0, #3
    1f84:	428b      	cmp	r3, r1
    1f86:	d301      	bcc.n	1f8c <__divsi3+0x184>
    1f88:	00cb      	lsls	r3, r1, #3
    1f8a:	1ac0      	subs	r0, r0, r3
    1f8c:	4152      	adcs	r2, r2
    1f8e:	0883      	lsrs	r3, r0, #2
    1f90:	428b      	cmp	r3, r1
    1f92:	d301      	bcc.n	1f98 <__divsi3+0x190>
    1f94:	008b      	lsls	r3, r1, #2
    1f96:	1ac0      	subs	r0, r0, r3
    1f98:	4152      	adcs	r2, r2
    1f9a:	d2d9      	bcs.n	1f50 <__divsi3+0x148>
    1f9c:	0843      	lsrs	r3, r0, #1
    1f9e:	428b      	cmp	r3, r1
    1fa0:	d301      	bcc.n	1fa6 <__divsi3+0x19e>
    1fa2:	004b      	lsls	r3, r1, #1
    1fa4:	1ac0      	subs	r0, r0, r3
    1fa6:	4152      	adcs	r2, r2
    1fa8:	1a41      	subs	r1, r0, r1
    1faa:	d200      	bcs.n	1fae <__divsi3+0x1a6>
    1fac:	4601      	mov	r1, r0
    1fae:	4663      	mov	r3, ip
    1fb0:	4152      	adcs	r2, r2
    1fb2:	105b      	asrs	r3, r3, #1
    1fb4:	4610      	mov	r0, r2
    1fb6:	d301      	bcc.n	1fbc <__divsi3+0x1b4>
    1fb8:	4240      	negs	r0, r0
    1fba:	2b00      	cmp	r3, #0
    1fbc:	d500      	bpl.n	1fc0 <__divsi3+0x1b8>
    1fbe:	4249      	negs	r1, r1
    1fc0:	4770      	bx	lr
    1fc2:	4663      	mov	r3, ip
    1fc4:	105b      	asrs	r3, r3, #1
    1fc6:	d300      	bcc.n	1fca <__divsi3+0x1c2>
    1fc8:	4240      	negs	r0, r0
    1fca:	b501      	push	{r0, lr}
    1fcc:	2000      	movs	r0, #0
    1fce:	f000 f805 	bl	1fdc <__aeabi_idiv0>
    1fd2:	bd02      	pop	{r1, pc}

00001fd4 <__aeabi_idivmod>:
    1fd4:	2900      	cmp	r1, #0
    1fd6:	d0f8      	beq.n	1fca <__divsi3+0x1c2>
    1fd8:	e716      	b.n	1e08 <__divsi3>
    1fda:	4770      	bx	lr

00001fdc <__aeabi_idiv0>:
    1fdc:	4770      	bx	lr
    1fde:	46c0      	nop			; (mov r8, r8)

00001fe0 <__aeabi_dadd>:
    1fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fe2:	4645      	mov	r5, r8
    1fe4:	46de      	mov	lr, fp
    1fe6:	4657      	mov	r7, sl
    1fe8:	464e      	mov	r6, r9
    1fea:	030c      	lsls	r4, r1, #12
    1fec:	b5e0      	push	{r5, r6, r7, lr}
    1fee:	004e      	lsls	r6, r1, #1
    1ff0:	0fc9      	lsrs	r1, r1, #31
    1ff2:	4688      	mov	r8, r1
    1ff4:	000d      	movs	r5, r1
    1ff6:	0a61      	lsrs	r1, r4, #9
    1ff8:	0f44      	lsrs	r4, r0, #29
    1ffa:	430c      	orrs	r4, r1
    1ffc:	00c7      	lsls	r7, r0, #3
    1ffe:	0319      	lsls	r1, r3, #12
    2000:	0058      	lsls	r0, r3, #1
    2002:	0fdb      	lsrs	r3, r3, #31
    2004:	469b      	mov	fp, r3
    2006:	0a4b      	lsrs	r3, r1, #9
    2008:	0f51      	lsrs	r1, r2, #29
    200a:	430b      	orrs	r3, r1
    200c:	0d76      	lsrs	r6, r6, #21
    200e:	0d40      	lsrs	r0, r0, #21
    2010:	0019      	movs	r1, r3
    2012:	00d2      	lsls	r2, r2, #3
    2014:	45d8      	cmp	r8, fp
    2016:	d100      	bne.n	201a <__aeabi_dadd+0x3a>
    2018:	e0ae      	b.n	2178 <__aeabi_dadd+0x198>
    201a:	1a35      	subs	r5, r6, r0
    201c:	2d00      	cmp	r5, #0
    201e:	dc00      	bgt.n	2022 <__aeabi_dadd+0x42>
    2020:	e0f6      	b.n	2210 <__aeabi_dadd+0x230>
    2022:	2800      	cmp	r0, #0
    2024:	d10f      	bne.n	2046 <__aeabi_dadd+0x66>
    2026:	4313      	orrs	r3, r2
    2028:	d100      	bne.n	202c <__aeabi_dadd+0x4c>
    202a:	e0db      	b.n	21e4 <__aeabi_dadd+0x204>
    202c:	1e6b      	subs	r3, r5, #1
    202e:	2b00      	cmp	r3, #0
    2030:	d000      	beq.n	2034 <__aeabi_dadd+0x54>
    2032:	e137      	b.n	22a4 <__aeabi_dadd+0x2c4>
    2034:	1aba      	subs	r2, r7, r2
    2036:	4297      	cmp	r7, r2
    2038:	41bf      	sbcs	r7, r7
    203a:	1a64      	subs	r4, r4, r1
    203c:	427f      	negs	r7, r7
    203e:	1be4      	subs	r4, r4, r7
    2040:	2601      	movs	r6, #1
    2042:	0017      	movs	r7, r2
    2044:	e024      	b.n	2090 <__aeabi_dadd+0xb0>
    2046:	4bc6      	ldr	r3, [pc, #792]	; (2360 <__aeabi_dadd+0x380>)
    2048:	429e      	cmp	r6, r3
    204a:	d04d      	beq.n	20e8 <__aeabi_dadd+0x108>
    204c:	2380      	movs	r3, #128	; 0x80
    204e:	041b      	lsls	r3, r3, #16
    2050:	4319      	orrs	r1, r3
    2052:	2d38      	cmp	r5, #56	; 0x38
    2054:	dd00      	ble.n	2058 <__aeabi_dadd+0x78>
    2056:	e107      	b.n	2268 <__aeabi_dadd+0x288>
    2058:	2d1f      	cmp	r5, #31
    205a:	dd00      	ble.n	205e <__aeabi_dadd+0x7e>
    205c:	e138      	b.n	22d0 <__aeabi_dadd+0x2f0>
    205e:	2020      	movs	r0, #32
    2060:	1b43      	subs	r3, r0, r5
    2062:	469a      	mov	sl, r3
    2064:	000b      	movs	r3, r1
    2066:	4650      	mov	r0, sl
    2068:	4083      	lsls	r3, r0
    206a:	4699      	mov	r9, r3
    206c:	0013      	movs	r3, r2
    206e:	4648      	mov	r0, r9
    2070:	40eb      	lsrs	r3, r5
    2072:	4318      	orrs	r0, r3
    2074:	0003      	movs	r3, r0
    2076:	4650      	mov	r0, sl
    2078:	4082      	lsls	r2, r0
    207a:	1e50      	subs	r0, r2, #1
    207c:	4182      	sbcs	r2, r0
    207e:	40e9      	lsrs	r1, r5
    2080:	431a      	orrs	r2, r3
    2082:	1aba      	subs	r2, r7, r2
    2084:	1a61      	subs	r1, r4, r1
    2086:	4297      	cmp	r7, r2
    2088:	41a4      	sbcs	r4, r4
    208a:	0017      	movs	r7, r2
    208c:	4264      	negs	r4, r4
    208e:	1b0c      	subs	r4, r1, r4
    2090:	0223      	lsls	r3, r4, #8
    2092:	d562      	bpl.n	215a <__aeabi_dadd+0x17a>
    2094:	0264      	lsls	r4, r4, #9
    2096:	0a65      	lsrs	r5, r4, #9
    2098:	2d00      	cmp	r5, #0
    209a:	d100      	bne.n	209e <__aeabi_dadd+0xbe>
    209c:	e0df      	b.n	225e <__aeabi_dadd+0x27e>
    209e:	0028      	movs	r0, r5
    20a0:	f000 faae 	bl	2600 <__clzsi2>
    20a4:	0003      	movs	r3, r0
    20a6:	3b08      	subs	r3, #8
    20a8:	2b1f      	cmp	r3, #31
    20aa:	dd00      	ble.n	20ae <__aeabi_dadd+0xce>
    20ac:	e0d2      	b.n	2254 <__aeabi_dadd+0x274>
    20ae:	2220      	movs	r2, #32
    20b0:	003c      	movs	r4, r7
    20b2:	1ad2      	subs	r2, r2, r3
    20b4:	409d      	lsls	r5, r3
    20b6:	40d4      	lsrs	r4, r2
    20b8:	409f      	lsls	r7, r3
    20ba:	4325      	orrs	r5, r4
    20bc:	429e      	cmp	r6, r3
    20be:	dd00      	ble.n	20c2 <__aeabi_dadd+0xe2>
    20c0:	e0c4      	b.n	224c <__aeabi_dadd+0x26c>
    20c2:	1b9e      	subs	r6, r3, r6
    20c4:	1c73      	adds	r3, r6, #1
    20c6:	2b1f      	cmp	r3, #31
    20c8:	dd00      	ble.n	20cc <__aeabi_dadd+0xec>
    20ca:	e0f1      	b.n	22b0 <__aeabi_dadd+0x2d0>
    20cc:	2220      	movs	r2, #32
    20ce:	0038      	movs	r0, r7
    20d0:	0029      	movs	r1, r5
    20d2:	1ad2      	subs	r2, r2, r3
    20d4:	40d8      	lsrs	r0, r3
    20d6:	4091      	lsls	r1, r2
    20d8:	4097      	lsls	r7, r2
    20da:	002c      	movs	r4, r5
    20dc:	4301      	orrs	r1, r0
    20de:	1e78      	subs	r0, r7, #1
    20e0:	4187      	sbcs	r7, r0
    20e2:	40dc      	lsrs	r4, r3
    20e4:	2600      	movs	r6, #0
    20e6:	430f      	orrs	r7, r1
    20e8:	077b      	lsls	r3, r7, #29
    20ea:	d009      	beq.n	2100 <__aeabi_dadd+0x120>
    20ec:	230f      	movs	r3, #15
    20ee:	403b      	ands	r3, r7
    20f0:	2b04      	cmp	r3, #4
    20f2:	d005      	beq.n	2100 <__aeabi_dadd+0x120>
    20f4:	1d3b      	adds	r3, r7, #4
    20f6:	42bb      	cmp	r3, r7
    20f8:	41bf      	sbcs	r7, r7
    20fa:	427f      	negs	r7, r7
    20fc:	19e4      	adds	r4, r4, r7
    20fe:	001f      	movs	r7, r3
    2100:	0223      	lsls	r3, r4, #8
    2102:	d52c      	bpl.n	215e <__aeabi_dadd+0x17e>
    2104:	4b96      	ldr	r3, [pc, #600]	; (2360 <__aeabi_dadd+0x380>)
    2106:	3601      	adds	r6, #1
    2108:	429e      	cmp	r6, r3
    210a:	d100      	bne.n	210e <__aeabi_dadd+0x12e>
    210c:	e09a      	b.n	2244 <__aeabi_dadd+0x264>
    210e:	4645      	mov	r5, r8
    2110:	4b94      	ldr	r3, [pc, #592]	; (2364 <__aeabi_dadd+0x384>)
    2112:	08ff      	lsrs	r7, r7, #3
    2114:	401c      	ands	r4, r3
    2116:	0760      	lsls	r0, r4, #29
    2118:	0576      	lsls	r6, r6, #21
    211a:	0264      	lsls	r4, r4, #9
    211c:	4307      	orrs	r7, r0
    211e:	0b24      	lsrs	r4, r4, #12
    2120:	0d76      	lsrs	r6, r6, #21
    2122:	2100      	movs	r1, #0
    2124:	0324      	lsls	r4, r4, #12
    2126:	0b23      	lsrs	r3, r4, #12
    2128:	0d0c      	lsrs	r4, r1, #20
    212a:	4a8f      	ldr	r2, [pc, #572]	; (2368 <__aeabi_dadd+0x388>)
    212c:	0524      	lsls	r4, r4, #20
    212e:	431c      	orrs	r4, r3
    2130:	4014      	ands	r4, r2
    2132:	0533      	lsls	r3, r6, #20
    2134:	4323      	orrs	r3, r4
    2136:	005b      	lsls	r3, r3, #1
    2138:	07ed      	lsls	r5, r5, #31
    213a:	085b      	lsrs	r3, r3, #1
    213c:	432b      	orrs	r3, r5
    213e:	0038      	movs	r0, r7
    2140:	0019      	movs	r1, r3
    2142:	bc3c      	pop	{r2, r3, r4, r5}
    2144:	4690      	mov	r8, r2
    2146:	4699      	mov	r9, r3
    2148:	46a2      	mov	sl, r4
    214a:	46ab      	mov	fp, r5
    214c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    214e:	4664      	mov	r4, ip
    2150:	4304      	orrs	r4, r0
    2152:	d100      	bne.n	2156 <__aeabi_dadd+0x176>
    2154:	e211      	b.n	257a <__aeabi_dadd+0x59a>
    2156:	0004      	movs	r4, r0
    2158:	4667      	mov	r7, ip
    215a:	077b      	lsls	r3, r7, #29
    215c:	d1c6      	bne.n	20ec <__aeabi_dadd+0x10c>
    215e:	4645      	mov	r5, r8
    2160:	0760      	lsls	r0, r4, #29
    2162:	08ff      	lsrs	r7, r7, #3
    2164:	4307      	orrs	r7, r0
    2166:	08e4      	lsrs	r4, r4, #3
    2168:	4b7d      	ldr	r3, [pc, #500]	; (2360 <__aeabi_dadd+0x380>)
    216a:	429e      	cmp	r6, r3
    216c:	d030      	beq.n	21d0 <__aeabi_dadd+0x1f0>
    216e:	0324      	lsls	r4, r4, #12
    2170:	0576      	lsls	r6, r6, #21
    2172:	0b24      	lsrs	r4, r4, #12
    2174:	0d76      	lsrs	r6, r6, #21
    2176:	e7d4      	b.n	2122 <__aeabi_dadd+0x142>
    2178:	1a33      	subs	r3, r6, r0
    217a:	469a      	mov	sl, r3
    217c:	2b00      	cmp	r3, #0
    217e:	dd78      	ble.n	2272 <__aeabi_dadd+0x292>
    2180:	2800      	cmp	r0, #0
    2182:	d031      	beq.n	21e8 <__aeabi_dadd+0x208>
    2184:	4876      	ldr	r0, [pc, #472]	; (2360 <__aeabi_dadd+0x380>)
    2186:	4286      	cmp	r6, r0
    2188:	d0ae      	beq.n	20e8 <__aeabi_dadd+0x108>
    218a:	2080      	movs	r0, #128	; 0x80
    218c:	0400      	lsls	r0, r0, #16
    218e:	4301      	orrs	r1, r0
    2190:	4653      	mov	r3, sl
    2192:	2b38      	cmp	r3, #56	; 0x38
    2194:	dc00      	bgt.n	2198 <__aeabi_dadd+0x1b8>
    2196:	e0e9      	b.n	236c <__aeabi_dadd+0x38c>
    2198:	430a      	orrs	r2, r1
    219a:	1e51      	subs	r1, r2, #1
    219c:	418a      	sbcs	r2, r1
    219e:	2100      	movs	r1, #0
    21a0:	19d2      	adds	r2, r2, r7
    21a2:	42ba      	cmp	r2, r7
    21a4:	41bf      	sbcs	r7, r7
    21a6:	1909      	adds	r1, r1, r4
    21a8:	427c      	negs	r4, r7
    21aa:	0017      	movs	r7, r2
    21ac:	190c      	adds	r4, r1, r4
    21ae:	0223      	lsls	r3, r4, #8
    21b0:	d5d3      	bpl.n	215a <__aeabi_dadd+0x17a>
    21b2:	4b6b      	ldr	r3, [pc, #428]	; (2360 <__aeabi_dadd+0x380>)
    21b4:	3601      	adds	r6, #1
    21b6:	429e      	cmp	r6, r3
    21b8:	d100      	bne.n	21bc <__aeabi_dadd+0x1dc>
    21ba:	e13a      	b.n	2432 <__aeabi_dadd+0x452>
    21bc:	2001      	movs	r0, #1
    21be:	4b69      	ldr	r3, [pc, #420]	; (2364 <__aeabi_dadd+0x384>)
    21c0:	401c      	ands	r4, r3
    21c2:	087b      	lsrs	r3, r7, #1
    21c4:	4007      	ands	r7, r0
    21c6:	431f      	orrs	r7, r3
    21c8:	07e0      	lsls	r0, r4, #31
    21ca:	4307      	orrs	r7, r0
    21cc:	0864      	lsrs	r4, r4, #1
    21ce:	e78b      	b.n	20e8 <__aeabi_dadd+0x108>
    21d0:	0023      	movs	r3, r4
    21d2:	433b      	orrs	r3, r7
    21d4:	d100      	bne.n	21d8 <__aeabi_dadd+0x1f8>
    21d6:	e1cb      	b.n	2570 <__aeabi_dadd+0x590>
    21d8:	2280      	movs	r2, #128	; 0x80
    21da:	0312      	lsls	r2, r2, #12
    21dc:	4314      	orrs	r4, r2
    21de:	0324      	lsls	r4, r4, #12
    21e0:	0b24      	lsrs	r4, r4, #12
    21e2:	e79e      	b.n	2122 <__aeabi_dadd+0x142>
    21e4:	002e      	movs	r6, r5
    21e6:	e77f      	b.n	20e8 <__aeabi_dadd+0x108>
    21e8:	0008      	movs	r0, r1
    21ea:	4310      	orrs	r0, r2
    21ec:	d100      	bne.n	21f0 <__aeabi_dadd+0x210>
    21ee:	e0b4      	b.n	235a <__aeabi_dadd+0x37a>
    21f0:	1e58      	subs	r0, r3, #1
    21f2:	2800      	cmp	r0, #0
    21f4:	d000      	beq.n	21f8 <__aeabi_dadd+0x218>
    21f6:	e0de      	b.n	23b6 <__aeabi_dadd+0x3d6>
    21f8:	18ba      	adds	r2, r7, r2
    21fa:	42ba      	cmp	r2, r7
    21fc:	419b      	sbcs	r3, r3
    21fe:	1864      	adds	r4, r4, r1
    2200:	425b      	negs	r3, r3
    2202:	18e4      	adds	r4, r4, r3
    2204:	0017      	movs	r7, r2
    2206:	2601      	movs	r6, #1
    2208:	0223      	lsls	r3, r4, #8
    220a:	d5a6      	bpl.n	215a <__aeabi_dadd+0x17a>
    220c:	2602      	movs	r6, #2
    220e:	e7d5      	b.n	21bc <__aeabi_dadd+0x1dc>
    2210:	2d00      	cmp	r5, #0
    2212:	d16e      	bne.n	22f2 <__aeabi_dadd+0x312>
    2214:	1c70      	adds	r0, r6, #1
    2216:	0540      	lsls	r0, r0, #21
    2218:	0d40      	lsrs	r0, r0, #21
    221a:	2801      	cmp	r0, #1
    221c:	dc00      	bgt.n	2220 <__aeabi_dadd+0x240>
    221e:	e0f9      	b.n	2414 <__aeabi_dadd+0x434>
    2220:	1ab8      	subs	r0, r7, r2
    2222:	4684      	mov	ip, r0
    2224:	4287      	cmp	r7, r0
    2226:	4180      	sbcs	r0, r0
    2228:	1ae5      	subs	r5, r4, r3
    222a:	4240      	negs	r0, r0
    222c:	1a2d      	subs	r5, r5, r0
    222e:	0228      	lsls	r0, r5, #8
    2230:	d400      	bmi.n	2234 <__aeabi_dadd+0x254>
    2232:	e089      	b.n	2348 <__aeabi_dadd+0x368>
    2234:	1bd7      	subs	r7, r2, r7
    2236:	42ba      	cmp	r2, r7
    2238:	4192      	sbcs	r2, r2
    223a:	1b1c      	subs	r4, r3, r4
    223c:	4252      	negs	r2, r2
    223e:	1aa5      	subs	r5, r4, r2
    2240:	46d8      	mov	r8, fp
    2242:	e729      	b.n	2098 <__aeabi_dadd+0xb8>
    2244:	4645      	mov	r5, r8
    2246:	2400      	movs	r4, #0
    2248:	2700      	movs	r7, #0
    224a:	e76a      	b.n	2122 <__aeabi_dadd+0x142>
    224c:	4c45      	ldr	r4, [pc, #276]	; (2364 <__aeabi_dadd+0x384>)
    224e:	1af6      	subs	r6, r6, r3
    2250:	402c      	ands	r4, r5
    2252:	e749      	b.n	20e8 <__aeabi_dadd+0x108>
    2254:	003d      	movs	r5, r7
    2256:	3828      	subs	r0, #40	; 0x28
    2258:	4085      	lsls	r5, r0
    225a:	2700      	movs	r7, #0
    225c:	e72e      	b.n	20bc <__aeabi_dadd+0xdc>
    225e:	0038      	movs	r0, r7
    2260:	f000 f9ce 	bl	2600 <__clzsi2>
    2264:	3020      	adds	r0, #32
    2266:	e71d      	b.n	20a4 <__aeabi_dadd+0xc4>
    2268:	430a      	orrs	r2, r1
    226a:	1e51      	subs	r1, r2, #1
    226c:	418a      	sbcs	r2, r1
    226e:	2100      	movs	r1, #0
    2270:	e707      	b.n	2082 <__aeabi_dadd+0xa2>
    2272:	2b00      	cmp	r3, #0
    2274:	d000      	beq.n	2278 <__aeabi_dadd+0x298>
    2276:	e0f3      	b.n	2460 <__aeabi_dadd+0x480>
    2278:	1c70      	adds	r0, r6, #1
    227a:	0543      	lsls	r3, r0, #21
    227c:	0d5b      	lsrs	r3, r3, #21
    227e:	2b01      	cmp	r3, #1
    2280:	dc00      	bgt.n	2284 <__aeabi_dadd+0x2a4>
    2282:	e0ad      	b.n	23e0 <__aeabi_dadd+0x400>
    2284:	4b36      	ldr	r3, [pc, #216]	; (2360 <__aeabi_dadd+0x380>)
    2286:	4298      	cmp	r0, r3
    2288:	d100      	bne.n	228c <__aeabi_dadd+0x2ac>
    228a:	e0d1      	b.n	2430 <__aeabi_dadd+0x450>
    228c:	18ba      	adds	r2, r7, r2
    228e:	42ba      	cmp	r2, r7
    2290:	41bf      	sbcs	r7, r7
    2292:	1864      	adds	r4, r4, r1
    2294:	427f      	negs	r7, r7
    2296:	19e4      	adds	r4, r4, r7
    2298:	07e7      	lsls	r7, r4, #31
    229a:	0852      	lsrs	r2, r2, #1
    229c:	4317      	orrs	r7, r2
    229e:	0864      	lsrs	r4, r4, #1
    22a0:	0006      	movs	r6, r0
    22a2:	e721      	b.n	20e8 <__aeabi_dadd+0x108>
    22a4:	482e      	ldr	r0, [pc, #184]	; (2360 <__aeabi_dadd+0x380>)
    22a6:	4285      	cmp	r5, r0
    22a8:	d100      	bne.n	22ac <__aeabi_dadd+0x2cc>
    22aa:	e093      	b.n	23d4 <__aeabi_dadd+0x3f4>
    22ac:	001d      	movs	r5, r3
    22ae:	e6d0      	b.n	2052 <__aeabi_dadd+0x72>
    22b0:	0029      	movs	r1, r5
    22b2:	3e1f      	subs	r6, #31
    22b4:	40f1      	lsrs	r1, r6
    22b6:	2b20      	cmp	r3, #32
    22b8:	d100      	bne.n	22bc <__aeabi_dadd+0x2dc>
    22ba:	e08d      	b.n	23d8 <__aeabi_dadd+0x3f8>
    22bc:	2240      	movs	r2, #64	; 0x40
    22be:	1ad3      	subs	r3, r2, r3
    22c0:	409d      	lsls	r5, r3
    22c2:	432f      	orrs	r7, r5
    22c4:	1e7d      	subs	r5, r7, #1
    22c6:	41af      	sbcs	r7, r5
    22c8:	2400      	movs	r4, #0
    22ca:	430f      	orrs	r7, r1
    22cc:	2600      	movs	r6, #0
    22ce:	e744      	b.n	215a <__aeabi_dadd+0x17a>
    22d0:	002b      	movs	r3, r5
    22d2:	0008      	movs	r0, r1
    22d4:	3b20      	subs	r3, #32
    22d6:	40d8      	lsrs	r0, r3
    22d8:	0003      	movs	r3, r0
    22da:	2d20      	cmp	r5, #32
    22dc:	d100      	bne.n	22e0 <__aeabi_dadd+0x300>
    22de:	e07d      	b.n	23dc <__aeabi_dadd+0x3fc>
    22e0:	2040      	movs	r0, #64	; 0x40
    22e2:	1b45      	subs	r5, r0, r5
    22e4:	40a9      	lsls	r1, r5
    22e6:	430a      	orrs	r2, r1
    22e8:	1e51      	subs	r1, r2, #1
    22ea:	418a      	sbcs	r2, r1
    22ec:	2100      	movs	r1, #0
    22ee:	431a      	orrs	r2, r3
    22f0:	e6c7      	b.n	2082 <__aeabi_dadd+0xa2>
    22f2:	2e00      	cmp	r6, #0
    22f4:	d050      	beq.n	2398 <__aeabi_dadd+0x3b8>
    22f6:	4e1a      	ldr	r6, [pc, #104]	; (2360 <__aeabi_dadd+0x380>)
    22f8:	42b0      	cmp	r0, r6
    22fa:	d057      	beq.n	23ac <__aeabi_dadd+0x3cc>
    22fc:	2680      	movs	r6, #128	; 0x80
    22fe:	426b      	negs	r3, r5
    2300:	4699      	mov	r9, r3
    2302:	0436      	lsls	r6, r6, #16
    2304:	4334      	orrs	r4, r6
    2306:	464b      	mov	r3, r9
    2308:	2b38      	cmp	r3, #56	; 0x38
    230a:	dd00      	ble.n	230e <__aeabi_dadd+0x32e>
    230c:	e0d6      	b.n	24bc <__aeabi_dadd+0x4dc>
    230e:	2b1f      	cmp	r3, #31
    2310:	dd00      	ble.n	2314 <__aeabi_dadd+0x334>
    2312:	e135      	b.n	2580 <__aeabi_dadd+0x5a0>
    2314:	2620      	movs	r6, #32
    2316:	1af5      	subs	r5, r6, r3
    2318:	0026      	movs	r6, r4
    231a:	40ae      	lsls	r6, r5
    231c:	46b2      	mov	sl, r6
    231e:	003e      	movs	r6, r7
    2320:	40de      	lsrs	r6, r3
    2322:	46ac      	mov	ip, r5
    2324:	0035      	movs	r5, r6
    2326:	4656      	mov	r6, sl
    2328:	432e      	orrs	r6, r5
    232a:	4665      	mov	r5, ip
    232c:	40af      	lsls	r7, r5
    232e:	1e7d      	subs	r5, r7, #1
    2330:	41af      	sbcs	r7, r5
    2332:	40dc      	lsrs	r4, r3
    2334:	4337      	orrs	r7, r6
    2336:	1bd7      	subs	r7, r2, r7
    2338:	42ba      	cmp	r2, r7
    233a:	4192      	sbcs	r2, r2
    233c:	1b0c      	subs	r4, r1, r4
    233e:	4252      	negs	r2, r2
    2340:	1aa4      	subs	r4, r4, r2
    2342:	0006      	movs	r6, r0
    2344:	46d8      	mov	r8, fp
    2346:	e6a3      	b.n	2090 <__aeabi_dadd+0xb0>
    2348:	4664      	mov	r4, ip
    234a:	4667      	mov	r7, ip
    234c:	432c      	orrs	r4, r5
    234e:	d000      	beq.n	2352 <__aeabi_dadd+0x372>
    2350:	e6a2      	b.n	2098 <__aeabi_dadd+0xb8>
    2352:	2500      	movs	r5, #0
    2354:	2600      	movs	r6, #0
    2356:	2700      	movs	r7, #0
    2358:	e706      	b.n	2168 <__aeabi_dadd+0x188>
    235a:	001e      	movs	r6, r3
    235c:	e6c4      	b.n	20e8 <__aeabi_dadd+0x108>
    235e:	46c0      	nop			; (mov r8, r8)
    2360:	000007ff 	.word	0x000007ff
    2364:	ff7fffff 	.word	0xff7fffff
    2368:	800fffff 	.word	0x800fffff
    236c:	2b1f      	cmp	r3, #31
    236e:	dc63      	bgt.n	2438 <__aeabi_dadd+0x458>
    2370:	2020      	movs	r0, #32
    2372:	1ac3      	subs	r3, r0, r3
    2374:	0008      	movs	r0, r1
    2376:	4098      	lsls	r0, r3
    2378:	469c      	mov	ip, r3
    237a:	4683      	mov	fp, r0
    237c:	4653      	mov	r3, sl
    237e:	0010      	movs	r0, r2
    2380:	40d8      	lsrs	r0, r3
    2382:	0003      	movs	r3, r0
    2384:	4658      	mov	r0, fp
    2386:	4318      	orrs	r0, r3
    2388:	4663      	mov	r3, ip
    238a:	409a      	lsls	r2, r3
    238c:	1e53      	subs	r3, r2, #1
    238e:	419a      	sbcs	r2, r3
    2390:	4653      	mov	r3, sl
    2392:	4302      	orrs	r2, r0
    2394:	40d9      	lsrs	r1, r3
    2396:	e703      	b.n	21a0 <__aeabi_dadd+0x1c0>
    2398:	0026      	movs	r6, r4
    239a:	433e      	orrs	r6, r7
    239c:	d006      	beq.n	23ac <__aeabi_dadd+0x3cc>
    239e:	43eb      	mvns	r3, r5
    23a0:	4699      	mov	r9, r3
    23a2:	2b00      	cmp	r3, #0
    23a4:	d0c7      	beq.n	2336 <__aeabi_dadd+0x356>
    23a6:	4e94      	ldr	r6, [pc, #592]	; (25f8 <__aeabi_dadd+0x618>)
    23a8:	42b0      	cmp	r0, r6
    23aa:	d1ac      	bne.n	2306 <__aeabi_dadd+0x326>
    23ac:	000c      	movs	r4, r1
    23ae:	0017      	movs	r7, r2
    23b0:	0006      	movs	r6, r0
    23b2:	46d8      	mov	r8, fp
    23b4:	e698      	b.n	20e8 <__aeabi_dadd+0x108>
    23b6:	4b90      	ldr	r3, [pc, #576]	; (25f8 <__aeabi_dadd+0x618>)
    23b8:	459a      	cmp	sl, r3
    23ba:	d00b      	beq.n	23d4 <__aeabi_dadd+0x3f4>
    23bc:	4682      	mov	sl, r0
    23be:	e6e7      	b.n	2190 <__aeabi_dadd+0x1b0>
    23c0:	2800      	cmp	r0, #0
    23c2:	d000      	beq.n	23c6 <__aeabi_dadd+0x3e6>
    23c4:	e09e      	b.n	2504 <__aeabi_dadd+0x524>
    23c6:	0018      	movs	r0, r3
    23c8:	4310      	orrs	r0, r2
    23ca:	d100      	bne.n	23ce <__aeabi_dadd+0x3ee>
    23cc:	e0e9      	b.n	25a2 <__aeabi_dadd+0x5c2>
    23ce:	001c      	movs	r4, r3
    23d0:	0017      	movs	r7, r2
    23d2:	46d8      	mov	r8, fp
    23d4:	4e88      	ldr	r6, [pc, #544]	; (25f8 <__aeabi_dadd+0x618>)
    23d6:	e687      	b.n	20e8 <__aeabi_dadd+0x108>
    23d8:	2500      	movs	r5, #0
    23da:	e772      	b.n	22c2 <__aeabi_dadd+0x2e2>
    23dc:	2100      	movs	r1, #0
    23de:	e782      	b.n	22e6 <__aeabi_dadd+0x306>
    23e0:	0023      	movs	r3, r4
    23e2:	433b      	orrs	r3, r7
    23e4:	2e00      	cmp	r6, #0
    23e6:	d000      	beq.n	23ea <__aeabi_dadd+0x40a>
    23e8:	e0ab      	b.n	2542 <__aeabi_dadd+0x562>
    23ea:	2b00      	cmp	r3, #0
    23ec:	d100      	bne.n	23f0 <__aeabi_dadd+0x410>
    23ee:	e0e7      	b.n	25c0 <__aeabi_dadd+0x5e0>
    23f0:	000b      	movs	r3, r1
    23f2:	4313      	orrs	r3, r2
    23f4:	d100      	bne.n	23f8 <__aeabi_dadd+0x418>
    23f6:	e677      	b.n	20e8 <__aeabi_dadd+0x108>
    23f8:	18ba      	adds	r2, r7, r2
    23fa:	42ba      	cmp	r2, r7
    23fc:	41bf      	sbcs	r7, r7
    23fe:	1864      	adds	r4, r4, r1
    2400:	427f      	negs	r7, r7
    2402:	19e4      	adds	r4, r4, r7
    2404:	0223      	lsls	r3, r4, #8
    2406:	d400      	bmi.n	240a <__aeabi_dadd+0x42a>
    2408:	e0f2      	b.n	25f0 <__aeabi_dadd+0x610>
    240a:	4b7c      	ldr	r3, [pc, #496]	; (25fc <__aeabi_dadd+0x61c>)
    240c:	0017      	movs	r7, r2
    240e:	401c      	ands	r4, r3
    2410:	0006      	movs	r6, r0
    2412:	e669      	b.n	20e8 <__aeabi_dadd+0x108>
    2414:	0020      	movs	r0, r4
    2416:	4338      	orrs	r0, r7
    2418:	2e00      	cmp	r6, #0
    241a:	d1d1      	bne.n	23c0 <__aeabi_dadd+0x3e0>
    241c:	2800      	cmp	r0, #0
    241e:	d15b      	bne.n	24d8 <__aeabi_dadd+0x4f8>
    2420:	001c      	movs	r4, r3
    2422:	4314      	orrs	r4, r2
    2424:	d100      	bne.n	2428 <__aeabi_dadd+0x448>
    2426:	e0a8      	b.n	257a <__aeabi_dadd+0x59a>
    2428:	001c      	movs	r4, r3
    242a:	0017      	movs	r7, r2
    242c:	46d8      	mov	r8, fp
    242e:	e65b      	b.n	20e8 <__aeabi_dadd+0x108>
    2430:	0006      	movs	r6, r0
    2432:	2400      	movs	r4, #0
    2434:	2700      	movs	r7, #0
    2436:	e697      	b.n	2168 <__aeabi_dadd+0x188>
    2438:	4650      	mov	r0, sl
    243a:	000b      	movs	r3, r1
    243c:	3820      	subs	r0, #32
    243e:	40c3      	lsrs	r3, r0
    2440:	4699      	mov	r9, r3
    2442:	4653      	mov	r3, sl
    2444:	2b20      	cmp	r3, #32
    2446:	d100      	bne.n	244a <__aeabi_dadd+0x46a>
    2448:	e095      	b.n	2576 <__aeabi_dadd+0x596>
    244a:	2340      	movs	r3, #64	; 0x40
    244c:	4650      	mov	r0, sl
    244e:	1a1b      	subs	r3, r3, r0
    2450:	4099      	lsls	r1, r3
    2452:	430a      	orrs	r2, r1
    2454:	1e51      	subs	r1, r2, #1
    2456:	418a      	sbcs	r2, r1
    2458:	464b      	mov	r3, r9
    245a:	2100      	movs	r1, #0
    245c:	431a      	orrs	r2, r3
    245e:	e69f      	b.n	21a0 <__aeabi_dadd+0x1c0>
    2460:	2e00      	cmp	r6, #0
    2462:	d130      	bne.n	24c6 <__aeabi_dadd+0x4e6>
    2464:	0026      	movs	r6, r4
    2466:	433e      	orrs	r6, r7
    2468:	d067      	beq.n	253a <__aeabi_dadd+0x55a>
    246a:	43db      	mvns	r3, r3
    246c:	469a      	mov	sl, r3
    246e:	2b00      	cmp	r3, #0
    2470:	d01c      	beq.n	24ac <__aeabi_dadd+0x4cc>
    2472:	4e61      	ldr	r6, [pc, #388]	; (25f8 <__aeabi_dadd+0x618>)
    2474:	42b0      	cmp	r0, r6
    2476:	d060      	beq.n	253a <__aeabi_dadd+0x55a>
    2478:	4653      	mov	r3, sl
    247a:	2b38      	cmp	r3, #56	; 0x38
    247c:	dd00      	ble.n	2480 <__aeabi_dadd+0x4a0>
    247e:	e096      	b.n	25ae <__aeabi_dadd+0x5ce>
    2480:	2b1f      	cmp	r3, #31
    2482:	dd00      	ble.n	2486 <__aeabi_dadd+0x4a6>
    2484:	e09f      	b.n	25c6 <__aeabi_dadd+0x5e6>
    2486:	2620      	movs	r6, #32
    2488:	1af3      	subs	r3, r6, r3
    248a:	0026      	movs	r6, r4
    248c:	409e      	lsls	r6, r3
    248e:	469c      	mov	ip, r3
    2490:	46b3      	mov	fp, r6
    2492:	4653      	mov	r3, sl
    2494:	003e      	movs	r6, r7
    2496:	40de      	lsrs	r6, r3
    2498:	0033      	movs	r3, r6
    249a:	465e      	mov	r6, fp
    249c:	431e      	orrs	r6, r3
    249e:	4663      	mov	r3, ip
    24a0:	409f      	lsls	r7, r3
    24a2:	1e7b      	subs	r3, r7, #1
    24a4:	419f      	sbcs	r7, r3
    24a6:	4653      	mov	r3, sl
    24a8:	40dc      	lsrs	r4, r3
    24aa:	4337      	orrs	r7, r6
    24ac:	18bf      	adds	r7, r7, r2
    24ae:	4297      	cmp	r7, r2
    24b0:	4192      	sbcs	r2, r2
    24b2:	1864      	adds	r4, r4, r1
    24b4:	4252      	negs	r2, r2
    24b6:	18a4      	adds	r4, r4, r2
    24b8:	0006      	movs	r6, r0
    24ba:	e678      	b.n	21ae <__aeabi_dadd+0x1ce>
    24bc:	4327      	orrs	r7, r4
    24be:	1e7c      	subs	r4, r7, #1
    24c0:	41a7      	sbcs	r7, r4
    24c2:	2400      	movs	r4, #0
    24c4:	e737      	b.n	2336 <__aeabi_dadd+0x356>
    24c6:	4e4c      	ldr	r6, [pc, #304]	; (25f8 <__aeabi_dadd+0x618>)
    24c8:	42b0      	cmp	r0, r6
    24ca:	d036      	beq.n	253a <__aeabi_dadd+0x55a>
    24cc:	2680      	movs	r6, #128	; 0x80
    24ce:	425b      	negs	r3, r3
    24d0:	0436      	lsls	r6, r6, #16
    24d2:	469a      	mov	sl, r3
    24d4:	4334      	orrs	r4, r6
    24d6:	e7cf      	b.n	2478 <__aeabi_dadd+0x498>
    24d8:	0018      	movs	r0, r3
    24da:	4310      	orrs	r0, r2
    24dc:	d100      	bne.n	24e0 <__aeabi_dadd+0x500>
    24de:	e603      	b.n	20e8 <__aeabi_dadd+0x108>
    24e0:	1ab8      	subs	r0, r7, r2
    24e2:	4684      	mov	ip, r0
    24e4:	4567      	cmp	r7, ip
    24e6:	41ad      	sbcs	r5, r5
    24e8:	1ae0      	subs	r0, r4, r3
    24ea:	426d      	negs	r5, r5
    24ec:	1b40      	subs	r0, r0, r5
    24ee:	0205      	lsls	r5, r0, #8
    24f0:	d400      	bmi.n	24f4 <__aeabi_dadd+0x514>
    24f2:	e62c      	b.n	214e <__aeabi_dadd+0x16e>
    24f4:	1bd7      	subs	r7, r2, r7
    24f6:	42ba      	cmp	r2, r7
    24f8:	4192      	sbcs	r2, r2
    24fa:	1b1c      	subs	r4, r3, r4
    24fc:	4252      	negs	r2, r2
    24fe:	1aa4      	subs	r4, r4, r2
    2500:	46d8      	mov	r8, fp
    2502:	e5f1      	b.n	20e8 <__aeabi_dadd+0x108>
    2504:	0018      	movs	r0, r3
    2506:	4310      	orrs	r0, r2
    2508:	d100      	bne.n	250c <__aeabi_dadd+0x52c>
    250a:	e763      	b.n	23d4 <__aeabi_dadd+0x3f4>
    250c:	08f8      	lsrs	r0, r7, #3
    250e:	0767      	lsls	r7, r4, #29
    2510:	4307      	orrs	r7, r0
    2512:	2080      	movs	r0, #128	; 0x80
    2514:	08e4      	lsrs	r4, r4, #3
    2516:	0300      	lsls	r0, r0, #12
    2518:	4204      	tst	r4, r0
    251a:	d008      	beq.n	252e <__aeabi_dadd+0x54e>
    251c:	08dd      	lsrs	r5, r3, #3
    251e:	4205      	tst	r5, r0
    2520:	d105      	bne.n	252e <__aeabi_dadd+0x54e>
    2522:	08d2      	lsrs	r2, r2, #3
    2524:	0759      	lsls	r1, r3, #29
    2526:	4311      	orrs	r1, r2
    2528:	000f      	movs	r7, r1
    252a:	002c      	movs	r4, r5
    252c:	46d8      	mov	r8, fp
    252e:	0f7b      	lsrs	r3, r7, #29
    2530:	00e4      	lsls	r4, r4, #3
    2532:	431c      	orrs	r4, r3
    2534:	00ff      	lsls	r7, r7, #3
    2536:	4e30      	ldr	r6, [pc, #192]	; (25f8 <__aeabi_dadd+0x618>)
    2538:	e5d6      	b.n	20e8 <__aeabi_dadd+0x108>
    253a:	000c      	movs	r4, r1
    253c:	0017      	movs	r7, r2
    253e:	0006      	movs	r6, r0
    2540:	e5d2      	b.n	20e8 <__aeabi_dadd+0x108>
    2542:	2b00      	cmp	r3, #0
    2544:	d038      	beq.n	25b8 <__aeabi_dadd+0x5d8>
    2546:	000b      	movs	r3, r1
    2548:	4313      	orrs	r3, r2
    254a:	d100      	bne.n	254e <__aeabi_dadd+0x56e>
    254c:	e742      	b.n	23d4 <__aeabi_dadd+0x3f4>
    254e:	08f8      	lsrs	r0, r7, #3
    2550:	0767      	lsls	r7, r4, #29
    2552:	4307      	orrs	r7, r0
    2554:	2080      	movs	r0, #128	; 0x80
    2556:	08e4      	lsrs	r4, r4, #3
    2558:	0300      	lsls	r0, r0, #12
    255a:	4204      	tst	r4, r0
    255c:	d0e7      	beq.n	252e <__aeabi_dadd+0x54e>
    255e:	08cb      	lsrs	r3, r1, #3
    2560:	4203      	tst	r3, r0
    2562:	d1e4      	bne.n	252e <__aeabi_dadd+0x54e>
    2564:	08d2      	lsrs	r2, r2, #3
    2566:	0749      	lsls	r1, r1, #29
    2568:	4311      	orrs	r1, r2
    256a:	000f      	movs	r7, r1
    256c:	001c      	movs	r4, r3
    256e:	e7de      	b.n	252e <__aeabi_dadd+0x54e>
    2570:	2700      	movs	r7, #0
    2572:	2400      	movs	r4, #0
    2574:	e5d5      	b.n	2122 <__aeabi_dadd+0x142>
    2576:	2100      	movs	r1, #0
    2578:	e76b      	b.n	2452 <__aeabi_dadd+0x472>
    257a:	2500      	movs	r5, #0
    257c:	2700      	movs	r7, #0
    257e:	e5f3      	b.n	2168 <__aeabi_dadd+0x188>
    2580:	464e      	mov	r6, r9
    2582:	0025      	movs	r5, r4
    2584:	3e20      	subs	r6, #32
    2586:	40f5      	lsrs	r5, r6
    2588:	464b      	mov	r3, r9
    258a:	002e      	movs	r6, r5
    258c:	2b20      	cmp	r3, #32
    258e:	d02d      	beq.n	25ec <__aeabi_dadd+0x60c>
    2590:	2540      	movs	r5, #64	; 0x40
    2592:	1aed      	subs	r5, r5, r3
    2594:	40ac      	lsls	r4, r5
    2596:	4327      	orrs	r7, r4
    2598:	1e7c      	subs	r4, r7, #1
    259a:	41a7      	sbcs	r7, r4
    259c:	2400      	movs	r4, #0
    259e:	4337      	orrs	r7, r6
    25a0:	e6c9      	b.n	2336 <__aeabi_dadd+0x356>
    25a2:	2480      	movs	r4, #128	; 0x80
    25a4:	2500      	movs	r5, #0
    25a6:	0324      	lsls	r4, r4, #12
    25a8:	4e13      	ldr	r6, [pc, #76]	; (25f8 <__aeabi_dadd+0x618>)
    25aa:	2700      	movs	r7, #0
    25ac:	e5dc      	b.n	2168 <__aeabi_dadd+0x188>
    25ae:	4327      	orrs	r7, r4
    25b0:	1e7c      	subs	r4, r7, #1
    25b2:	41a7      	sbcs	r7, r4
    25b4:	2400      	movs	r4, #0
    25b6:	e779      	b.n	24ac <__aeabi_dadd+0x4cc>
    25b8:	000c      	movs	r4, r1
    25ba:	0017      	movs	r7, r2
    25bc:	4e0e      	ldr	r6, [pc, #56]	; (25f8 <__aeabi_dadd+0x618>)
    25be:	e593      	b.n	20e8 <__aeabi_dadd+0x108>
    25c0:	000c      	movs	r4, r1
    25c2:	0017      	movs	r7, r2
    25c4:	e590      	b.n	20e8 <__aeabi_dadd+0x108>
    25c6:	4656      	mov	r6, sl
    25c8:	0023      	movs	r3, r4
    25ca:	3e20      	subs	r6, #32
    25cc:	40f3      	lsrs	r3, r6
    25ce:	4699      	mov	r9, r3
    25d0:	4653      	mov	r3, sl
    25d2:	2b20      	cmp	r3, #32
    25d4:	d00e      	beq.n	25f4 <__aeabi_dadd+0x614>
    25d6:	2340      	movs	r3, #64	; 0x40
    25d8:	4656      	mov	r6, sl
    25da:	1b9b      	subs	r3, r3, r6
    25dc:	409c      	lsls	r4, r3
    25de:	4327      	orrs	r7, r4
    25e0:	1e7c      	subs	r4, r7, #1
    25e2:	41a7      	sbcs	r7, r4
    25e4:	464b      	mov	r3, r9
    25e6:	2400      	movs	r4, #0
    25e8:	431f      	orrs	r7, r3
    25ea:	e75f      	b.n	24ac <__aeabi_dadd+0x4cc>
    25ec:	2400      	movs	r4, #0
    25ee:	e7d2      	b.n	2596 <__aeabi_dadd+0x5b6>
    25f0:	0017      	movs	r7, r2
    25f2:	e5b2      	b.n	215a <__aeabi_dadd+0x17a>
    25f4:	2400      	movs	r4, #0
    25f6:	e7f2      	b.n	25de <__aeabi_dadd+0x5fe>
    25f8:	000007ff 	.word	0x000007ff
    25fc:	ff7fffff 	.word	0xff7fffff

00002600 <__clzsi2>:
    2600:	211c      	movs	r1, #28
    2602:	2301      	movs	r3, #1
    2604:	041b      	lsls	r3, r3, #16
    2606:	4298      	cmp	r0, r3
    2608:	d301      	bcc.n	260e <__clzsi2+0xe>
    260a:	0c00      	lsrs	r0, r0, #16
    260c:	3910      	subs	r1, #16
    260e:	0a1b      	lsrs	r3, r3, #8
    2610:	4298      	cmp	r0, r3
    2612:	d301      	bcc.n	2618 <__clzsi2+0x18>
    2614:	0a00      	lsrs	r0, r0, #8
    2616:	3908      	subs	r1, #8
    2618:	091b      	lsrs	r3, r3, #4
    261a:	4298      	cmp	r0, r3
    261c:	d301      	bcc.n	2622 <__clzsi2+0x22>
    261e:	0900      	lsrs	r0, r0, #4
    2620:	3904      	subs	r1, #4
    2622:	a202      	add	r2, pc, #8	; (adr r2, 262c <__clzsi2+0x2c>)
    2624:	5c10      	ldrb	r0, [r2, r0]
    2626:	1840      	adds	r0, r0, r1
    2628:	4770      	bx	lr
    262a:	46c0      	nop			; (mov r8, r8)
    262c:	02020304 	.word	0x02020304
    2630:	01010101 	.word	0x01010101
	...

0000263c <__libc_init_array>:
    263c:	b570      	push	{r4, r5, r6, lr}
    263e:	4e0d      	ldr	r6, [pc, #52]	; (2674 <__libc_init_array+0x38>)
    2640:	4d0d      	ldr	r5, [pc, #52]	; (2678 <__libc_init_array+0x3c>)
    2642:	2400      	movs	r4, #0
    2644:	1bad      	subs	r5, r5, r6
    2646:	10ad      	asrs	r5, r5, #2
    2648:	d005      	beq.n	2656 <__libc_init_array+0x1a>
    264a:	00a3      	lsls	r3, r4, #2
    264c:	58f3      	ldr	r3, [r6, r3]
    264e:	3401      	adds	r4, #1
    2650:	4798      	blx	r3
    2652:	42a5      	cmp	r5, r4
    2654:	d1f9      	bne.n	264a <__libc_init_array+0xe>
    2656:	f000 fc33 	bl	2ec0 <_init>
    265a:	4e08      	ldr	r6, [pc, #32]	; (267c <__libc_init_array+0x40>)
    265c:	4d08      	ldr	r5, [pc, #32]	; (2680 <__libc_init_array+0x44>)
    265e:	2400      	movs	r4, #0
    2660:	1bad      	subs	r5, r5, r6
    2662:	10ad      	asrs	r5, r5, #2
    2664:	d005      	beq.n	2672 <__libc_init_array+0x36>
    2666:	00a3      	lsls	r3, r4, #2
    2668:	58f3      	ldr	r3, [r6, r3]
    266a:	3401      	adds	r4, #1
    266c:	4798      	blx	r3
    266e:	42a5      	cmp	r5, r4
    2670:	d1f9      	bne.n	2666 <__libc_init_array+0x2a>
    2672:	bd70      	pop	{r4, r5, r6, pc}
    2674:	00002ecc 	.word	0x00002ecc
    2678:	00002ecc 	.word	0x00002ecc
    267c:	00002ecc 	.word	0x00002ecc
    2680:	00002ed4 	.word	0x00002ed4

00002684 <memcpy>:
    2684:	b5f0      	push	{r4, r5, r6, r7, lr}
    2686:	0005      	movs	r5, r0
    2688:	2a0f      	cmp	r2, #15
    268a:	d92f      	bls.n	26ec <memcpy+0x68>
    268c:	000b      	movs	r3, r1
    268e:	4303      	orrs	r3, r0
    2690:	079b      	lsls	r3, r3, #30
    2692:	d134      	bne.n	26fe <memcpy+0x7a>
    2694:	0016      	movs	r6, r2
    2696:	000c      	movs	r4, r1
    2698:	0003      	movs	r3, r0
    269a:	3e10      	subs	r6, #16
    269c:	0935      	lsrs	r5, r6, #4
    269e:	3501      	adds	r5, #1
    26a0:	012d      	lsls	r5, r5, #4
    26a2:	1945      	adds	r5, r0, r5
    26a4:	6827      	ldr	r7, [r4, #0]
    26a6:	601f      	str	r7, [r3, #0]
    26a8:	6867      	ldr	r7, [r4, #4]
    26aa:	605f      	str	r7, [r3, #4]
    26ac:	68a7      	ldr	r7, [r4, #8]
    26ae:	609f      	str	r7, [r3, #8]
    26b0:	68e7      	ldr	r7, [r4, #12]
    26b2:	3410      	adds	r4, #16
    26b4:	60df      	str	r7, [r3, #12]
    26b6:	3310      	adds	r3, #16
    26b8:	429d      	cmp	r5, r3
    26ba:	d1f3      	bne.n	26a4 <memcpy+0x20>
    26bc:	230f      	movs	r3, #15
    26be:	439e      	bics	r6, r3
    26c0:	3610      	adds	r6, #16
    26c2:	1985      	adds	r5, r0, r6
    26c4:	1989      	adds	r1, r1, r6
    26c6:	4013      	ands	r3, r2
    26c8:	2b03      	cmp	r3, #3
    26ca:	d91a      	bls.n	2702 <memcpy+0x7e>
    26cc:	1f1e      	subs	r6, r3, #4
    26ce:	2300      	movs	r3, #0
    26d0:	08b4      	lsrs	r4, r6, #2
    26d2:	3401      	adds	r4, #1
    26d4:	00a4      	lsls	r4, r4, #2
    26d6:	58cf      	ldr	r7, [r1, r3]
    26d8:	50ef      	str	r7, [r5, r3]
    26da:	3304      	adds	r3, #4
    26dc:	42a3      	cmp	r3, r4
    26de:	d1fa      	bne.n	26d6 <memcpy+0x52>
    26e0:	2403      	movs	r4, #3
    26e2:	43a6      	bics	r6, r4
    26e4:	1d33      	adds	r3, r6, #4
    26e6:	4022      	ands	r2, r4
    26e8:	18c9      	adds	r1, r1, r3
    26ea:	18ed      	adds	r5, r5, r3
    26ec:	2a00      	cmp	r2, #0
    26ee:	d005      	beq.n	26fc <memcpy+0x78>
    26f0:	2300      	movs	r3, #0
    26f2:	5ccc      	ldrb	r4, [r1, r3]
    26f4:	54ec      	strb	r4, [r5, r3]
    26f6:	3301      	adds	r3, #1
    26f8:	4293      	cmp	r3, r2
    26fa:	d1fa      	bne.n	26f2 <memcpy+0x6e>
    26fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26fe:	0005      	movs	r5, r0
    2700:	e7f6      	b.n	26f0 <memcpy+0x6c>
    2702:	001a      	movs	r2, r3
    2704:	e7f2      	b.n	26ec <memcpy+0x68>
    2706:	46c0      	nop			; (mov r8, r8)

00002708 <memset>:
    2708:	b5f0      	push	{r4, r5, r6, r7, lr}
    270a:	0783      	lsls	r3, r0, #30
    270c:	d043      	beq.n	2796 <memset+0x8e>
    270e:	1e54      	subs	r4, r2, #1
    2710:	2a00      	cmp	r2, #0
    2712:	d03f      	beq.n	2794 <memset+0x8c>
    2714:	b2ce      	uxtb	r6, r1
    2716:	0002      	movs	r2, r0
    2718:	2503      	movs	r5, #3
    271a:	e002      	b.n	2722 <memset+0x1a>
    271c:	001a      	movs	r2, r3
    271e:	3c01      	subs	r4, #1
    2720:	d338      	bcc.n	2794 <memset+0x8c>
    2722:	1c53      	adds	r3, r2, #1
    2724:	7016      	strb	r6, [r2, #0]
    2726:	422b      	tst	r3, r5
    2728:	d1f8      	bne.n	271c <memset+0x14>
    272a:	2c03      	cmp	r4, #3
    272c:	d92a      	bls.n	2784 <memset+0x7c>
    272e:	22ff      	movs	r2, #255	; 0xff
    2730:	400a      	ands	r2, r1
    2732:	0215      	lsls	r5, r2, #8
    2734:	4315      	orrs	r5, r2
    2736:	042a      	lsls	r2, r5, #16
    2738:	4315      	orrs	r5, r2
    273a:	2c0f      	cmp	r4, #15
    273c:	d914      	bls.n	2768 <memset+0x60>
    273e:	0027      	movs	r7, r4
    2740:	001a      	movs	r2, r3
    2742:	3f10      	subs	r7, #16
    2744:	093e      	lsrs	r6, r7, #4
    2746:	3601      	adds	r6, #1
    2748:	0136      	lsls	r6, r6, #4
    274a:	199e      	adds	r6, r3, r6
    274c:	6015      	str	r5, [r2, #0]
    274e:	6055      	str	r5, [r2, #4]
    2750:	6095      	str	r5, [r2, #8]
    2752:	60d5      	str	r5, [r2, #12]
    2754:	3210      	adds	r2, #16
    2756:	4296      	cmp	r6, r2
    2758:	d1f8      	bne.n	274c <memset+0x44>
    275a:	220f      	movs	r2, #15
    275c:	4397      	bics	r7, r2
    275e:	3710      	adds	r7, #16
    2760:	19db      	adds	r3, r3, r7
    2762:	4014      	ands	r4, r2
    2764:	2c03      	cmp	r4, #3
    2766:	d90d      	bls.n	2784 <memset+0x7c>
    2768:	001a      	movs	r2, r3
    276a:	1f27      	subs	r7, r4, #4
    276c:	08be      	lsrs	r6, r7, #2
    276e:	3601      	adds	r6, #1
    2770:	00b6      	lsls	r6, r6, #2
    2772:	199e      	adds	r6, r3, r6
    2774:	c220      	stmia	r2!, {r5}
    2776:	42b2      	cmp	r2, r6
    2778:	d1fc      	bne.n	2774 <memset+0x6c>
    277a:	2203      	movs	r2, #3
    277c:	4397      	bics	r7, r2
    277e:	3704      	adds	r7, #4
    2780:	19db      	adds	r3, r3, r7
    2782:	4014      	ands	r4, r2
    2784:	2c00      	cmp	r4, #0
    2786:	d005      	beq.n	2794 <memset+0x8c>
    2788:	b2c9      	uxtb	r1, r1
    278a:	191c      	adds	r4, r3, r4
    278c:	7019      	strb	r1, [r3, #0]
    278e:	3301      	adds	r3, #1
    2790:	429c      	cmp	r4, r3
    2792:	d1fb      	bne.n	278c <memset+0x84>
    2794:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2796:	0014      	movs	r4, r2
    2798:	0003      	movs	r3, r0
    279a:	e7c6      	b.n	272a <memset+0x22>

0000279c <register_fini>:
    279c:	4b03      	ldr	r3, [pc, #12]	; (27ac <register_fini+0x10>)
    279e:	b510      	push	{r4, lr}
    27a0:	2b00      	cmp	r3, #0
    27a2:	d002      	beq.n	27aa <register_fini+0xe>
    27a4:	4802      	ldr	r0, [pc, #8]	; (27b0 <register_fini+0x14>)
    27a6:	f000 f805 	bl	27b4 <atexit>
    27aa:	bd10      	pop	{r4, pc}
    27ac:	00000000 	.word	0x00000000
    27b0:	000027c5 	.word	0x000027c5

000027b4 <atexit>:
    27b4:	b510      	push	{r4, lr}
    27b6:	0001      	movs	r1, r0
    27b8:	2300      	movs	r3, #0
    27ba:	2200      	movs	r2, #0
    27bc:	2000      	movs	r0, #0
    27be:	f000 f81f 	bl	2800 <__register_exitproc>
    27c2:	bd10      	pop	{r4, pc}

000027c4 <__libc_fini_array>:
    27c4:	b570      	push	{r4, r5, r6, lr}
    27c6:	4b09      	ldr	r3, [pc, #36]	; (27ec <__libc_fini_array+0x28>)
    27c8:	4c09      	ldr	r4, [pc, #36]	; (27f0 <__libc_fini_array+0x2c>)
    27ca:	1ae4      	subs	r4, r4, r3
    27cc:	10a4      	asrs	r4, r4, #2
    27ce:	d009      	beq.n	27e4 <__libc_fini_array+0x20>
    27d0:	4a08      	ldr	r2, [pc, #32]	; (27f4 <__libc_fini_array+0x30>)
    27d2:	18a5      	adds	r5, r4, r2
    27d4:	00ad      	lsls	r5, r5, #2
    27d6:	18ed      	adds	r5, r5, r3
    27d8:	682b      	ldr	r3, [r5, #0]
    27da:	3c01      	subs	r4, #1
    27dc:	4798      	blx	r3
    27de:	3d04      	subs	r5, #4
    27e0:	2c00      	cmp	r4, #0
    27e2:	d1f9      	bne.n	27d8 <__libc_fini_array+0x14>
    27e4:	f000 fb76 	bl	2ed4 <_fini>
    27e8:	bd70      	pop	{r4, r5, r6, pc}
    27ea:	46c0      	nop			; (mov r8, r8)
    27ec:	00002ee0 	.word	0x00002ee0
    27f0:	00002ee4 	.word	0x00002ee4
    27f4:	3fffffff 	.word	0x3fffffff

000027f8 <__retarget_lock_acquire_recursive>:
    27f8:	4770      	bx	lr
    27fa:	46c0      	nop			; (mov r8, r8)

000027fc <__retarget_lock_release_recursive>:
    27fc:	4770      	bx	lr
    27fe:	46c0      	nop			; (mov r8, r8)

00002800 <__register_exitproc>:
    2800:	b5f0      	push	{r4, r5, r6, r7, lr}
    2802:	464e      	mov	r6, r9
    2804:	4645      	mov	r5, r8
    2806:	46de      	mov	lr, fp
    2808:	4657      	mov	r7, sl
    280a:	b5e0      	push	{r5, r6, r7, lr}
    280c:	4d36      	ldr	r5, [pc, #216]	; (28e8 <__register_exitproc+0xe8>)
    280e:	b083      	sub	sp, #12
    2810:	0006      	movs	r6, r0
    2812:	6828      	ldr	r0, [r5, #0]
    2814:	4698      	mov	r8, r3
    2816:	000f      	movs	r7, r1
    2818:	4691      	mov	r9, r2
    281a:	f7ff ffed 	bl	27f8 <__retarget_lock_acquire_recursive>
    281e:	4b33      	ldr	r3, [pc, #204]	; (28ec <__register_exitproc+0xec>)
    2820:	681c      	ldr	r4, [r3, #0]
    2822:	23a4      	movs	r3, #164	; 0xa4
    2824:	005b      	lsls	r3, r3, #1
    2826:	58e0      	ldr	r0, [r4, r3]
    2828:	2800      	cmp	r0, #0
    282a:	d052      	beq.n	28d2 <__register_exitproc+0xd2>
    282c:	6843      	ldr	r3, [r0, #4]
    282e:	2b1f      	cmp	r3, #31
    2830:	dc13      	bgt.n	285a <__register_exitproc+0x5a>
    2832:	1c5a      	adds	r2, r3, #1
    2834:	9201      	str	r2, [sp, #4]
    2836:	2e00      	cmp	r6, #0
    2838:	d128      	bne.n	288c <__register_exitproc+0x8c>
    283a:	9a01      	ldr	r2, [sp, #4]
    283c:	3302      	adds	r3, #2
    283e:	009b      	lsls	r3, r3, #2
    2840:	6042      	str	r2, [r0, #4]
    2842:	501f      	str	r7, [r3, r0]
    2844:	6828      	ldr	r0, [r5, #0]
    2846:	f7ff ffd9 	bl	27fc <__retarget_lock_release_recursive>
    284a:	2000      	movs	r0, #0
    284c:	b003      	add	sp, #12
    284e:	bc3c      	pop	{r2, r3, r4, r5}
    2850:	4690      	mov	r8, r2
    2852:	4699      	mov	r9, r3
    2854:	46a2      	mov	sl, r4
    2856:	46ab      	mov	fp, r5
    2858:	bdf0      	pop	{r4, r5, r6, r7, pc}
    285a:	4b25      	ldr	r3, [pc, #148]	; (28f0 <__register_exitproc+0xf0>)
    285c:	2b00      	cmp	r3, #0
    285e:	d03d      	beq.n	28dc <__register_exitproc+0xdc>
    2860:	20c8      	movs	r0, #200	; 0xc8
    2862:	0040      	lsls	r0, r0, #1
    2864:	e000      	b.n	2868 <__register_exitproc+0x68>
    2866:	bf00      	nop
    2868:	2800      	cmp	r0, #0
    286a:	d037      	beq.n	28dc <__register_exitproc+0xdc>
    286c:	22a4      	movs	r2, #164	; 0xa4
    286e:	2300      	movs	r3, #0
    2870:	0052      	lsls	r2, r2, #1
    2872:	58a1      	ldr	r1, [r4, r2]
    2874:	6043      	str	r3, [r0, #4]
    2876:	6001      	str	r1, [r0, #0]
    2878:	50a0      	str	r0, [r4, r2]
    287a:	3240      	adds	r2, #64	; 0x40
    287c:	5083      	str	r3, [r0, r2]
    287e:	3204      	adds	r2, #4
    2880:	5083      	str	r3, [r0, r2]
    2882:	3301      	adds	r3, #1
    2884:	9301      	str	r3, [sp, #4]
    2886:	2300      	movs	r3, #0
    2888:	2e00      	cmp	r6, #0
    288a:	d0d6      	beq.n	283a <__register_exitproc+0x3a>
    288c:	009a      	lsls	r2, r3, #2
    288e:	4692      	mov	sl, r2
    2890:	4482      	add	sl, r0
    2892:	464a      	mov	r2, r9
    2894:	2188      	movs	r1, #136	; 0x88
    2896:	4654      	mov	r4, sl
    2898:	5062      	str	r2, [r4, r1]
    289a:	22c4      	movs	r2, #196	; 0xc4
    289c:	0052      	lsls	r2, r2, #1
    289e:	4691      	mov	r9, r2
    28a0:	4481      	add	r9, r0
    28a2:	464a      	mov	r2, r9
    28a4:	3987      	subs	r1, #135	; 0x87
    28a6:	4099      	lsls	r1, r3
    28a8:	6812      	ldr	r2, [r2, #0]
    28aa:	468b      	mov	fp, r1
    28ac:	430a      	orrs	r2, r1
    28ae:	4694      	mov	ip, r2
    28b0:	464a      	mov	r2, r9
    28b2:	4661      	mov	r1, ip
    28b4:	6011      	str	r1, [r2, #0]
    28b6:	2284      	movs	r2, #132	; 0x84
    28b8:	4641      	mov	r1, r8
    28ba:	0052      	lsls	r2, r2, #1
    28bc:	50a1      	str	r1, [r4, r2]
    28be:	2e02      	cmp	r6, #2
    28c0:	d1bb      	bne.n	283a <__register_exitproc+0x3a>
    28c2:	0002      	movs	r2, r0
    28c4:	465c      	mov	r4, fp
    28c6:	328d      	adds	r2, #141	; 0x8d
    28c8:	32ff      	adds	r2, #255	; 0xff
    28ca:	6811      	ldr	r1, [r2, #0]
    28cc:	430c      	orrs	r4, r1
    28ce:	6014      	str	r4, [r2, #0]
    28d0:	e7b3      	b.n	283a <__register_exitproc+0x3a>
    28d2:	0020      	movs	r0, r4
    28d4:	304d      	adds	r0, #77	; 0x4d
    28d6:	30ff      	adds	r0, #255	; 0xff
    28d8:	50e0      	str	r0, [r4, r3]
    28da:	e7a7      	b.n	282c <__register_exitproc+0x2c>
    28dc:	6828      	ldr	r0, [r5, #0]
    28de:	f7ff ff8d 	bl	27fc <__retarget_lock_release_recursive>
    28e2:	2001      	movs	r0, #1
    28e4:	4240      	negs	r0, r0
    28e6:	e7b1      	b.n	284c <__register_exitproc+0x4c>
    28e8:	20000590 	.word	0x20000590
    28ec:	00002ebc 	.word	0x00002ebc
    28f0:	00000000 	.word	0x00000000

000028f4 <color_drg_g>:
    28f4:	0000be32                                2...

000028f8 <color_drg_r>:
    28f8:	000028c8                                .(..

000028fc <color_drg_d>:
    28fc:	00c84000                                .@..

00002900 <color_cplx_theta>:
    2900:	000000d2                                ....

00002904 <color_cplx_r>:
    2904:	0000be32                                2...

00002908 <color_cplx_im>:
    2908:	000028c8                                .(..

0000290c <color_cplx_re>:
    290c:	00c84000                                .@..

00002910 <color_shift_hyp_unavail>:
    2910:	00040600                                ....

00002914 <color_hyp_unavail>:
    2914:	00000700                                ....

00002918 <color_shift_unavail>:
    2918:	00080200                                ....

0000291c <color_normal_unavail>:
    291c:	00030303                                ....

00002920 <color_shift_hyp>:
    2920:	00a0c800                                ....

00002924 <color_hyp>:
    2924:	0000d200                                ....

00002928 <color_shift>:
    2928:	00c84000                                .@..

0000292c <color_normal>:
    292c:	003c3c3c                                <<<.

00002930 <color_off>:
    2930:	00000105                                ....

00002934 <cmd_9>:
    2934:	20000000                                ... 

00002938 <cmd_8>:
    2938:	20000010                                ... 

0000293c <cmd_7>:
    293c:	20000020                                 .. 

00002940 <cmd_6>:
    2940:	20000030                                0.. 

00002944 <cmd_5>:
    2944:	20000040                                @.. 

00002948 <cmd_4>:
    2948:	20000050                                P.. 

0000294c <cmd_3>:
    294c:	20000060                                `.. 

00002950 <cmd_2>:
    2950:	20000070                                p.. 

00002954 <cmd_1>:
    2954:	20000080                                ... 

00002958 <cmd_0>:
    2958:	20000090                                ... 

0000295c <cmd_asinh>:
    295c:	200000a0                                ... 

00002960 <cmd_asin>:
    2960:	200000b0                                ... 

00002964 <cmd_sinh>:
    2964:	200000c0                                ... 

00002968 <cmd_sin>:
    2968:	200000d0                                ... 

0000296c <cmd_mul>:
    296c:	200000e0                                ... 

00002970 <cmd_sub>:
    2970:	200000f0                                ... 

00002974 <cmd_add>:
    2974:	20000100                                ... 

00002978 <cmd_drg_reint>:
    2978:	20000110                                ... 

0000297c <cmd_rec_pol>:
    297c:	20000120                                 .. 

00002980 <cmd_re_im>:
    2980:	20000130 00000009 00000000 00000000     0.. ............
	...
    2998:	0000000c 00000000 00000001 00000000     ................
	...
    29b4:	0000000d 00000000 00000001 00000000     ................
	...
    29d0:	0000001a 00000000 00000010 00000000     ................
	...
    29ec:	0000001d 00000a1d 00000001 00000000     ................
	...
    2a08:	0000000b 00000000 00000001 00000000     ................
	...
    2a24:	00000019 00000000 00000020 00000000     ........ .......
	...
    2a40:	00000005 00000a81                       ........

00002a48 <colPorts>:
    2a48:	00000001 00000001 00000001 00000001     ................
	...

00002a68 <colPins>:
    2a68:	00000006 00000007 00000008 00000009     ................
    2a78:	00000004 00000005 00000006 00000007     ................

00002a88 <rowPorts>:
	...
    2a90:	00000001 00000001 00000001              ............

00002a9c <rowPins>:
    2a9c:	0000000a 0000000b 0000000a 0000000b     ................
    2aac:	0000000c 2e302d20 30303030 00000030     .... -0.00000...

00002abc <bit_expand>:
    2abc:	00924924 00924926 00924934 00924936     $I..&I..4I..6I..
    2acc:	009249a4 009249a6 009249b4 009249b6     .I...I...I...I..
    2adc:	00924d24 00924d26 00924d34 00924d36     $M..&M..4M..6M..
    2aec:	00924da4 00924da6 00924db4 00924db6     .M...M...M...M..
    2afc:	00926924 00926926 00926934 00926936     $i..&i..4i..6i..
    2b0c:	009269a4 009269a6 009269b4 009269b6     .i...i...i...i..
    2b1c:	00926d24 00926d26 00926d34 00926d36     $m..&m..4m..6m..
    2b2c:	00926da4 00926da6 00926db4 00926db6     .m...m...m...m..
    2b3c:	00934924 00934926 00934934 00934936     $I..&I..4I..6I..
    2b4c:	009349a4 009349a6 009349b4 009349b6     .I...I...I...I..
    2b5c:	00934d24 00934d26 00934d34 00934d36     $M..&M..4M..6M..
    2b6c:	00934da4 00934da6 00934db4 00934db6     .M...M...M...M..
    2b7c:	00936924 00936926 00936934 00936936     $i..&i..4i..6i..
    2b8c:	009369a4 009369a6 009369b4 009369b6     .i...i...i...i..
    2b9c:	00936d24 00936d26 00936d34 00936d36     $m..&m..4m..6m..
    2bac:	00936da4 00936da6 00936db4 00936db6     .m...m...m...m..
    2bbc:	009a4924 009a4926 009a4934 009a4936     $I..&I..4I..6I..
    2bcc:	009a49a4 009a49a6 009a49b4 009a49b6     .I...I...I...I..
    2bdc:	009a4d24 009a4d26 009a4d34 009a4d36     $M..&M..4M..6M..
    2bec:	009a4da4 009a4da6 009a4db4 009a4db6     .M...M...M...M..
    2bfc:	009a6924 009a6926 009a6934 009a6936     $i..&i..4i..6i..
    2c0c:	009a69a4 009a69a6 009a69b4 009a69b6     .i...i...i...i..
    2c1c:	009a6d24 009a6d26 009a6d34 009a6d36     $m..&m..4m..6m..
    2c2c:	009a6da4 009a6da6 009a6db4 009a6db6     .m...m...m...m..
    2c3c:	009b4924 009b4926 009b4934 009b4936     $I..&I..4I..6I..
    2c4c:	009b49a4 009b49a6 009b49b4 009b49b6     .I...I...I...I..
    2c5c:	009b4d24 009b4d26 009b4d34 009b4d36     $M..&M..4M..6M..
    2c6c:	009b4da4 009b4da6 009b4db4 009b4db6     .M...M...M...M..
    2c7c:	009b6924 009b6926 009b6934 009b6936     $i..&i..4i..6i..
    2c8c:	009b69a4 009b69a6 009b69b4 009b69b6     .i...i...i...i..
    2c9c:	009b6d24 009b6d26 009b6d34 009b6d36     $m..&m..4m..6m..
    2cac:	009b6da4 009b6da6 009b6db4 009b6db6     .m...m...m...m..
    2cbc:	00d24924 00d24926 00d24934 00d24936     $I..&I..4I..6I..
    2ccc:	00d249a4 00d249a6 00d249b4 00d249b6     .I...I...I...I..
    2cdc:	00d24d24 00d24d26 00d24d34 00d24d36     $M..&M..4M..6M..
    2cec:	00d24da4 00d24da6 00d24db4 00d24db6     .M...M...M...M..
    2cfc:	00d26924 00d26926 00d26934 00d26936     $i..&i..4i..6i..
    2d0c:	00d269a4 00d269a6 00d269b4 00d269b6     .i...i...i...i..
    2d1c:	00d26d24 00d26d26 00d26d34 00d26d36     $m..&m..4m..6m..
    2d2c:	00d26da4 00d26da6 00d26db4 00d26db6     .m...m...m...m..
    2d3c:	00d34924 00d34926 00d34934 00d34936     $I..&I..4I..6I..
    2d4c:	00d349a4 00d349a6 00d349b4 00d349b6     .I...I...I...I..
    2d5c:	00d34d24 00d34d26 00d34d34 00d34d36     $M..&M..4M..6M..
    2d6c:	00d34da4 00d34da6 00d34db4 00d34db6     .M...M...M...M..
    2d7c:	00d36924 00d36926 00d36934 00d36936     $i..&i..4i..6i..
    2d8c:	00d369a4 00d369a6 00d369b4 00d369b6     .i...i...i...i..
    2d9c:	00d36d24 00d36d26 00d36d34 00d36d36     $m..&m..4m..6m..
    2dac:	00d36da4 00d36da6 00d36db4 00d36db6     .m...m...m...m..
    2dbc:	00da4924 00da4926 00da4934 00da4936     $I..&I..4I..6I..
    2dcc:	00da49a4 00da49a6 00da49b4 00da49b6     .I...I...I...I..
    2ddc:	00da4d24 00da4d26 00da4d34 00da4d36     $M..&M..4M..6M..
    2dec:	00da4da4 00da4da6 00da4db4 00da4db6     .M...M...M...M..
    2dfc:	00da6924 00da6926 00da6934 00da6936     $i..&i..4i..6i..
    2e0c:	00da69a4 00da69a6 00da69b4 00da69b6     .i...i...i...i..
    2e1c:	00da6d24 00da6d26 00da6d34 00da6d36     $m..&m..4m..6m..
    2e2c:	00da6da4 00da6da6 00da6db4 00da6db6     .m...m...m...m..
    2e3c:	00db4924 00db4926 00db4934 00db4936     $I..&I..4I..6I..
    2e4c:	00db49a4 00db49a6 00db49b4 00db49b6     .I...I...I...I..
    2e5c:	00db4d24 00db4d26 00db4d34 00db4d36     $M..&M..4M..6M..
    2e6c:	00db4da4 00db4da6 00db4db4 00db4db6     .M...M...M...M..
    2e7c:	00db6924 00db6926 00db6934 00db6936     $i..&i..4i..6i..
    2e8c:	00db69a4 00db69a6 00db69b4 00db69b6     .i...i...i...i..
    2e9c:	00db6d24 00db6d26 00db6d34 00db6d36     $m..&m..4m..6m..
    2eac:	00db6da4 00db6da6 00db6db4 00db6db6     .m...m...m...m..

00002ebc <_global_impure_ptr>:
    2ebc:	20000168                                h.. 

00002ec0 <_init>:
    2ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ec2:	46c0      	nop			; (mov r8, r8)
    2ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2ec6:	bc08      	pop	{r3}
    2ec8:	469e      	mov	lr, r3
    2eca:	4770      	bx	lr

00002ecc <__init_array_start>:
    2ecc:	0000279d 	.word	0x0000279d

00002ed0 <__frame_dummy_init_array_entry>:
    2ed0:	000000e1                                ....

00002ed4 <_fini>:
    2ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ed6:	46c0      	nop			; (mov r8, r8)
    2ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2eda:	bc08      	pop	{r3}
    2edc:	469e      	mov	lr, r3
    2ede:	4770      	bx	lr

00002ee0 <__fini_array_start>:
    2ee0:	000000b9 	.word	0x000000b9
