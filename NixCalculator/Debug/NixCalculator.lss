
NixCalculator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a60  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004ec  20000000  00002a60  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000a64  200004f0  00002f50  000204ec  2**4
                  ALLOC
  3 .stack        00001004  20000f54  000039b4  000204ec  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000204ec  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020514  2**0
                  CONTENTS, READONLY
  6 .debug_info   000137f7  00000000  00000000  0002056d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001781  00000000  00000000  00033d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000160a  00000000  00000000  000354e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000002e8  00000000  00000000  00036aef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002a0  00000000  00000000  00036dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00014a5f  00000000  00000000  00037077  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000055e2  00000000  00000000  0004bad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00078c62  00000000  00000000  000510b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000804  00000000  00000000  000c9d1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 1f 00 20 f1 03 00 00 ed 03 00 00 ed 03 00 00     X.. ............
	...
      2c:	ed 03 00 00 00 00 00 00 00 00 00 00 ed 03 00 00     ................
      3c:	0d 11 00 00 ed 03 00 00 ed 03 00 00 ed 03 00 00     ................
      4c:	ed 03 00 00 ed 03 00 00 ed 03 00 00 c5 05 00 00     ................
      5c:	ed 03 00 00 ed 03 00 00 ed 03 00 00 ed 03 00 00     ................
      6c:	ed 03 00 00 ed 03 00 00 ed 03 00 00 ed 03 00 00     ................
      7c:	ed 03 00 00 ed 03 00 00 ed 03 00 00 ed 03 00 00     ................
      8c:	ed 03 00 00 ed 03 00 00 ed 03 00 00 ed 03 00 00     ................
      9c:	ed 03 00 00 ed 03 00 00 ed 03 00 00 ed 03 00 00     ................
      ac:	ed 03 00 00 00 00 00 00 ed 03 00 00                 ............

000000b8 <__do_global_dtors_aux>:
      b8:	b510      	push	{r4, lr}
      ba:	4c06      	ldr	r4, [pc, #24]	; (d4 <__do_global_dtors_aux+0x1c>)
      bc:	7823      	ldrb	r3, [r4, #0]
      be:	2b00      	cmp	r3, #0
      c0:	d107      	bne.n	d2 <__do_global_dtors_aux+0x1a>
      c2:	4b05      	ldr	r3, [pc, #20]	; (d8 <__do_global_dtors_aux+0x20>)
      c4:	2b00      	cmp	r3, #0
      c6:	d002      	beq.n	ce <__do_global_dtors_aux+0x16>
      c8:	4804      	ldr	r0, [pc, #16]	; (dc <__do_global_dtors_aux+0x24>)
      ca:	e000      	b.n	ce <__do_global_dtors_aux+0x16>
      cc:	bf00      	nop
      ce:	2301      	movs	r3, #1
      d0:	7023      	strb	r3, [r4, #0]
      d2:	bd10      	pop	{r4, pc}
      d4:	200004f0 	.word	0x200004f0
      d8:	00000000 	.word	0x00000000
      dc:	00002a60 	.word	0x00002a60

000000e0 <frame_dummy>:
      e0:	4b08      	ldr	r3, [pc, #32]	; (104 <frame_dummy+0x24>)
      e2:	b510      	push	{r4, lr}
      e4:	2b00      	cmp	r3, #0
      e6:	d003      	beq.n	f0 <frame_dummy+0x10>
      e8:	4907      	ldr	r1, [pc, #28]	; (108 <frame_dummy+0x28>)
      ea:	4808      	ldr	r0, [pc, #32]	; (10c <frame_dummy+0x2c>)
      ec:	e000      	b.n	f0 <frame_dummy+0x10>
      ee:	bf00      	nop
      f0:	4807      	ldr	r0, [pc, #28]	; (110 <frame_dummy+0x30>)
      f2:	6803      	ldr	r3, [r0, #0]
      f4:	2b00      	cmp	r3, #0
      f6:	d100      	bne.n	fa <frame_dummy+0x1a>
      f8:	bd10      	pop	{r4, pc}
      fa:	4b06      	ldr	r3, [pc, #24]	; (114 <frame_dummy+0x34>)
      fc:	2b00      	cmp	r3, #0
      fe:	d0fb      	beq.n	f8 <frame_dummy+0x18>
     100:	4798      	blx	r3
     102:	e7f9      	b.n	f8 <frame_dummy+0x18>
     104:	00000000 	.word	0x00000000
     108:	200004f4 	.word	0x200004f4
     10c:	00002a60 	.word	0x00002a60
     110:	00002a60 	.word	0x00002a60
     114:	00000000 	.word	0x00000000

00000118 <buzzer_init>:
	uint8_t active;
} current_tone = { 0 };

void buzzer_init() {
	// Enable clock for TC6
	PM->APBCMASK.bit.TC6_ = 1;
     118:	4b19      	ldr	r3, [pc, #100]	; (180 <buzzer_init+0x68>)
     11a:	6a18      	ldr	r0, [r3, #32]
     11c:	2180      	movs	r1, #128	; 0x80
     11e:	01c9      	lsls	r1, r1, #7
     120:	0002      	movs	r2, r0
     122:	430a      	orrs	r2, r1
     124:	621a      	str	r2, [r3, #32]
		
	GCLK->CLKCTRL.bit.ID = GCLK_CLKCTRL_ID_TC6_TC7_Val;
     126:	4b17      	ldr	r3, [pc, #92]	; (184 <buzzer_init+0x6c>)
     128:	885a      	ldrh	r2, [r3, #2]
     12a:	203f      	movs	r0, #63	; 0x3f
     12c:	4382      	bics	r2, r0
     12e:	201d      	movs	r0, #29
     130:	4302      	orrs	r2, r0
     132:	805a      	strh	r2, [r3, #2]
		
	GCLK->CLKCTRL.bit.GEN = GCLK_CLKCTRL_GEN_GCLK0_Val;
     134:	885a      	ldrh	r2, [r3, #2]
     136:	4814      	ldr	r0, [pc, #80]	; (188 <buzzer_init+0x70>)
     138:	4002      	ands	r2, r0
     13a:	805a      	strh	r2, [r3, #2]
	GCLK->CLKCTRL.bit.CLKEN = 1;
     13c:	885a      	ldrh	r2, [r3, #2]
     13e:	4311      	orrs	r1, r2
     140:	8059      	strh	r1, [r3, #2]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     142:	4a12      	ldr	r2, [pc, #72]	; (18c <buzzer_init+0x74>)
     144:	805a      	strh	r2, [r3, #2]
						GCLK_CLKCTRL_GEN_GCLK0 |  // source is generic clock generator 0
						GCLK_CLKCTRL_ID_TC6_TC7;  // route to tc6&7
	
	// Setup timer
	TC6->COUNT16.CTRLA.reg |= TC_CTRLA_MODE_COUNT16; // 16 bit mode
     146:	4b12      	ldr	r3, [pc, #72]	; (190 <buzzer_init+0x78>)
     148:	881a      	ldrh	r2, [r3, #0]
     14a:	b292      	uxth	r2, r2
     14c:	801a      	strh	r2, [r3, #0]
	
	TC6->COUNT16.CTRLA.reg |= TC_CTRLA_WAVEGEN_MFRQ; // Match Frequency generation
     14e:	881a      	ldrh	r2, [r3, #0]
     150:	2120      	movs	r1, #32
     152:	430a      	orrs	r2, r1
     154:	b292      	uxth	r2, r2
     156:	801a      	strh	r2, [r3, #0]
	// 48MHz / 512 = 46875 Hz tick
	TC6->COUNT16.CTRLA.reg |= TC_CTRLA_PRESCALER_DIV1024;
     158:	881a      	ldrh	r2, [r3, #0]
     15a:	21e0      	movs	r1, #224	; 0xe0
     15c:	00c9      	lsls	r1, r1, #3
     15e:	430a      	orrs	r2, r1
     160:	801a      	strh	r2, [r3, #0]
	// CC0 will control the period
	
	// Set pin for TC6 output
	PORT->Group[BUZZER_PORT].PINCFG[BUZZER_PIN].bit.PMUXEN = 1;
     162:	4a0c      	ldr	r2, [pc, #48]	; (194 <buzzer_init+0x7c>)
     164:	21d0      	movs	r1, #208	; 0xd0
     166:	5c53      	ldrb	r3, [r2, r1]
     168:	2001      	movs	r0, #1
     16a:	4303      	orrs	r3, r0
     16c:	5453      	strb	r3, [r2, r1]
	PORT->Group[BUZZER_PORT].PMUX[BUZZER_PIN/2].bit.PMUXE = BUZZER_PMUX;
     16e:	3918      	subs	r1, #24
     170:	5c53      	ldrb	r3, [r2, r1]
     172:	200f      	movs	r0, #15
     174:	4383      	bics	r3, r0
     176:	2004      	movs	r0, #4
     178:	4303      	orrs	r3, r0
     17a:	5453      	strb	r3, [r2, r1]
		
}
     17c:	4770      	bx	lr
     17e:	46c0      	nop			; (mov r8, r8)
     180:	40000400 	.word	0x40000400
     184:	40000c00 	.word	0x40000c00
     188:	fffff0ff 	.word	0xfffff0ff
     18c:	0000401d 	.word	0x0000401d
     190:	42003800 	.word	0x42003800
     194:	41004400 	.word	0x41004400

00000198 <buzzer_tone_start>:

void buzzer_tone_start(uint16_t duration_ms, uint16_t freq_hz) {
     198:	b510      	push	{r4, lr}
	if (freq_hz == 0 || freq_hz > 23438 || duration_ms == 0) {
     19a:	1e4b      	subs	r3, r1, #1
     19c:	b29b      	uxth	r3, r3
     19e:	4a0a      	ldr	r2, [pc, #40]	; (1c8 <buzzer_tone_start+0x30>)
     1a0:	4293      	cmp	r3, r2
     1a2:	d810      	bhi.n	1c6 <buzzer_tone_start+0x2e>
     1a4:	2800      	cmp	r0, #0
     1a6:	d00e      	beq.n	1c6 <buzzer_tone_start+0x2e>
		return;
	}
	current_tone.remaining_time_ms = duration_ms;
     1a8:	4b08      	ldr	r3, [pc, #32]	; (1cc <buzzer_tone_start+0x34>)
     1aa:	8018      	strh	r0, [r3, #0]
	current_tone.freq_hz = freq_hz;
     1ac:	8059      	strh	r1, [r3, #2]
	current_tone.active = 1;
     1ae:	2201      	movs	r2, #1
     1b0:	711a      	strb	r2, [r3, #4]
	// Set timer for waveform generation
	TC6->COUNT16.CC[0].reg = (uint16_t)(23438 / freq_hz);
     1b2:	4807      	ldr	r0, [pc, #28]	; (1d0 <buzzer_tone_start+0x38>)
     1b4:	4b07      	ldr	r3, [pc, #28]	; (1d4 <buzzer_tone_start+0x3c>)
     1b6:	4798      	blx	r3
     1b8:	b280      	uxth	r0, r0
     1ba:	4b07      	ldr	r3, [pc, #28]	; (1d8 <buzzer_tone_start+0x40>)
     1bc:	8318      	strh	r0, [r3, #24]
	
	TC6->COUNT16.CTRLA.bit.ENABLE = 1;
     1be:	881a      	ldrh	r2, [r3, #0]
     1c0:	2102      	movs	r1, #2
     1c2:	430a      	orrs	r2, r1
     1c4:	801a      	strh	r2, [r3, #0]
}
     1c6:	bd10      	pop	{r4, pc}
     1c8:	00005b8d 	.word	0x00005b8d
     1cc:	2000050c 	.word	0x2000050c
     1d0:	00005b8e 	.word	0x00005b8e
     1d4:	000019b9 	.word	0x000019b9
     1d8:	42003800 	.word	0x42003800

000001dc <buzzer_tick>:

void buzzer_tick() {
	if (current_tone.active && --current_tone.remaining_time_ms <= 0) {
     1dc:	4b09      	ldr	r3, [pc, #36]	; (204 <buzzer_tick+0x28>)
     1de:	791b      	ldrb	r3, [r3, #4]
     1e0:	2b00      	cmp	r3, #0
     1e2:	d00e      	beq.n	202 <buzzer_tick+0x26>
     1e4:	4a07      	ldr	r2, [pc, #28]	; (204 <buzzer_tick+0x28>)
     1e6:	8813      	ldrh	r3, [r2, #0]
     1e8:	3b01      	subs	r3, #1
     1ea:	b29b      	uxth	r3, r3
     1ec:	8013      	strh	r3, [r2, #0]
     1ee:	2b00      	cmp	r3, #0
     1f0:	d107      	bne.n	202 <buzzer_tick+0x26>
		// TODO: Stop tone
		TC6->COUNT16.CTRLA.bit.ENABLE = 0;
     1f2:	4a05      	ldr	r2, [pc, #20]	; (208 <buzzer_tick+0x2c>)
     1f4:	8813      	ldrh	r3, [r2, #0]
     1f6:	2102      	movs	r1, #2
     1f8:	438b      	bics	r3, r1
     1fa:	8013      	strh	r3, [r2, #0]
		current_tone.active = 0;
     1fc:	2200      	movs	r2, #0
     1fe:	4b01      	ldr	r3, [pc, #4]	; (204 <buzzer_tick+0x28>)
     200:	711a      	strb	r2, [r3, #4]
	}
     202:	4770      	bx	lr
     204:	2000050c 	.word	0x2000050c
     208:	42003800 	.word	0x42003800

0000020c <ClocksInit>:
// Constants for Clock multiplexers
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void ClocksInit() {
	/* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
	NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     20c:	493a      	ldr	r1, [pc, #232]	; (2f8 <ClocksInit+0xec>)
     20e:	684a      	ldr	r2, [r1, #4]
     210:	231e      	movs	r3, #30
     212:	439a      	bics	r2, r3
     214:	3b1c      	subs	r3, #28
     216:	4313      	orrs	r3, r2
     218:	604b      	str	r3, [r1, #4]

	/* Turn on the digital interface clock */
	PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     21a:	4a38      	ldr	r2, [pc, #224]	; (2fc <ClocksInit+0xf0>)
     21c:	6993      	ldr	r3, [r2, #24]
     21e:	2108      	movs	r1, #8
     220:	430b      	orrs	r3, r1
     222:	6193      	str	r3, [r2, #24]

	/* Enable XOSC32K clock (External on-board 32.768Hz oscillator) */
	SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     224:	4b36      	ldr	r3, [pc, #216]	; (300 <ClocksInit+0xf4>)
     226:	4a37      	ldr	r2, [pc, #220]	; (304 <ClocksInit+0xf8>)
     228:	829a      	strh	r2, [r3, #20]
	SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
	SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
     22a:	8a9a      	ldrh	r2, [r3, #20]
     22c:	2102      	movs	r1, #2
     22e:	430a      	orrs	r2, r1
     230:	829a      	strh	r2, [r3, #20]
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
     232:	4b33      	ldr	r3, [pc, #204]	; (300 <ClocksInit+0xf4>)
     234:	68db      	ldr	r3, [r3, #12]
     236:	079b      	lsls	r3, r3, #30
     238:	d5fb      	bpl.n	232 <ClocksInit+0x26>
	{
		/* Wait for oscillator stabilization */
	}

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
     23a:	2201      	movs	r2, #1
     23c:	4b32      	ldr	r3, [pc, #200]	; (308 <ClocksInit+0xfc>)
     23e:	701a      	strb	r2, [r3, #0]
	while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     240:	4b31      	ldr	r3, [pc, #196]	; (308 <ClocksInit+0xfc>)
     242:	781b      	ldrb	r3, [r3, #0]
     244:	07db      	lsls	r3, r3, #31
     246:	d504      	bpl.n	252 <ClocksInit+0x46>
     248:	4b2f      	ldr	r3, [pc, #188]	; (308 <ClocksInit+0xfc>)
     24a:	785b      	ldrb	r3, [r3, #1]
     24c:	b25b      	sxtb	r3, r3
     24e:	2b00      	cmp	r3, #0
     250:	dbf6      	blt.n	240 <ClocksInit+0x34>
	{
		/* Wait for reset to complete */
	}

	/* Put XOSC32K as source of Generic Clock Generator 1 */
	GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
     252:	2201      	movs	r2, #1
     254:	4b2c      	ldr	r3, [pc, #176]	; (308 <ClocksInit+0xfc>)
     256:	609a      	str	r2, [r3, #8]
	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     258:	4b2b      	ldr	r3, [pc, #172]	; (308 <ClocksInit+0xfc>)
     25a:	785b      	ldrb	r3, [r3, #1]
     25c:	b25b      	sxtb	r3, r3
     25e:	2b00      	cmp	r3, #0
     260:	dbfa      	blt.n	258 <ClocksInit+0x4c>
	{
		/* Wait for synchronization */
	}

	/* Write Generic Clock Generator 1 configuration */
	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
     262:	4a2a      	ldr	r2, [pc, #168]	; (30c <ClocksInit+0x100>)
     264:	4b28      	ldr	r3, [pc, #160]	; (308 <ClocksInit+0xfc>)
     266:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
	//                  GCLK_GENCTRL_OE | // Output clock to a pin for tests
	GCLK_GENCTRL_GENEN ;
	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     268:	4b27      	ldr	r3, [pc, #156]	; (308 <ClocksInit+0xfc>)
     26a:	785b      	ldrb	r3, [r3, #1]
     26c:	b25b      	sxtb	r3, r3
     26e:	2b00      	cmp	r3, #0
     270:	dbfa      	blt.n	268 <ClocksInit+0x5c>
	{
		/* Wait for synchronization */
	}

	/* Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference) */
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
     272:	2282      	movs	r2, #130	; 0x82
     274:	01d2      	lsls	r2, r2, #7
     276:	4b24      	ldr	r3, [pc, #144]	; (308 <ClocksInit+0xfc>)
     278:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
	GCLK_CLKCTRL_CLKEN ;
	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     27a:	4b23      	ldr	r3, [pc, #140]	; (308 <ClocksInit+0xfc>)
     27c:	785b      	ldrb	r3, [r3, #1]
     27e:	b25b      	sxtb	r3, r3
     280:	2b00      	cmp	r3, #0
     282:	dbfa      	blt.n	27a <ClocksInit+0x6e>
	{
		/* Wait for synchronization */
	}

	/* Enable DFLL48M clock */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     284:	2202      	movs	r2, #2
     286:	4b1e      	ldr	r3, [pc, #120]	; (300 <ClocksInit+0xf4>)
     288:	849a      	strh	r2, [r3, #36]	; 0x24
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     28a:	4b1d      	ldr	r3, [pc, #116]	; (300 <ClocksInit+0xf4>)
     28c:	68db      	ldr	r3, [r3, #12]
     28e:	06db      	lsls	r3, r3, #27
     290:	d5fb      	bpl.n	28a <ClocksInit+0x7e>
	{
		/* Wait for synchronization */
	}
	SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
     292:	4a1f      	ldr	r2, [pc, #124]	; (310 <ClocksInit+0x104>)
     294:	4b1a      	ldr	r3, [pc, #104]	; (300 <ClocksInit+0xf4>)
     296:	62da      	str	r2, [r3, #44]	; 0x2c
	SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
	SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     298:	4b19      	ldr	r3, [pc, #100]	; (300 <ClocksInit+0xf4>)
     29a:	68db      	ldr	r3, [r3, #12]
     29c:	06db      	lsls	r3, r3, #27
     29e:	d5fb      	bpl.n	298 <ClocksInit+0x8c>
	{
		/* Wait for synchronization */
	}

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
     2a0:	4a17      	ldr	r2, [pc, #92]	; (300 <ClocksInit+0xf4>)
     2a2:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     2a4:	491b      	ldr	r1, [pc, #108]	; (314 <ClocksInit+0x108>)
     2a6:	430b      	orrs	r3, r1
     2a8:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL_DFLLCTRL_WAITLOCK |
	SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     2aa:	4b15      	ldr	r3, [pc, #84]	; (300 <ClocksInit+0xf4>)
     2ac:	68db      	ldr	r3, [r3, #12]
     2ae:	06db      	lsls	r3, r3, #27
     2b0:	d5fb      	bpl.n	2aa <ClocksInit+0x9e>
	{
		/* Wait for synchronization */
	}

	/* Enable the DFLL */
	SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     2b2:	4a13      	ldr	r2, [pc, #76]	; (300 <ClocksInit+0xf4>)
     2b4:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     2b6:	2102      	movs	r1, #2
     2b8:	430b      	orrs	r3, r1
     2ba:	b29b      	uxth	r3, r3
     2bc:	8493      	strh	r3, [r2, #36]	; 0x24
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     2be:	4b10      	ldr	r3, [pc, #64]	; (300 <ClocksInit+0xf4>)
     2c0:	68db      	ldr	r3, [r3, #12]
     2c2:	061b      	lsls	r3, r3, #24
     2c4:	d5fb      	bpl.n	2be <ClocksInit+0xb2>
	(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     2c6:	4b0e      	ldr	r3, [pc, #56]	; (300 <ClocksInit+0xf4>)
     2c8:	68db      	ldr	r3, [r3, #12]
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     2ca:	065b      	lsls	r3, r3, #25
     2cc:	d5f7      	bpl.n	2be <ClocksInit+0xb2>
	{
		/* Wait for locks flags */
	}
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     2ce:	4b0c      	ldr	r3, [pc, #48]	; (300 <ClocksInit+0xf4>)
     2d0:	68db      	ldr	r3, [r3, #12]
     2d2:	06db      	lsls	r3, r3, #27
     2d4:	d5fb      	bpl.n	2ce <ClocksInit+0xc2>
	{
		/* Wait for synchronization */
	}

	/* Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz. */
	GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
     2d6:	2200      	movs	r2, #0
     2d8:	4b0b      	ldr	r3, [pc, #44]	; (308 <ClocksInit+0xfc>)
     2da:	609a      	str	r2, [r3, #8]
	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     2dc:	4b0a      	ldr	r3, [pc, #40]	; (308 <ClocksInit+0xfc>)
     2de:	785b      	ldrb	r3, [r3, #1]
     2e0:	b25b      	sxtb	r3, r3
     2e2:	2b00      	cmp	r3, #0
     2e4:	dbfa      	blt.n	2dc <ClocksInit+0xd0>
	{
		/* Wait for synchronization */
	}

	/* Write Generic Clock Generator 0 configuration */
	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
     2e6:	4a0c      	ldr	r2, [pc, #48]	; (318 <ClocksInit+0x10c>)
     2e8:	4b07      	ldr	r3, [pc, #28]	; (308 <ClocksInit+0xfc>)
     2ea:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
	//                  GCLK_GENCTRL_OE | // Output clock to a pin for tests
	GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
	GCLK_GENCTRL_GENEN ;
	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     2ec:	4b06      	ldr	r3, [pc, #24]	; (308 <ClocksInit+0xfc>)
     2ee:	785b      	ldrb	r3, [r3, #1]
     2f0:	b25b      	sxtb	r3, r3
     2f2:	2b00      	cmp	r3, #0
     2f4:	dbfa      	blt.n	2ec <ClocksInit+0xe0>
	{
		/* Wait for synchronization */
	}
}
     2f6:	4770      	bx	lr
     2f8:	41004000 	.word	0x41004000
     2fc:	40000400 	.word	0x40000400
     300:	40000800 	.word	0x40000800
     304:	0000060c 	.word	0x0000060c
     308:	40000c00 	.word	0x40000c00
     30c:	00010501 	.word	0x00010501
     310:	7dff05b9 	.word	0x7dff05b9
     314:	00000a04 	.word	0x00000a04
     318:	00030700 	.word	0x00030700

0000031c <binary_op_availableQ>:
#include "command.h"
#include "../types.h"

static int binary_op_availableQ(const calc_state_t * calc_state, const sys_state_t * sys_state) {
	return 1; // TODO: implement availability
}
     31c:	2001      	movs	r0, #1
     31e:	4770      	bx	lr

00000320 <unary_op_availableQ>:
static int unary_op_availableQ(const calc_state_t * calc_state, const sys_state_t * sys_state) {
	return 0; // TODO: implement availability
}
     320:	2000      	movs	r0, #0
     322:	4770      	bx	lr

00000324 <available_always>:
static int available_always(const calc_state_t * calc_state, const sys_state_t * sys_state) {
	return 1; // TODO: implement availability
}
     324:	2001      	movs	r0, #1
     326:	4770      	bx	lr

00000328 <cmd_re_im_func>:

static int cmd_re_im_func(calc_state_t * calc_state, sys_state_t * sys_state) {
	switch (sys_state->ui.cpx_view) {
     328:	7a4b      	ldrb	r3, [r1, #9]
     32a:	2b01      	cmp	r3, #1
     32c:	d00a      	beq.n	344 <cmd_re_im_func+0x1c>
     32e:	2b00      	cmp	r3, #0
     330:	d005      	beq.n	33e <cmd_re_im_func+0x16>
     332:	2b02      	cmp	r3, #2
     334:	d009      	beq.n	34a <cmd_re_im_func+0x22>
     336:	2b03      	cmp	r3, #3
     338:	d00a      	beq.n	350 <cmd_re_im_func+0x28>
		case cv_theta:
			sys_state->ui.cpx_view = cv_r;
			break;
	}
	return 0;
}
     33a:	2000      	movs	r0, #0
     33c:	4770      	bx	lr
			sys_state->ui.cpx_view = cv_im;
     33e:	2301      	movs	r3, #1
     340:	724b      	strb	r3, [r1, #9]
			break;
     342:	e7fa      	b.n	33a <cmd_re_im_func+0x12>
			sys_state->ui.cpx_view = cv_re;
     344:	2300      	movs	r3, #0
     346:	724b      	strb	r3, [r1, #9]
			break;
     348:	e7f7      	b.n	33a <cmd_re_im_func+0x12>
			sys_state->ui.cpx_view = cv_theta;
     34a:	2303      	movs	r3, #3
     34c:	724b      	strb	r3, [r1, #9]
			break;
     34e:	e7f4      	b.n	33a <cmd_re_im_func+0x12>
			sys_state->ui.cpx_view = cv_r;
     350:	2302      	movs	r3, #2
     352:	724b      	strb	r3, [r1, #9]
			break;
     354:	e7f1      	b.n	33a <cmd_re_im_func+0x12>

00000356 <cmd_rec_pol_func>:
	.num_operands = 0,
	.op_func = cmd_re_im_func
};

static int cmd_rec_pol_func(calc_state_t * calc_state, sys_state_t * sys_state) {
	switch (sys_state->ui.cpx_view) {
     356:	7a4b      	ldrb	r3, [r1, #9]
     358:	2b01      	cmp	r3, #1
     35a:	d00a      	beq.n	372 <cmd_rec_pol_func+0x1c>
     35c:	2b00      	cmp	r3, #0
     35e:	d005      	beq.n	36c <cmd_rec_pol_func+0x16>
     360:	2b02      	cmp	r3, #2
     362:	d009      	beq.n	378 <cmd_rec_pol_func+0x22>
     364:	2b03      	cmp	r3, #3
     366:	d00a      	beq.n	37e <cmd_rec_pol_func+0x28>
		case cv_theta:
			sys_state->ui.cpx_view = cv_re;
			break;
	}
	return 0;
}
     368:	2000      	movs	r0, #0
     36a:	4770      	bx	lr
			sys_state->ui.cpx_view = cv_r;
     36c:	2302      	movs	r3, #2
     36e:	724b      	strb	r3, [r1, #9]
			break;
     370:	e7fa      	b.n	368 <cmd_rec_pol_func+0x12>
			sys_state->ui.cpx_view = cv_r;
     372:	2302      	movs	r3, #2
     374:	724b      	strb	r3, [r1, #9]
			break;
     376:	e7f7      	b.n	368 <cmd_rec_pol_func+0x12>
			sys_state->ui.cpx_view = cv_re;
     378:	2300      	movs	r3, #0
     37a:	724b      	strb	r3, [r1, #9]
			break;
     37c:	e7f4      	b.n	368 <cmd_rec_pol_func+0x12>
			sys_state->ui.cpx_view = cv_re;
     37e:	2300      	movs	r3, #0
     380:	724b      	strb	r3, [r1, #9]
			break;
     382:	e7f1      	b.n	368 <cmd_rec_pol_func+0x12>

00000384 <cmd_reint_drg_func>:
	.num_operands = 0,
	.op_func = cmd_rec_pol_func
};

static int cmd_reint_drg_func(calc_state_t * calc_state, sys_state_t * sys_state) {
	switch (sys_state->sys.angle_units) {
     384:	788b      	ldrb	r3, [r1, #2]
     386:	2b01      	cmp	r3, #1
     388:	d008      	beq.n	39c <cmd_reint_drg_func+0x18>
     38a:	2b00      	cmp	r3, #0
     38c:	d003      	beq.n	396 <cmd_reint_drg_func+0x12>
     38e:	2b02      	cmp	r3, #2
     390:	d00c      	beq.n	3ac <cmd_reint_drg_func+0x28>
		case au_grad:
			sys_state->sys.angle_units = au_deg;
			break;
	}
	return 0;
}
     392:	2000      	movs	r0, #0
     394:	4770      	bx	lr
			sys_state->sys.angle_units = au_rad;
     396:	2301      	movs	r3, #1
     398:	708b      	strb	r3, [r1, #2]
			break;
     39a:	e7fa      	b.n	392 <cmd_reint_drg_func+0xe>
			sys_state->sys.angle_units = sys_state->settings.grad_enabled ? au_grad : au_deg;
     39c:	780b      	ldrb	r3, [r1, #0]
     39e:	2b00      	cmp	r3, #0
     3a0:	d102      	bne.n	3a8 <cmd_reint_drg_func+0x24>
     3a2:	2300      	movs	r3, #0
     3a4:	708b      	strb	r3, [r1, #2]
			break;
     3a6:	e7f4      	b.n	392 <cmd_reint_drg_func+0xe>
			sys_state->sys.angle_units = sys_state->settings.grad_enabled ? au_grad : au_deg;
     3a8:	2302      	movs	r3, #2
     3aa:	e7fb      	b.n	3a4 <cmd_reint_drg_func+0x20>
			sys_state->sys.angle_units = au_deg;
     3ac:	2300      	movs	r3, #0
     3ae:	708b      	strb	r3, [r1, #2]
			break;
     3b0:	e7ef      	b.n	392 <cmd_reint_drg_func+0xe>
	...

000003b4 <cmd_add_func>:
	.op_func = cmd_reint_drg_func
};



static int cmd_add_func(calc_state_t * calc_state, sys_state_t * sys_state) {
     3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3b6:	0004      	movs	r4, r0
	if (sys_state->sys.entry_mode == em_rpn) {
     3b8:	790b      	ldrb	r3, [r1, #4]
     3ba:	2b01      	cmp	r3, #1
     3bc:	d001      	beq.n	3c2 <cmd_add_func+0xe>
		calc_state->rpn.stack[0] = calc_state->rpn.stack[0] + calc_state->rpn.stack[1];
	} else {
		
	}
	return 0;
}
     3be:	2000      	movs	r0, #0
     3c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		calc_state->rpn.stack[0] = calc_state->rpn.stack[0] + calc_state->rpn.stack[1];
     3c2:	4d09      	ldr	r5, [pc, #36]	; (3e8 <cmd_add_func+0x34>)
     3c4:	6902      	ldr	r2, [r0, #16]
     3c6:	6943      	ldr	r3, [r0, #20]
     3c8:	6841      	ldr	r1, [r0, #4]
     3ca:	6800      	ldr	r0, [r0, #0]
     3cc:	47a8      	blx	r5
     3ce:	0006      	movs	r6, r0
     3d0:	000f      	movs	r7, r1
     3d2:	69a2      	ldr	r2, [r4, #24]
     3d4:	69e3      	ldr	r3, [r4, #28]
     3d6:	68a0      	ldr	r0, [r4, #8]
     3d8:	68e1      	ldr	r1, [r4, #12]
     3da:	47a8      	blx	r5
     3dc:	6026      	str	r6, [r4, #0]
     3de:	6067      	str	r7, [r4, #4]
     3e0:	60a0      	str	r0, [r4, #8]
     3e2:	60e1      	str	r1, [r4, #12]
     3e4:	e7eb      	b.n	3be <cmd_add_func+0xa>
     3e6:	46c0      	nop			; (mov r8, r8)
     3e8:	00001b91 	.word	0x00001b91

000003ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     3ec:	e7fe      	b.n	3ec <Dummy_Handler>
	...

000003f0 <Reset_Handler>:
{
     3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     3f2:	4a23      	ldr	r2, [pc, #140]	; (480 <Reset_Handler+0x90>)
     3f4:	4b23      	ldr	r3, [pc, #140]	; (484 <Reset_Handler+0x94>)
     3f6:	429a      	cmp	r2, r3
     3f8:	d009      	beq.n	40e <Reset_Handler+0x1e>
     3fa:	4b22      	ldr	r3, [pc, #136]	; (484 <Reset_Handler+0x94>)
     3fc:	4a20      	ldr	r2, [pc, #128]	; (480 <Reset_Handler+0x90>)
     3fe:	e003      	b.n	408 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     400:	6811      	ldr	r1, [r2, #0]
     402:	6019      	str	r1, [r3, #0]
     404:	3304      	adds	r3, #4
     406:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     408:	491f      	ldr	r1, [pc, #124]	; (488 <Reset_Handler+0x98>)
     40a:	428b      	cmp	r3, r1
     40c:	d3f8      	bcc.n	400 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     40e:	4b1f      	ldr	r3, [pc, #124]	; (48c <Reset_Handler+0x9c>)
     410:	e002      	b.n	418 <Reset_Handler+0x28>
                *pDest++ = 0;
     412:	2200      	movs	r2, #0
     414:	601a      	str	r2, [r3, #0]
     416:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     418:	4a1d      	ldr	r2, [pc, #116]	; (490 <Reset_Handler+0xa0>)
     41a:	4293      	cmp	r3, r2
     41c:	d3f9      	bcc.n	412 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     41e:	4a1d      	ldr	r2, [pc, #116]	; (494 <Reset_Handler+0xa4>)
     420:	21ff      	movs	r1, #255	; 0xff
     422:	4b1d      	ldr	r3, [pc, #116]	; (498 <Reset_Handler+0xa8>)
     424:	438b      	bics	r3, r1
     426:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     428:	39fd      	subs	r1, #253	; 0xfd
     42a:	2390      	movs	r3, #144	; 0x90
     42c:	005b      	lsls	r3, r3, #1
     42e:	4a1b      	ldr	r2, [pc, #108]	; (49c <Reset_Handler+0xac>)
     430:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     432:	4a1b      	ldr	r2, [pc, #108]	; (4a0 <Reset_Handler+0xb0>)
     434:	78d3      	ldrb	r3, [r2, #3]
     436:	2503      	movs	r5, #3
     438:	43ab      	bics	r3, r5
     43a:	2402      	movs	r4, #2
     43c:	4323      	orrs	r3, r4
     43e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     440:	78d3      	ldrb	r3, [r2, #3]
     442:	270c      	movs	r7, #12
     444:	43bb      	bics	r3, r7
     446:	2608      	movs	r6, #8
     448:	4333      	orrs	r3, r6
     44a:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     44c:	4b15      	ldr	r3, [pc, #84]	; (4a4 <Reset_Handler+0xb4>)
     44e:	7b98      	ldrb	r0, [r3, #14]
     450:	2230      	movs	r2, #48	; 0x30
     452:	4390      	bics	r0, r2
     454:	2220      	movs	r2, #32
     456:	4310      	orrs	r0, r2
     458:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     45a:	7b99      	ldrb	r1, [r3, #14]
     45c:	43b9      	bics	r1, r7
     45e:	4331      	orrs	r1, r6
     460:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     462:	7b9a      	ldrb	r2, [r3, #14]
     464:	43aa      	bics	r2, r5
     466:	4322      	orrs	r2, r4
     468:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     46a:	4a0f      	ldr	r2, [pc, #60]	; (4a8 <Reset_Handler+0xb8>)
     46c:	6851      	ldr	r1, [r2, #4]
     46e:	2380      	movs	r3, #128	; 0x80
     470:	430b      	orrs	r3, r1
     472:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     474:	4b0d      	ldr	r3, [pc, #52]	; (4ac <Reset_Handler+0xbc>)
     476:	4798      	blx	r3
        main();
     478:	4b0d      	ldr	r3, [pc, #52]	; (4b0 <Reset_Handler+0xc0>)
     47a:	4798      	blx	r3
     47c:	e7fe      	b.n	47c <Reset_Handler+0x8c>
     47e:	46c0      	nop			; (mov r8, r8)
     480:	00002a60 	.word	0x00002a60
     484:	20000000 	.word	0x20000000
     488:	200004ec 	.word	0x200004ec
     48c:	200004f0 	.word	0x200004f0
     490:	20000f54 	.word	0x20000f54
     494:	e000ed00 	.word	0xe000ed00
     498:	00000000 	.word	0x00000000
     49c:	41007000 	.word	0x41007000
     4a0:	41005000 	.word	0x41005000
     4a4:	41004800 	.word	0x41004800
     4a8:	41004000 	.word	0x41004000
     4ac:	000021ed 	.word	0x000021ed
     4b0:	000014ed 	.word	0x000014ed

000004b4 <DMA_init>:

void DMA_init(void)
{
	static int initialized = 0;
	
	if (!initialized)
     4b4:	4b15      	ldr	r3, [pc, #84]	; (50c <DMA_init+0x58>)
     4b6:	681b      	ldr	r3, [r3, #0]
     4b8:	2b00      	cmp	r3, #0
     4ba:	d126      	bne.n	50a <DMA_init+0x56>
	{
		/* enable peripheral clock */
		PM->APBBMASK.bit.DMAC_ = 1;
     4bc:	4b14      	ldr	r3, [pc, #80]	; (510 <DMA_init+0x5c>)
     4be:	69d9      	ldr	r1, [r3, #28]
     4c0:	2210      	movs	r2, #16
     4c2:	430a      	orrs	r2, r1
     4c4:	61da      	str	r2, [r3, #28]
		
		/* enable AHB master clock */
		PM->AHBMASK.bit.DMAC_ = 1;
     4c6:	6959      	ldr	r1, [r3, #20]
     4c8:	2220      	movs	r2, #32
     4ca:	430a      	orrs	r2, r1
     4cc:	615a      	str	r2, [r3, #20]

		/* configure DMA controller */
		DMAC->BASEADDR.reg = (uint32_t)descriptor_section;                    // descriptor memory section start
     4ce:	4a0f      	ldr	r2, [pc, #60]	; (50c <DMA_init+0x58>)
     4d0:	0011      	movs	r1, r2
     4d2:	3110      	adds	r1, #16
     4d4:	4b0f      	ldr	r3, [pc, #60]	; (514 <DMA_init+0x60>)
     4d6:	6359      	str	r1, [r3, #52]	; 0x34
		DMAC->WRBADDR.reg = (uint32_t)write_back_section;                     // descriptor write-back memory section start
     4d8:	0011      	movs	r1, r2
     4da:	3130      	adds	r1, #48	; 0x30
     4dc:	6399      	str	r1, [r3, #56]	; 0x38
		DMAC->CTRL.bit.LVLEN0 = 1;                                            // enable level 0 priority
     4de:	8818      	ldrh	r0, [r3, #0]
     4e0:	2180      	movs	r1, #128	; 0x80
     4e2:	0049      	lsls	r1, r1, #1
     4e4:	4301      	orrs	r1, r0
     4e6:	8019      	strh	r1, [r3, #0]
		DMAC->CTRL.bit.LVLEN1 = 1;                                            // enable level 1 priority
     4e8:	8818      	ldrh	r0, [r3, #0]
     4ea:	2180      	movs	r1, #128	; 0x80
     4ec:	0089      	lsls	r1, r1, #2
     4ee:	4301      	orrs	r1, r0
     4f0:	8019      	strh	r1, [r3, #0]
		DMAC->CTRL.bit.LVLEN2 = 1;                                            // enable level 2 priority
     4f2:	8818      	ldrh	r0, [r3, #0]
     4f4:	2180      	movs	r1, #128	; 0x80
     4f6:	00c9      	lsls	r1, r1, #3
     4f8:	4301      	orrs	r1, r0
     4fa:	8019      	strh	r1, [r3, #0]
		DMAC->CTRL.bit.LVLEN3 = 1;                                            // enable level 3 priority
     4fc:	8818      	ldrh	r0, [r3, #0]
     4fe:	2180      	movs	r1, #128	; 0x80
     500:	0109      	lsls	r1, r1, #4
     502:	4301      	orrs	r1, r0
     504:	8019      	strh	r1, [r3, #0]
		
		/* DMA is initialized */
		initialized = 1;
     506:	2301      	movs	r3, #1
     508:	6013      	str	r3, [r2, #0]
	}
}
     50a:	4770      	bx	lr
     50c:	20000520 	.word	0x20000520
     510:	40000400 	.word	0x40000400
     514:	41004800 	.word	0x41004800

00000518 <DMA_add_channel>:

/* add the first least significant free channel with its descriptor (TODO: implement linked descriptors) */
void DMA_add_channel(int source, DmacDescriptor *descriptor)
{
     518:	b570      	push	{r4, r5, r6, lr}
     51a:	0004      	movs	r4, r0
	/* disable DMA if enabled */
	if (DMAC->CTRL.bit.DMAENABLE)
     51c:	4b1f      	ldr	r3, [pc, #124]	; (59c <DMA_add_channel+0x84>)
     51e:	881b      	ldrh	r3, [r3, #0]
     520:	079b      	lsls	r3, r3, #30
     522:	d504      	bpl.n	52e <DMA_add_channel+0x16>
		DMAC->CTRL.bit.DMAENABLE = 0;
     524:	4a1d      	ldr	r2, [pc, #116]	; (59c <DMA_add_channel+0x84>)
     526:	8813      	ldrh	r3, [r2, #0]
     528:	2002      	movs	r0, #2
     52a:	4383      	bics	r3, r0
     52c:	8013      	strh	r3, [r2, #0]
	while (DMAC->CTRL.bit.DMAENABLE)
     52e:	4b1b      	ldr	r3, [pc, #108]	; (59c <DMA_add_channel+0x84>)
     530:	881b      	ldrh	r3, [r3, #0]
     532:	079b      	lsls	r3, r3, #30
     534:	d4fb      	bmi.n	52e <DMA_add_channel+0x16>
		;
		
	/* add transfer descriptor to transfer descriptor section (before enabling channel!) */
	memcpy(descriptor_section + used_channels * sizeof(DmacDescriptor), descriptor, sizeof(DmacDescriptor));
     536:	4e1a      	ldr	r6, [pc, #104]	; (5a0 <DMA_add_channel+0x88>)
     538:	6d35      	ldr	r5, [r6, #80]	; 0x50
     53a:	0030      	movs	r0, r6
     53c:	3010      	adds	r0, #16
     53e:	022b      	lsls	r3, r5, #8
     540:	18c0      	adds	r0, r0, r3
     542:	2210      	movs	r2, #16
     544:	4b17      	ldr	r3, [pc, #92]	; (5a4 <DMA_add_channel+0x8c>)
     546:	4798      	blx	r3
		
	/* configure and enable first least significant free channel */
	DMAC->CHID.bit.ID = used_channels++;                                  // use first free channel 
     548:	1c6b      	adds	r3, r5, #1
     54a:	6533      	str	r3, [r6, #80]	; 0x50
     54c:	4b13      	ldr	r3, [pc, #76]	; (59c <DMA_add_channel+0x84>)
     54e:	203f      	movs	r0, #63	; 0x3f
     550:	5c1a      	ldrb	r2, [r3, r0]
     552:	210f      	movs	r1, #15
     554:	4029      	ands	r1, r5
     556:	250f      	movs	r5, #15
     558:	43aa      	bics	r2, r5
     55a:	430a      	orrs	r2, r1
     55c:	541a      	strb	r2, [r3, r0]
	DMAC->CHCTRLB.bit.LVL = 0x00;                                         // channel priority level 0
     55e:	6c59      	ldr	r1, [r3, #68]	; 0x44
     560:	2260      	movs	r2, #96	; 0x60
     562:	4391      	bics	r1, r2
     564:	6459      	str	r1, [r3, #68]	; 0x44
	DMAC->CHCTRLB.bit.TRIGACT = 0x02;                                     // one trigger each beat transfer
     566:	6c59      	ldr	r1, [r3, #68]	; 0x44
     568:	4a0f      	ldr	r2, [pc, #60]	; (5a8 <DMA_add_channel+0x90>)
     56a:	4011      	ands	r1, r2
     56c:	2280      	movs	r2, #128	; 0x80
     56e:	0412      	lsls	r2, r2, #16
     570:	430a      	orrs	r2, r1
     572:	645a      	str	r2, [r3, #68]	; 0x44
	DMAC->CHCTRLB.bit.TRIGSRC = source;                                   // select trigger source
     574:	4020      	ands	r0, r4
     576:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     578:	0200      	lsls	r0, r0, #8
     57a:	490c      	ldr	r1, [pc, #48]	; (5ac <DMA_add_channel+0x94>)
     57c:	400a      	ands	r2, r1
     57e:	4310      	orrs	r0, r2
     580:	6458      	str	r0, [r3, #68]	; 0x44
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;                             // enable channel 
     582:	2140      	movs	r1, #64	; 0x40
     584:	5c5a      	ldrb	r2, [r3, r1]
     586:	2402      	movs	r4, #2
     588:	4322      	orrs	r2, r4
     58a:	b2d2      	uxtb	r2, r2
     58c:	545a      	strb	r2, [r3, r1]
		
	/* enable DMA block transfer complete interrupt */
	DMAC->CHINTENSET.bit.TCMPL = 1;                                       // enable DMA block transfer complete interrupt
     58e:	204d      	movs	r0, #77	; 0x4d
     590:	5c1a      	ldrb	r2, [r3, r0]
     592:	4322      	orrs	r2, r4
     594:	541a      	strb	r2, [r3, r0]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     596:	4b06      	ldr	r3, [pc, #24]	; (5b0 <DMA_add_channel+0x98>)
     598:	6019      	str	r1, [r3, #0]
	NVIC_EnableIRQ(DMAC_IRQn);                                            // enable DMA interrupt in NVIC
}
     59a:	bd70      	pop	{r4, r5, r6, pc}
     59c:	41004800 	.word	0x41004800
     5a0:	20000520 	.word	0x20000520
     5a4:	00002235 	.word	0x00002235
     5a8:	ff3fffff 	.word	0xff3fffff
     5ac:	ffffc0ff 	.word	0xffffc0ff
     5b0:	e000e100 	.word	0xe000e100

000005b4 <DMA_enable>:

void DMA_enable(void)
{
	/* enable DMA controller */
	DMAC->CTRL.bit.DMAENABLE = 1;
     5b4:	4a02      	ldr	r2, [pc, #8]	; (5c0 <DMA_enable+0xc>)
     5b6:	8813      	ldrh	r3, [r2, #0]
     5b8:	2102      	movs	r1, #2
     5ba:	430b      	orrs	r3, r1
     5bc:	8013      	strh	r3, [r2, #0]
}
     5be:	4770      	bx	lr
     5c0:	41004800 	.word	0x41004800

000005c4 <DMAC_Handler>:

void DMAC_Handler(void)
{
     5c4:	b530      	push	{r4, r5, lr}
	//static int count;
	for (int channel = 0 ; channel < used_channels ; channel++)  // check interrupt for every registered channel
     5c6:	2200      	movs	r2, #0
     5c8:	e000      	b.n	5cc <DMAC_Handler+0x8>
     5ca:	3201      	adds	r2, #1
     5cc:	4b12      	ldr	r3, [pc, #72]	; (618 <DMAC_Handler+0x54>)
     5ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
     5d0:	429a      	cmp	r2, r3
     5d2:	da1f      	bge.n	614 <DMAC_Handler+0x50>
	{
		DMAC->CHID.bit.ID = channel;      
     5d4:	4911      	ldr	r1, [pc, #68]	; (61c <DMAC_Handler+0x58>)
     5d6:	243f      	movs	r4, #63	; 0x3f
     5d8:	5d0b      	ldrb	r3, [r1, r4]
     5da:	200f      	movs	r0, #15
     5dc:	4010      	ands	r0, r2
     5de:	250f      	movs	r5, #15
     5e0:	43ab      	bics	r3, r5
     5e2:	4303      	orrs	r3, r0
     5e4:	550b      	strb	r3, [r1, r4]
		if (DMAC->CHINTFLAG.bit.TCMPL && DMAC->CHINTENSET.bit.TCMPL)
     5e6:	234e      	movs	r3, #78	; 0x4e
     5e8:	5ccb      	ldrb	r3, [r1, r3]
     5ea:	079b      	lsls	r3, r3, #30
     5ec:	d5ed      	bpl.n	5ca <DMAC_Handler+0x6>
     5ee:	234d      	movs	r3, #77	; 0x4d
     5f0:	5ccb      	ldrb	r3, [r1, r3]
     5f2:	079b      	lsls	r3, r3, #30
     5f4:	d5e9      	bpl.n	5ca <DMAC_Handler+0x6>
		{
			if (DMAC->CHID.bit.ID == 0x00)   // handle SPI transfer complete interrupt
     5f6:	233f      	movs	r3, #63	; 0x3f
     5f8:	5ccb      	ldrb	r3, [r1, r3]
     5fa:	071b      	lsls	r3, r3, #28
     5fc:	d1e5      	bne.n	5ca <DMAC_Handler+0x6>
			{
				DMAC->CHINTFLAG.bit.TCMPL = 1;                 // acknowledge interrupt
     5fe:	334e      	adds	r3, #78	; 0x4e
     600:	5cc8      	ldrb	r0, [r1, r3]
     602:	2402      	movs	r4, #2
     604:	4320      	orrs	r0, r4
     606:	54c8      	strb	r0, [r1, r3]
				DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;      // re-enable DMA channel
     608:	2040      	movs	r0, #64	; 0x40
     60a:	5c0b      	ldrb	r3, [r1, r0]
     60c:	4323      	orrs	r3, r4
     60e:	b2db      	uxtb	r3, r3
     610:	540b      	strb	r3, [r1, r0]
     612:	e7da      	b.n	5ca <DMAC_Handler+0x6>
			}
		}
	}
}
     614:	bd30      	pop	{r4, r5, pc}
     616:	46c0      	nop			; (mov r8, r8)
     618:	20000520 	.word	0x20000520
     61c:	41004800 	.word	0x41004800

00000620 <gpio_set_pin>:
	} else if (port == PORTB) {
		REG_PORT_OUTTGL1 = 1 << pin;
	}
}
void gpio_set_pin(unsigned int port, unsigned long pin, int val) {
	if (port == PORTA) {
     620:	2800      	cmp	r0, #0
     622:	d10b      	bne.n	63c <gpio_set_pin+0x1c>
		if (val)
     624:	2a00      	cmp	r2, #0
     626:	d004      	beq.n	632 <gpio_set_pin+0x12>
			REG_PORT_OUTSET0 = 1 << pin;
     628:	2301      	movs	r3, #1
     62a:	408b      	lsls	r3, r1
     62c:	4a0b      	ldr	r2, [pc, #44]	; (65c <gpio_set_pin+0x3c>)
     62e:	6013      	str	r3, [r2, #0]
     630:	e006      	b.n	640 <gpio_set_pin+0x20>
		else
			REG_PORT_OUTCLR0 = 1 << pin;
     632:	2301      	movs	r3, #1
     634:	408b      	lsls	r3, r1
     636:	4a0a      	ldr	r2, [pc, #40]	; (660 <gpio_set_pin+0x40>)
     638:	6013      	str	r3, [r2, #0]
     63a:	e001      	b.n	640 <gpio_set_pin+0x20>
	} else if (port == PORTB) {
     63c:	2801      	cmp	r0, #1
     63e:	d000      	beq.n	642 <gpio_set_pin+0x22>
		if (val)
			REG_PORT_OUTSET1 = 1 << pin;
		else
			REG_PORT_OUTCLR1 = 1 << pin;
	}
}
     640:	4770      	bx	lr
		if (val)
     642:	2a00      	cmp	r2, #0
     644:	d104      	bne.n	650 <gpio_set_pin+0x30>
			REG_PORT_OUTCLR1 = 1 << pin;
     646:	2301      	movs	r3, #1
     648:	408b      	lsls	r3, r1
     64a:	4a06      	ldr	r2, [pc, #24]	; (664 <gpio_set_pin+0x44>)
     64c:	6013      	str	r3, [r2, #0]
}
     64e:	e7f7      	b.n	640 <gpio_set_pin+0x20>
			REG_PORT_OUTSET1 = 1 << pin;
     650:	2301      	movs	r3, #1
     652:	408b      	lsls	r3, r1
     654:	4a04      	ldr	r2, [pc, #16]	; (668 <gpio_set_pin+0x48>)
     656:	6013      	str	r3, [r2, #0]
     658:	e7f2      	b.n	640 <gpio_set_pin+0x20>
     65a:	46c0      	nop			; (mov r8, r8)
     65c:	41004418 	.word	0x41004418
     660:	41004414 	.word	0x41004414
     664:	41004494 	.word	0x41004494
     668:	41004498 	.word	0x41004498

0000066c <gpio_set_pin_dir>:

void gpio_set_pin_dir(unsigned int port, unsigned long pin, int val) {
	
	if (port == PORTA) {
     66c:	2800      	cmp	r0, #0
     66e:	d11f      	bne.n	6b0 <gpio_set_pin_dir+0x44>
		if (val == GPIO_DIR_OUT) {
     670:	2a01      	cmp	r2, #1
     672:	d00e      	beq.n	692 <gpio_set_pin_dir+0x26>
			REG_PORT_DIRSET0 = 1 << pin;
			PORT->Group[port].PINCFG[pin].bit.INEN = 0;
		} else {
			REG_PORT_DIRCLR0 = 1 << pin;
     674:	2301      	movs	r3, #1
     676:	408b      	lsls	r3, r1
     678:	4a1e      	ldr	r2, [pc, #120]	; (6f4 <gpio_set_pin_dir+0x88>)
     67a:	6013      	str	r3, [r2, #0]
			PORT->Group[port].PINCFG[pin].bit.INEN = 1;
     67c:	01c0      	lsls	r0, r0, #7
     67e:	4b1e      	ldr	r3, [pc, #120]	; (6f8 <gpio_set_pin_dir+0x8c>)
     680:	469c      	mov	ip, r3
     682:	4460      	add	r0, ip
     684:	1841      	adds	r1, r0, r1
     686:	3140      	adds	r1, #64	; 0x40
     688:	780b      	ldrb	r3, [r1, #0]
     68a:	2202      	movs	r2, #2
     68c:	4313      	orrs	r3, r2
     68e:	700b      	strb	r3, [r1, #0]
			REG_PORT_DIRCLR1 = 1 << pin;
			PORT->Group[port].PINCFG[pin].bit.INEN = 1;
		}
	}

}
     690:	4770      	bx	lr
			REG_PORT_DIRSET0 = 1 << pin;
     692:	2301      	movs	r3, #1
     694:	408b      	lsls	r3, r1
     696:	4a19      	ldr	r2, [pc, #100]	; (6fc <gpio_set_pin_dir+0x90>)
     698:	6013      	str	r3, [r2, #0]
			PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     69a:	01c0      	lsls	r0, r0, #7
     69c:	4b16      	ldr	r3, [pc, #88]	; (6f8 <gpio_set_pin_dir+0x8c>)
     69e:	469c      	mov	ip, r3
     6a0:	4460      	add	r0, ip
     6a2:	1841      	adds	r1, r0, r1
     6a4:	3140      	adds	r1, #64	; 0x40
     6a6:	780b      	ldrb	r3, [r1, #0]
     6a8:	2202      	movs	r2, #2
     6aa:	4393      	bics	r3, r2
     6ac:	700b      	strb	r3, [r1, #0]
     6ae:	e7ef      	b.n	690 <gpio_set_pin_dir+0x24>
	} else if (port == PORTB) {
     6b0:	2801      	cmp	r0, #1
     6b2:	d1ed      	bne.n	690 <gpio_set_pin_dir+0x24>
		if (val == GPIO_DIR_OUT) {
     6b4:	2a01      	cmp	r2, #1
     6b6:	d00e      	beq.n	6d6 <gpio_set_pin_dir+0x6a>
			REG_PORT_DIRCLR1 = 1 << pin;
     6b8:	2301      	movs	r3, #1
     6ba:	408b      	lsls	r3, r1
     6bc:	4a10      	ldr	r2, [pc, #64]	; (700 <gpio_set_pin_dir+0x94>)
     6be:	6013      	str	r3, [r2, #0]
			PORT->Group[port].PINCFG[pin].bit.INEN = 1;
     6c0:	01c0      	lsls	r0, r0, #7
     6c2:	4b0d      	ldr	r3, [pc, #52]	; (6f8 <gpio_set_pin_dir+0x8c>)
     6c4:	469c      	mov	ip, r3
     6c6:	4460      	add	r0, ip
     6c8:	1841      	adds	r1, r0, r1
     6ca:	3140      	adds	r1, #64	; 0x40
     6cc:	780b      	ldrb	r3, [r1, #0]
     6ce:	2202      	movs	r2, #2
     6d0:	4313      	orrs	r3, r2
     6d2:	700b      	strb	r3, [r1, #0]
}
     6d4:	e7dc      	b.n	690 <gpio_set_pin_dir+0x24>
			REG_PORT_DIRSET1 = 1 << pin;
     6d6:	2301      	movs	r3, #1
     6d8:	408b      	lsls	r3, r1
     6da:	4a0a      	ldr	r2, [pc, #40]	; (704 <gpio_set_pin_dir+0x98>)
     6dc:	6013      	str	r3, [r2, #0]
			PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     6de:	01c0      	lsls	r0, r0, #7
     6e0:	4b05      	ldr	r3, [pc, #20]	; (6f8 <gpio_set_pin_dir+0x8c>)
     6e2:	469c      	mov	ip, r3
     6e4:	4460      	add	r0, ip
     6e6:	1841      	adds	r1, r0, r1
     6e8:	3140      	adds	r1, #64	; 0x40
     6ea:	780b      	ldrb	r3, [r1, #0]
     6ec:	2202      	movs	r2, #2
     6ee:	4393      	bics	r3, r2
     6f0:	700b      	strb	r3, [r1, #0]
     6f2:	e7cd      	b.n	690 <gpio_set_pin_dir+0x24>
     6f4:	41004404 	.word	0x41004404
     6f8:	41004400 	.word	0x41004400
     6fc:	41004408 	.word	0x41004408
     700:	41004484 	.word	0x41004484
     704:	41004488 	.word	0x41004488

00000708 <gpio_set_pin_drvstr>:
void gpio_set_pin_drvstr(unsigned int port, unsigned long pin, int val) {
	if (port != PORTA && port != PORTB) {
     708:	2801      	cmp	r0, #1
     70a:	d900      	bls.n	70e <gpio_set_pin_drvstr+0x6>
		return;
	}
	PORT->Group[port].PINCFG[pin].bit.DRVSTR = (val ? 1 : 0);
}
     70c:	4770      	bx	lr
	PORT->Group[port].PINCFG[pin].bit.DRVSTR = (val ? 1 : 0);
     70e:	1e53      	subs	r3, r2, #1
     710:	419a      	sbcs	r2, r3
     712:	01c0      	lsls	r0, r0, #7
     714:	4b05      	ldr	r3, [pc, #20]	; (72c <gpio_set_pin_drvstr+0x24>)
     716:	469c      	mov	ip, r3
     718:	4460      	add	r0, ip
     71a:	1841      	adds	r1, r0, r1
     71c:	3140      	adds	r1, #64	; 0x40
     71e:	780b      	ldrb	r3, [r1, #0]
     720:	0192      	lsls	r2, r2, #6
     722:	2040      	movs	r0, #64	; 0x40
     724:	4383      	bics	r3, r0
     726:	431a      	orrs	r2, r3
     728:	700a      	strb	r2, [r1, #0]
     72a:	e7ef      	b.n	70c <gpio_set_pin_drvstr+0x4>
     72c:	41004400 	.word	0x41004400

00000730 <gpio_set_pin_pull>:
void gpio_set_pin_pull(unsigned int port, unsigned long pin, int val) {
     730:	b510      	push	{r4, lr}
	if (port != PORTA && port != PORTB) {
     732:	2801      	cmp	r0, #1
     734:	d900      	bls.n	738 <gpio_set_pin_pull+0x8>
		PORT->Group[port].PINCFG[pin].bit.PULLEN = 1;
		PORT->Group[port].OUTSET.reg = 1 << pin;
	} else {
		PORT->Group[port].PINCFG[pin].bit.PULLEN = 0;
	}
}
     736:	bd10      	pop	{r4, pc}
	if (val == GPIO_PULL_DOWN) {
     738:	2a02      	cmp	r2, #2
     73a:	d00c      	beq.n	756 <gpio_set_pin_pull+0x26>
	} else if (val == GPIO_PULL_UP) {
     73c:	2a01      	cmp	r2, #1
     73e:	d018      	beq.n	772 <gpio_set_pin_pull+0x42>
		PORT->Group[port].PINCFG[pin].bit.PULLEN = 0;
     740:	01c0      	lsls	r0, r0, #7
     742:	4b13      	ldr	r3, [pc, #76]	; (790 <gpio_set_pin_pull+0x60>)
     744:	469c      	mov	ip, r3
     746:	4460      	add	r0, ip
     748:	1841      	adds	r1, r0, r1
     74a:	3140      	adds	r1, #64	; 0x40
     74c:	780b      	ldrb	r3, [r1, #0]
     74e:	2204      	movs	r2, #4
     750:	4393      	bics	r3, r2
     752:	700b      	strb	r3, [r1, #0]
     754:	e7ef      	b.n	736 <gpio_set_pin_pull+0x6>
		PORT->Group[port].PINCFG[pin].bit.PULLEN = 1;
     756:	01c0      	lsls	r0, r0, #7
     758:	4b0d      	ldr	r3, [pc, #52]	; (790 <gpio_set_pin_pull+0x60>)
     75a:	469c      	mov	ip, r3
     75c:	4460      	add	r0, ip
     75e:	1843      	adds	r3, r0, r1
     760:	3340      	adds	r3, #64	; 0x40
     762:	781a      	ldrb	r2, [r3, #0]
     764:	2404      	movs	r4, #4
     766:	4322      	orrs	r2, r4
     768:	701a      	strb	r2, [r3, #0]
		PORT->Group[port].OUTCLR.reg = 1 << pin;
     76a:	2301      	movs	r3, #1
     76c:	408b      	lsls	r3, r1
     76e:	6143      	str	r3, [r0, #20]
     770:	e7e1      	b.n	736 <gpio_set_pin_pull+0x6>
		PORT->Group[port].PINCFG[pin].bit.PULLEN = 1;
     772:	01c0      	lsls	r0, r0, #7
     774:	4b06      	ldr	r3, [pc, #24]	; (790 <gpio_set_pin_pull+0x60>)
     776:	469c      	mov	ip, r3
     778:	4460      	add	r0, ip
     77a:	1843      	adds	r3, r0, r1
     77c:	3340      	adds	r3, #64	; 0x40
     77e:	781a      	ldrb	r2, [r3, #0]
     780:	2404      	movs	r4, #4
     782:	4322      	orrs	r2, r4
     784:	701a      	strb	r2, [r3, #0]
		PORT->Group[port].OUTSET.reg = 1 << pin;
     786:	2301      	movs	r3, #1
     788:	408b      	lsls	r3, r1
     78a:	6183      	str	r3, [r0, #24]
     78c:	e7d3      	b.n	736 <gpio_set_pin_pull+0x6>
     78e:	46c0      	nop			; (mov r8, r8)
     790:	41004400 	.word	0x41004400

00000794 <gpio_read_pin>:


int gpio_read_pin(unsigned int port, unsigned long pin) {
	if (port == PORTA) {
     794:	2800      	cmp	r0, #0
     796:	d009      	beq.n	7ac <gpio_read_pin+0x18>
		return (PORT->Group[0].IN.reg & (1 << pin)) ? 1 : 0;
	} else if (port == PORTB) {
     798:	2801      	cmp	r0, #1
     79a:	d10f      	bne.n	7bc <gpio_read_pin+0x28>
		return (PORT->Group[1].IN.reg & (1 << pin)) ? 1 : 0;
     79c:	23a0      	movs	r3, #160	; 0xa0
     79e:	4a09      	ldr	r2, [pc, #36]	; (7c4 <gpio_read_pin+0x30>)
     7a0:	58d3      	ldr	r3, [r2, r3]
     7a2:	4088      	lsls	r0, r1
     7a4:	4018      	ands	r0, r3
     7a6:	1e43      	subs	r3, r0, #1
     7a8:	4198      	sbcs	r0, r3
	}
	return -1;
}
     7aa:	4770      	bx	lr
		return (PORT->Group[0].IN.reg & (1 << pin)) ? 1 : 0;
     7ac:	4b05      	ldr	r3, [pc, #20]	; (7c4 <gpio_read_pin+0x30>)
     7ae:	6a1b      	ldr	r3, [r3, #32]
     7b0:	3001      	adds	r0, #1
     7b2:	4088      	lsls	r0, r1
     7b4:	4018      	ands	r0, r3
     7b6:	1e43      	subs	r3, r0, #1
     7b8:	4198      	sbcs	r0, r3
     7ba:	e7f6      	b.n	7aa <gpio_read_pin+0x16>
	return -1;
     7bc:	2001      	movs	r0, #1
     7be:	4240      	negs	r0, r0
     7c0:	e7f3      	b.n	7aa <gpio_read_pin+0x16>
     7c2:	46c0      	nop			; (mov r8, r8)
     7c4:	41004400 	.word	0x41004400

000007c8 <re_im_key_color>:
},
*/
//const kp_key keypad_map[KEYPAD_NUM_COLS * KEYPAD_NUM_ROWS] = {0};

// Determines the lighting of the re/im key based on the current view
static color_rgb re_im_key_color(const calc_state_t * calc_state, const sys_state_t * sys_state) {
     7c8:	b500      	push	{lr}
     7ca:	b083      	sub	sp, #12
	switch (sys_state->ui.cpx_view) {
     7cc:	7a4b      	ldrb	r3, [r1, #9]
     7ce:	2b01      	cmp	r3, #1
     7d0:	d02d      	beq.n	82e <re_im_key_color+0x66>
     7d2:	2b00      	cmp	r3, #0
     7d4:	d009      	beq.n	7ea <re_im_key_color+0x22>
     7d6:	2b02      	cmp	r3, #2
     7d8:	d02f      	beq.n	83a <re_im_key_color+0x72>
     7da:	2b03      	cmp	r3, #3
     7dc:	d033      	beq.n	846 <re_im_key_color+0x7e>
		case cv_r:
		return color_cplx_r;
		case cv_theta:
		return color_cplx_theta;
	}
	return color_off;
     7de:	2203      	movs	r2, #3
     7e0:	491c      	ldr	r1, [pc, #112]	; (854 <re_im_key_color+0x8c>)
     7e2:	4668      	mov	r0, sp
     7e4:	4b1c      	ldr	r3, [pc, #112]	; (858 <re_im_key_color+0x90>)
     7e6:	4798      	blx	r3
     7e8:	e00d      	b.n	806 <re_im_key_color+0x3e>
		return sys_state->ui.view_is_real ? color_normal : color_cplx_re;
     7ea:	68cb      	ldr	r3, [r1, #12]
     7ec:	2b00      	cmp	r3, #0
     7ee:	d018      	beq.n	822 <re_im_key_color+0x5a>
     7f0:	2203      	movs	r2, #3
     7f2:	491a      	ldr	r1, [pc, #104]	; (85c <re_im_key_color+0x94>)
     7f4:	a801      	add	r0, sp, #4
     7f6:	4b18      	ldr	r3, [pc, #96]	; (858 <re_im_key_color+0x90>)
     7f8:	4798      	blx	r3
     7fa:	ab01      	add	r3, sp, #4
     7fc:	881a      	ldrh	r2, [r3, #0]
     7fe:	4669      	mov	r1, sp
     800:	800a      	strh	r2, [r1, #0]
     802:	789b      	ldrb	r3, [r3, #2]
     804:	708b      	strb	r3, [r1, #2]
     806:	466b      	mov	r3, sp
     808:	781b      	ldrb	r3, [r3, #0]
     80a:	466a      	mov	r2, sp
     80c:	7852      	ldrb	r2, [r2, #1]
     80e:	0212      	lsls	r2, r2, #8
     810:	20ff      	movs	r0, #255	; 0xff
     812:	4018      	ands	r0, r3
     814:	466b      	mov	r3, sp
     816:	789b      	ldrb	r3, [r3, #2]
     818:	041b      	lsls	r3, r3, #16
     81a:	4310      	orrs	r0, r2
     81c:	4318      	orrs	r0, r3
}
     81e:	b003      	add	sp, #12
     820:	bd00      	pop	{pc}
		return sys_state->ui.view_is_real ? color_normal : color_cplx_re;
     822:	2203      	movs	r2, #3
     824:	490e      	ldr	r1, [pc, #56]	; (860 <re_im_key_color+0x98>)
     826:	a801      	add	r0, sp, #4
     828:	4b0b      	ldr	r3, [pc, #44]	; (858 <re_im_key_color+0x90>)
     82a:	4798      	blx	r3
     82c:	e7e5      	b.n	7fa <re_im_key_color+0x32>
		return color_cplx_im;
     82e:	2203      	movs	r2, #3
     830:	490c      	ldr	r1, [pc, #48]	; (864 <re_im_key_color+0x9c>)
     832:	4668      	mov	r0, sp
     834:	4b08      	ldr	r3, [pc, #32]	; (858 <re_im_key_color+0x90>)
     836:	4798      	blx	r3
     838:	e7e5      	b.n	806 <re_im_key_color+0x3e>
		return color_cplx_r;
     83a:	2203      	movs	r2, #3
     83c:	490a      	ldr	r1, [pc, #40]	; (868 <re_im_key_color+0xa0>)
     83e:	4668      	mov	r0, sp
     840:	4b05      	ldr	r3, [pc, #20]	; (858 <re_im_key_color+0x90>)
     842:	4798      	blx	r3
     844:	e7df      	b.n	806 <re_im_key_color+0x3e>
		return color_cplx_theta;
     846:	2203      	movs	r2, #3
     848:	4908      	ldr	r1, [pc, #32]	; (86c <re_im_key_color+0xa4>)
     84a:	4668      	mov	r0, sp
     84c:	4b02      	ldr	r3, [pc, #8]	; (858 <re_im_key_color+0x90>)
     84e:	4798      	blx	r3
     850:	e7d9      	b.n	806 <re_im_key_color+0x3e>
     852:	46c0      	nop			; (mov r8, r8)
     854:	000024e0 	.word	0x000024e0
     858:	00002235 	.word	0x00002235
     85c:	000024dc 	.word	0x000024dc
     860:	000024bc 	.word	0x000024bc
     864:	000024b8 	.word	0x000024b8
     868:	000024b4 	.word	0x000024b4
     86c:	000024b0 	.word	0x000024b0

00000870 <drg_key_color>:

static color_rgb drg_key_color(const calc_state_t * calc_state, const sys_state_t * sys_state) {
     870:	b500      	push	{lr}
     872:	b083      	sub	sp, #12
	switch (sys_state->sys.angle_units) {
     874:	788b      	ldrb	r3, [r1, #2]
     876:	2b01      	cmp	r3, #1
     878:	d01a      	beq.n	8b0 <drg_key_color+0x40>
     87a:	2b00      	cmp	r3, #0
     87c:	d007      	beq.n	88e <drg_key_color+0x1e>
     87e:	2b02      	cmp	r3, #2
     880:	d01c      	beq.n	8bc <drg_key_color+0x4c>
		case au_rad:
		return color_drg_r;
		case au_grad:
		return color_drg_g;
	}
	return color_off;
     882:	2203      	movs	r2, #3
     884:	4910      	ldr	r1, [pc, #64]	; (8c8 <drg_key_color+0x58>)
     886:	a801      	add	r0, sp, #4
     888:	4b10      	ldr	r3, [pc, #64]	; (8cc <drg_key_color+0x5c>)
     88a:	4798      	blx	r3
     88c:	e004      	b.n	898 <drg_key_color+0x28>
		return color_drg_d;
     88e:	2203      	movs	r2, #3
     890:	490f      	ldr	r1, [pc, #60]	; (8d0 <drg_key_color+0x60>)
     892:	a801      	add	r0, sp, #4
     894:	4b0d      	ldr	r3, [pc, #52]	; (8cc <drg_key_color+0x5c>)
     896:	4798      	blx	r3
     898:	ab01      	add	r3, sp, #4
     89a:	7819      	ldrb	r1, [r3, #0]
     89c:	785a      	ldrb	r2, [r3, #1]
     89e:	0212      	lsls	r2, r2, #8
     8a0:	20ff      	movs	r0, #255	; 0xff
     8a2:	4008      	ands	r0, r1
     8a4:	789b      	ldrb	r3, [r3, #2]
     8a6:	041b      	lsls	r3, r3, #16
     8a8:	4310      	orrs	r0, r2
     8aa:	4318      	orrs	r0, r3
}
     8ac:	b003      	add	sp, #12
     8ae:	bd00      	pop	{pc}
		return color_drg_r;
     8b0:	2203      	movs	r2, #3
     8b2:	4908      	ldr	r1, [pc, #32]	; (8d4 <drg_key_color+0x64>)
     8b4:	a801      	add	r0, sp, #4
     8b6:	4b05      	ldr	r3, [pc, #20]	; (8cc <drg_key_color+0x5c>)
     8b8:	4798      	blx	r3
     8ba:	e7ed      	b.n	898 <drg_key_color+0x28>
		return color_drg_g;
     8bc:	2203      	movs	r2, #3
     8be:	4906      	ldr	r1, [pc, #24]	; (8d8 <drg_key_color+0x68>)
     8c0:	a801      	add	r0, sp, #4
     8c2:	4b02      	ldr	r3, [pc, #8]	; (8cc <drg_key_color+0x5c>)
     8c4:	4798      	blx	r3
     8c6:	e7e7      	b.n	898 <drg_key_color+0x28>
     8c8:	000024e0 	.word	0x000024e0
     8cc:	00002235 	.word	0x00002235
     8d0:	000024ac 	.word	0x000024ac
     8d4:	000024a8 	.word	0x000024a8
     8d8:	000024a4 	.word	0x000024a4

000008dc <shift_key_color>:

static color_rgb shift_key_color(const calc_state_t * calc_state, const sys_state_t * sys_state) {
     8dc:	b500      	push	{lr}
     8de:	b083      	sub	sp, #12
	return sys_state->sys.modifiers.shift ? (sys_state->sys.modifiers.hyp ? color_shift_hyp : color_shift) : color_normal;
     8e0:	794b      	ldrb	r3, [r1, #5]
     8e2:	2b00      	cmp	r3, #0
     8e4:	d00e      	beq.n	904 <shift_key_color+0x28>
     8e6:	798b      	ldrb	r3, [r1, #6]
     8e8:	2b00      	cmp	r3, #0
     8ea:	d005      	beq.n	8f8 <shift_key_color+0x1c>
     8ec:	2203      	movs	r2, #3
     8ee:	490f      	ldr	r1, [pc, #60]	; (92c <shift_key_color+0x50>)
     8f0:	a801      	add	r0, sp, #4
     8f2:	4b0f      	ldr	r3, [pc, #60]	; (930 <shift_key_color+0x54>)
     8f4:	4798      	blx	r3
     8f6:	e00a      	b.n	90e <shift_key_color+0x32>
     8f8:	2203      	movs	r2, #3
     8fa:	490e      	ldr	r1, [pc, #56]	; (934 <shift_key_color+0x58>)
     8fc:	a801      	add	r0, sp, #4
     8fe:	4b0c      	ldr	r3, [pc, #48]	; (930 <shift_key_color+0x54>)
     900:	4798      	blx	r3
     902:	e004      	b.n	90e <shift_key_color+0x32>
     904:	2203      	movs	r2, #3
     906:	490c      	ldr	r1, [pc, #48]	; (938 <shift_key_color+0x5c>)
     908:	a801      	add	r0, sp, #4
     90a:	4b09      	ldr	r3, [pc, #36]	; (930 <shift_key_color+0x54>)
     90c:	4798      	blx	r3
     90e:	a901      	add	r1, sp, #4
     910:	880b      	ldrh	r3, [r1, #0]
     912:	0a1a      	lsrs	r2, r3, #8
     914:	0212      	lsls	r2, r2, #8
     916:	20ff      	movs	r0, #255	; 0xff
     918:	4018      	ands	r0, r3
     91a:	4310      	orrs	r0, r2
     91c:	788a      	ldrb	r2, [r1, #2]
     91e:	0412      	lsls	r2, r2, #16
     920:	4b06      	ldr	r3, [pc, #24]	; (93c <shift_key_color+0x60>)
     922:	4018      	ands	r0, r3
     924:	4310      	orrs	r0, r2
}
     926:	b003      	add	sp, #12
     928:	bd00      	pop	{pc}
     92a:	46c0      	nop			; (mov r8, r8)
     92c:	000024d0 	.word	0x000024d0
     930:	00002235 	.word	0x00002235
     934:	000024d8 	.word	0x000024d8
     938:	000024dc 	.word	0x000024dc
     93c:	ff00ffff 	.word	0xff00ffff

00000940 <hyp_key_color>:
static color_rgb hyp_key_color(const calc_state_t * calc_state, const sys_state_t * sys_state) {
     940:	b500      	push	{lr}
     942:	b083      	sub	sp, #12
	return sys_state->sys.modifiers.hyp ? (sys_state->sys.modifiers.shift ? color_shift_hyp : color_hyp) : color_normal;
     944:	798b      	ldrb	r3, [r1, #6]
     946:	2b00      	cmp	r3, #0
     948:	d00e      	beq.n	968 <hyp_key_color+0x28>
     94a:	794b      	ldrb	r3, [r1, #5]
     94c:	2b00      	cmp	r3, #0
     94e:	d005      	beq.n	95c <hyp_key_color+0x1c>
     950:	2203      	movs	r2, #3
     952:	490f      	ldr	r1, [pc, #60]	; (990 <hyp_key_color+0x50>)
     954:	a801      	add	r0, sp, #4
     956:	4b0f      	ldr	r3, [pc, #60]	; (994 <hyp_key_color+0x54>)
     958:	4798      	blx	r3
     95a:	e00a      	b.n	972 <hyp_key_color+0x32>
     95c:	2203      	movs	r2, #3
     95e:	490e      	ldr	r1, [pc, #56]	; (998 <hyp_key_color+0x58>)
     960:	a801      	add	r0, sp, #4
     962:	4b0c      	ldr	r3, [pc, #48]	; (994 <hyp_key_color+0x54>)
     964:	4798      	blx	r3
     966:	e004      	b.n	972 <hyp_key_color+0x32>
     968:	2203      	movs	r2, #3
     96a:	490c      	ldr	r1, [pc, #48]	; (99c <hyp_key_color+0x5c>)
     96c:	a801      	add	r0, sp, #4
     96e:	4b09      	ldr	r3, [pc, #36]	; (994 <hyp_key_color+0x54>)
     970:	4798      	blx	r3
     972:	a901      	add	r1, sp, #4
     974:	880b      	ldrh	r3, [r1, #0]
     976:	0a1a      	lsrs	r2, r3, #8
     978:	0212      	lsls	r2, r2, #8
     97a:	20ff      	movs	r0, #255	; 0xff
     97c:	4018      	ands	r0, r3
     97e:	4310      	orrs	r0, r2
     980:	788a      	ldrb	r2, [r1, #2]
     982:	0412      	lsls	r2, r2, #16
     984:	4b06      	ldr	r3, [pc, #24]	; (9a0 <hyp_key_color+0x60>)
     986:	4018      	ands	r0, r3
     988:	4310      	orrs	r0, r2
}
     98a:	b003      	add	sp, #12
     98c:	bd00      	pop	{pc}
     98e:	46c0      	nop			; (mov r8, r8)
     990:	000024d0 	.word	0x000024d0
     994:	00002235 	.word	0x00002235
     998:	000024d4 	.word	0x000024d4
     99c:	000024dc 	.word	0x000024dc
     9a0:	ff00ffff 	.word	0xff00ffff

000009a4 <build_keymap>:



void build_keymap() {
     9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     9a6:	46d6      	mov	lr, sl
     9a8:	464f      	mov	r7, r9
     9aa:	4646      	mov	r6, r8
     9ac:	b5c0      	push	{r6, r7, lr}
	keypad_map[0] = (kp_key){0};
     9ae:	4cfd      	ldr	r4, [pc, #1012]	; (da4 <build_keymap+0x400>)
     9b0:	221c      	movs	r2, #28
     9b2:	2100      	movs	r1, #0
     9b4:	0020      	movs	r0, r4
     9b6:	4bfc      	ldr	r3, [pc, #1008]	; (da8 <build_keymap+0x404>)
     9b8:	4698      	mov	r8, r3
     9ba:	4798      	blx	r3
	keypad_map[1] = (kp_key){0};
     9bc:	0020      	movs	r0, r4
     9be:	301c      	adds	r0, #28
     9c0:	221c      	movs	r2, #28
     9c2:	2100      	movs	r1, #0
     9c4:	47c0      	blx	r8
	keypad_map[2] = (kp_key){ //menu/pwr key
     9c6:	4bf9      	ldr	r3, [pc, #996]	; (dac <build_keymap+0x408>)
     9c8:	469a      	mov	sl, r3
     9ca:	0023      	movs	r3, r4
     9cc:	3338      	adds	r3, #56	; 0x38
     9ce:	4652      	mov	r2, sl
     9d0:	ca23      	ldmia	r2!, {r0, r1, r5}
     9d2:	c323      	stmia	r3!, {r0, r1, r5}
     9d4:	ca23      	ldmia	r2!, {r0, r1, r5}
     9d6:	c323      	stmia	r3!, {r0, r1, r5}
     9d8:	6812      	ldr	r2, [r2, #0]
     9da:	601a      	str	r2, [r3, #0]
		.pixel_idx = 12,
		.special_color = NULL
	};
	keypad_map[3] = (kp_key){ //drg key
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_drg_reint, //TODO: reinterpret drg
     9dc:	4bf4      	ldr	r3, [pc, #976]	; (db0 <build_keymap+0x40c>)
     9de:	681b      	ldr	r3, [r3, #0]
     9e0:	65a3      	str	r3, [r4, #88]	; 0x58
	keypad_map[3] = (kp_key){ //drg key
     9e2:	2601      	movs	r6, #1
     9e4:	2354      	movs	r3, #84	; 0x54
     9e6:	54e6      	strb	r6, [r4, r3]
     9e8:	2500      	movs	r5, #0
     9ea:	65e5      	str	r5, [r4, #92]	; 0x5c
     9ec:	6625      	str	r5, [r4, #96]	; 0x60
     9ee:	6665      	str	r5, [r4, #100]	; 0x64
     9f0:	3b39      	subs	r3, #57	; 0x39
     9f2:	66a3      	str	r3, [r4, #104]	; 0x68
     9f4:	4bef      	ldr	r3, [pc, #956]	; (db4 <build_keymap+0x410>)
     9f6:	66e3      	str	r3, [r4, #108]	; 0x6c
		.pixel_idx = 27,
		.special_color = drg_key_color
	};
	keypad_map[4] = (kp_key){ //re/im key
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_re_im, //TODO: re/im
     9f8:	4bef      	ldr	r3, [pc, #956]	; (db8 <build_keymap+0x414>)
     9fa:	681b      	ldr	r3, [r3, #0]
     9fc:	6763      	str	r3, [r4, #116]	; 0x74
		.shift_cmd = (cmd_generic*)cmd_rec_pol, // TODO: rec/pol
     9fe:	4bef      	ldr	r3, [pc, #956]	; (dbc <build_keymap+0x418>)
     a00:	681b      	ldr	r3, [r3, #0]
     a02:	67a3      	str	r3, [r4, #120]	; 0x78
	keypad_map[4] = (kp_key){ //re/im key
     a04:	2370      	movs	r3, #112	; 0x70
     a06:	54e6      	strb	r6, [r4, r3]
     a08:	67e5      	str	r5, [r4, #124]	; 0x7c
     a0a:	3310      	adds	r3, #16
     a0c:	50e5      	str	r5, [r4, r3]
     a0e:	3304      	adds	r3, #4
     a10:	221c      	movs	r2, #28
     a12:	50e2      	str	r2, [r4, r3]
     a14:	4aea      	ldr	r2, [pc, #936]	; (dc0 <build_keymap+0x41c>)
     a16:	3304      	adds	r3, #4
     a18:	50e2      	str	r2, [r4, r3]
		.pixel_idx = 28,
		.special_color = re_im_key_color
	};
		
	// COL 1 ////////////////////////////
	keypad_map[5] = (kp_key){0};
     a1a:	0020      	movs	r0, r4
     a1c:	308c      	adds	r0, #140	; 0x8c
     a1e:	221c      	movs	r2, #28
     a20:	2100      	movs	r1, #0
     a22:	47c0      	blx	r8
	keypad_map[6] = (kp_key){0};
     a24:	0020      	movs	r0, r4
     a26:	30a8      	adds	r0, #168	; 0xa8
     a28:	221c      	movs	r2, #28
     a2a:	2100      	movs	r1, #0
     a2c:	47c0      	blx	r8
	keypad_map[7] = (kp_key){ // EEX
     a2e:	0023      	movs	r3, r4
     a30:	33c4      	adds	r3, #196	; 0xc4
     a32:	4652      	mov	r2, sl
     a34:	321c      	adds	r2, #28
     a36:	ca83      	ldmia	r2!, {r0, r1, r7}
     a38:	c383      	stmia	r3!, {r0, r1, r7}
     a3a:	ca83      	ldmia	r2!, {r0, r1, r7}
     a3c:	c383      	stmia	r3!, {r0, r1, r7}
     a3e:	6812      	ldr	r2, [r2, #0]
     a40:	601a      	str	r2, [r3, #0]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 13,
		.special_color = NULL
	};
	keypad_map[8] = (kp_key){ // roll up/down
     a42:	0023      	movs	r3, r4
     a44:	33e0      	adds	r3, #224	; 0xe0
     a46:	4652      	mov	r2, sl
     a48:	3238      	adds	r2, #56	; 0x38
     a4a:	ca83      	ldmia	r2!, {r0, r1, r7}
     a4c:	c383      	stmia	r3!, {r0, r1, r7}
     a4e:	ca83      	ldmia	r2!, {r0, r1, r7}
     a50:	c383      	stmia	r3!, {r0, r1, r7}
     a52:	6812      	ldr	r2, [r2, #0]
     a54:	601a      	str	r2, [r3, #0]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 26,
		.special_color = NULL
	};
	keypad_map[9] = (kp_key){ // 2nd
     a56:	0023      	movs	r3, r4
     a58:	33fc      	adds	r3, #252	; 0xfc
     a5a:	4652      	mov	r2, sl
     a5c:	3254      	adds	r2, #84	; 0x54
     a5e:	ca83      	ldmia	r2!, {r0, r1, r7}
     a60:	c383      	stmia	r3!, {r0, r1, r7}
     a62:	ca83      	ldmia	r2!, {r0, r1, r7}
     a64:	c383      	stmia	r3!, {r0, r1, r7}
     a66:	6812      	ldr	r2, [r2, #0]
     a68:	601a      	str	r2, [r3, #0]
		.pixel_idx = 29,
		.special_color = shift_key_color
	};
		
	// COL 2 ////////////////////////////
	keypad_map[10] = (kp_key){ // C/AC
     a6a:	2309      	movs	r3, #9
     a6c:	4699      	mov	r9, r3
     a6e:	3310      	adds	r3, #16
     a70:	33ff      	adds	r3, #255	; 0xff
     a72:	464a      	mov	r2, r9
     a74:	54e2      	strb	r2, [r4, r3]
     a76:	3304      	adds	r3, #4
     a78:	50e5      	str	r5, [r4, r3]
     a7a:	3304      	adds	r3, #4
     a7c:	50e5      	str	r5, [r4, r3]
     a7e:	3304      	adds	r3, #4
     a80:	50e5      	str	r5, [r4, r3]
     a82:	3304      	adds	r3, #4
     a84:	50e5      	str	r5, [r4, r3]
     a86:	3304      	adds	r3, #4
     a88:	50e5      	str	r5, [r4, r3]
     a8a:	3304      	adds	r3, #4
     a8c:	50e5      	str	r5, [r4, r3]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 0,
		.special_color = NULL // TODO: clear colors?
	};
	keypad_map[11] = (kp_key){ // bksp
     a8e:	0022      	movs	r2, r4
     a90:	3235      	adds	r2, #53	; 0x35
     a92:	32ff      	adds	r2, #255	; 0xff
     a94:	4657      	mov	r7, sl
     a96:	3770      	adds	r7, #112	; 0x70
     a98:	cf0b      	ldmia	r7!, {r0, r1, r3}
     a9a:	c20b      	stmia	r2!, {r0, r1, r3}
     a9c:	cf0b      	ldmia	r7!, {r0, r1, r3}
     a9e:	c20b      	stmia	r2!, {r0, r1, r3}
     aa0:	683b      	ldr	r3, [r7, #0]
     aa2:	6013      	str	r3, [r2, #0]
		.special_color = NULL
	};
	keypad_map[12] = (kp_key){ // +/-
		.key_type = KEY_TYPE_STD,
		.base_cmd = NULL, // TODO: +/-
		.shift_cmd = (cmd_generic*)cmd_abs,
     aa4:	4bc7      	ldr	r3, [pc, #796]	; (dc4 <build_keymap+0x420>)
     aa6:	681a      	ldr	r2, [r3, #0]
	keypad_map[12] = (kp_key){ // +/-
     aa8:	23a8      	movs	r3, #168	; 0xa8
     aaa:	005b      	lsls	r3, r3, #1
     aac:	54e6      	strb	r6, [r4, r3]
     aae:	3304      	adds	r3, #4
     ab0:	50e5      	str	r5, [r4, r3]
     ab2:	3304      	adds	r3, #4
     ab4:	50e2      	str	r2, [r4, r3]
     ab6:	3304      	adds	r3, #4
     ab8:	50e5      	str	r5, [r4, r3]
     aba:	3304      	adds	r3, #4
     abc:	50e5      	str	r5, [r4, r3]
     abe:	220e      	movs	r2, #14
     ac0:	3304      	adds	r3, #4
     ac2:	50e2      	str	r2, [r4, r3]
     ac4:	3304      	adds	r3, #4
     ac6:	50e5      	str	r5, [r4, r3]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 14,
		.special_color = NULL
	};
	keypad_map[13] = (kp_key){ // enter
     ac8:	4bbf      	ldr	r3, [pc, #764]	; (dc8 <build_keymap+0x424>)
     aca:	469a      	mov	sl, r3
     acc:	0023      	movs	r3, r4
     ace:	336d      	adds	r3, #109	; 0x6d
     ad0:	33ff      	adds	r3, #255	; 0xff
     ad2:	4652      	mov	r2, sl
     ad4:	320c      	adds	r2, #12
     ad6:	ca83      	ldmia	r2!, {r0, r1, r7}
     ad8:	c383      	stmia	r3!, {r0, r1, r7}
     ada:	ca83      	ldmia	r2!, {r0, r1, r7}
     adc:	c383      	stmia	r3!, {r0, r1, r7}
     ade:	6812      	ldr	r2, [r2, #0]
     ae0:	601a      	str	r2, [r3, #0]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 25,
		.special_color = NULL
	};
	keypad_map[14] = (kp_key){0};
     ae2:	0020      	movs	r0, r4
     ae4:	3089      	adds	r0, #137	; 0x89
     ae6:	30ff      	adds	r0, #255	; 0xff
     ae8:	221c      	movs	r2, #28
     aea:	2100      	movs	r1, #0
     aec:	47c0      	blx	r8
		
	// COL 3 ////////////////////////////
	keypad_map[15] = (kp_key){ // sin
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_sin,
     aee:	4bb7      	ldr	r3, [pc, #732]	; (dcc <build_keymap+0x428>)
     af0:	681b      	ldr	r3, [r3, #0]
     af2:	469c      	mov	ip, r3
		.shift_cmd = (cmd_generic*)cmd_asin,
     af4:	4bb6      	ldr	r3, [pc, #728]	; (dd0 <build_keymap+0x42c>)
     af6:	6818      	ldr	r0, [r3, #0]
		.hyp_cmd = (cmd_generic*)cmd_sinh,
     af8:	4bb6      	ldr	r3, [pc, #728]	; (dd4 <build_keymap+0x430>)
     afa:	6819      	ldr	r1, [r3, #0]
		.shift_hyp_cmd = (cmd_generic*)cmd_asinh,
     afc:	4bb6      	ldr	r3, [pc, #728]	; (dd8 <build_keymap+0x434>)
     afe:	681a      	ldr	r2, [r3, #0]
	keypad_map[15] = (kp_key){ // sin
     b00:	23d2      	movs	r3, #210	; 0xd2
     b02:	005b      	lsls	r3, r3, #1
     b04:	54e6      	strb	r6, [r4, r3]
     b06:	3304      	adds	r3, #4
     b08:	4667      	mov	r7, ip
     b0a:	50e7      	str	r7, [r4, r3]
     b0c:	3304      	adds	r3, #4
     b0e:	50e0      	str	r0, [r4, r3]
     b10:	3304      	adds	r3, #4
     b12:	50e1      	str	r1, [r4, r3]
     b14:	3304      	adds	r3, #4
     b16:	50e2      	str	r2, [r4, r3]
     b18:	3304      	adds	r3, #4
     b1a:	50e6      	str	r6, [r4, r3]
     b1c:	3304      	adds	r3, #4
     b1e:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 1,
		.special_color = NULL
	};
	keypad_map[16] = (kp_key){ // 7
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_7,
     b20:	4bae      	ldr	r3, [pc, #696]	; (ddc <build_keymap+0x438>)
     b22:	681a      	ldr	r2, [r3, #0]
	keypad_map[16] = (kp_key){ // 7
     b24:	23e0      	movs	r3, #224	; 0xe0
     b26:	005b      	lsls	r3, r3, #1
     b28:	54e6      	strb	r6, [r4, r3]
     b2a:	3304      	adds	r3, #4
     b2c:	50e2      	str	r2, [r4, r3]
     b2e:	3304      	adds	r3, #4
     b30:	50e5      	str	r5, [r4, r3]
     b32:	3304      	adds	r3, #4
     b34:	50e5      	str	r5, [r4, r3]
     b36:	3304      	adds	r3, #4
     b38:	50e5      	str	r5, [r4, r3]
     b3a:	220a      	movs	r2, #10
     b3c:	3304      	adds	r3, #4
     b3e:	50e2      	str	r2, [r4, r3]
     b40:	3304      	adds	r3, #4
     b42:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 10,
		.special_color = NULL
	};
	keypad_map[17] = (kp_key){ // 4
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_4,
     b44:	4ba6      	ldr	r3, [pc, #664]	; (de0 <build_keymap+0x43c>)
     b46:	681a      	ldr	r2, [r3, #0]
	keypad_map[17] = (kp_key){ // 4
     b48:	23ee      	movs	r3, #238	; 0xee
     b4a:	005b      	lsls	r3, r3, #1
     b4c:	54e6      	strb	r6, [r4, r3]
     b4e:	3304      	adds	r3, #4
     b50:	50e2      	str	r2, [r4, r3]
     b52:	3304      	adds	r3, #4
     b54:	50e5      	str	r5, [r4, r3]
     b56:	3304      	adds	r3, #4
     b58:	50e5      	str	r5, [r4, r3]
     b5a:	3304      	adds	r3, #4
     b5c:	50e5      	str	r5, [r4, r3]
     b5e:	220f      	movs	r2, #15
     b60:	3304      	adds	r3, #4
     b62:	50e2      	str	r2, [r4, r3]
     b64:	3304      	adds	r3, #4
     b66:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 15,
		.special_color = NULL
	};
	keypad_map[18] = (kp_key){ // 1
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_1,
     b68:	4b9e      	ldr	r3, [pc, #632]	; (de4 <build_keymap+0x440>)
     b6a:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_i,
     b6c:	4b9e      	ldr	r3, [pc, #632]	; (de8 <build_keymap+0x444>)
     b6e:	681a      	ldr	r2, [r3, #0]
	keypad_map[18] = (kp_key){ // 1
     b70:	23fc      	movs	r3, #252	; 0xfc
     b72:	005b      	lsls	r3, r3, #1
     b74:	54e6      	strb	r6, [r4, r3]
     b76:	3304      	adds	r3, #4
     b78:	50e1      	str	r1, [r4, r3]
     b7a:	3304      	adds	r3, #4
     b7c:	50e2      	str	r2, [r4, r3]
     b7e:	3304      	adds	r3, #4
     b80:	50e5      	str	r5, [r4, r3]
     b82:	3304      	adds	r3, #4
     b84:	50e5      	str	r5, [r4, r3]
     b86:	2218      	movs	r2, #24
     b88:	3304      	adds	r3, #4
     b8a:	50e2      	str	r2, [r4, r3]
     b8c:	3304      	adds	r3, #4
     b8e:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 24,
		.special_color = NULL
	};
	keypad_map[19] = (kp_key){ // 0
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_0,
     b90:	4b96      	ldr	r3, [pc, #600]	; (dec <build_keymap+0x448>)
     b92:	681a      	ldr	r2, [r3, #0]
	keypad_map[19] = (kp_key){ // 0
     b94:	2385      	movs	r3, #133	; 0x85
     b96:	009b      	lsls	r3, r3, #2
     b98:	54e6      	strb	r6, [r4, r3]
     b9a:	3304      	adds	r3, #4
     b9c:	50e2      	str	r2, [r4, r3]
     b9e:	3304      	adds	r3, #4
     ba0:	50e5      	str	r5, [r4, r3]
     ba2:	3304      	adds	r3, #4
     ba4:	50e5      	str	r5, [r4, r3]
     ba6:	3304      	adds	r3, #4
     ba8:	50e5      	str	r5, [r4, r3]
     baa:	221e      	movs	r2, #30
     bac:	3304      	adds	r3, #4
     bae:	50e2      	str	r2, [r4, r3]
     bb0:	3304      	adds	r3, #4
     bb2:	50e5      	str	r5, [r4, r3]
	};
		
	// COL 4 ////////////////////////////
	keypad_map[20] = (kp_key){ // cos
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_cos,
     bb4:	4b8e      	ldr	r3, [pc, #568]	; (df0 <build_keymap+0x44c>)
     bb6:	681b      	ldr	r3, [r3, #0]
     bb8:	469c      	mov	ip, r3
		.shift_cmd = (cmd_generic*)cmd_acos,
     bba:	4b8e      	ldr	r3, [pc, #568]	; (df4 <build_keymap+0x450>)
     bbc:	6818      	ldr	r0, [r3, #0]
		.hyp_cmd = (cmd_generic*)cmd_cosh,
     bbe:	4b8e      	ldr	r3, [pc, #568]	; (df8 <build_keymap+0x454>)
     bc0:	6819      	ldr	r1, [r3, #0]
		.shift_hyp_cmd = (cmd_generic*)cmd_acosh,
     bc2:	4b8e      	ldr	r3, [pc, #568]	; (dfc <build_keymap+0x458>)
     bc4:	681a      	ldr	r2, [r3, #0]
	keypad_map[20] = (kp_key){ // cos
     bc6:	238c      	movs	r3, #140	; 0x8c
     bc8:	009b      	lsls	r3, r3, #2
     bca:	54e6      	strb	r6, [r4, r3]
     bcc:	3304      	adds	r3, #4
     bce:	4667      	mov	r7, ip
     bd0:	50e7      	str	r7, [r4, r3]
     bd2:	3304      	adds	r3, #4
     bd4:	50e0      	str	r0, [r4, r3]
     bd6:	3304      	adds	r3, #4
     bd8:	50e1      	str	r1, [r4, r3]
     bda:	3304      	adds	r3, #4
     bdc:	50e2      	str	r2, [r4, r3]
     bde:	2202      	movs	r2, #2
     be0:	3304      	adds	r3, #4
     be2:	50e2      	str	r2, [r4, r3]
     be4:	3304      	adds	r3, #4
     be6:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 2,
		.special_color = NULL
	};
	keypad_map[21] = (kp_key){ // 8
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_8,
     be8:	4b85      	ldr	r3, [pc, #532]	; (e00 <build_keymap+0x45c>)
     bea:	681a      	ldr	r2, [r3, #0]
	keypad_map[21] = (kp_key){ // 8
     bec:	2393      	movs	r3, #147	; 0x93
     bee:	009b      	lsls	r3, r3, #2
     bf0:	54e6      	strb	r6, [r4, r3]
     bf2:	3304      	adds	r3, #4
     bf4:	50e2      	str	r2, [r4, r3]
     bf6:	3304      	adds	r3, #4
     bf8:	50e5      	str	r5, [r4, r3]
     bfa:	3304      	adds	r3, #4
     bfc:	50e5      	str	r5, [r4, r3]
     bfe:	3304      	adds	r3, #4
     c00:	50e5      	str	r5, [r4, r3]
     c02:	3304      	adds	r3, #4
     c04:	464a      	mov	r2, r9
     c06:	50e2      	str	r2, [r4, r3]
     c08:	3304      	adds	r3, #4
     c0a:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 9,
		.special_color = NULL
	};
	keypad_map[22] = (kp_key){ // 5
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_5,
     c0c:	4b7d      	ldr	r3, [pc, #500]	; (e04 <build_keymap+0x460>)
     c0e:	681a      	ldr	r2, [r3, #0]
	keypad_map[22] = (kp_key){ // 5
     c10:	239a      	movs	r3, #154	; 0x9a
     c12:	009b      	lsls	r3, r3, #2
     c14:	54e6      	strb	r6, [r4, r3]
     c16:	3304      	adds	r3, #4
     c18:	50e2      	str	r2, [r4, r3]
     c1a:	3304      	adds	r3, #4
     c1c:	50e5      	str	r5, [r4, r3]
     c1e:	3304      	adds	r3, #4
     c20:	50e5      	str	r5, [r4, r3]
     c22:	3304      	adds	r3, #4
     c24:	50e5      	str	r5, [r4, r3]
     c26:	2210      	movs	r2, #16
     c28:	3304      	adds	r3, #4
     c2a:	50e2      	str	r2, [r4, r3]
     c2c:	3304      	adds	r3, #4
     c2e:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 16,
		.special_color = NULL
	};
	keypad_map[23] = (kp_key){ // 2
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_2,
     c30:	4b75      	ldr	r3, [pc, #468]	; (e08 <build_keymap+0x464>)
     c32:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_e,
     c34:	4b75      	ldr	r3, [pc, #468]	; (e0c <build_keymap+0x468>)
     c36:	681a      	ldr	r2, [r3, #0]
	keypad_map[23] = (kp_key){ // 2
     c38:	23a1      	movs	r3, #161	; 0xa1
     c3a:	009b      	lsls	r3, r3, #2
     c3c:	54e6      	strb	r6, [r4, r3]
     c3e:	3304      	adds	r3, #4
     c40:	50e1      	str	r1, [r4, r3]
     c42:	3304      	adds	r3, #4
     c44:	50e2      	str	r2, [r4, r3]
     c46:	3304      	adds	r3, #4
     c48:	50e5      	str	r5, [r4, r3]
     c4a:	3304      	adds	r3, #4
     c4c:	50e5      	str	r5, [r4, r3]
     c4e:	2217      	movs	r2, #23
     c50:	3304      	adds	r3, #4
     c52:	50e2      	str	r2, [r4, r3]
     c54:	3304      	adds	r3, #4
     c56:	50e5      	str	r5, [r4, r3]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 23,
		.special_color = NULL
	};
	keypad_map[24] = (kp_key){0};
     c58:	3304      	adds	r3, #4
     c5a:	18e0      	adds	r0, r4, r3
     c5c:	3205      	adds	r2, #5
     c5e:	2100      	movs	r1, #0
     c60:	47c0      	blx	r8

	// COL 5 ////////////////////////////
	keypad_map[25] = (kp_key){ // tan
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_tan,
     c62:	4b6b      	ldr	r3, [pc, #428]	; (e10 <build_keymap+0x46c>)
     c64:	681b      	ldr	r3, [r3, #0]
     c66:	469c      	mov	ip, r3
		.shift_cmd = (cmd_generic*)cmd_atan,
     c68:	4b6a      	ldr	r3, [pc, #424]	; (e14 <build_keymap+0x470>)
     c6a:	6818      	ldr	r0, [r3, #0]
		.hyp_cmd = (cmd_generic*)cmd_tanh,
     c6c:	4b6a      	ldr	r3, [pc, #424]	; (e18 <build_keymap+0x474>)
     c6e:	6819      	ldr	r1, [r3, #0]
		.shift_hyp_cmd = (cmd_generic*)cmd_atanh,
     c70:	4b6a      	ldr	r3, [pc, #424]	; (e1c <build_keymap+0x478>)
     c72:	681a      	ldr	r2, [r3, #0]
	keypad_map[25] = (kp_key){ // tan
     c74:	23af      	movs	r3, #175	; 0xaf
     c76:	009b      	lsls	r3, r3, #2
     c78:	54e6      	strb	r6, [r4, r3]
     c7a:	3304      	adds	r3, #4
     c7c:	4667      	mov	r7, ip
     c7e:	50e7      	str	r7, [r4, r3]
     c80:	3304      	adds	r3, #4
     c82:	50e0      	str	r0, [r4, r3]
     c84:	3304      	adds	r3, #4
     c86:	50e1      	str	r1, [r4, r3]
     c88:	3304      	adds	r3, #4
     c8a:	50e2      	str	r2, [r4, r3]
     c8c:	2203      	movs	r2, #3
     c8e:	3304      	adds	r3, #4
     c90:	50e2      	str	r2, [r4, r3]
     c92:	3304      	adds	r3, #4
     c94:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 3,
		.special_color = NULL
	};
	keypad_map[26] = (kp_key){ // 9
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_9,
     c96:	4b62      	ldr	r3, [pc, #392]	; (e20 <build_keymap+0x47c>)
     c98:	681a      	ldr	r2, [r3, #0]
	keypad_map[26] = (kp_key){ // 9
     c9a:	23b6      	movs	r3, #182	; 0xb6
     c9c:	009b      	lsls	r3, r3, #2
     c9e:	54e6      	strb	r6, [r4, r3]
     ca0:	3304      	adds	r3, #4
     ca2:	50e2      	str	r2, [r4, r3]
     ca4:	3304      	adds	r3, #4
     ca6:	50e5      	str	r5, [r4, r3]
     ca8:	3304      	adds	r3, #4
     caa:	50e5      	str	r5, [r4, r3]
     cac:	3304      	adds	r3, #4
     cae:	50e5      	str	r5, [r4, r3]
     cb0:	2208      	movs	r2, #8
     cb2:	3304      	adds	r3, #4
     cb4:	50e2      	str	r2, [r4, r3]
     cb6:	3304      	adds	r3, #4
     cb8:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 8,
		.special_color = NULL
	};
	keypad_map[27] = (kp_key){ // 6
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_6,
     cba:	4b5a      	ldr	r3, [pc, #360]	; (e24 <build_keymap+0x480>)
     cbc:	681a      	ldr	r2, [r3, #0]
	keypad_map[27] = (kp_key){ // 6
     cbe:	23bd      	movs	r3, #189	; 0xbd
     cc0:	009b      	lsls	r3, r3, #2
     cc2:	54e6      	strb	r6, [r4, r3]
     cc4:	3304      	adds	r3, #4
     cc6:	50e2      	str	r2, [r4, r3]
     cc8:	3304      	adds	r3, #4
     cca:	50e5      	str	r5, [r4, r3]
     ccc:	3304      	adds	r3, #4
     cce:	50e5      	str	r5, [r4, r3]
     cd0:	3304      	adds	r3, #4
     cd2:	50e5      	str	r5, [r4, r3]
     cd4:	2211      	movs	r2, #17
     cd6:	3304      	adds	r3, #4
     cd8:	50e2      	str	r2, [r4, r3]
     cda:	3304      	adds	r3, #4
     cdc:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 17,
		.special_color = NULL
	};
	keypad_map[28] = (kp_key){ // 3
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_3,
     cde:	4b52      	ldr	r3, [pc, #328]	; (e28 <build_keymap+0x484>)
     ce0:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_pi,
     ce2:	4b52      	ldr	r3, [pc, #328]	; (e2c <build_keymap+0x488>)
     ce4:	681a      	ldr	r2, [r3, #0]
	keypad_map[28] = (kp_key){ // 3
     ce6:	23c4      	movs	r3, #196	; 0xc4
     ce8:	009b      	lsls	r3, r3, #2
     cea:	54e6      	strb	r6, [r4, r3]
     cec:	3304      	adds	r3, #4
     cee:	50e1      	str	r1, [r4, r3]
     cf0:	3304      	adds	r3, #4
     cf2:	50e2      	str	r2, [r4, r3]
     cf4:	3304      	adds	r3, #4
     cf6:	50e5      	str	r5, [r4, r3]
     cf8:	3304      	adds	r3, #4
     cfa:	50e5      	str	r5, [r4, r3]
     cfc:	2216      	movs	r2, #22
     cfe:	3304      	adds	r3, #4
     d00:	50e2      	str	r2, [r4, r3]
     d02:	3304      	adds	r3, #4
     d04:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 22,
		.special_color = NULL
	};
	keypad_map[29] = (kp_key){ // .
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_decimal,
     d06:	4b4a      	ldr	r3, [pc, #296]	; (e30 <build_keymap+0x48c>)
     d08:	681a      	ldr	r2, [r3, #0]
	keypad_map[29] = (kp_key){ // .
     d0a:	23cb      	movs	r3, #203	; 0xcb
     d0c:	009b      	lsls	r3, r3, #2
     d0e:	54e6      	strb	r6, [r4, r3]
     d10:	3304      	adds	r3, #4
     d12:	50e2      	str	r2, [r4, r3]
     d14:	3304      	adds	r3, #4
     d16:	50e5      	str	r5, [r4, r3]
     d18:	3304      	adds	r3, #4
     d1a:	50e5      	str	r5, [r4, r3]
     d1c:	3304      	adds	r3, #4
     d1e:	50e5      	str	r5, [r4, r3]
     d20:	221f      	movs	r2, #31
     d22:	3304      	adds	r3, #4
     d24:	50e2      	str	r2, [r4, r3]
     d26:	3304      	adds	r3, #4
     d28:	50e5      	str	r5, [r4, r3]
	};
		
	// COL 6 ////////////////////////////
	keypad_map[30] = (kp_key){ // div
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_div,
     d2a:	4b42      	ldr	r3, [pc, #264]	; (e34 <build_keymap+0x490>)
     d2c:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_inv,
     d2e:	4b42      	ldr	r3, [pc, #264]	; (e38 <build_keymap+0x494>)
     d30:	681a      	ldr	r2, [r3, #0]
	keypad_map[30] = (kp_key){ // div
     d32:	23d2      	movs	r3, #210	; 0xd2
     d34:	009b      	lsls	r3, r3, #2
     d36:	54e6      	strb	r6, [r4, r3]
     d38:	3304      	adds	r3, #4
     d3a:	50e1      	str	r1, [r4, r3]
     d3c:	3304      	adds	r3, #4
     d3e:	50e2      	str	r2, [r4, r3]
     d40:	3304      	adds	r3, #4
     d42:	50e5      	str	r5, [r4, r3]
     d44:	3304      	adds	r3, #4
     d46:	50e5      	str	r5, [r4, r3]
     d48:	2204      	movs	r2, #4
     d4a:	3304      	adds	r3, #4
     d4c:	50e2      	str	r2, [r4, r3]
     d4e:	3304      	adds	r3, #4
     d50:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 4,
		.special_color = NULL
	};
	keypad_map[31] = (kp_key){ // mul
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_mul,
     d52:	4b3a      	ldr	r3, [pc, #232]	; (e3c <build_keymap+0x498>)
     d54:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_phasor,
     d56:	4b3a      	ldr	r3, [pc, #232]	; (e40 <build_keymap+0x49c>)
     d58:	681a      	ldr	r2, [r3, #0]
	keypad_map[31] = (kp_key){ // mul
     d5a:	23d9      	movs	r3, #217	; 0xd9
     d5c:	009b      	lsls	r3, r3, #2
     d5e:	54e6      	strb	r6, [r4, r3]
     d60:	3304      	adds	r3, #4
     d62:	50e1      	str	r1, [r4, r3]
     d64:	3304      	adds	r3, #4
     d66:	50e2      	str	r2, [r4, r3]
     d68:	3304      	adds	r3, #4
     d6a:	50e5      	str	r5, [r4, r3]
     d6c:	3304      	adds	r3, #4
     d6e:	50e5      	str	r5, [r4, r3]
     d70:	2207      	movs	r2, #7
     d72:	3304      	adds	r3, #4
     d74:	50e2      	str	r2, [r4, r3]
     d76:	3304      	adds	r3, #4
     d78:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 7,
		.special_color = NULL
	};
	keypad_map[32] = (kp_key){ // sub
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_sub,
     d7a:	4b32      	ldr	r3, [pc, #200]	; (e44 <build_keymap+0x4a0>)
     d7c:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_parallel,
     d7e:	4b32      	ldr	r3, [pc, #200]	; (e48 <build_keymap+0x4a4>)
     d80:	681a      	ldr	r2, [r3, #0]
	keypad_map[32] = (kp_key){ // sub
     d82:	23e0      	movs	r3, #224	; 0xe0
     d84:	009b      	lsls	r3, r3, #2
     d86:	54e6      	strb	r6, [r4, r3]
     d88:	3304      	adds	r3, #4
     d8a:	50e1      	str	r1, [r4, r3]
     d8c:	3304      	adds	r3, #4
     d8e:	50e2      	str	r2, [r4, r3]
     d90:	3304      	adds	r3, #4
     d92:	50e5      	str	r5, [r4, r3]
     d94:	3304      	adds	r3, #4
     d96:	50e5      	str	r5, [r4, r3]
     d98:	2212      	movs	r2, #18
     d9a:	3304      	adds	r3, #4
     d9c:	50e2      	str	r2, [r4, r3]
     d9e:	3304      	adds	r3, #4
     da0:	50e5      	str	r5, [r4, r3]
     da2:	e053      	b.n	e4c <build_keymap+0x4a8>
     da4:	20000a58 	.word	0x20000a58
     da8:	000022b9 	.word	0x000022b9
     dac:	0000250c 	.word	0x0000250c
     db0:	00002500 	.word	0x00002500
     db4:	00000871 	.word	0x00000871
     db8:	00002508 	.word	0x00002508
     dbc:	00002504 	.word	0x00002504
     dc0:	000007c9 	.word	0x000007c9
     dc4:	20000edc 	.word	0x20000edc
     dc8:	0000258c 	.word	0x0000258c
     dcc:	000024f0 	.word	0x000024f0
     dd0:	000024e8 	.word	0x000024e8
     dd4:	000024ec 	.word	0x000024ec
     dd8:	000024e4 	.word	0x000024e4
     ddc:	20000a44 	.word	0x20000a44
     de0:	20000a3c 	.word	0x20000a3c
     de4:	20000a10 	.word	0x20000a10
     de8:	20000a20 	.word	0x20000a20
     dec:	20000ed0 	.word	0x20000ed0
     df0:	20000a40 	.word	0x20000a40
     df4:	20000a30 	.word	0x20000a30
     df8:	20000a18 	.word	0x20000a18
     dfc:	20000a48 	.word	0x20000a48
     e00:	20000a28 	.word	0x20000a28
     e04:	20000ed8 	.word	0x20000ed8
     e08:	20000ec0 	.word	0x20000ec0
     e0c:	20000a24 	.word	0x20000a24
     e10:	20000ef0 	.word	0x20000ef0
     e14:	20000ee4 	.word	0x20000ee4
     e18:	20000ef8 	.word	0x20000ef8
     e1c:	20000a50 	.word	0x20000a50
     e20:	20000efc 	.word	0x20000efc
     e24:	20000ec8 	.word	0x20000ec8
     e28:	20000ee0 	.word	0x20000ee0
     e2c:	20000a0c 	.word	0x20000a0c
     e30:	20000a38 	.word	0x20000a38
     e34:	20000ec4 	.word	0x20000ec4
     e38:	20000ef4 	.word	0x20000ef4
     e3c:	000024f4 	.word	0x000024f4
     e40:	20000eec 	.word	0x20000eec
     e44:	000024f8 	.word	0x000024f8
     e48:	20000eb8 	.word	0x20000eb8
		.pixel_idx = 18,
		.special_color = NULL
	};
	keypad_map[33] = (kp_key){ // add
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_add,
     e4c:	4b3a      	ldr	r3, [pc, #232]	; (f38 <build_keymap+0x594>)
     e4e:	681a      	ldr	r2, [r3, #0]
	keypad_map[33] = (kp_key){ // add
     e50:	23e7      	movs	r3, #231	; 0xe7
     e52:	009b      	lsls	r3, r3, #2
     e54:	54e6      	strb	r6, [r4, r3]
     e56:	3304      	adds	r3, #4
     e58:	50e2      	str	r2, [r4, r3]
     e5a:	3304      	adds	r3, #4
     e5c:	50e5      	str	r5, [r4, r3]
     e5e:	3304      	adds	r3, #4
     e60:	50e5      	str	r5, [r4, r3]
     e62:	3304      	adds	r3, #4
     e64:	50e5      	str	r5, [r4, r3]
     e66:	2215      	movs	r2, #21
     e68:	3304      	adds	r3, #4
     e6a:	50e2      	str	r2, [r4, r3]
     e6c:	3304      	adds	r3, #4
     e6e:	50e5      	str	r5, [r4, r3]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 21,
		.special_color = NULL
	};
	keypad_map[34] = (kp_key){0};
     e70:	3304      	adds	r3, #4
     e72:	18e0      	adds	r0, r4, r3
     e74:	3207      	adds	r2, #7
     e76:	2100      	movs	r1, #0
     e78:	47c0      	blx	r8
		
	// COL 7 ////////////////////////////
	keypad_map[35] = (kp_key){ // hyp
     e7a:	23f5      	movs	r3, #245	; 0xf5
     e7c:	009b      	lsls	r3, r3, #2
     e7e:	18e2      	adds	r2, r4, r3
     e80:	4657      	mov	r7, sl
     e82:	3728      	adds	r7, #40	; 0x28
     e84:	cf0b      	ldmia	r7!, {r0, r1, r3}
     e86:	c20b      	stmia	r2!, {r0, r1, r3}
     e88:	cf0b      	ldmia	r7!, {r0, r1, r3}
     e8a:	c20b      	stmia	r2!, {r0, r1, r3}
     e8c:	683b      	ldr	r3, [r7, #0]
     e8e:	6013      	str	r3, [r2, #0]
		.pixel_idx = 5,
		.special_color = hyp_key_color
	};
	keypad_map[36] = (kp_key){ // pow
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_pow,
     e90:	4b2a      	ldr	r3, [pc, #168]	; (f3c <build_keymap+0x598>)
     e92:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_root,
     e94:	4b2a      	ldr	r3, [pc, #168]	; (f40 <build_keymap+0x59c>)
     e96:	681a      	ldr	r2, [r3, #0]
	keypad_map[36] = (kp_key){ // pow
     e98:	23fc      	movs	r3, #252	; 0xfc
     e9a:	009b      	lsls	r3, r3, #2
     e9c:	54e6      	strb	r6, [r4, r3]
     e9e:	3304      	adds	r3, #4
     ea0:	50e1      	str	r1, [r4, r3]
     ea2:	3304      	adds	r3, #4
     ea4:	50e2      	str	r2, [r4, r3]
     ea6:	3304      	adds	r3, #4
     ea8:	50e5      	str	r5, [r4, r3]
     eaa:	3304      	adds	r3, #4
     eac:	50e5      	str	r5, [r4, r3]
     eae:	2206      	movs	r2, #6
     eb0:	4b24      	ldr	r3, [pc, #144]	; (f44 <build_keymap+0x5a0>)
     eb2:	50e2      	str	r2, [r4, r3]
     eb4:	3304      	adds	r3, #4
     eb6:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 6,
		.special_color = NULL
	};
	keypad_map[37] = (kp_key){ // sqr
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_sqr,
     eb8:	4b23      	ldr	r3, [pc, #140]	; (f48 <build_keymap+0x5a4>)
     eba:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_sqrt,
     ebc:	4b23      	ldr	r3, [pc, #140]	; (f4c <build_keymap+0x5a8>)
     ebe:	681a      	ldr	r2, [r3, #0]
	keypad_map[37] = (kp_key){ // sqr
     ec0:	4b23      	ldr	r3, [pc, #140]	; (f50 <build_keymap+0x5ac>)
     ec2:	54e6      	strb	r6, [r4, r3]
     ec4:	3304      	adds	r3, #4
     ec6:	50e1      	str	r1, [r4, r3]
     ec8:	4b22      	ldr	r3, [pc, #136]	; (f54 <build_keymap+0x5b0>)
     eca:	50e2      	str	r2, [r4, r3]
     ecc:	3304      	adds	r3, #4
     ece:	50e5      	str	r5, [r4, r3]
     ed0:	4b21      	ldr	r3, [pc, #132]	; (f58 <build_keymap+0x5b4>)
     ed2:	50e5      	str	r5, [r4, r3]
     ed4:	2213      	movs	r2, #19
     ed6:	3304      	adds	r3, #4
     ed8:	50e2      	str	r2, [r4, r3]
     eda:	4b20      	ldr	r3, [pc, #128]	; (f5c <build_keymap+0x5b8>)
     edc:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 19,
		.special_color = NULL
	};
	keypad_map[38] = (kp_key){ // log
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_log,
     ede:	4b20      	ldr	r3, [pc, #128]	; (f60 <build_keymap+0x5bc>)
     ee0:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_alog,
     ee2:	4b20      	ldr	r3, [pc, #128]	; (f64 <build_keymap+0x5c0>)
     ee4:	681a      	ldr	r2, [r3, #0]
	keypad_map[38] = (kp_key){ // log
     ee6:	2385      	movs	r3, #133	; 0x85
     ee8:	00db      	lsls	r3, r3, #3
     eea:	54e6      	strb	r6, [r4, r3]
     eec:	4b1e      	ldr	r3, [pc, #120]	; (f68 <build_keymap+0x5c4>)
     eee:	50e1      	str	r1, [r4, r3]
     ef0:	3304      	adds	r3, #4
     ef2:	50e2      	str	r2, [r4, r3]
     ef4:	4b1d      	ldr	r3, [pc, #116]	; (f6c <build_keymap+0x5c8>)
     ef6:	50e5      	str	r5, [r4, r3]
     ef8:	3304      	adds	r3, #4
     efa:	50e5      	str	r5, [r4, r3]
     efc:	2214      	movs	r2, #20
     efe:	4b1c      	ldr	r3, [pc, #112]	; (f70 <build_keymap+0x5cc>)
     f00:	50e2      	str	r2, [r4, r3]
     f02:	3304      	adds	r3, #4
     f04:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 20,
		.special_color = NULL
	};
	keypad_map[39] = (kp_key){ // ln
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_ln,
     f06:	4b1b      	ldr	r3, [pc, #108]	; (f74 <build_keymap+0x5d0>)
     f08:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_exp,
     f0a:	4b1b      	ldr	r3, [pc, #108]	; (f78 <build_keymap+0x5d4>)
     f0c:	681a      	ldr	r2, [r3, #0]
	keypad_map[39] = (kp_key){ // ln
     f0e:	4b1b      	ldr	r3, [pc, #108]	; (f7c <build_keymap+0x5d8>)
     f10:	54e6      	strb	r6, [r4, r3]
     f12:	3304      	adds	r3, #4
     f14:	50e1      	str	r1, [r4, r3]
     f16:	4b1a      	ldr	r3, [pc, #104]	; (f80 <build_keymap+0x5dc>)
     f18:	50e2      	str	r2, [r4, r3]
     f1a:	3304      	adds	r3, #4
     f1c:	50e5      	str	r5, [r4, r3]
     f1e:	4b19      	ldr	r3, [pc, #100]	; (f84 <build_keymap+0x5e0>)
     f20:	50e5      	str	r5, [r4, r3]
     f22:	2220      	movs	r2, #32
     f24:	3304      	adds	r3, #4
     f26:	50e2      	str	r2, [r4, r3]
     f28:	4b17      	ldr	r3, [pc, #92]	; (f88 <build_keymap+0x5e4>)
     f2a:	50e5      	str	r5, [r4, r3]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 32,
		.special_color = NULL
	};
}
     f2c:	bc1c      	pop	{r2, r3, r4}
     f2e:	4690      	mov	r8, r2
     f30:	4699      	mov	r9, r3
     f32:	46a2      	mov	sl, r4
     f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f36:	46c0      	nop			; (mov r8, r8)
     f38:	000024fc 	.word	0x000024fc
     f3c:	20000a54 	.word	0x20000a54
     f40:	20000a14 	.word	0x20000a14
     f44:	00000404 	.word	0x00000404
     f48:	20000ee8 	.word	0x20000ee8
     f4c:	20000ecc 	.word	0x20000ecc
     f50:	0000040c 	.word	0x0000040c
     f54:	00000414 	.word	0x00000414
     f58:	0000041c 	.word	0x0000041c
     f5c:	00000424 	.word	0x00000424
     f60:	20000a4c 	.word	0x20000a4c
     f64:	20000a1c 	.word	0x20000a1c
     f68:	0000042c 	.word	0x0000042c
     f6c:	00000434 	.word	0x00000434
     f70:	0000043c 	.word	0x0000043c
     f74:	20000a34 	.word	0x20000a34
     f78:	20000a2c 	.word	0x20000a2c
     f7c:	00000444 	.word	0x00000444
     f80:	0000044c 	.word	0x0000044c
     f84:	00000454 	.word	0x00000454
     f88:	0000045c 	.word	0x0000045c

00000f8c <keypad_scan_keys>:
	uint64_t newkeys = keypad_inst->rawKeys & (~previous_scan);
	previous_scan = keypad_inst->rawKeys;
	return newkeys;
}

void keypad_scan_keys() {
     f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f8e:	46d6      	mov	lr, sl
     f90:	464f      	mov	r7, r9
     f92:	4646      	mov	r6, r8
     f94:	b5c0      	push	{r6, r7, lr}
     f96:	b082      	sub	sp, #8
	keypad_inst->rawKeys = 0ULL;
     f98:	4b3c      	ldr	r3, [pc, #240]	; (108c <STACK_SIZE+0x8c>)
     f9a:	681b      	ldr	r3, [r3, #0]
     f9c:	2000      	movs	r0, #0
     f9e:	2100      	movs	r1, #0
     fa0:	6098      	str	r0, [r3, #8]
     fa2:	60d9      	str	r1, [r3, #12]
	gpio_set_pin(colPorts[0], colPins[0], 0);
     fa4:	2200      	movs	r2, #0
     fa6:	2106      	movs	r1, #6
     fa8:	3001      	adds	r0, #1
     faa:	4b39      	ldr	r3, [pc, #228]	; (1090 <STACK_SIZE+0x90>)
     fac:	4798      	blx	r3
	for (int col = 0; col < KEYPAD_NUM_COLS; col++) {
     fae:	2300      	movs	r3, #0
     fb0:	4698      	mov	r8, r3
     fb2:	e03d      	b.n	1030 <STACK_SIZE+0x30>
		gpio_set_pin(colPorts[col], colPins[col], 1);
		
		for (int row = 0; row < KEYPAD_NUM_ROWS; row++) {
			int key=gpio_read_pin(rowPorts[row], rowPins[row]);
			keypad_inst->rawKeys |= (key ? (1ULL << (row + col * 5)) : 0ULL);
     fb4:	2320      	movs	r3, #32
     fb6:	464e      	mov	r6, r9
     fb8:	1b9b      	subs	r3, r3, r6
     fba:	469a      	mov	sl, r3
     fbc:	2301      	movs	r3, #1
     fbe:	4656      	mov	r6, sl
     fc0:	40f3      	lsrs	r3, r6
     fc2:	469c      	mov	ip, r3
     fc4:	2601      	movs	r6, #1
     fc6:	464b      	mov	r3, r9
     fc8:	409e      	lsls	r6, r3
     fca:	0033      	movs	r3, r6
     fcc:	430b      	orrs	r3, r1
     fce:	001c      	movs	r4, r3
     fd0:	4663      	mov	r3, ip
     fd2:	4313      	orrs	r3, r2
     fd4:	001d      	movs	r5, r3
     fd6:	6084      	str	r4, [r0, #8]
     fd8:	60c5      	str	r5, [r0, #12]
		for (int row = 0; row < KEYPAD_NUM_ROWS; row++) {
     fda:	3701      	adds	r7, #1
     fdc:	2f04      	cmp	r7, #4
     fde:	dc1f      	bgt.n	1020 <STACK_SIZE+0x20>
			int key=gpio_read_pin(rowPorts[row], rowPins[row]);
     fe0:	00ba      	lsls	r2, r7, #2
     fe2:	4b2c      	ldr	r3, [pc, #176]	; (1094 <STACK_SIZE+0x94>)
     fe4:	189b      	adds	r3, r3, r2
     fe6:	6c18      	ldr	r0, [r3, #64]	; 0x40
     fe8:	6d59      	ldr	r1, [r3, #84]	; 0x54
     fea:	4b2b      	ldr	r3, [pc, #172]	; (1098 <STACK_SIZE+0x98>)
     fec:	4798      	blx	r3
     fee:	0003      	movs	r3, r0
			keypad_inst->rawKeys |= (key ? (1ULL << (row + col * 5)) : 0ULL);
     ff0:	4a26      	ldr	r2, [pc, #152]	; (108c <STACK_SIZE+0x8c>)
     ff2:	6810      	ldr	r0, [r2, #0]
     ff4:	6881      	ldr	r1, [r0, #8]
     ff6:	68c2      	ldr	r2, [r0, #12]
     ff8:	2b00      	cmp	r3, #0
     ffa:	d00d      	beq.n	1018 <STACK_SIZE+0x18>
     ffc:	4643      	mov	r3, r8
     ffe:	009b      	lsls	r3, r3, #2
    1000:	4443      	add	r3, r8
    1002:	4699      	mov	r9, r3
    1004:	44b9      	add	r9, r7
    1006:	464e      	mov	r6, r9
    1008:	3e20      	subs	r6, #32
    100a:	46b2      	mov	sl, r6
    100c:	d4d2      	bmi.n	fb4 <keypad_scan_keys+0x28>
    100e:	2601      	movs	r6, #1
    1010:	4653      	mov	r3, sl
    1012:	409e      	lsls	r6, r3
    1014:	46b4      	mov	ip, r6
    1016:	e7d5      	b.n	fc4 <keypad_scan_keys+0x38>
    1018:	2300      	movs	r3, #0
    101a:	2600      	movs	r6, #0
    101c:	46b4      	mov	ip, r6
    101e:	e7d5      	b.n	fcc <keypad_scan_keys+0x40>
		}
		gpio_set_pin(colPorts[col], colPins[col], 0);
    1020:	2200      	movs	r2, #0
    1022:	9901      	ldr	r1, [sp, #4]
    1024:	9800      	ldr	r0, [sp, #0]
    1026:	4b1a      	ldr	r3, [pc, #104]	; (1090 <STACK_SIZE+0x90>)
    1028:	4798      	blx	r3
	for (int col = 0; col < KEYPAD_NUM_COLS; col++) {
    102a:	2301      	movs	r3, #1
    102c:	469c      	mov	ip, r3
    102e:	44e0      	add	r8, ip
    1030:	4643      	mov	r3, r8
    1032:	2b07      	cmp	r3, #7
    1034:	dc0e      	bgt.n	1054 <STACK_SIZE+0x54>
		gpio_set_pin(colPorts[col], colPins[col], 1);
    1036:	4b17      	ldr	r3, [pc, #92]	; (1094 <STACK_SIZE+0x94>)
    1038:	4642      	mov	r2, r8
    103a:	0092      	lsls	r2, r2, #2
    103c:	58d1      	ldr	r1, [r2, r3]
    103e:	0008      	movs	r0, r1
    1040:	9100      	str	r1, [sp, #0]
    1042:	189b      	adds	r3, r3, r2
    1044:	6a1b      	ldr	r3, [r3, #32]
    1046:	9301      	str	r3, [sp, #4]
    1048:	2201      	movs	r2, #1
    104a:	0019      	movs	r1, r3
    104c:	4b10      	ldr	r3, [pc, #64]	; (1090 <STACK_SIZE+0x90>)
    104e:	4798      	blx	r3
		for (int row = 0; row < KEYPAD_NUM_ROWS; row++) {
    1050:	2700      	movs	r7, #0
    1052:	e7c3      	b.n	fdc <keypad_scan_keys+0x50>
	}
	keypad_inst->changed |= keypad_inst->rawKeys & (~keypad_inst->previous);
    1054:	4b0d      	ldr	r3, [pc, #52]	; (108c <STACK_SIZE+0x8c>)
    1056:	681b      	ldr	r3, [r3, #0]
    1058:	6898      	ldr	r0, [r3, #8]
    105a:	68d9      	ldr	r1, [r3, #12]
    105c:	699c      	ldr	r4, [r3, #24]
    105e:	69dd      	ldr	r5, [r3, #28]
    1060:	0006      	movs	r6, r0
    1062:	43a6      	bics	r6, r4
    1064:	000a      	movs	r2, r1
    1066:	43aa      	bics	r2, r5
    1068:	691c      	ldr	r4, [r3, #16]
    106a:	695d      	ldr	r5, [r3, #20]
    106c:	4326      	orrs	r6, r4
    106e:	0030      	movs	r0, r6
    1070:	432a      	orrs	r2, r5
    1072:	0011      	movs	r1, r2
    1074:	6118      	str	r0, [r3, #16]
    1076:	6159      	str	r1, [r3, #20]
	keypad_inst->previous = keypad_inst->rawKeys;
    1078:	6898      	ldr	r0, [r3, #8]
    107a:	68d9      	ldr	r1, [r3, #12]
    107c:	6198      	str	r0, [r3, #24]
    107e:	61d9      	str	r1, [r3, #28]
}
    1080:	b002      	add	sp, #8
    1082:	bc1c      	pop	{r2, r3, r4}
    1084:	4690      	mov	r8, r2
    1086:	4699      	mov	r9, r3
    1088:	46a2      	mov	sl, r4
    108a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    108c:	20000578 	.word	0x20000578
    1090:	00000621 	.word	0x00000621
    1094:	000025d0 	.word	0x000025d0
    1098:	00000795 	.word	0x00000795

0000109c <keypad_init>:

void keypad_init(keypad *status) {
    109c:	b570      	push	{r4, r5, r6, lr}
	keypad_inst = status;
    109e:	4b17      	ldr	r3, [pc, #92]	; (10fc <keypad_init+0x60>)
    10a0:	6018      	str	r0, [r3, #0]
	for (int i = 0; i < KEYPAD_NUM_COLS; i++) {
    10a2:	2400      	movs	r4, #0
    10a4:	e008      	b.n	10b8 <keypad_init+0x1c>
		gpio_set_pin_dir(colPorts[i], colPins[i], GPIO_DIR_OUT);
    10a6:	4b16      	ldr	r3, [pc, #88]	; (1100 <keypad_init+0x64>)
    10a8:	00a2      	lsls	r2, r4, #2
    10aa:	58d0      	ldr	r0, [r2, r3]
    10ac:	189b      	adds	r3, r3, r2
    10ae:	6a19      	ldr	r1, [r3, #32]
    10b0:	2201      	movs	r2, #1
    10b2:	4b14      	ldr	r3, [pc, #80]	; (1104 <keypad_init+0x68>)
    10b4:	4798      	blx	r3
	for (int i = 0; i < KEYPAD_NUM_COLS; i++) {
    10b6:	3401      	adds	r4, #1
    10b8:	2c07      	cmp	r4, #7
    10ba:	ddf4      	ble.n	10a6 <keypad_init+0xa>
    10bc:	2400      	movs	r4, #0
    10be:	e00f      	b.n	10e0 <keypad_init+0x44>
	}
	for (int i = 0; i < KEYPAD_NUM_ROWS; i++) {
		gpio_set_pin_dir(rowPorts[i], rowPins[i], GPIO_DIR_IN);
    10c0:	00a2      	lsls	r2, r4, #2
    10c2:	4b0f      	ldr	r3, [pc, #60]	; (1100 <keypad_init+0x64>)
    10c4:	189b      	adds	r3, r3, r2
    10c6:	6c1d      	ldr	r5, [r3, #64]	; 0x40
    10c8:	6d5e      	ldr	r6, [r3, #84]	; 0x54
    10ca:	2200      	movs	r2, #0
    10cc:	0031      	movs	r1, r6
    10ce:	0028      	movs	r0, r5
    10d0:	4b0c      	ldr	r3, [pc, #48]	; (1104 <keypad_init+0x68>)
    10d2:	4798      	blx	r3
		gpio_set_pin_pull(rowPorts[i], rowPins[i], GPIO_PULL_DOWN);
    10d4:	2202      	movs	r2, #2
    10d6:	0031      	movs	r1, r6
    10d8:	0028      	movs	r0, r5
    10da:	4b0b      	ldr	r3, [pc, #44]	; (1108 <keypad_init+0x6c>)
    10dc:	4798      	blx	r3
	for (int i = 0; i < KEYPAD_NUM_ROWS; i++) {
    10de:	3401      	adds	r4, #1
    10e0:	2c04      	cmp	r4, #4
    10e2:	dded      	ble.n	10c0 <keypad_init+0x24>
	}
	keypad_inst->rawKeys = 0;
    10e4:	4b05      	ldr	r3, [pc, #20]	; (10fc <keypad_init+0x60>)
    10e6:	681b      	ldr	r3, [r3, #0]
    10e8:	2000      	movs	r0, #0
    10ea:	2100      	movs	r1, #0
    10ec:	6098      	str	r0, [r3, #8]
    10ee:	60d9      	str	r1, [r3, #12]
	keypad_inst->changed = 0;
    10f0:	6118      	str	r0, [r3, #16]
    10f2:	6159      	str	r1, [r3, #20]
	keypad_inst->previous = 0;
    10f4:	6198      	str	r0, [r3, #24]
    10f6:	61d9      	str	r1, [r3, #28]
} //Keypad
    10f8:	bd70      	pop	{r4, r5, r6, pc}
    10fa:	46c0      	nop			; (mov r8, r8)
    10fc:	20000578 	.word	0x20000578
    1100:	000025d0 	.word	0x000025d0
    1104:	0000066d 	.word	0x0000066d
    1108:	00000731 	.word	0x00000731

0000110c <SysTick_Handler>:
	//
//} system_status;



void SysTick_Handler(void) {
    110c:	b510      	push	{r4, lr}
	static unsigned int tickCountSci = 0, tickCountKeys = 0;
	tickCountSci++; tickCountKeys++;
    110e:	4a11      	ldr	r2, [pc, #68]	; (1154 <SysTick_Handler+0x48>)
    1110:	6813      	ldr	r3, [r2, #0]
    1112:	3301      	adds	r3, #1
    1114:	6013      	str	r3, [r2, #0]
    1116:	6851      	ldr	r1, [r2, #4]
    1118:	3101      	adds	r1, #1
    111a:	6051      	str	r1, [r2, #4]
	if (tickCountSci > io_devices.ssd.update_period_ticks) {
    111c:	4a0e      	ldr	r2, [pc, #56]	; (1158 <SysTick_Handler+0x4c>)
    111e:	8812      	ldrh	r2, [r2, #0]
    1120:	4293      	cmp	r3, r2
    1122:	d80a      	bhi.n	113a <SysTick_Handler+0x2e>
		tickCountSci = 0;
		SSD_updateDisp();
	}
	if (tickCountKeys > 10) {
    1124:	4b0b      	ldr	r3, [pc, #44]	; (1154 <SysTick_Handler+0x48>)
    1126:	685b      	ldr	r3, [r3, #4]
    1128:	2b0a      	cmp	r3, #10
    112a:	d80c      	bhi.n	1146 <SysTick_Handler+0x3a>
		tickCountKeys = 0;
		keypad_scan_keys();
	}
	buzzer_tick();
    112c:	4b0b      	ldr	r3, [pc, #44]	; (115c <SysTick_Handler+0x50>)
    112e:	4798      	blx	r3
	systick_timer_ms++;
    1130:	4a08      	ldr	r2, [pc, #32]	; (1154 <SysTick_Handler+0x48>)
    1132:	6893      	ldr	r3, [r2, #8]
    1134:	3301      	adds	r3, #1
    1136:	6093      	str	r3, [r2, #8]
}
    1138:	bd10      	pop	{r4, pc}
		tickCountSci = 0;
    113a:	2200      	movs	r2, #0
    113c:	4b05      	ldr	r3, [pc, #20]	; (1154 <SysTick_Handler+0x48>)
    113e:	601a      	str	r2, [r3, #0]
		SSD_updateDisp();
    1140:	4b07      	ldr	r3, [pc, #28]	; (1160 <SysTick_Handler+0x54>)
    1142:	4798      	blx	r3
    1144:	e7ee      	b.n	1124 <SysTick_Handler+0x18>
		tickCountKeys = 0;
    1146:	2200      	movs	r2, #0
    1148:	4b02      	ldr	r3, [pc, #8]	; (1154 <SysTick_Handler+0x48>)
    114a:	605a      	str	r2, [r3, #4]
		keypad_scan_keys();
    114c:	4b05      	ldr	r3, [pc, #20]	; (1164 <SysTick_Handler+0x58>)
    114e:	4798      	blx	r3
    1150:	e7ec      	b.n	112c <SysTick_Handler+0x20>
    1152:	46c0      	nop			; (mov r8, r8)
    1154:	20000588 	.word	0x20000588
    1158:	20000f00 	.word	0x20000f00
    115c:	000001dd 	.word	0x000001dd
    1160:	000017ad 	.word	0x000017ad
    1164:	00000f8d 	.word	0x00000f8d

00001168 <GpioInit>:
		case uimode_mainmenu:
		break;
	}
}

void GpioInit() {
    1168:	b570      	push	{r4, r5, r6, lr}
	gpio_set_pin_dir(GPIO(PWR_LED), GPIO_DIR_OUT);
    116a:	2201      	movs	r2, #1
    116c:	2116      	movs	r1, #22
    116e:	2001      	movs	r0, #1
    1170:	4c09      	ldr	r4, [pc, #36]	; (1198 <GpioInit+0x30>)
    1172:	47a0      	blx	r4
	gpio_set_pin_dir(GPIO(BUSY_LED), GPIO_DIR_OUT);
    1174:	2201      	movs	r2, #1
    1176:	2117      	movs	r1, #23
    1178:	2001      	movs	r0, #1
    117a:	47a0      	blx	r4
	gpio_set_pin_drvstr(GPIO(PWR_LED), 1);
    117c:	2201      	movs	r2, #1
    117e:	2116      	movs	r1, #22
    1180:	2001      	movs	r0, #1
    1182:	4d06      	ldr	r5, [pc, #24]	; (119c <GpioInit+0x34>)
    1184:	47a8      	blx	r5
	gpio_set_pin_drvstr(GPIO(BUSY_LED), 1);
    1186:	2201      	movs	r2, #1
    1188:	2117      	movs	r1, #23
    118a:	2001      	movs	r0, #1
    118c:	47a8      	blx	r5
	gpio_set_pin_dir(GPIO(PWR_CTRL), GPIO_DIR_OUT);
    118e:	2201      	movs	r2, #1
    1190:	2111      	movs	r1, #17
    1192:	2001      	movs	r0, #1
    1194:	47a0      	blx	r4
}
    1196:	bd70      	pop	{r4, r5, r6, pc}
    1198:	0000066d 	.word	0x0000066d
    119c:	00000709 	.word	0x00000709

000011a0 <enable_pwr>:

void enable_pwr() {
    11a0:	b510      	push	{r4, lr}
	// TODO: check voltage level
	gpio_set_pin(GPIO(PWR_CTRL), 1);
    11a2:	2201      	movs	r2, #1
    11a4:	2111      	movs	r1, #17
    11a6:	2001      	movs	r0, #1
    11a8:	4b01      	ldr	r3, [pc, #4]	; (11b0 <enable_pwr+0x10>)
    11aa:	4798      	blx	r3
}
    11ac:	bd10      	pop	{r4, pc}
    11ae:	46c0      	nop			; (mov r8, r8)
    11b0:	00000621 	.word	0x00000621

000011b4 <LvPeripheralsInit>:

void LvPeripheralsInit() {
    11b4:	b510      	push	{r4, lr}
	SSD_init(&io_devices.ssd);
    11b6:	4c06      	ldr	r4, [pc, #24]	; (11d0 <LvPeripheralsInit+0x1c>)
    11b8:	0020      	movs	r0, r4
    11ba:	4b06      	ldr	r3, [pc, #24]	; (11d4 <LvPeripheralsInit+0x20>)
    11bc:	4798      	blx	r3
	keypad_init(&io_devices.keypad);
    11be:	0020      	movs	r0, r4
    11c0:	3010      	adds	r0, #16
    11c2:	4b05      	ldr	r3, [pc, #20]	; (11d8 <LvPeripheralsInit+0x24>)
    11c4:	4798      	blx	r3
	build_keymap();
    11c6:	4b05      	ldr	r3, [pc, #20]	; (11dc <LvPeripheralsInit+0x28>)
    11c8:	4798      	blx	r3
	
	buzzer_init();
    11ca:	4b05      	ldr	r3, [pc, #20]	; (11e0 <LvPeripheralsInit+0x2c>)
    11cc:	4798      	blx	r3
}
    11ce:	bd10      	pop	{r4, pc}
    11d0:	20000f00 	.word	0x20000f00
    11d4:	00001989 	.word	0x00001989
    11d8:	0000109d 	.word	0x0000109d
    11dc:	000009a5 	.word	0x000009a5
    11e0:	00000119 	.word	0x00000119

000011e4 <normal_keypad_lighting>:
}


const color_rgb colors[] = {{32, 32, 32}, {128, 128, 128}, {255, 255, 255}, {0, 64, 200}, {0, 220, 0}, {255, 0, 0}, {190, 0, 128}};

void normal_keypad_lighting() {
    11e4:	b530      	push	{r4, r5, lr}
    11e6:	b083      	sub	sp, #12
	for (int i = 0; i < KEYPAD_GRID_SIZE; i++) {
    11e8:	2400      	movs	r4, #0
    11ea:	e049      	b.n	1280 <normal_keypad_lighting+0x9c>
			if (currentkey->special_color) {
				// If the key has special color rules, apply that instead
				c = currentkey->special_color(&calc_state, &sys_state);
			} else {
				// Lighting depends on modifiers and command availability
				if (sys_state.sys.modifiers.shift && sys_state.sys.modifiers.hyp) {
    11ec:	4b58      	ldr	r3, [pc, #352]	; (1350 <normal_keypad_lighting+0x16c>)
    11ee:	795b      	ldrb	r3, [r3, #5]
    11f0:	2b00      	cmp	r3, #0
    11f2:	d020      	beq.n	1236 <normal_keypad_lighting+0x52>
    11f4:	4a56      	ldr	r2, [pc, #344]	; (1350 <normal_keypad_lighting+0x16c>)
    11f6:	7992      	ldrb	r2, [r2, #6]
    11f8:	2a00      	cmp	r2, #0
    11fa:	d01c      	beq.n	1236 <normal_keypad_lighting+0x52>
					if (currentkey->shift_hyp_cmd && currentkey->shift_hyp_cmd->available != NULL) {
    11fc:	00e3      	lsls	r3, r4, #3
    11fe:	1b1b      	subs	r3, r3, r4
    1200:	009a      	lsls	r2, r3, #2
    1202:	4b54      	ldr	r3, [pc, #336]	; (1354 <normal_keypad_lighting+0x170>)
    1204:	189b      	adds	r3, r3, r2
    1206:	691b      	ldr	r3, [r3, #16]
    1208:	2b00      	cmp	r3, #0
    120a:	d006      	beq.n	121a <normal_keypad_lighting+0x36>
    120c:	685b      	ldr	r3, [r3, #4]
    120e:	2b00      	cmp	r3, #0
    1210:	d003      	beq.n	121a <normal_keypad_lighting+0x36>
						available = currentkey->shift_hyp_cmd->available(&calc_state, &sys_state);
    1212:	494f      	ldr	r1, [pc, #316]	; (1350 <normal_keypad_lighting+0x16c>)
    1214:	4850      	ldr	r0, [pc, #320]	; (1358 <normal_keypad_lighting+0x174>)
    1216:	3010      	adds	r0, #16
    1218:	4798      	blx	r3
					}
					c = available ? color_shift_hyp : color_shift_hyp_unavail;
    121a:	2800      	cmp	r0, #0
    121c:	d005      	beq.n	122a <normal_keypad_lighting+0x46>
    121e:	2203      	movs	r2, #3
    1220:	494e      	ldr	r1, [pc, #312]	; (135c <normal_keypad_lighting+0x178>)
    1222:	a801      	add	r0, sp, #4
    1224:	4b4e      	ldr	r3, [pc, #312]	; (1360 <normal_keypad_lighting+0x17c>)
    1226:	4798      	blx	r3
    1228:	e01d      	b.n	1266 <normal_keypad_lighting+0x82>
    122a:	2203      	movs	r2, #3
    122c:	494d      	ldr	r1, [pc, #308]	; (1364 <normal_keypad_lighting+0x180>)
    122e:	a801      	add	r0, sp, #4
    1230:	4b4b      	ldr	r3, [pc, #300]	; (1360 <normal_keypad_lighting+0x17c>)
    1232:	4798      	blx	r3
    1234:	e017      	b.n	1266 <normal_keypad_lighting+0x82>
				} else if (sys_state.sys.modifiers.shift) {
    1236:	2b00      	cmp	r3, #0
    1238:	d048      	beq.n	12cc <normal_keypad_lighting+0xe8>
					if (currentkey->shift_cmd && currentkey->shift_cmd->available != NULL) {
    123a:	00e3      	lsls	r3, r4, #3
    123c:	1b1b      	subs	r3, r3, r4
    123e:	009a      	lsls	r2, r3, #2
    1240:	4b44      	ldr	r3, [pc, #272]	; (1354 <normal_keypad_lighting+0x170>)
    1242:	189b      	adds	r3, r3, r2
    1244:	689b      	ldr	r3, [r3, #8]
    1246:	2b00      	cmp	r3, #0
    1248:	d006      	beq.n	1258 <normal_keypad_lighting+0x74>
    124a:	685b      	ldr	r3, [r3, #4]
    124c:	2b00      	cmp	r3, #0
    124e:	d003      	beq.n	1258 <normal_keypad_lighting+0x74>
						available = currentkey->shift_cmd->available(&calc_state, &sys_state);
    1250:	493f      	ldr	r1, [pc, #252]	; (1350 <normal_keypad_lighting+0x16c>)
    1252:	4841      	ldr	r0, [pc, #260]	; (1358 <normal_keypad_lighting+0x174>)
    1254:	3010      	adds	r0, #16
    1256:	4798      	blx	r3
					}
					c = available ? color_shift : color_shift_unavail;
    1258:	2800      	cmp	r0, #0
    125a:	d031      	beq.n	12c0 <normal_keypad_lighting+0xdc>
    125c:	2203      	movs	r2, #3
    125e:	4942      	ldr	r1, [pc, #264]	; (1368 <normal_keypad_lighting+0x184>)
    1260:	a801      	add	r0, sp, #4
    1262:	4b3f      	ldr	r3, [pc, #252]	; (1360 <normal_keypad_lighting+0x17c>)
    1264:	4798      	blx	r3
						available = currentkey->base_cmd->available(&calc_state, &sys_state);
					}
					c = available ? color_normal : color_normal_unavail;
				}
			}
			NeoPixel_set_pixel(currentkey->pixel_idx, c.r, c.g, c.b);
    1266:	a901      	add	r1, sp, #4
    1268:	788b      	ldrb	r3, [r1, #2]
    126a:	784a      	ldrb	r2, [r1, #1]
    126c:	7809      	ldrb	r1, [r1, #0]
    126e:	00e0      	lsls	r0, r4, #3
    1270:	1b00      	subs	r0, r0, r4
    1272:	0085      	lsls	r5, r0, #2
    1274:	4837      	ldr	r0, [pc, #220]	; (1354 <normal_keypad_lighting+0x170>)
    1276:	1940      	adds	r0, r0, r5
    1278:	6940      	ldr	r0, [r0, #20]
    127a:	4d3c      	ldr	r5, [pc, #240]	; (136c <normal_keypad_lighting+0x188>)
    127c:	47a8      	blx	r5
	for (int i = 0; i < KEYPAD_GRID_SIZE; i++) {
    127e:	3401      	adds	r4, #1
    1280:	2c27      	cmp	r4, #39	; 0x27
    1282:	dc61      	bgt.n	1348 <normal_keypad_lighting+0x164>
		if (currentkey->key_type != 0) {
    1284:	00e3      	lsls	r3, r4, #3
    1286:	1b1b      	subs	r3, r3, r4
    1288:	009a      	lsls	r2, r3, #2
    128a:	4b32      	ldr	r3, [pc, #200]	; (1354 <normal_keypad_lighting+0x170>)
    128c:	5cd0      	ldrb	r0, [r2, r3]
    128e:	2800      	cmp	r0, #0
    1290:	d0f5      	beq.n	127e <normal_keypad_lighting+0x9a>
			int available = (currentkey->key_type & KEY_TYPE_MOD_MASK) ? 1 : 0;
    1292:	230f      	movs	r3, #15
    1294:	4398      	bics	r0, r3
    1296:	1e43      	subs	r3, r0, #1
    1298:	4198      	sbcs	r0, r3
    129a:	b2c0      	uxtb	r0, r0
			if (currentkey->special_color) {
    129c:	4b2d      	ldr	r3, [pc, #180]	; (1354 <normal_keypad_lighting+0x170>)
    129e:	189b      	adds	r3, r3, r2
    12a0:	699b      	ldr	r3, [r3, #24]
    12a2:	2b00      	cmp	r3, #0
    12a4:	d0a2      	beq.n	11ec <normal_keypad_lighting+0x8>
				c = currentkey->special_color(&calc_state, &sys_state);
    12a6:	492a      	ldr	r1, [pc, #168]	; (1350 <normal_keypad_lighting+0x16c>)
    12a8:	482b      	ldr	r0, [pc, #172]	; (1358 <normal_keypad_lighting+0x174>)
    12aa:	3010      	adds	r0, #16
    12ac:	4798      	blx	r3
    12ae:	ab01      	add	r3, sp, #4
    12b0:	7018      	strb	r0, [r3, #0]
    12b2:	0402      	lsls	r2, r0, #16
    12b4:	0e12      	lsrs	r2, r2, #24
    12b6:	705a      	strb	r2, [r3, #1]
    12b8:	0200      	lsls	r0, r0, #8
    12ba:	0e00      	lsrs	r0, r0, #24
    12bc:	7098      	strb	r0, [r3, #2]
    12be:	e7d2      	b.n	1266 <normal_keypad_lighting+0x82>
					c = available ? color_shift : color_shift_unavail;
    12c0:	2203      	movs	r2, #3
    12c2:	492b      	ldr	r1, [pc, #172]	; (1370 <normal_keypad_lighting+0x18c>)
    12c4:	a801      	add	r0, sp, #4
    12c6:	4b26      	ldr	r3, [pc, #152]	; (1360 <normal_keypad_lighting+0x17c>)
    12c8:	4798      	blx	r3
    12ca:	e7cc      	b.n	1266 <normal_keypad_lighting+0x82>
				} else if (sys_state.sys.modifiers.hyp) {
    12cc:	4b20      	ldr	r3, [pc, #128]	; (1350 <normal_keypad_lighting+0x16c>)
    12ce:	799b      	ldrb	r3, [r3, #6]
    12d0:	2b00      	cmp	r3, #0
    12d2:	d01c      	beq.n	130e <normal_keypad_lighting+0x12a>
					if (currentkey->hyp_cmd && currentkey->hyp_cmd->available != NULL) {
    12d4:	00e3      	lsls	r3, r4, #3
    12d6:	1b1b      	subs	r3, r3, r4
    12d8:	009a      	lsls	r2, r3, #2
    12da:	4b1e      	ldr	r3, [pc, #120]	; (1354 <normal_keypad_lighting+0x170>)
    12dc:	189b      	adds	r3, r3, r2
    12de:	68db      	ldr	r3, [r3, #12]
    12e0:	2b00      	cmp	r3, #0
    12e2:	d006      	beq.n	12f2 <normal_keypad_lighting+0x10e>
    12e4:	685b      	ldr	r3, [r3, #4]
    12e6:	2b00      	cmp	r3, #0
    12e8:	d003      	beq.n	12f2 <normal_keypad_lighting+0x10e>
						available = currentkey->hyp_cmd->available(&calc_state, &sys_state);
    12ea:	4919      	ldr	r1, [pc, #100]	; (1350 <normal_keypad_lighting+0x16c>)
    12ec:	481a      	ldr	r0, [pc, #104]	; (1358 <normal_keypad_lighting+0x174>)
    12ee:	3010      	adds	r0, #16
    12f0:	4798      	blx	r3
					c = available ? color_hyp : color_hyp_unavail;
    12f2:	2800      	cmp	r0, #0
    12f4:	d005      	beq.n	1302 <normal_keypad_lighting+0x11e>
    12f6:	2203      	movs	r2, #3
    12f8:	491e      	ldr	r1, [pc, #120]	; (1374 <normal_keypad_lighting+0x190>)
    12fa:	a801      	add	r0, sp, #4
    12fc:	4b18      	ldr	r3, [pc, #96]	; (1360 <normal_keypad_lighting+0x17c>)
    12fe:	4798      	blx	r3
    1300:	e7b1      	b.n	1266 <normal_keypad_lighting+0x82>
    1302:	2203      	movs	r2, #3
    1304:	491c      	ldr	r1, [pc, #112]	; (1378 <normal_keypad_lighting+0x194>)
    1306:	a801      	add	r0, sp, #4
    1308:	4b15      	ldr	r3, [pc, #84]	; (1360 <normal_keypad_lighting+0x17c>)
    130a:	4798      	blx	r3
    130c:	e7ab      	b.n	1266 <normal_keypad_lighting+0x82>
					if (currentkey->base_cmd && currentkey->base_cmd->available != NULL) {
    130e:	00e3      	lsls	r3, r4, #3
    1310:	1b1b      	subs	r3, r3, r4
    1312:	009a      	lsls	r2, r3, #2
    1314:	4b0f      	ldr	r3, [pc, #60]	; (1354 <normal_keypad_lighting+0x170>)
    1316:	189b      	adds	r3, r3, r2
    1318:	685b      	ldr	r3, [r3, #4]
    131a:	2b00      	cmp	r3, #0
    131c:	d006      	beq.n	132c <normal_keypad_lighting+0x148>
    131e:	685b      	ldr	r3, [r3, #4]
    1320:	2b00      	cmp	r3, #0
    1322:	d003      	beq.n	132c <normal_keypad_lighting+0x148>
						available = currentkey->base_cmd->available(&calc_state, &sys_state);
    1324:	490a      	ldr	r1, [pc, #40]	; (1350 <normal_keypad_lighting+0x16c>)
    1326:	480c      	ldr	r0, [pc, #48]	; (1358 <normal_keypad_lighting+0x174>)
    1328:	3010      	adds	r0, #16
    132a:	4798      	blx	r3
					c = available ? color_normal : color_normal_unavail;
    132c:	2800      	cmp	r0, #0
    132e:	d005      	beq.n	133c <normal_keypad_lighting+0x158>
    1330:	2203      	movs	r2, #3
    1332:	4912      	ldr	r1, [pc, #72]	; (137c <normal_keypad_lighting+0x198>)
    1334:	a801      	add	r0, sp, #4
    1336:	4b0a      	ldr	r3, [pc, #40]	; (1360 <normal_keypad_lighting+0x17c>)
    1338:	4798      	blx	r3
    133a:	e794      	b.n	1266 <normal_keypad_lighting+0x82>
    133c:	2203      	movs	r2, #3
    133e:	4910      	ldr	r1, [pc, #64]	; (1380 <normal_keypad_lighting+0x19c>)
    1340:	a801      	add	r0, sp, #4
    1342:	4b07      	ldr	r3, [pc, #28]	; (1360 <normal_keypad_lighting+0x17c>)
    1344:	4798      	blx	r3
    1346:	e78e      	b.n	1266 <normal_keypad_lighting+0x82>
		}
	}
	NeoPixel_update();
    1348:	4b0e      	ldr	r3, [pc, #56]	; (1384 <normal_keypad_lighting+0x1a0>)
    134a:	4798      	blx	r3
}
    134c:	b003      	add	sp, #12
    134e:	bd30      	pop	{r4, r5, pc}
    1350:	200000a0 	.word	0x200000a0
    1354:	20000a58 	.word	0x20000a58
    1358:	20000588 	.word	0x20000588
    135c:	000024d0 	.word	0x000024d0
    1360:	00002235 	.word	0x00002235
    1364:	000024c0 	.word	0x000024c0
    1368:	000024d8 	.word	0x000024d8
    136c:	000015d5 	.word	0x000015d5
    1370:	000024c8 	.word	0x000024c8
    1374:	000024d4 	.word	0x000024d4
    1378:	000024c4 	.word	0x000024c4
    137c:	000024dc 	.word	0x000024dc
    1380:	000024cc 	.word	0x000024cc
    1384:	000016c5 	.word	0x000016c5

00001388 <process_keypress>:

void process_modifiers() {
	
}

cmd_generic *process_keypress() {
    1388:	b570      	push	{r4, r5, r6, lr}
	uint64_t keys = io_devices.keypad.changed;
    138a:	4b40      	ldr	r3, [pc, #256]	; (148c <process_keypress+0x104>)
    138c:	6a18      	ldr	r0, [r3, #32]
    138e:	6a59      	ldr	r1, [r3, #36]	; 0x24
	// clear the pending key press
	io_devices.keypad.changed = 0ULL;
    1390:	2400      	movs	r4, #0
    1392:	2500      	movs	r5, #0
    1394:	621c      	str	r4, [r3, #32]
    1396:	625d      	str	r5, [r3, #36]	; 0x24
	
	for (int i = 0; i < KEYPAD_GRID_SIZE; i++) {
    1398:	2300      	movs	r3, #0
    139a:	e04c      	b.n	1436 <process_keypress+0xae>
		// TODO: special rules?
		if (keys & (1ULL << i)) {
    139c:	2220      	movs	r2, #32
    139e:	1ad2      	subs	r2, r2, r3
    13a0:	000c      	movs	r4, r1
    13a2:	4094      	lsls	r4, r2
    13a4:	0002      	movs	r2, r0
    13a6:	40da      	lsrs	r2, r3
    13a8:	4322      	orrs	r2, r4
    13aa:	e04d      	b.n	1448 <process_keypress+0xc0>
			if (currentkey->key_type != 0) {
				cmd_generic *cmd = NULL;
				uint8_t modifier = (currentkey->key_type & KEY_TYPE_MOD_MASK);
				if (modifier) {
					// Set modifiers if button pressed. If modifier is already active, let it be changed to 'held'
					if (modifier == KEY_TYPE_SHIFT && !sys_state.sys.modifiers.shift) {
    13ac:	4938      	ldr	r1, [pc, #224]	; (1490 <process_keypress+0x108>)
    13ae:	7949      	ldrb	r1, [r1, #5]
    13b0:	2900      	cmp	r1, #0
    13b2:	d157      	bne.n	1464 <process_keypress+0xdc>
						sys_state.sys.modifiers.shift = mod_active;
    13b4:	3a0f      	subs	r2, #15
    13b6:	4b36      	ldr	r3, [pc, #216]	; (1490 <process_keypress+0x108>)
    13b8:	715a      	strb	r2, [r3, #5]
						BUZZER_TONE_GOOD();
    13ba:	21e1      	movs	r1, #225	; 0xe1
    13bc:	00c9      	lsls	r1, r1, #3
    13be:	200c      	movs	r0, #12
    13c0:	4b34      	ldr	r3, [pc, #208]	; (1494 <process_keypress+0x10c>)
    13c2:	4798      	blx	r3
						return NULL; // No command
    13c4:	2000      	movs	r0, #0
    13c6:	e05f      	b.n	1488 <process_keypress+0x100>
					}
					if (modifier == KEY_TYPE_HYP && !sys_state.sys.modifiers.hyp) {
    13c8:	4a31      	ldr	r2, [pc, #196]	; (1490 <process_keypress+0x108>)
    13ca:	7992      	ldrb	r2, [r2, #6]
    13cc:	2a00      	cmp	r2, #0
    13ce:	d14b      	bne.n	1468 <process_keypress+0xe0>
						sys_state.sys.modifiers.hyp = mod_active;
    13d0:	3201      	adds	r2, #1
    13d2:	4b2f      	ldr	r3, [pc, #188]	; (1490 <process_keypress+0x108>)
    13d4:	719a      	strb	r2, [r3, #6]
						BUZZER_TONE_GOOD();
    13d6:	21e1      	movs	r1, #225	; 0xe1
    13d8:	00c9      	lsls	r1, r1, #3
    13da:	200c      	movs	r0, #12
    13dc:	4b2d      	ldr	r3, [pc, #180]	; (1494 <process_keypress+0x10c>)
    13de:	4798      	blx	r3
						return NULL; // No command
    13e0:	2000      	movs	r0, #0
    13e2:	e051      	b.n	1488 <process_keypress+0x100>
				}
				
				// find the command based on the modifiers
				if (sys_state.sys.modifiers.shift && sys_state.sys.modifiers.hyp) {
					cmd = currentkey->shift_hyp_cmd;
				} else if (sys_state.sys.modifiers.shift) {
    13e4:	2a00      	cmp	r2, #0
    13e6:	d00f      	beq.n	1408 <process_keypress+0x80>
					cmd = currentkey->shift_cmd;
    13e8:	00d9      	lsls	r1, r3, #3
    13ea:	1acb      	subs	r3, r1, r3
    13ec:	0099      	lsls	r1, r3, #2
    13ee:	4b2a      	ldr	r3, [pc, #168]	; (1498 <process_keypress+0x110>)
    13f0:	185b      	adds	r3, r3, r1
    13f2:	6898      	ldr	r0, [r3, #8]
					cmd = currentkey->hyp_cmd;
				} else if (currentkey->base_cmd) {
					cmd = currentkey->base_cmd;
				}
				// Set any modifiers to 'held'
				if (sys_state.sys.modifiers.shift == mod_active) {
    13f4:	2a01      	cmp	r2, #1
    13f6:	d019      	beq.n	142c <process_keypress+0xa4>
					sys_state.sys.modifiers.shift = mod_held;
				}
				if (sys_state.sys.modifiers.hyp == mod_active) {
    13f8:	4b25      	ldr	r3, [pc, #148]	; (1490 <process_keypress+0x108>)
    13fa:	799b      	ldrb	r3, [r3, #6]
    13fc:	2b01      	cmp	r3, #1
    13fe:	d143      	bne.n	1488 <process_keypress+0x100>
					sys_state.sys.modifiers.hyp = mod_held;
    1400:	2202      	movs	r2, #2
    1402:	4b23      	ldr	r3, [pc, #140]	; (1490 <process_keypress+0x108>)
    1404:	719a      	strb	r2, [r3, #6]
    1406:	e03f      	b.n	1488 <process_keypress+0x100>
				} else if (sys_state.sys.modifiers.hyp) {
    1408:	4921      	ldr	r1, [pc, #132]	; (1490 <process_keypress+0x108>)
    140a:	7989      	ldrb	r1, [r1, #6]
    140c:	2900      	cmp	r1, #0
    140e:	d006      	beq.n	141e <process_keypress+0x96>
					cmd = currentkey->hyp_cmd;
    1410:	00d9      	lsls	r1, r3, #3
    1412:	1acb      	subs	r3, r1, r3
    1414:	0099      	lsls	r1, r3, #2
    1416:	4b20      	ldr	r3, [pc, #128]	; (1498 <process_keypress+0x110>)
    1418:	185b      	adds	r3, r3, r1
    141a:	68d8      	ldr	r0, [r3, #12]
    141c:	e7ea      	b.n	13f4 <process_keypress+0x6c>
				} else if (currentkey->base_cmd) {
    141e:	00d9      	lsls	r1, r3, #3
    1420:	1acb      	subs	r3, r1, r3
    1422:	0099      	lsls	r1, r3, #2
    1424:	4b1c      	ldr	r3, [pc, #112]	; (1498 <process_keypress+0x110>)
    1426:	185b      	adds	r3, r3, r1
    1428:	6858      	ldr	r0, [r3, #4]
    142a:	e7e3      	b.n	13f4 <process_keypress+0x6c>
					sys_state.sys.modifiers.shift = mod_held;
    142c:	3201      	adds	r2, #1
    142e:	4b18      	ldr	r3, [pc, #96]	; (1490 <process_keypress+0x108>)
    1430:	715a      	strb	r2, [r3, #5]
    1432:	e7e1      	b.n	13f8 <process_keypress+0x70>
	for (int i = 0; i < KEYPAD_GRID_SIZE; i++) {
    1434:	3301      	adds	r3, #1
    1436:	2b27      	cmp	r3, #39	; 0x27
    1438:	dc25      	bgt.n	1486 <process_keypress+0xfe>
		if (keys & (1ULL << i)) {
    143a:	2220      	movs	r2, #32
    143c:	4252      	negs	r2, r2
    143e:	189a      	adds	r2, r3, r2
    1440:	d4ac      	bmi.n	139c <process_keypress+0x14>
    1442:	000c      	movs	r4, r1
    1444:	40d4      	lsrs	r4, r2
    1446:	0022      	movs	r2, r4
    1448:	07d2      	lsls	r2, r2, #31
    144a:	d5f3      	bpl.n	1434 <process_keypress+0xac>
			if (currentkey->key_type != 0) {
    144c:	00da      	lsls	r2, r3, #3
    144e:	1ad2      	subs	r2, r2, r3
    1450:	0094      	lsls	r4, r2, #2
    1452:	4a11      	ldr	r2, [pc, #68]	; (1498 <process_keypress+0x110>)
    1454:	5ca2      	ldrb	r2, [r4, r2]
    1456:	2a00      	cmp	r2, #0
    1458:	d0ec      	beq.n	1434 <process_keypress+0xac>
				uint8_t modifier = (currentkey->key_type & KEY_TYPE_MOD_MASK);
    145a:	210f      	movs	r1, #15
    145c:	438a      	bics	r2, r1
				if (modifier) {
    145e:	d003      	beq.n	1468 <process_keypress+0xe0>
					if (modifier == KEY_TYPE_SHIFT && !sys_state.sys.modifiers.shift) {
    1460:	2a10      	cmp	r2, #16
    1462:	d0a3      	beq.n	13ac <process_keypress+0x24>
					if (modifier == KEY_TYPE_HYP && !sys_state.sys.modifiers.hyp) {
    1464:	2a20      	cmp	r2, #32
    1466:	d0af      	beq.n	13c8 <process_keypress+0x40>
				if (sys_state.sys.modifiers.shift && sys_state.sys.modifiers.hyp) {
    1468:	4a09      	ldr	r2, [pc, #36]	; (1490 <process_keypress+0x108>)
    146a:	7952      	ldrb	r2, [r2, #5]
    146c:	2a00      	cmp	r2, #0
    146e:	d0b9      	beq.n	13e4 <process_keypress+0x5c>
    1470:	4907      	ldr	r1, [pc, #28]	; (1490 <process_keypress+0x108>)
    1472:	7989      	ldrb	r1, [r1, #6]
    1474:	2900      	cmp	r1, #0
    1476:	d0b5      	beq.n	13e4 <process_keypress+0x5c>
					cmd = currentkey->shift_hyp_cmd;
    1478:	00d9      	lsls	r1, r3, #3
    147a:	1acb      	subs	r3, r1, r3
    147c:	0099      	lsls	r1, r3, #2
    147e:	4b06      	ldr	r3, [pc, #24]	; (1498 <process_keypress+0x110>)
    1480:	185b      	adds	r3, r3, r1
    1482:	6918      	ldr	r0, [r3, #16]
    1484:	e7b6      	b.n	13f4 <process_keypress+0x6c>
				}
				return cmd;
			}
		}
	}
	return NULL;
    1486:	2000      	movs	r0, #0
}
    1488:	bd70      	pop	{r4, r5, r6, pc}
    148a:	46c0      	nop			; (mov r8, r8)
    148c:	20000f00 	.word	0x20000f00
    1490:	200000a0 	.word	0x200000a0
    1494:	00000199 	.word	0x00000199
    1498:	20000a58 	.word	0x20000a58

0000149c <exec_cmd>:

void exec_cmd(const cmd_generic *cmd) {
    149c:	b510      	push	{r4, lr}
    149e:	0004      	movs	r4, r0
	if (cmd->available && cmd->available(&calc_state, &sys_state)) {
    14a0:	6843      	ldr	r3, [r0, #4]
    14a2:	2b00      	cmp	r3, #0
    14a4:	d005      	beq.n	14b2 <exec_cmd+0x16>
    14a6:	490e      	ldr	r1, [pc, #56]	; (14e0 <exec_cmd+0x44>)
    14a8:	480e      	ldr	r0, [pc, #56]	; (14e4 <exec_cmd+0x48>)
    14aa:	3010      	adds	r0, #16
    14ac:	4798      	blx	r3
    14ae:	2800      	cmp	r0, #0
    14b0:	d105      	bne.n	14be <exec_cmd+0x22>
		} else if ((cmd->cmd_type & CMD_TYPE_MASK) == CMD_TYPE_NUM) {
			cmd_numeric *cmd_num = (cmd_numeric *)cmd;
			//cmd_num->num_func(NULL);
		}
	} else {
		BUZZER_TONE_BAD();
    14b2:	2196      	movs	r1, #150	; 0x96
    14b4:	0089      	lsls	r1, r1, #2
    14b6:	2050      	movs	r0, #80	; 0x50
    14b8:	4b0b      	ldr	r3, [pc, #44]	; (14e8 <exec_cmd+0x4c>)
    14ba:	4798      	blx	r3
		// TODO: unavailable command pressed
	}
}
    14bc:	bd10      	pop	{r4, pc}
		BUZZER_TONE_GOOD();
    14be:	21e1      	movs	r1, #225	; 0xe1
    14c0:	00c9      	lsls	r1, r1, #3
    14c2:	200c      	movs	r0, #12
    14c4:	4b08      	ldr	r3, [pc, #32]	; (14e8 <exec_cmd+0x4c>)
    14c6:	4798      	blx	r3
		if ((cmd->cmd_type & CMD_TYPE_MASK) == CMD_TYPE_OP) {
    14c8:	7823      	ldrb	r3, [r4, #0]
    14ca:	220f      	movs	r2, #15
    14cc:	4393      	bics	r3, r2
    14ce:	2b10      	cmp	r3, #16
    14d0:	d1f4      	bne.n	14bc <exec_cmd+0x20>
			op->op_func(&calc_state, &sys_state);
    14d2:	68e3      	ldr	r3, [r4, #12]
    14d4:	4902      	ldr	r1, [pc, #8]	; (14e0 <exec_cmd+0x44>)
    14d6:	4803      	ldr	r0, [pc, #12]	; (14e4 <exec_cmd+0x48>)
    14d8:	3010      	adds	r0, #16
    14da:	4798      	blx	r3
    14dc:	e7ee      	b.n	14bc <exec_cmd+0x20>
    14de:	46c0      	nop			; (mov r8, r8)
    14e0:	200000a0 	.word	0x200000a0
    14e4:	20000588 	.word	0x20000588
    14e8:	00000199 	.word	0x00000199

000014ec <main>:

int main(void) {
    14ec:	b570      	push	{r4, r5, r6, lr}
    GpioInit();
    14ee:	4b2b      	ldr	r3, [pc, #172]	; (159c <main+0xb0>)
    14f0:	4798      	blx	r3
	gpio_set_pin(GPIO(PWR_LED), 1);
    14f2:	2201      	movs	r2, #1
    14f4:	2116      	movs	r1, #22
    14f6:	2001      	movs	r0, #1
    14f8:	4c29      	ldr	r4, [pc, #164]	; (15a0 <main+0xb4>)
    14fa:	47a0      	blx	r4
	gpio_set_pin(GPIO(BUSY_LED), 1);
    14fc:	2201      	movs	r2, #1
    14fe:	2117      	movs	r1, #23
    1500:	2001      	movs	r0, #1
    1502:	47a0      	blx	r4
	ClocksInit();
    1504:	4b27      	ldr	r3, [pc, #156]	; (15a4 <main+0xb8>)
    1506:	4798      	blx	r3

	LvPeripheralsInit();
    1508:	4b27      	ldr	r3, [pc, #156]	; (15a8 <main+0xbc>)
    150a:	4798      	blx	r3

	enable_pwr();
    150c:	4b27      	ldr	r3, [pc, #156]	; (15ac <main+0xc0>)
    150e:	4798      	blx	r3
	NeoPixel_init();
    1510:	4b27      	ldr	r3, [pc, #156]	; (15b0 <main+0xc4>)
    1512:	4798      	blx	r3
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    1514:	4a27      	ldr	r2, [pc, #156]	; (15b4 <main+0xc8>)
    1516:	4b28      	ldr	r3, [pc, #160]	; (15b8 <main+0xcc>)
    1518:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    151a:	4828      	ldr	r0, [pc, #160]	; (15bc <main+0xd0>)
    151c:	6a03      	ldr	r3, [r0, #32]
    151e:	021b      	lsls	r3, r3, #8
    1520:	0a1b      	lsrs	r3, r3, #8
    1522:	21c0      	movs	r1, #192	; 0xc0
    1524:	0609      	lsls	r1, r1, #24
    1526:	430b      	orrs	r3, r1
    1528:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    152a:	2300      	movs	r3, #0
    152c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    152e:	3307      	adds	r3, #7
    1530:	6013      	str	r3, [r2, #0]

	SysTick_Config(4800ul);
	gpio_set_pin(GPIO(BUSY_LED), 0);
    1532:	2200      	movs	r2, #0
    1534:	2117      	movs	r1, #23
    1536:	2001      	movs	r0, #1
    1538:	47a0      	blx	r4
    153a:	e015      	b.n	1568 <main+0x7c>

	while (1) {
		// Clear modifier keys if needed
		if (sys_state.sys.modifiers.shift == mod_held && !(io_devices.keypad.rawKeys & KEY_MOD_SHIFT_IDX)) {
    153c:	4b20      	ldr	r3, [pc, #128]	; (15c0 <main+0xd4>)
    153e:	699a      	ldr	r2, [r3, #24]
    1540:	69db      	ldr	r3, [r3, #28]
    1542:	2380      	movs	r3, #128	; 0x80
    1544:	009b      	lsls	r3, r3, #2
    1546:	4213      	tst	r3, r2
    1548:	d112      	bne.n	1570 <main+0x84>
			 sys_state.sys.modifiers.shift = mod_inactive;
    154a:	2200      	movs	r2, #0
    154c:	4b1d      	ldr	r3, [pc, #116]	; (15c4 <main+0xd8>)
    154e:	715a      	strb	r2, [r3, #5]
    1550:	e00e      	b.n	1570 <main+0x84>
		}
		if (sys_state.sys.modifiers.hyp == mod_held && !(io_devices.keypad.rawKeys & KEY_MOD_HYP_IDX)) {
    1552:	4b1b      	ldr	r3, [pc, #108]	; (15c0 <main+0xd4>)
    1554:	699a      	ldr	r2, [r3, #24]
    1556:	69db      	ldr	r3, [r3, #28]
    1558:	071b      	lsls	r3, r3, #28
    155a:	d40d      	bmi.n	1578 <main+0x8c>
			 sys_state.sys.modifiers.hyp = mod_inactive;
    155c:	2200      	movs	r2, #0
    155e:	4b19      	ldr	r3, [pc, #100]	; (15c4 <main+0xd8>)
    1560:	719a      	strb	r2, [r3, #6]
    1562:	e009      	b.n	1578 <main+0x8c>
			gpio_set_pin(GPIO(BUSY_LED), 1);
			exec_cmd(pressed_cmd);
			gpio_set_pin(GPIO(BUSY_LED), 0);
		}
		
		normal_keypad_lighting();
    1564:	4b18      	ldr	r3, [pc, #96]	; (15c8 <main+0xdc>)
    1566:	4798      	blx	r3
		if (sys_state.sys.modifiers.shift == mod_held && !(io_devices.keypad.rawKeys & KEY_MOD_SHIFT_IDX)) {
    1568:	4b16      	ldr	r3, [pc, #88]	; (15c4 <main+0xd8>)
    156a:	795b      	ldrb	r3, [r3, #5]
    156c:	2b02      	cmp	r3, #2
    156e:	d0e5      	beq.n	153c <main+0x50>
		if (sys_state.sys.modifiers.hyp == mod_held && !(io_devices.keypad.rawKeys & KEY_MOD_HYP_IDX)) {
    1570:	4b14      	ldr	r3, [pc, #80]	; (15c4 <main+0xd8>)
    1572:	799b      	ldrb	r3, [r3, #6]
    1574:	2b02      	cmp	r3, #2
    1576:	d0ec      	beq.n	1552 <main+0x66>
		cmd_generic *pressed_cmd = process_keypress();
    1578:	4b14      	ldr	r3, [pc, #80]	; (15cc <main+0xe0>)
    157a:	4798      	blx	r3
    157c:	1e04      	subs	r4, r0, #0
		if (pressed_cmd) {
    157e:	d0f1      	beq.n	1564 <main+0x78>
			gpio_set_pin(GPIO(BUSY_LED), 1);
    1580:	2201      	movs	r2, #1
    1582:	2117      	movs	r1, #23
    1584:	2001      	movs	r0, #1
    1586:	4d06      	ldr	r5, [pc, #24]	; (15a0 <main+0xb4>)
    1588:	47a8      	blx	r5
			exec_cmd(pressed_cmd);
    158a:	0020      	movs	r0, r4
    158c:	4b10      	ldr	r3, [pc, #64]	; (15d0 <main+0xe4>)
    158e:	4798      	blx	r3
			gpio_set_pin(GPIO(BUSY_LED), 0);
    1590:	2200      	movs	r2, #0
    1592:	2117      	movs	r1, #23
    1594:	2001      	movs	r0, #1
    1596:	47a8      	blx	r5
    1598:	e7e4      	b.n	1564 <main+0x78>
    159a:	46c0      	nop			; (mov r8, r8)
    159c:	00001169 	.word	0x00001169
    15a0:	00000621 	.word	0x00000621
    15a4:	0000020d 	.word	0x0000020d
    15a8:	000011b5 	.word	0x000011b5
    15ac:	000011a1 	.word	0x000011a1
    15b0:	00001609 	.word	0x00001609
    15b4:	e000e010 	.word	0xe000e010
    15b8:	000012bf 	.word	0x000012bf
    15bc:	e000ed00 	.word	0xe000ed00
    15c0:	20000f00 	.word	0x20000f00
    15c4:	200000a0 	.word	0x200000a0
    15c8:	000011e5 	.word	0x000011e5
    15cc:	00001389 	.word	0x00001389
    15d0:	0000149d 	.word	0x0000149d

000015d4 <NeoPixel_set_pixel>:
	ws2812_SPI_init();
}

/* set pixel color (pixel are numbered from 0 to NUM_PIXELS - 1) */
void NeoPixel_set_pixel(int pixel, uint8_t red, uint8_t green, uint8_t blue)
{
    15d4:	b510      	push	{r4, lr}
	if (pixel < 0 || pixel >= NUM_PIXELS)
    15d6:	2820      	cmp	r0, #32
    15d8:	d807      	bhi.n	15ea <NeoPixel_set_pixel+0x16>
		return;
	int n = pixel * 3;
    15da:	0044      	lsls	r4, r0, #1
    15dc:	1820      	adds	r0, r4, r0
	pixel_buffer[n] = green;
    15de:	4c03      	ldr	r4, [pc, #12]	; (15ec <NeoPixel_set_pixel+0x18>)
    15e0:	5422      	strb	r2, [r4, r0]
	pixel_buffer[n + 1] = red;
    15e2:	1c42      	adds	r2, r0, #1
    15e4:	54a1      	strb	r1, [r4, r2]
	pixel_buffer[n + 2] = blue; 
    15e6:	3002      	adds	r0, #2
    15e8:	5423      	strb	r3, [r4, r0]
}
    15ea:	bd10      	pop	{r4, pc}
    15ec:	20000820 	.word	0x20000820

000015f0 <NeoPixel_clear_pixels>:

/* all pixels off */
void NeoPixel_clear_pixels(void)
{
	for (int i = 0 ; i < NUM_PIXELS * 3 ; i++)
    15f0:	2300      	movs	r3, #0
    15f2:	e003      	b.n	15fc <NeoPixel_clear_pixels+0xc>
		pixel_buffer[i] = 0;
    15f4:	2100      	movs	r1, #0
    15f6:	4a03      	ldr	r2, [pc, #12]	; (1604 <NeoPixel_clear_pixels+0x14>)
    15f8:	54d1      	strb	r1, [r2, r3]
	for (int i = 0 ; i < NUM_PIXELS * 3 ; i++)
    15fa:	3301      	adds	r3, #1
    15fc:	2b62      	cmp	r3, #98	; 0x62
    15fe:	ddf9      	ble.n	15f4 <NeoPixel_clear_pixels+0x4>
}
    1600:	4770      	bx	lr
    1602:	46c0      	nop			; (mov r8, r8)
    1604:	20000820 	.word	0x20000820

00001608 <NeoPixel_init>:
{
    1608:	b500      	push	{lr}
    160a:	b085      	sub	sp, #20
	NeoPixel_clear_pixels();
    160c:	4b24      	ldr	r3, [pc, #144]	; (16a0 <NeoPixel_init+0x98>)
    160e:	4798      	blx	r3
	for (int i = 0 ; i < sizeof dma_buffer ; i++)
    1610:	2300      	movs	r3, #0
    1612:	e005      	b.n	1620 <NeoPixel_init+0x18>
		dma_buffer[i] = 0x00;
    1614:	4a23      	ldr	r2, [pc, #140]	; (16a4 <NeoPixel_init+0x9c>)
    1616:	18d2      	adds	r2, r2, r3
    1618:	2000      	movs	r0, #0
    161a:	2164      	movs	r1, #100	; 0x64
    161c:	5450      	strb	r0, [r2, r1]
	for (int i = 0 ; i < sizeof dma_buffer ; i++)
    161e:	3301      	adds	r3, #1
    1620:	22c1      	movs	r2, #193	; 0xc1
    1622:	0052      	lsls	r2, r2, #1
    1624:	4293      	cmp	r3, r2
    1626:	d9f5      	bls.n	1614 <NeoPixel_init+0xc>
	descriptor.DSTADDR.reg = (uint32_t)&SERCOM2->SPI.DATA;                // destination address is SPI DATA register
    1628:	4b1f      	ldr	r3, [pc, #124]	; (16a8 <NeoPixel_init+0xa0>)
    162a:	9302      	str	r3, [sp, #8]
	descriptor.SRCADDR.reg = (uint32_t)(dma_buffer + sizeof dma_buffer);  // source address is the DMA buffer
    162c:	4b1d      	ldr	r3, [pc, #116]	; (16a4 <NeoPixel_init+0x9c>)
    162e:	33e8      	adds	r3, #232	; 0xe8
    1630:	33ff      	adds	r3, #255	; 0xff
    1632:	9301      	str	r3, [sp, #4]
	descriptor.DESCADDR.reg = 0;                                          // only one transfer descriptor
    1634:	2300      	movs	r3, #0
    1636:	9303      	str	r3, [sp, #12]
	descriptor.BTCTRL.bit.BEATSIZE = DMAC_BTCTRL_BEATSIZE_BYTE_Val;       // beat size is one byte
    1638:	466b      	mov	r3, sp
    163a:	881b      	ldrh	r3, [r3, #0]
    163c:	4a1b      	ldr	r2, [pc, #108]	; (16ac <NeoPixel_init+0xa4>)
    163e:	4013      	ands	r3, r2
    1640:	466a      	mov	r2, sp
    1642:	8013      	strh	r3, [r2, #0]
	descriptor.BTCTRL.bit.DSTINC = 0;                                     // destination address increment disabled
    1644:	8813      	ldrh	r3, [r2, #0]
    1646:	4a1a      	ldr	r2, [pc, #104]	; (16b0 <NeoPixel_init+0xa8>)
    1648:	4013      	ands	r3, r2
    164a:	466a      	mov	r2, sp
    164c:	8013      	strh	r3, [r2, #0]
	descriptor.BTCTRL.bit.SRCINC = 1;                                     // source address increment enabled
    164e:	8812      	ldrh	r2, [r2, #0]
    1650:	2380      	movs	r3, #128	; 0x80
    1652:	00db      	lsls	r3, r3, #3
    1654:	4313      	orrs	r3, r2
    1656:	466a      	mov	r2, sp
    1658:	8013      	strh	r3, [r2, #0]
	descriptor.BTCTRL.bit.STEPSEL = DMAC_BTCTRL_STEPSEL_SRC_Val;          // flexible source address increment size
    165a:	8812      	ldrh	r2, [r2, #0]
    165c:	2380      	movs	r3, #128	; 0x80
    165e:	015b      	lsls	r3, r3, #5
    1660:	4313      	orrs	r3, r2
    1662:	466a      	mov	r2, sp
    1664:	8013      	strh	r3, [r2, #0]
	descriptor.BTCTRL.bit.STEPSIZE = DMAC_BTCTRL_STEPSIZE_X1_Val;         // source address increment is one byte
    1666:	8813      	ldrh	r3, [r2, #0]
    1668:	04db      	lsls	r3, r3, #19
    166a:	0cdb      	lsrs	r3, r3, #19
    166c:	8013      	strh	r3, [r2, #0]
	descriptor.BTCTRL.bit.BLOCKACT = DMAC_BTCTRL_BLOCKACT_NOACT_Val;      // request interrupt at end of block transfer
    166e:	8813      	ldrh	r3, [r2, #0]
    1670:	2218      	movs	r2, #24
    1672:	4393      	bics	r3, r2
    1674:	466a      	mov	r2, sp
    1676:	8013      	strh	r3, [r2, #0]
	descriptor.BTCNT.reg = sizeof dma_buffer;                             // beat count
    1678:	2384      	movs	r3, #132	; 0x84
    167a:	33ff      	adds	r3, #255	; 0xff
    167c:	8053      	strh	r3, [r2, #2]
	descriptor.BTCTRL.bit.VALID = 1;                                      // descriptor is valid
    167e:	8813      	ldrh	r3, [r2, #0]
    1680:	2201      	movs	r2, #1
    1682:	4313      	orrs	r3, r2
    1684:	466a      	mov	r2, sp
    1686:	8013      	strh	r3, [r2, #0]
	DMA_init();
    1688:	4b0a      	ldr	r3, [pc, #40]	; (16b4 <NeoPixel_init+0xac>)
    168a:	4798      	blx	r3
	DMA_add_channel(DMA_SOURCE_SERCOM2, &descriptor);
    168c:	4669      	mov	r1, sp
    168e:	2006      	movs	r0, #6
    1690:	4b09      	ldr	r3, [pc, #36]	; (16b8 <NeoPixel_init+0xb0>)
    1692:	4798      	blx	r3
	DMA_enable();
    1694:	4b09      	ldr	r3, [pc, #36]	; (16bc <NeoPixel_init+0xb4>)
    1696:	4798      	blx	r3
	ws2812_SPI_init();
    1698:	4b09      	ldr	r3, [pc, #36]	; (16c0 <NeoPixel_init+0xb8>)
    169a:	4798      	blx	r3
}
    169c:	b005      	add	sp, #20
    169e:	bd00      	pop	{pc}
    16a0:	000015f1 	.word	0x000015f1
    16a4:	20000820 	.word	0x20000820
    16a8:	42001028 	.word	0x42001028
    16ac:	fffffcff 	.word	0xfffffcff
    16b0:	fffff7ff 	.word	0xfffff7ff
    16b4:	000004b5 	.word	0x000004b5
    16b8:	00000519 	.word	0x00000519
    16bc:	000005b5 	.word	0x000005b5
    16c0:	00001701 	.word	0x00001701

000016c4 <NeoPixel_update>:
#endif


/* update DMA buffer */
void NeoPixel_update(void)
{
    16c4:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0, j = 0 ; i < sizeof pixel_buffer ; i++, j += 3)
    16c6:	2200      	movs	r2, #0
    16c8:	2100      	movs	r1, #0
    16ca:	e011      	b.n	16f0 <NeoPixel_update+0x2c>
	{
		#if USELUT
		uint32_t expanded = bit_expand[pixel_buffer[i]];
    16cc:	4b0a      	ldr	r3, [pc, #40]	; (16f8 <NeoPixel_update+0x34>)
    16ce:	5c58      	ldrb	r0, [r3, r1]
    16d0:	0080      	lsls	r0, r0, #2
    16d2:	4c0a      	ldr	r4, [pc, #40]	; (16fc <NeoPixel_update+0x38>)
    16d4:	5904      	ldr	r4, [r0, r4]
		for (int bit = 1; bit < 8; bit++) {
			expanded |= (pixel_buffer[i] & (1 << bit)) << (2 * bit + 1);
		}
		#endif

		dma_buffer[j] = expanded >> 16;
    16d6:	0c26      	lsrs	r6, r4, #16
    16d8:	2064      	movs	r0, #100	; 0x64
    16da:	189d      	adds	r5, r3, r2
    16dc:	542e      	strb	r6, [r5, r0]
		dma_buffer[j + 1] = expanded >> 8;
    16de:	1c55      	adds	r5, r2, #1
    16e0:	0a26      	lsrs	r6, r4, #8
    16e2:	195d      	adds	r5, r3, r5
    16e4:	542e      	strb	r6, [r5, r0]
		dma_buffer[j + 2] = expanded;
    16e6:	1c95      	adds	r5, r2, #2
    16e8:	195b      	adds	r3, r3, r5
    16ea:	541c      	strb	r4, [r3, r0]
	for (int i = 0, j = 0 ; i < sizeof pixel_buffer ; i++, j += 3)
    16ec:	3101      	adds	r1, #1
    16ee:	3203      	adds	r2, #3
    16f0:	2962      	cmp	r1, #98	; 0x62
    16f2:	d9eb      	bls.n	16cc <NeoPixel_update+0x8>
	}
}
    16f4:	bd70      	pop	{r4, r5, r6, pc}
    16f6:	46c0      	nop			; (mov r8, r8)
    16f8:	20000820 	.word	0x20000820
    16fc:	00002638 	.word	0x00002638

00001700 <ws2812_SPI_init>:
 * Based on code from Luca Davidian
 * http://www.lucadavidian.com/2018/03/08/wifi-controlled-neo-pixels-strips/
 */
void ws2812_SPI_init() {
	/* enable peripheral clock */
	PM->APBCMASK.bit.SERCOM2_ = 1;
    1700:	4a21      	ldr	r2, [pc, #132]	; (1788 <ws2812_SPI_init+0x88>)
    1702:	6a11      	ldr	r1, [r2, #32]
    1704:	2310      	movs	r3, #16
    1706:	430b      	orrs	r3, r1
    1708:	6213      	str	r3, [r2, #32]
	
	/* enable generic clock */
	GCLK->CLKCTRL.bit.ID = GCLK_CLKCTRL_ID_SERCOM2_CORE_Val;     // configure generic clock for SERCOM2
    170a:	4b20      	ldr	r3, [pc, #128]	; (178c <ws2812_SPI_init+0x8c>)
    170c:	885a      	ldrh	r2, [r3, #2]
    170e:	213f      	movs	r1, #63	; 0x3f
    1710:	438a      	bics	r2, r1
    1712:	2116      	movs	r1, #22
    1714:	430a      	orrs	r2, r1
    1716:	805a      	strh	r2, [r3, #2]
	
	GCLK->CLKCTRL.bit.GEN = GCLK_CLKCTRL_GEN_GCLK0_Val;          // source is generic clock generator 0 
    1718:	885a      	ldrh	r2, [r3, #2]
    171a:	491d      	ldr	r1, [pc, #116]	; (1790 <ws2812_SPI_init+0x90>)
    171c:	400a      	ands	r2, r1
    171e:	805a      	strh	r2, [r3, #2]
	GCLK->CLKCTRL.bit.CLKEN = 1;                                 // enable generic clock
    1720:	8859      	ldrh	r1, [r3, #2]
    1722:	2280      	movs	r2, #128	; 0x80
    1724:	01d2      	lsls	r2, r2, #7
    1726:	430a      	orrs	r2, r1
    1728:	805a      	strh	r2, [r3, #2]
	
	/* select GPIO pins alternative function */
	PORT->Group[BACKLIGHT_MOSI_PORT].PINCFG[BACKLIGHT_MOSI_PIN].bit.PMUXEN = 1;                // enable alternative function for pin
    172a:	4a1a      	ldr	r2, [pc, #104]	; (1794 <ws2812_SPI_init+0x94>)
    172c:	214c      	movs	r1, #76	; 0x4c
    172e:	5c53      	ldrb	r3, [r2, r1]
    1730:	2001      	movs	r0, #1
    1732:	4303      	orrs	r3, r0
    1734:	5453      	strb	r3, [r2, r1]
	PORT->Group[BACKLIGHT_MOSI_PORT].PMUX[BACKLIGHT_MOSI_PIN/2].bit.PMUXE = BACKLIGHT_MOSI_PMUX; // PMUX->SERCOM2
    1736:	3916      	subs	r1, #22
    1738:	5c53      	ldrb	r3, [r2, r1]
    173a:	200f      	movs	r0, #15
    173c:	4383      	bics	r3, r0
    173e:	2002      	movs	r0, #2
    1740:	4303      	orrs	r3, r0
    1742:	5453      	strb	r3, [r2, r1]
	
	/* configure peripheral */
	BACKLIGHT_SERCOM->SPI.CTRLA.bit.DOPO = BACKLIGHT_MOSI_PAD;            // MOSI on pad 0 (pin PA12)
    1744:	4b14      	ldr	r3, [pc, #80]	; (1798 <ws2812_SPI_init+0x98>)
    1746:	6819      	ldr	r1, [r3, #0]
    1748:	4a14      	ldr	r2, [pc, #80]	; (179c <ws2812_SPI_init+0x9c>)
    174a:	400a      	ands	r2, r1
    174c:	601a      	str	r2, [r3, #0]
	BACKLIGHT_SERCOM->SPI.CTRLA.bit.CPHA = 0x00;  
    174e:	6819      	ldr	r1, [r3, #0]
    1750:	4a13      	ldr	r2, [pc, #76]	; (17a0 <ws2812_SPI_init+0xa0>)
    1752:	400a      	ands	r2, r1
    1754:	601a      	str	r2, [r3, #0]
	BACKLIGHT_SERCOM->SPI.CTRLA.bit.CPOL = 0x00;                          // transfer mode 0
    1756:	6819      	ldr	r1, [r3, #0]
    1758:	4a12      	ldr	r2, [pc, #72]	; (17a4 <ws2812_SPI_init+0xa4>)
    175a:	400a      	ands	r2, r1
    175c:	601a      	str	r2, [r3, #0]
	BACKLIGHT_SERCOM->SPI.CTRLA.bit.DORD = 0x00;                          // MSB first
    175e:	6819      	ldr	r1, [r3, #0]
    1760:	4a11      	ldr	r2, [pc, #68]	; (17a8 <ws2812_SPI_init+0xa8>)
    1762:	400a      	ands	r2, r1
    1764:	601a      	str	r2, [r3, #0]
	BACKLIGHT_SERCOM->SPI.CTRLA.bit.MODE = 0x03;                          // SPI master operation
    1766:	6819      	ldr	r1, [r3, #0]
    1768:	221c      	movs	r2, #28
    176a:	4391      	bics	r1, r2
    176c:	3a10      	subs	r2, #16
    176e:	430a      	orrs	r2, r1
    1770:	601a      	str	r2, [r3, #0]
	BACKLIGHT_SERCOM->SPI.CTRLB.bit.CHSIZE = 0x00;                        // 8 bit character size
    1772:	6859      	ldr	r1, [r3, #4]
    1774:	2207      	movs	r2, #7
    1776:	4391      	bics	r1, r2
    1778:	6059      	str	r1, [r3, #4]
	BACKLIGHT_SERCOM->SPI.BAUD.reg = 9;                                   // SPI frequency 2.4 MHz (BAUD = gclk/(2*f_baud) - 1)
    177a:	2209      	movs	r2, #9
    177c:	731a      	strb	r2, [r3, #12]
	
	/* enable peripheral */
	SERCOM2->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    177e:	681a      	ldr	r2, [r3, #0]
    1780:	2102      	movs	r1, #2
    1782:	430a      	orrs	r2, r1
    1784:	601a      	str	r2, [r3, #0]
}
    1786:	4770      	bx	lr
    1788:	40000400 	.word	0x40000400
    178c:	40000c00 	.word	0x40000c00
    1790:	fffff0ff 	.word	0xfffff0ff
    1794:	41004400 	.word	0x41004400
    1798:	42001000 	.word	0x42001000
    179c:	fffcffff 	.word	0xfffcffff
    17a0:	efffffff 	.word	0xefffffff
    17a4:	dfffffff 	.word	0xdfffffff
    17a8:	bfffffff 	.word	0xbfffffff

000017ac <SSD_updateDisp>:
			}
		}
	}
}

void SSD_updateDisp() {
    17ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	gpio_set_pin(SSD_DIG0_PORT, SSD_DIG0_PIN, 1); // Active low, clear display to prevent ghosting
    17ae:	2201      	movs	r2, #1
    17b0:	2103      	movs	r1, #3
    17b2:	2001      	movs	r0, #1
    17b4:	4c46      	ldr	r4, [pc, #280]	; (18d0 <SSD_updateDisp+0x124>)
    17b6:	47a0      	blx	r4
	gpio_set_pin(SSD_DIG1_PORT, SSD_DIG1_PIN, 1);
    17b8:	2201      	movs	r2, #1
    17ba:	2102      	movs	r1, #2
    17bc:	2001      	movs	r0, #1
    17be:	47a0      	blx	r4
	gpio_set_pin(SSD_DIG2_PORT, SSD_DIG2_PIN, 1);
    17c0:	2201      	movs	r2, #1
    17c2:	2101      	movs	r1, #1
    17c4:	2001      	movs	r0, #1
    17c6:	47a0      	blx	r4
	gpio_set_pin(SSD_DIG3_PORT, SSD_DIG3_PIN, 1);
    17c8:	2201      	movs	r2, #1
    17ca:	2100      	movs	r1, #0
    17cc:	2001      	movs	r0, #1
    17ce:	47a0      	blx	r4

	gpio_set_pin(SSD_SEG_PORT, SSD_SEGA_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_A));
    17d0:	4d40      	ldr	r5, [pc, #256]	; (18d4 <SSD_updateDisp+0x128>)
    17d2:	682b      	ldr	r3, [r5, #0]
    17d4:	789a      	ldrb	r2, [r3, #2]
    17d6:	189b      	adds	r3, r3, r2
    17d8:	78da      	ldrb	r2, [r3, #3]
    17da:	2601      	movs	r6, #1
    17dc:	2701      	movs	r7, #1
    17de:	407a      	eors	r2, r7
    17e0:	4032      	ands	r2, r6
    17e2:	2110      	movs	r1, #16
    17e4:	2000      	movs	r0, #0
    17e6:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGB_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_B));
    17e8:	682b      	ldr	r3, [r5, #0]
    17ea:	789a      	ldrb	r2, [r3, #2]
    17ec:	189b      	adds	r3, r3, r2
    17ee:	78da      	ldrb	r2, [r3, #3]
    17f0:	0852      	lsrs	r2, r2, #1
    17f2:	407a      	eors	r2, r7
    17f4:	4032      	ands	r2, r6
    17f6:	2111      	movs	r1, #17
    17f8:	2000      	movs	r0, #0
    17fa:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGC_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_C));
    17fc:	682b      	ldr	r3, [r5, #0]
    17fe:	789a      	ldrb	r2, [r3, #2]
    1800:	189b      	adds	r3, r3, r2
    1802:	78da      	ldrb	r2, [r3, #3]
    1804:	0892      	lsrs	r2, r2, #2
    1806:	407a      	eors	r2, r7
    1808:	4032      	ands	r2, r6
    180a:	2112      	movs	r1, #18
    180c:	2000      	movs	r0, #0
    180e:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGD_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_D));
    1810:	682b      	ldr	r3, [r5, #0]
    1812:	789a      	ldrb	r2, [r3, #2]
    1814:	189b      	adds	r3, r3, r2
    1816:	78da      	ldrb	r2, [r3, #3]
    1818:	08d2      	lsrs	r2, r2, #3
    181a:	407a      	eors	r2, r7
    181c:	4032      	ands	r2, r6
    181e:	2113      	movs	r1, #19
    1820:	2000      	movs	r0, #0
    1822:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGE_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_E));
    1824:	682b      	ldr	r3, [r5, #0]
    1826:	789a      	ldrb	r2, [r3, #2]
    1828:	189b      	adds	r3, r3, r2
    182a:	78da      	ldrb	r2, [r3, #3]
    182c:	0912      	lsrs	r2, r2, #4
    182e:	407a      	eors	r2, r7
    1830:	4032      	ands	r2, r6
    1832:	2115      	movs	r1, #21
    1834:	2000      	movs	r0, #0
    1836:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGF_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_F));
    1838:	682b      	ldr	r3, [r5, #0]
    183a:	789a      	ldrb	r2, [r3, #2]
    183c:	189b      	adds	r3, r3, r2
    183e:	78da      	ldrb	r2, [r3, #3]
    1840:	0952      	lsrs	r2, r2, #5
    1842:	407a      	eors	r2, r7
    1844:	4032      	ands	r2, r6
    1846:	210f      	movs	r1, #15
    1848:	2000      	movs	r0, #0
    184a:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGG_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_G));
    184c:	682b      	ldr	r3, [r5, #0]
    184e:	789a      	ldrb	r2, [r3, #2]
    1850:	189b      	adds	r3, r3, r2
    1852:	78da      	ldrb	r2, [r3, #3]
    1854:	0992      	lsrs	r2, r2, #6
    1856:	407a      	eors	r2, r7
    1858:	4032      	ands	r2, r6
    185a:	2116      	movs	r1, #22
    185c:	2000      	movs	r0, #0
    185e:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGDP_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_DP));
    1860:	682b      	ldr	r3, [r5, #0]
    1862:	789a      	ldrb	r2, [r3, #2]
    1864:	189b      	adds	r3, r3, r2
    1866:	78da      	ldrb	r2, [r3, #3]
    1868:	b252      	sxtb	r2, r2
    186a:	43d2      	mvns	r2, r2
    186c:	0fd2      	lsrs	r2, r2, #31
    186e:	2117      	movs	r1, #23
    1870:	2000      	movs	r0, #0
    1872:	47a0      	blx	r4

	gpio_set_pin(SSD_DIG0_PORT, SSD_DIG0_PIN, ssd->currentDig != 0); // Active low
    1874:	682b      	ldr	r3, [r5, #0]
    1876:	789a      	ldrb	r2, [r3, #2]
    1878:	1e53      	subs	r3, r2, #1
    187a:	419a      	sbcs	r2, r3
    187c:	2103      	movs	r1, #3
    187e:	2001      	movs	r0, #1
    1880:	47a0      	blx	r4
	gpio_set_pin(SSD_DIG1_PORT, SSD_DIG1_PIN, ssd->currentDig != 1);
    1882:	682b      	ldr	r3, [r5, #0]
    1884:	789a      	ldrb	r2, [r3, #2]
    1886:	3a01      	subs	r2, #1
    1888:	1e53      	subs	r3, r2, #1
    188a:	419a      	sbcs	r2, r3
    188c:	2102      	movs	r1, #2
    188e:	2001      	movs	r0, #1
    1890:	47a0      	blx	r4
	gpio_set_pin(SSD_DIG2_PORT, SSD_DIG2_PIN, ssd->currentDig != 2);
    1892:	682b      	ldr	r3, [r5, #0]
    1894:	789a      	ldrb	r2, [r3, #2]
    1896:	3a02      	subs	r2, #2
    1898:	1e53      	subs	r3, r2, #1
    189a:	419a      	sbcs	r2, r3
    189c:	2101      	movs	r1, #1
    189e:	2001      	movs	r0, #1
    18a0:	47a0      	blx	r4
	gpio_set_pin(SSD_DIG3_PORT, SSD_DIG3_PIN, ssd->currentDig != 3);
    18a2:	682b      	ldr	r3, [r5, #0]
    18a4:	789a      	ldrb	r2, [r3, #2]
    18a6:	3a03      	subs	r2, #3
    18a8:	1e53      	subs	r3, r2, #1
    18aa:	419a      	sbcs	r2, r3
    18ac:	2100      	movs	r1, #0
    18ae:	2001      	movs	r0, #1
    18b0:	47a0      	blx	r4
	ssd->currentDig++;
    18b2:	682a      	ldr	r2, [r5, #0]
    18b4:	7893      	ldrb	r3, [r2, #2]
    18b6:	3301      	adds	r3, #1
    18b8:	b2db      	uxtb	r3, r3
    18ba:	7093      	strb	r3, [r2, #2]
	if (ssd->currentDig >= DISP_SIZE + ssd->blankInterval) {
    18bc:	7891      	ldrb	r1, [r2, #2]
    18be:	b2c9      	uxtb	r1, r1
    18c0:	8913      	ldrh	r3, [r2, #8]
    18c2:	3304      	adds	r3, #4
    18c4:	4299      	cmp	r1, r3
    18c6:	db01      	blt.n	18cc <SSD_updateDisp+0x120>
		ssd->currentDig = 0;
    18c8:	2300      	movs	r3, #0
    18ca:	7093      	strb	r3, [r2, #2]
	}
}
    18cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18ce:	46c0      	nop			; (mov r8, r8)
    18d0:	00000621 	.word	0x00000621
    18d4:	20000a08 	.word	0x20000a08

000018d8 <SSDgpioInit>:
void SSD_setBrightness(int brightness) {
	
}


void SSDgpioInit() {
    18d8:	b570      	push	{r4, r5, r6, lr}
	gpio_set_pin_dir(SSD_DIG0_PORT, SSD_DIG0_PIN, GPIO_DIR_OUT); // Active low
    18da:	2201      	movs	r2, #1
    18dc:	2103      	movs	r1, #3
    18de:	2001      	movs	r0, #1
    18e0:	4c27      	ldr	r4, [pc, #156]	; (1980 <SSDgpioInit+0xa8>)
    18e2:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_DIG1_PORT, SSD_DIG1_PIN, GPIO_DIR_OUT);
    18e4:	2201      	movs	r2, #1
    18e6:	2102      	movs	r1, #2
    18e8:	2001      	movs	r0, #1
    18ea:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_DIG2_PORT, SSD_DIG2_PIN, GPIO_DIR_OUT);
    18ec:	2201      	movs	r2, #1
    18ee:	2101      	movs	r1, #1
    18f0:	2001      	movs	r0, #1
    18f2:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_DIG3_PORT, SSD_DIG3_PIN, GPIO_DIR_OUT);
    18f4:	2201      	movs	r2, #1
    18f6:	2100      	movs	r1, #0
    18f8:	2001      	movs	r0, #1
    18fa:	47a0      	blx	r4
	
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGA_PIN, 1);
    18fc:	2201      	movs	r2, #1
    18fe:	2110      	movs	r1, #16
    1900:	2000      	movs	r0, #0
    1902:	4d20      	ldr	r5, [pc, #128]	; (1984 <SSDgpioInit+0xac>)
    1904:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGB_PIN, 1);
    1906:	2201      	movs	r2, #1
    1908:	2111      	movs	r1, #17
    190a:	2000      	movs	r0, #0
    190c:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGC_PIN, 1);
    190e:	2201      	movs	r2, #1
    1910:	2112      	movs	r1, #18
    1912:	2000      	movs	r0, #0
    1914:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGD_PIN, 1);
    1916:	2201      	movs	r2, #1
    1918:	2113      	movs	r1, #19
    191a:	2000      	movs	r0, #0
    191c:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGE_PIN, 1);
    191e:	2201      	movs	r2, #1
    1920:	2115      	movs	r1, #21
    1922:	2000      	movs	r0, #0
    1924:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGF_PIN, 1);
    1926:	2201      	movs	r2, #1
    1928:	210f      	movs	r1, #15
    192a:	2000      	movs	r0, #0
    192c:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGG_PIN, 1);
    192e:	2201      	movs	r2, #1
    1930:	2116      	movs	r1, #22
    1932:	2000      	movs	r0, #0
    1934:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGDP_PIN, 1);
    1936:	2201      	movs	r2, #1
    1938:	2117      	movs	r1, #23
    193a:	2000      	movs	r0, #0
    193c:	47a8      	blx	r5

	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGA_PIN, GPIO_DIR_OUT);
    193e:	2201      	movs	r2, #1
    1940:	2110      	movs	r1, #16
    1942:	2000      	movs	r0, #0
    1944:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGB_PIN, GPIO_DIR_OUT);
    1946:	2201      	movs	r2, #1
    1948:	2111      	movs	r1, #17
    194a:	2000      	movs	r0, #0
    194c:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGC_PIN, GPIO_DIR_OUT);
    194e:	2201      	movs	r2, #1
    1950:	2112      	movs	r1, #18
    1952:	2000      	movs	r0, #0
    1954:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGD_PIN, GPIO_DIR_OUT);
    1956:	2201      	movs	r2, #1
    1958:	2113      	movs	r1, #19
    195a:	2000      	movs	r0, #0
    195c:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGE_PIN, GPIO_DIR_OUT);
    195e:	2201      	movs	r2, #1
    1960:	2115      	movs	r1, #21
    1962:	2000      	movs	r0, #0
    1964:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGF_PIN, GPIO_DIR_OUT);
    1966:	2201      	movs	r2, #1
    1968:	210f      	movs	r1, #15
    196a:	2000      	movs	r0, #0
    196c:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGG_PIN, GPIO_DIR_OUT);
    196e:	2201      	movs	r2, #1
    1970:	2116      	movs	r1, #22
    1972:	2000      	movs	r0, #0
    1974:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGDP_PIN, GPIO_DIR_OUT);
    1976:	2201      	movs	r2, #1
    1978:	2117      	movs	r1, #23
    197a:	2000      	movs	r0, #0
    197c:	47a0      	blx	r4
}
    197e:	bd70      	pop	{r4, r5, r6, pc}
    1980:	0000066d 	.word	0x0000066d
    1984:	00000709 	.word	0x00000709

00001988 <SSD_init>:

void SSD_init(SSDisplay* disp_status) {
    1988:	b510      	push	{r4, lr}
	ssd = disp_status;
    198a:	4b09      	ldr	r3, [pc, #36]	; (19b0 <SSD_init+0x28>)
    198c:	6018      	str	r0, [r3, #0]
	ssd->update_period_ticks = 16;
    198e:	2310      	movs	r3, #16
    1990:	8003      	strh	r3, [r0, #0]
	ssd->currentDig = 0;
    1992:	2300      	movs	r3, #0
    1994:	7083      	strb	r3, [r0, #2]
	for (int i = 0; i < DISP_SIZE; i++) {
    1996:	e003      	b.n	19a0 <SSD_init+0x18>
		ssd->currentData[i] = 0;
    1998:	18c2      	adds	r2, r0, r3
    199a:	2100      	movs	r1, #0
    199c:	70d1      	strb	r1, [r2, #3]
	for (int i = 0; i < DISP_SIZE; i++) {
    199e:	3301      	adds	r3, #1
    19a0:	2b03      	cmp	r3, #3
    19a2:	ddf9      	ble.n	1998 <SSD_init+0x10>
	}
	ssd->blankInterval = 0;
    19a4:	2300      	movs	r3, #0
    19a6:	8103      	strh	r3, [r0, #8]
	SSDgpioInit();
    19a8:	4b02      	ldr	r3, [pc, #8]	; (19b4 <SSD_init+0x2c>)
    19aa:	4798      	blx	r3
}
    19ac:	bd10      	pop	{r4, pc}
    19ae:	46c0      	nop			; (mov r8, r8)
    19b0:	20000a08 	.word	0x20000a08
    19b4:	000018d9 	.word	0x000018d9

000019b8 <__divsi3>:
    19b8:	4603      	mov	r3, r0
    19ba:	430b      	orrs	r3, r1
    19bc:	d47f      	bmi.n	1abe <__divsi3+0x106>
    19be:	2200      	movs	r2, #0
    19c0:	0843      	lsrs	r3, r0, #1
    19c2:	428b      	cmp	r3, r1
    19c4:	d374      	bcc.n	1ab0 <__divsi3+0xf8>
    19c6:	0903      	lsrs	r3, r0, #4
    19c8:	428b      	cmp	r3, r1
    19ca:	d35f      	bcc.n	1a8c <__divsi3+0xd4>
    19cc:	0a03      	lsrs	r3, r0, #8
    19ce:	428b      	cmp	r3, r1
    19d0:	d344      	bcc.n	1a5c <__divsi3+0xa4>
    19d2:	0b03      	lsrs	r3, r0, #12
    19d4:	428b      	cmp	r3, r1
    19d6:	d328      	bcc.n	1a2a <__divsi3+0x72>
    19d8:	0c03      	lsrs	r3, r0, #16
    19da:	428b      	cmp	r3, r1
    19dc:	d30d      	bcc.n	19fa <__divsi3+0x42>
    19de:	22ff      	movs	r2, #255	; 0xff
    19e0:	0209      	lsls	r1, r1, #8
    19e2:	ba12      	rev	r2, r2
    19e4:	0c03      	lsrs	r3, r0, #16
    19e6:	428b      	cmp	r3, r1
    19e8:	d302      	bcc.n	19f0 <__divsi3+0x38>
    19ea:	1212      	asrs	r2, r2, #8
    19ec:	0209      	lsls	r1, r1, #8
    19ee:	d065      	beq.n	1abc <__divsi3+0x104>
    19f0:	0b03      	lsrs	r3, r0, #12
    19f2:	428b      	cmp	r3, r1
    19f4:	d319      	bcc.n	1a2a <__divsi3+0x72>
    19f6:	e000      	b.n	19fa <__divsi3+0x42>
    19f8:	0a09      	lsrs	r1, r1, #8
    19fa:	0bc3      	lsrs	r3, r0, #15
    19fc:	428b      	cmp	r3, r1
    19fe:	d301      	bcc.n	1a04 <__divsi3+0x4c>
    1a00:	03cb      	lsls	r3, r1, #15
    1a02:	1ac0      	subs	r0, r0, r3
    1a04:	4152      	adcs	r2, r2
    1a06:	0b83      	lsrs	r3, r0, #14
    1a08:	428b      	cmp	r3, r1
    1a0a:	d301      	bcc.n	1a10 <__divsi3+0x58>
    1a0c:	038b      	lsls	r3, r1, #14
    1a0e:	1ac0      	subs	r0, r0, r3
    1a10:	4152      	adcs	r2, r2
    1a12:	0b43      	lsrs	r3, r0, #13
    1a14:	428b      	cmp	r3, r1
    1a16:	d301      	bcc.n	1a1c <__divsi3+0x64>
    1a18:	034b      	lsls	r3, r1, #13
    1a1a:	1ac0      	subs	r0, r0, r3
    1a1c:	4152      	adcs	r2, r2
    1a1e:	0b03      	lsrs	r3, r0, #12
    1a20:	428b      	cmp	r3, r1
    1a22:	d301      	bcc.n	1a28 <__divsi3+0x70>
    1a24:	030b      	lsls	r3, r1, #12
    1a26:	1ac0      	subs	r0, r0, r3
    1a28:	4152      	adcs	r2, r2
    1a2a:	0ac3      	lsrs	r3, r0, #11
    1a2c:	428b      	cmp	r3, r1
    1a2e:	d301      	bcc.n	1a34 <__divsi3+0x7c>
    1a30:	02cb      	lsls	r3, r1, #11
    1a32:	1ac0      	subs	r0, r0, r3
    1a34:	4152      	adcs	r2, r2
    1a36:	0a83      	lsrs	r3, r0, #10
    1a38:	428b      	cmp	r3, r1
    1a3a:	d301      	bcc.n	1a40 <__divsi3+0x88>
    1a3c:	028b      	lsls	r3, r1, #10
    1a3e:	1ac0      	subs	r0, r0, r3
    1a40:	4152      	adcs	r2, r2
    1a42:	0a43      	lsrs	r3, r0, #9
    1a44:	428b      	cmp	r3, r1
    1a46:	d301      	bcc.n	1a4c <__divsi3+0x94>
    1a48:	024b      	lsls	r3, r1, #9
    1a4a:	1ac0      	subs	r0, r0, r3
    1a4c:	4152      	adcs	r2, r2
    1a4e:	0a03      	lsrs	r3, r0, #8
    1a50:	428b      	cmp	r3, r1
    1a52:	d301      	bcc.n	1a58 <__divsi3+0xa0>
    1a54:	020b      	lsls	r3, r1, #8
    1a56:	1ac0      	subs	r0, r0, r3
    1a58:	4152      	adcs	r2, r2
    1a5a:	d2cd      	bcs.n	19f8 <__divsi3+0x40>
    1a5c:	09c3      	lsrs	r3, r0, #7
    1a5e:	428b      	cmp	r3, r1
    1a60:	d301      	bcc.n	1a66 <__divsi3+0xae>
    1a62:	01cb      	lsls	r3, r1, #7
    1a64:	1ac0      	subs	r0, r0, r3
    1a66:	4152      	adcs	r2, r2
    1a68:	0983      	lsrs	r3, r0, #6
    1a6a:	428b      	cmp	r3, r1
    1a6c:	d301      	bcc.n	1a72 <__divsi3+0xba>
    1a6e:	018b      	lsls	r3, r1, #6
    1a70:	1ac0      	subs	r0, r0, r3
    1a72:	4152      	adcs	r2, r2
    1a74:	0943      	lsrs	r3, r0, #5
    1a76:	428b      	cmp	r3, r1
    1a78:	d301      	bcc.n	1a7e <__divsi3+0xc6>
    1a7a:	014b      	lsls	r3, r1, #5
    1a7c:	1ac0      	subs	r0, r0, r3
    1a7e:	4152      	adcs	r2, r2
    1a80:	0903      	lsrs	r3, r0, #4
    1a82:	428b      	cmp	r3, r1
    1a84:	d301      	bcc.n	1a8a <__divsi3+0xd2>
    1a86:	010b      	lsls	r3, r1, #4
    1a88:	1ac0      	subs	r0, r0, r3
    1a8a:	4152      	adcs	r2, r2
    1a8c:	08c3      	lsrs	r3, r0, #3
    1a8e:	428b      	cmp	r3, r1
    1a90:	d301      	bcc.n	1a96 <__divsi3+0xde>
    1a92:	00cb      	lsls	r3, r1, #3
    1a94:	1ac0      	subs	r0, r0, r3
    1a96:	4152      	adcs	r2, r2
    1a98:	0883      	lsrs	r3, r0, #2
    1a9a:	428b      	cmp	r3, r1
    1a9c:	d301      	bcc.n	1aa2 <__divsi3+0xea>
    1a9e:	008b      	lsls	r3, r1, #2
    1aa0:	1ac0      	subs	r0, r0, r3
    1aa2:	4152      	adcs	r2, r2
    1aa4:	0843      	lsrs	r3, r0, #1
    1aa6:	428b      	cmp	r3, r1
    1aa8:	d301      	bcc.n	1aae <__divsi3+0xf6>
    1aaa:	004b      	lsls	r3, r1, #1
    1aac:	1ac0      	subs	r0, r0, r3
    1aae:	4152      	adcs	r2, r2
    1ab0:	1a41      	subs	r1, r0, r1
    1ab2:	d200      	bcs.n	1ab6 <__divsi3+0xfe>
    1ab4:	4601      	mov	r1, r0
    1ab6:	4152      	adcs	r2, r2
    1ab8:	4610      	mov	r0, r2
    1aba:	4770      	bx	lr
    1abc:	e05d      	b.n	1b7a <__divsi3+0x1c2>
    1abe:	0fca      	lsrs	r2, r1, #31
    1ac0:	d000      	beq.n	1ac4 <__divsi3+0x10c>
    1ac2:	4249      	negs	r1, r1
    1ac4:	1003      	asrs	r3, r0, #32
    1ac6:	d300      	bcc.n	1aca <__divsi3+0x112>
    1ac8:	4240      	negs	r0, r0
    1aca:	4053      	eors	r3, r2
    1acc:	2200      	movs	r2, #0
    1ace:	469c      	mov	ip, r3
    1ad0:	0903      	lsrs	r3, r0, #4
    1ad2:	428b      	cmp	r3, r1
    1ad4:	d32d      	bcc.n	1b32 <__divsi3+0x17a>
    1ad6:	0a03      	lsrs	r3, r0, #8
    1ad8:	428b      	cmp	r3, r1
    1ada:	d312      	bcc.n	1b02 <__divsi3+0x14a>
    1adc:	22fc      	movs	r2, #252	; 0xfc
    1ade:	0189      	lsls	r1, r1, #6
    1ae0:	ba12      	rev	r2, r2
    1ae2:	0a03      	lsrs	r3, r0, #8
    1ae4:	428b      	cmp	r3, r1
    1ae6:	d30c      	bcc.n	1b02 <__divsi3+0x14a>
    1ae8:	0189      	lsls	r1, r1, #6
    1aea:	1192      	asrs	r2, r2, #6
    1aec:	428b      	cmp	r3, r1
    1aee:	d308      	bcc.n	1b02 <__divsi3+0x14a>
    1af0:	0189      	lsls	r1, r1, #6
    1af2:	1192      	asrs	r2, r2, #6
    1af4:	428b      	cmp	r3, r1
    1af6:	d304      	bcc.n	1b02 <__divsi3+0x14a>
    1af8:	0189      	lsls	r1, r1, #6
    1afa:	d03a      	beq.n	1b72 <__divsi3+0x1ba>
    1afc:	1192      	asrs	r2, r2, #6
    1afe:	e000      	b.n	1b02 <__divsi3+0x14a>
    1b00:	0989      	lsrs	r1, r1, #6
    1b02:	09c3      	lsrs	r3, r0, #7
    1b04:	428b      	cmp	r3, r1
    1b06:	d301      	bcc.n	1b0c <__divsi3+0x154>
    1b08:	01cb      	lsls	r3, r1, #7
    1b0a:	1ac0      	subs	r0, r0, r3
    1b0c:	4152      	adcs	r2, r2
    1b0e:	0983      	lsrs	r3, r0, #6
    1b10:	428b      	cmp	r3, r1
    1b12:	d301      	bcc.n	1b18 <__divsi3+0x160>
    1b14:	018b      	lsls	r3, r1, #6
    1b16:	1ac0      	subs	r0, r0, r3
    1b18:	4152      	adcs	r2, r2
    1b1a:	0943      	lsrs	r3, r0, #5
    1b1c:	428b      	cmp	r3, r1
    1b1e:	d301      	bcc.n	1b24 <__divsi3+0x16c>
    1b20:	014b      	lsls	r3, r1, #5
    1b22:	1ac0      	subs	r0, r0, r3
    1b24:	4152      	adcs	r2, r2
    1b26:	0903      	lsrs	r3, r0, #4
    1b28:	428b      	cmp	r3, r1
    1b2a:	d301      	bcc.n	1b30 <__divsi3+0x178>
    1b2c:	010b      	lsls	r3, r1, #4
    1b2e:	1ac0      	subs	r0, r0, r3
    1b30:	4152      	adcs	r2, r2
    1b32:	08c3      	lsrs	r3, r0, #3
    1b34:	428b      	cmp	r3, r1
    1b36:	d301      	bcc.n	1b3c <__divsi3+0x184>
    1b38:	00cb      	lsls	r3, r1, #3
    1b3a:	1ac0      	subs	r0, r0, r3
    1b3c:	4152      	adcs	r2, r2
    1b3e:	0883      	lsrs	r3, r0, #2
    1b40:	428b      	cmp	r3, r1
    1b42:	d301      	bcc.n	1b48 <__divsi3+0x190>
    1b44:	008b      	lsls	r3, r1, #2
    1b46:	1ac0      	subs	r0, r0, r3
    1b48:	4152      	adcs	r2, r2
    1b4a:	d2d9      	bcs.n	1b00 <__divsi3+0x148>
    1b4c:	0843      	lsrs	r3, r0, #1
    1b4e:	428b      	cmp	r3, r1
    1b50:	d301      	bcc.n	1b56 <__divsi3+0x19e>
    1b52:	004b      	lsls	r3, r1, #1
    1b54:	1ac0      	subs	r0, r0, r3
    1b56:	4152      	adcs	r2, r2
    1b58:	1a41      	subs	r1, r0, r1
    1b5a:	d200      	bcs.n	1b5e <__divsi3+0x1a6>
    1b5c:	4601      	mov	r1, r0
    1b5e:	4663      	mov	r3, ip
    1b60:	4152      	adcs	r2, r2
    1b62:	105b      	asrs	r3, r3, #1
    1b64:	4610      	mov	r0, r2
    1b66:	d301      	bcc.n	1b6c <__divsi3+0x1b4>
    1b68:	4240      	negs	r0, r0
    1b6a:	2b00      	cmp	r3, #0
    1b6c:	d500      	bpl.n	1b70 <__divsi3+0x1b8>
    1b6e:	4249      	negs	r1, r1
    1b70:	4770      	bx	lr
    1b72:	4663      	mov	r3, ip
    1b74:	105b      	asrs	r3, r3, #1
    1b76:	d300      	bcc.n	1b7a <__divsi3+0x1c2>
    1b78:	4240      	negs	r0, r0
    1b7a:	b501      	push	{r0, lr}
    1b7c:	2000      	movs	r0, #0
    1b7e:	f000 f805 	bl	1b8c <__aeabi_idiv0>
    1b82:	bd02      	pop	{r1, pc}

00001b84 <__aeabi_idivmod>:
    1b84:	2900      	cmp	r1, #0
    1b86:	d0f8      	beq.n	1b7a <__divsi3+0x1c2>
    1b88:	e716      	b.n	19b8 <__divsi3>
    1b8a:	4770      	bx	lr

00001b8c <__aeabi_idiv0>:
    1b8c:	4770      	bx	lr
    1b8e:	46c0      	nop			; (mov r8, r8)

00001b90 <__aeabi_dadd>:
    1b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b92:	4645      	mov	r5, r8
    1b94:	46de      	mov	lr, fp
    1b96:	4657      	mov	r7, sl
    1b98:	464e      	mov	r6, r9
    1b9a:	030c      	lsls	r4, r1, #12
    1b9c:	b5e0      	push	{r5, r6, r7, lr}
    1b9e:	004e      	lsls	r6, r1, #1
    1ba0:	0fc9      	lsrs	r1, r1, #31
    1ba2:	4688      	mov	r8, r1
    1ba4:	000d      	movs	r5, r1
    1ba6:	0a61      	lsrs	r1, r4, #9
    1ba8:	0f44      	lsrs	r4, r0, #29
    1baa:	430c      	orrs	r4, r1
    1bac:	00c7      	lsls	r7, r0, #3
    1bae:	0319      	lsls	r1, r3, #12
    1bb0:	0058      	lsls	r0, r3, #1
    1bb2:	0fdb      	lsrs	r3, r3, #31
    1bb4:	469b      	mov	fp, r3
    1bb6:	0a4b      	lsrs	r3, r1, #9
    1bb8:	0f51      	lsrs	r1, r2, #29
    1bba:	430b      	orrs	r3, r1
    1bbc:	0d76      	lsrs	r6, r6, #21
    1bbe:	0d40      	lsrs	r0, r0, #21
    1bc0:	0019      	movs	r1, r3
    1bc2:	00d2      	lsls	r2, r2, #3
    1bc4:	45d8      	cmp	r8, fp
    1bc6:	d100      	bne.n	1bca <__aeabi_dadd+0x3a>
    1bc8:	e0ae      	b.n	1d28 <__aeabi_dadd+0x198>
    1bca:	1a35      	subs	r5, r6, r0
    1bcc:	2d00      	cmp	r5, #0
    1bce:	dc00      	bgt.n	1bd2 <__aeabi_dadd+0x42>
    1bd0:	e0f6      	b.n	1dc0 <__aeabi_dadd+0x230>
    1bd2:	2800      	cmp	r0, #0
    1bd4:	d10f      	bne.n	1bf6 <__aeabi_dadd+0x66>
    1bd6:	4313      	orrs	r3, r2
    1bd8:	d100      	bne.n	1bdc <__aeabi_dadd+0x4c>
    1bda:	e0db      	b.n	1d94 <__aeabi_dadd+0x204>
    1bdc:	1e6b      	subs	r3, r5, #1
    1bde:	2b00      	cmp	r3, #0
    1be0:	d000      	beq.n	1be4 <__aeabi_dadd+0x54>
    1be2:	e137      	b.n	1e54 <__aeabi_dadd+0x2c4>
    1be4:	1aba      	subs	r2, r7, r2
    1be6:	4297      	cmp	r7, r2
    1be8:	41bf      	sbcs	r7, r7
    1bea:	1a64      	subs	r4, r4, r1
    1bec:	427f      	negs	r7, r7
    1bee:	1be4      	subs	r4, r4, r7
    1bf0:	2601      	movs	r6, #1
    1bf2:	0017      	movs	r7, r2
    1bf4:	e024      	b.n	1c40 <__aeabi_dadd+0xb0>
    1bf6:	4bc6      	ldr	r3, [pc, #792]	; (1f10 <__aeabi_dadd+0x380>)
    1bf8:	429e      	cmp	r6, r3
    1bfa:	d04d      	beq.n	1c98 <__aeabi_dadd+0x108>
    1bfc:	2380      	movs	r3, #128	; 0x80
    1bfe:	041b      	lsls	r3, r3, #16
    1c00:	4319      	orrs	r1, r3
    1c02:	2d38      	cmp	r5, #56	; 0x38
    1c04:	dd00      	ble.n	1c08 <__aeabi_dadd+0x78>
    1c06:	e107      	b.n	1e18 <__aeabi_dadd+0x288>
    1c08:	2d1f      	cmp	r5, #31
    1c0a:	dd00      	ble.n	1c0e <__aeabi_dadd+0x7e>
    1c0c:	e138      	b.n	1e80 <__aeabi_dadd+0x2f0>
    1c0e:	2020      	movs	r0, #32
    1c10:	1b43      	subs	r3, r0, r5
    1c12:	469a      	mov	sl, r3
    1c14:	000b      	movs	r3, r1
    1c16:	4650      	mov	r0, sl
    1c18:	4083      	lsls	r3, r0
    1c1a:	4699      	mov	r9, r3
    1c1c:	0013      	movs	r3, r2
    1c1e:	4648      	mov	r0, r9
    1c20:	40eb      	lsrs	r3, r5
    1c22:	4318      	orrs	r0, r3
    1c24:	0003      	movs	r3, r0
    1c26:	4650      	mov	r0, sl
    1c28:	4082      	lsls	r2, r0
    1c2a:	1e50      	subs	r0, r2, #1
    1c2c:	4182      	sbcs	r2, r0
    1c2e:	40e9      	lsrs	r1, r5
    1c30:	431a      	orrs	r2, r3
    1c32:	1aba      	subs	r2, r7, r2
    1c34:	1a61      	subs	r1, r4, r1
    1c36:	4297      	cmp	r7, r2
    1c38:	41a4      	sbcs	r4, r4
    1c3a:	0017      	movs	r7, r2
    1c3c:	4264      	negs	r4, r4
    1c3e:	1b0c      	subs	r4, r1, r4
    1c40:	0223      	lsls	r3, r4, #8
    1c42:	d562      	bpl.n	1d0a <__aeabi_dadd+0x17a>
    1c44:	0264      	lsls	r4, r4, #9
    1c46:	0a65      	lsrs	r5, r4, #9
    1c48:	2d00      	cmp	r5, #0
    1c4a:	d100      	bne.n	1c4e <__aeabi_dadd+0xbe>
    1c4c:	e0df      	b.n	1e0e <__aeabi_dadd+0x27e>
    1c4e:	0028      	movs	r0, r5
    1c50:	f000 faae 	bl	21b0 <__clzsi2>
    1c54:	0003      	movs	r3, r0
    1c56:	3b08      	subs	r3, #8
    1c58:	2b1f      	cmp	r3, #31
    1c5a:	dd00      	ble.n	1c5e <__aeabi_dadd+0xce>
    1c5c:	e0d2      	b.n	1e04 <__aeabi_dadd+0x274>
    1c5e:	2220      	movs	r2, #32
    1c60:	003c      	movs	r4, r7
    1c62:	1ad2      	subs	r2, r2, r3
    1c64:	409d      	lsls	r5, r3
    1c66:	40d4      	lsrs	r4, r2
    1c68:	409f      	lsls	r7, r3
    1c6a:	4325      	orrs	r5, r4
    1c6c:	429e      	cmp	r6, r3
    1c6e:	dd00      	ble.n	1c72 <__aeabi_dadd+0xe2>
    1c70:	e0c4      	b.n	1dfc <__aeabi_dadd+0x26c>
    1c72:	1b9e      	subs	r6, r3, r6
    1c74:	1c73      	adds	r3, r6, #1
    1c76:	2b1f      	cmp	r3, #31
    1c78:	dd00      	ble.n	1c7c <__aeabi_dadd+0xec>
    1c7a:	e0f1      	b.n	1e60 <__aeabi_dadd+0x2d0>
    1c7c:	2220      	movs	r2, #32
    1c7e:	0038      	movs	r0, r7
    1c80:	0029      	movs	r1, r5
    1c82:	1ad2      	subs	r2, r2, r3
    1c84:	40d8      	lsrs	r0, r3
    1c86:	4091      	lsls	r1, r2
    1c88:	4097      	lsls	r7, r2
    1c8a:	002c      	movs	r4, r5
    1c8c:	4301      	orrs	r1, r0
    1c8e:	1e78      	subs	r0, r7, #1
    1c90:	4187      	sbcs	r7, r0
    1c92:	40dc      	lsrs	r4, r3
    1c94:	2600      	movs	r6, #0
    1c96:	430f      	orrs	r7, r1
    1c98:	077b      	lsls	r3, r7, #29
    1c9a:	d009      	beq.n	1cb0 <__aeabi_dadd+0x120>
    1c9c:	230f      	movs	r3, #15
    1c9e:	403b      	ands	r3, r7
    1ca0:	2b04      	cmp	r3, #4
    1ca2:	d005      	beq.n	1cb0 <__aeabi_dadd+0x120>
    1ca4:	1d3b      	adds	r3, r7, #4
    1ca6:	42bb      	cmp	r3, r7
    1ca8:	41bf      	sbcs	r7, r7
    1caa:	427f      	negs	r7, r7
    1cac:	19e4      	adds	r4, r4, r7
    1cae:	001f      	movs	r7, r3
    1cb0:	0223      	lsls	r3, r4, #8
    1cb2:	d52c      	bpl.n	1d0e <__aeabi_dadd+0x17e>
    1cb4:	4b96      	ldr	r3, [pc, #600]	; (1f10 <__aeabi_dadd+0x380>)
    1cb6:	3601      	adds	r6, #1
    1cb8:	429e      	cmp	r6, r3
    1cba:	d100      	bne.n	1cbe <__aeabi_dadd+0x12e>
    1cbc:	e09a      	b.n	1df4 <__aeabi_dadd+0x264>
    1cbe:	4645      	mov	r5, r8
    1cc0:	4b94      	ldr	r3, [pc, #592]	; (1f14 <__aeabi_dadd+0x384>)
    1cc2:	08ff      	lsrs	r7, r7, #3
    1cc4:	401c      	ands	r4, r3
    1cc6:	0760      	lsls	r0, r4, #29
    1cc8:	0576      	lsls	r6, r6, #21
    1cca:	0264      	lsls	r4, r4, #9
    1ccc:	4307      	orrs	r7, r0
    1cce:	0b24      	lsrs	r4, r4, #12
    1cd0:	0d76      	lsrs	r6, r6, #21
    1cd2:	2100      	movs	r1, #0
    1cd4:	0324      	lsls	r4, r4, #12
    1cd6:	0b23      	lsrs	r3, r4, #12
    1cd8:	0d0c      	lsrs	r4, r1, #20
    1cda:	4a8f      	ldr	r2, [pc, #572]	; (1f18 <__aeabi_dadd+0x388>)
    1cdc:	0524      	lsls	r4, r4, #20
    1cde:	431c      	orrs	r4, r3
    1ce0:	4014      	ands	r4, r2
    1ce2:	0533      	lsls	r3, r6, #20
    1ce4:	4323      	orrs	r3, r4
    1ce6:	005b      	lsls	r3, r3, #1
    1ce8:	07ed      	lsls	r5, r5, #31
    1cea:	085b      	lsrs	r3, r3, #1
    1cec:	432b      	orrs	r3, r5
    1cee:	0038      	movs	r0, r7
    1cf0:	0019      	movs	r1, r3
    1cf2:	bc3c      	pop	{r2, r3, r4, r5}
    1cf4:	4690      	mov	r8, r2
    1cf6:	4699      	mov	r9, r3
    1cf8:	46a2      	mov	sl, r4
    1cfa:	46ab      	mov	fp, r5
    1cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1cfe:	4664      	mov	r4, ip
    1d00:	4304      	orrs	r4, r0
    1d02:	d100      	bne.n	1d06 <__aeabi_dadd+0x176>
    1d04:	e211      	b.n	212a <__aeabi_dadd+0x59a>
    1d06:	0004      	movs	r4, r0
    1d08:	4667      	mov	r7, ip
    1d0a:	077b      	lsls	r3, r7, #29
    1d0c:	d1c6      	bne.n	1c9c <__aeabi_dadd+0x10c>
    1d0e:	4645      	mov	r5, r8
    1d10:	0760      	lsls	r0, r4, #29
    1d12:	08ff      	lsrs	r7, r7, #3
    1d14:	4307      	orrs	r7, r0
    1d16:	08e4      	lsrs	r4, r4, #3
    1d18:	4b7d      	ldr	r3, [pc, #500]	; (1f10 <__aeabi_dadd+0x380>)
    1d1a:	429e      	cmp	r6, r3
    1d1c:	d030      	beq.n	1d80 <__aeabi_dadd+0x1f0>
    1d1e:	0324      	lsls	r4, r4, #12
    1d20:	0576      	lsls	r6, r6, #21
    1d22:	0b24      	lsrs	r4, r4, #12
    1d24:	0d76      	lsrs	r6, r6, #21
    1d26:	e7d4      	b.n	1cd2 <__aeabi_dadd+0x142>
    1d28:	1a33      	subs	r3, r6, r0
    1d2a:	469a      	mov	sl, r3
    1d2c:	2b00      	cmp	r3, #0
    1d2e:	dd78      	ble.n	1e22 <__aeabi_dadd+0x292>
    1d30:	2800      	cmp	r0, #0
    1d32:	d031      	beq.n	1d98 <__aeabi_dadd+0x208>
    1d34:	4876      	ldr	r0, [pc, #472]	; (1f10 <__aeabi_dadd+0x380>)
    1d36:	4286      	cmp	r6, r0
    1d38:	d0ae      	beq.n	1c98 <__aeabi_dadd+0x108>
    1d3a:	2080      	movs	r0, #128	; 0x80
    1d3c:	0400      	lsls	r0, r0, #16
    1d3e:	4301      	orrs	r1, r0
    1d40:	4653      	mov	r3, sl
    1d42:	2b38      	cmp	r3, #56	; 0x38
    1d44:	dc00      	bgt.n	1d48 <__aeabi_dadd+0x1b8>
    1d46:	e0e9      	b.n	1f1c <__aeabi_dadd+0x38c>
    1d48:	430a      	orrs	r2, r1
    1d4a:	1e51      	subs	r1, r2, #1
    1d4c:	418a      	sbcs	r2, r1
    1d4e:	2100      	movs	r1, #0
    1d50:	19d2      	adds	r2, r2, r7
    1d52:	42ba      	cmp	r2, r7
    1d54:	41bf      	sbcs	r7, r7
    1d56:	1909      	adds	r1, r1, r4
    1d58:	427c      	negs	r4, r7
    1d5a:	0017      	movs	r7, r2
    1d5c:	190c      	adds	r4, r1, r4
    1d5e:	0223      	lsls	r3, r4, #8
    1d60:	d5d3      	bpl.n	1d0a <__aeabi_dadd+0x17a>
    1d62:	4b6b      	ldr	r3, [pc, #428]	; (1f10 <__aeabi_dadd+0x380>)
    1d64:	3601      	adds	r6, #1
    1d66:	429e      	cmp	r6, r3
    1d68:	d100      	bne.n	1d6c <__aeabi_dadd+0x1dc>
    1d6a:	e13a      	b.n	1fe2 <__aeabi_dadd+0x452>
    1d6c:	2001      	movs	r0, #1
    1d6e:	4b69      	ldr	r3, [pc, #420]	; (1f14 <__aeabi_dadd+0x384>)
    1d70:	401c      	ands	r4, r3
    1d72:	087b      	lsrs	r3, r7, #1
    1d74:	4007      	ands	r7, r0
    1d76:	431f      	orrs	r7, r3
    1d78:	07e0      	lsls	r0, r4, #31
    1d7a:	4307      	orrs	r7, r0
    1d7c:	0864      	lsrs	r4, r4, #1
    1d7e:	e78b      	b.n	1c98 <__aeabi_dadd+0x108>
    1d80:	0023      	movs	r3, r4
    1d82:	433b      	orrs	r3, r7
    1d84:	d100      	bne.n	1d88 <__aeabi_dadd+0x1f8>
    1d86:	e1cb      	b.n	2120 <__aeabi_dadd+0x590>
    1d88:	2280      	movs	r2, #128	; 0x80
    1d8a:	0312      	lsls	r2, r2, #12
    1d8c:	4314      	orrs	r4, r2
    1d8e:	0324      	lsls	r4, r4, #12
    1d90:	0b24      	lsrs	r4, r4, #12
    1d92:	e79e      	b.n	1cd2 <__aeabi_dadd+0x142>
    1d94:	002e      	movs	r6, r5
    1d96:	e77f      	b.n	1c98 <__aeabi_dadd+0x108>
    1d98:	0008      	movs	r0, r1
    1d9a:	4310      	orrs	r0, r2
    1d9c:	d100      	bne.n	1da0 <__aeabi_dadd+0x210>
    1d9e:	e0b4      	b.n	1f0a <__aeabi_dadd+0x37a>
    1da0:	1e58      	subs	r0, r3, #1
    1da2:	2800      	cmp	r0, #0
    1da4:	d000      	beq.n	1da8 <__aeabi_dadd+0x218>
    1da6:	e0de      	b.n	1f66 <__aeabi_dadd+0x3d6>
    1da8:	18ba      	adds	r2, r7, r2
    1daa:	42ba      	cmp	r2, r7
    1dac:	419b      	sbcs	r3, r3
    1dae:	1864      	adds	r4, r4, r1
    1db0:	425b      	negs	r3, r3
    1db2:	18e4      	adds	r4, r4, r3
    1db4:	0017      	movs	r7, r2
    1db6:	2601      	movs	r6, #1
    1db8:	0223      	lsls	r3, r4, #8
    1dba:	d5a6      	bpl.n	1d0a <__aeabi_dadd+0x17a>
    1dbc:	2602      	movs	r6, #2
    1dbe:	e7d5      	b.n	1d6c <__aeabi_dadd+0x1dc>
    1dc0:	2d00      	cmp	r5, #0
    1dc2:	d16e      	bne.n	1ea2 <__aeabi_dadd+0x312>
    1dc4:	1c70      	adds	r0, r6, #1
    1dc6:	0540      	lsls	r0, r0, #21
    1dc8:	0d40      	lsrs	r0, r0, #21
    1dca:	2801      	cmp	r0, #1
    1dcc:	dc00      	bgt.n	1dd0 <__aeabi_dadd+0x240>
    1dce:	e0f9      	b.n	1fc4 <__aeabi_dadd+0x434>
    1dd0:	1ab8      	subs	r0, r7, r2
    1dd2:	4684      	mov	ip, r0
    1dd4:	4287      	cmp	r7, r0
    1dd6:	4180      	sbcs	r0, r0
    1dd8:	1ae5      	subs	r5, r4, r3
    1dda:	4240      	negs	r0, r0
    1ddc:	1a2d      	subs	r5, r5, r0
    1dde:	0228      	lsls	r0, r5, #8
    1de0:	d400      	bmi.n	1de4 <__aeabi_dadd+0x254>
    1de2:	e089      	b.n	1ef8 <__aeabi_dadd+0x368>
    1de4:	1bd7      	subs	r7, r2, r7
    1de6:	42ba      	cmp	r2, r7
    1de8:	4192      	sbcs	r2, r2
    1dea:	1b1c      	subs	r4, r3, r4
    1dec:	4252      	negs	r2, r2
    1dee:	1aa5      	subs	r5, r4, r2
    1df0:	46d8      	mov	r8, fp
    1df2:	e729      	b.n	1c48 <__aeabi_dadd+0xb8>
    1df4:	4645      	mov	r5, r8
    1df6:	2400      	movs	r4, #0
    1df8:	2700      	movs	r7, #0
    1dfa:	e76a      	b.n	1cd2 <__aeabi_dadd+0x142>
    1dfc:	4c45      	ldr	r4, [pc, #276]	; (1f14 <__aeabi_dadd+0x384>)
    1dfe:	1af6      	subs	r6, r6, r3
    1e00:	402c      	ands	r4, r5
    1e02:	e749      	b.n	1c98 <__aeabi_dadd+0x108>
    1e04:	003d      	movs	r5, r7
    1e06:	3828      	subs	r0, #40	; 0x28
    1e08:	4085      	lsls	r5, r0
    1e0a:	2700      	movs	r7, #0
    1e0c:	e72e      	b.n	1c6c <__aeabi_dadd+0xdc>
    1e0e:	0038      	movs	r0, r7
    1e10:	f000 f9ce 	bl	21b0 <__clzsi2>
    1e14:	3020      	adds	r0, #32
    1e16:	e71d      	b.n	1c54 <__aeabi_dadd+0xc4>
    1e18:	430a      	orrs	r2, r1
    1e1a:	1e51      	subs	r1, r2, #1
    1e1c:	418a      	sbcs	r2, r1
    1e1e:	2100      	movs	r1, #0
    1e20:	e707      	b.n	1c32 <__aeabi_dadd+0xa2>
    1e22:	2b00      	cmp	r3, #0
    1e24:	d000      	beq.n	1e28 <__aeabi_dadd+0x298>
    1e26:	e0f3      	b.n	2010 <__aeabi_dadd+0x480>
    1e28:	1c70      	adds	r0, r6, #1
    1e2a:	0543      	lsls	r3, r0, #21
    1e2c:	0d5b      	lsrs	r3, r3, #21
    1e2e:	2b01      	cmp	r3, #1
    1e30:	dc00      	bgt.n	1e34 <__aeabi_dadd+0x2a4>
    1e32:	e0ad      	b.n	1f90 <__aeabi_dadd+0x400>
    1e34:	4b36      	ldr	r3, [pc, #216]	; (1f10 <__aeabi_dadd+0x380>)
    1e36:	4298      	cmp	r0, r3
    1e38:	d100      	bne.n	1e3c <__aeabi_dadd+0x2ac>
    1e3a:	e0d1      	b.n	1fe0 <__aeabi_dadd+0x450>
    1e3c:	18ba      	adds	r2, r7, r2
    1e3e:	42ba      	cmp	r2, r7
    1e40:	41bf      	sbcs	r7, r7
    1e42:	1864      	adds	r4, r4, r1
    1e44:	427f      	negs	r7, r7
    1e46:	19e4      	adds	r4, r4, r7
    1e48:	07e7      	lsls	r7, r4, #31
    1e4a:	0852      	lsrs	r2, r2, #1
    1e4c:	4317      	orrs	r7, r2
    1e4e:	0864      	lsrs	r4, r4, #1
    1e50:	0006      	movs	r6, r0
    1e52:	e721      	b.n	1c98 <__aeabi_dadd+0x108>
    1e54:	482e      	ldr	r0, [pc, #184]	; (1f10 <__aeabi_dadd+0x380>)
    1e56:	4285      	cmp	r5, r0
    1e58:	d100      	bne.n	1e5c <__aeabi_dadd+0x2cc>
    1e5a:	e093      	b.n	1f84 <__aeabi_dadd+0x3f4>
    1e5c:	001d      	movs	r5, r3
    1e5e:	e6d0      	b.n	1c02 <__aeabi_dadd+0x72>
    1e60:	0029      	movs	r1, r5
    1e62:	3e1f      	subs	r6, #31
    1e64:	40f1      	lsrs	r1, r6
    1e66:	2b20      	cmp	r3, #32
    1e68:	d100      	bne.n	1e6c <__aeabi_dadd+0x2dc>
    1e6a:	e08d      	b.n	1f88 <__aeabi_dadd+0x3f8>
    1e6c:	2240      	movs	r2, #64	; 0x40
    1e6e:	1ad3      	subs	r3, r2, r3
    1e70:	409d      	lsls	r5, r3
    1e72:	432f      	orrs	r7, r5
    1e74:	1e7d      	subs	r5, r7, #1
    1e76:	41af      	sbcs	r7, r5
    1e78:	2400      	movs	r4, #0
    1e7a:	430f      	orrs	r7, r1
    1e7c:	2600      	movs	r6, #0
    1e7e:	e744      	b.n	1d0a <__aeabi_dadd+0x17a>
    1e80:	002b      	movs	r3, r5
    1e82:	0008      	movs	r0, r1
    1e84:	3b20      	subs	r3, #32
    1e86:	40d8      	lsrs	r0, r3
    1e88:	0003      	movs	r3, r0
    1e8a:	2d20      	cmp	r5, #32
    1e8c:	d100      	bne.n	1e90 <__aeabi_dadd+0x300>
    1e8e:	e07d      	b.n	1f8c <__aeabi_dadd+0x3fc>
    1e90:	2040      	movs	r0, #64	; 0x40
    1e92:	1b45      	subs	r5, r0, r5
    1e94:	40a9      	lsls	r1, r5
    1e96:	430a      	orrs	r2, r1
    1e98:	1e51      	subs	r1, r2, #1
    1e9a:	418a      	sbcs	r2, r1
    1e9c:	2100      	movs	r1, #0
    1e9e:	431a      	orrs	r2, r3
    1ea0:	e6c7      	b.n	1c32 <__aeabi_dadd+0xa2>
    1ea2:	2e00      	cmp	r6, #0
    1ea4:	d050      	beq.n	1f48 <__aeabi_dadd+0x3b8>
    1ea6:	4e1a      	ldr	r6, [pc, #104]	; (1f10 <__aeabi_dadd+0x380>)
    1ea8:	42b0      	cmp	r0, r6
    1eaa:	d057      	beq.n	1f5c <__aeabi_dadd+0x3cc>
    1eac:	2680      	movs	r6, #128	; 0x80
    1eae:	426b      	negs	r3, r5
    1eb0:	4699      	mov	r9, r3
    1eb2:	0436      	lsls	r6, r6, #16
    1eb4:	4334      	orrs	r4, r6
    1eb6:	464b      	mov	r3, r9
    1eb8:	2b38      	cmp	r3, #56	; 0x38
    1eba:	dd00      	ble.n	1ebe <__aeabi_dadd+0x32e>
    1ebc:	e0d6      	b.n	206c <__aeabi_dadd+0x4dc>
    1ebe:	2b1f      	cmp	r3, #31
    1ec0:	dd00      	ble.n	1ec4 <__aeabi_dadd+0x334>
    1ec2:	e135      	b.n	2130 <__aeabi_dadd+0x5a0>
    1ec4:	2620      	movs	r6, #32
    1ec6:	1af5      	subs	r5, r6, r3
    1ec8:	0026      	movs	r6, r4
    1eca:	40ae      	lsls	r6, r5
    1ecc:	46b2      	mov	sl, r6
    1ece:	003e      	movs	r6, r7
    1ed0:	40de      	lsrs	r6, r3
    1ed2:	46ac      	mov	ip, r5
    1ed4:	0035      	movs	r5, r6
    1ed6:	4656      	mov	r6, sl
    1ed8:	432e      	orrs	r6, r5
    1eda:	4665      	mov	r5, ip
    1edc:	40af      	lsls	r7, r5
    1ede:	1e7d      	subs	r5, r7, #1
    1ee0:	41af      	sbcs	r7, r5
    1ee2:	40dc      	lsrs	r4, r3
    1ee4:	4337      	orrs	r7, r6
    1ee6:	1bd7      	subs	r7, r2, r7
    1ee8:	42ba      	cmp	r2, r7
    1eea:	4192      	sbcs	r2, r2
    1eec:	1b0c      	subs	r4, r1, r4
    1eee:	4252      	negs	r2, r2
    1ef0:	1aa4      	subs	r4, r4, r2
    1ef2:	0006      	movs	r6, r0
    1ef4:	46d8      	mov	r8, fp
    1ef6:	e6a3      	b.n	1c40 <__aeabi_dadd+0xb0>
    1ef8:	4664      	mov	r4, ip
    1efa:	4667      	mov	r7, ip
    1efc:	432c      	orrs	r4, r5
    1efe:	d000      	beq.n	1f02 <__aeabi_dadd+0x372>
    1f00:	e6a2      	b.n	1c48 <__aeabi_dadd+0xb8>
    1f02:	2500      	movs	r5, #0
    1f04:	2600      	movs	r6, #0
    1f06:	2700      	movs	r7, #0
    1f08:	e706      	b.n	1d18 <__aeabi_dadd+0x188>
    1f0a:	001e      	movs	r6, r3
    1f0c:	e6c4      	b.n	1c98 <__aeabi_dadd+0x108>
    1f0e:	46c0      	nop			; (mov r8, r8)
    1f10:	000007ff 	.word	0x000007ff
    1f14:	ff7fffff 	.word	0xff7fffff
    1f18:	800fffff 	.word	0x800fffff
    1f1c:	2b1f      	cmp	r3, #31
    1f1e:	dc63      	bgt.n	1fe8 <__aeabi_dadd+0x458>
    1f20:	2020      	movs	r0, #32
    1f22:	1ac3      	subs	r3, r0, r3
    1f24:	0008      	movs	r0, r1
    1f26:	4098      	lsls	r0, r3
    1f28:	469c      	mov	ip, r3
    1f2a:	4683      	mov	fp, r0
    1f2c:	4653      	mov	r3, sl
    1f2e:	0010      	movs	r0, r2
    1f30:	40d8      	lsrs	r0, r3
    1f32:	0003      	movs	r3, r0
    1f34:	4658      	mov	r0, fp
    1f36:	4318      	orrs	r0, r3
    1f38:	4663      	mov	r3, ip
    1f3a:	409a      	lsls	r2, r3
    1f3c:	1e53      	subs	r3, r2, #1
    1f3e:	419a      	sbcs	r2, r3
    1f40:	4653      	mov	r3, sl
    1f42:	4302      	orrs	r2, r0
    1f44:	40d9      	lsrs	r1, r3
    1f46:	e703      	b.n	1d50 <__aeabi_dadd+0x1c0>
    1f48:	0026      	movs	r6, r4
    1f4a:	433e      	orrs	r6, r7
    1f4c:	d006      	beq.n	1f5c <__aeabi_dadd+0x3cc>
    1f4e:	43eb      	mvns	r3, r5
    1f50:	4699      	mov	r9, r3
    1f52:	2b00      	cmp	r3, #0
    1f54:	d0c7      	beq.n	1ee6 <__aeabi_dadd+0x356>
    1f56:	4e94      	ldr	r6, [pc, #592]	; (21a8 <__aeabi_dadd+0x618>)
    1f58:	42b0      	cmp	r0, r6
    1f5a:	d1ac      	bne.n	1eb6 <__aeabi_dadd+0x326>
    1f5c:	000c      	movs	r4, r1
    1f5e:	0017      	movs	r7, r2
    1f60:	0006      	movs	r6, r0
    1f62:	46d8      	mov	r8, fp
    1f64:	e698      	b.n	1c98 <__aeabi_dadd+0x108>
    1f66:	4b90      	ldr	r3, [pc, #576]	; (21a8 <__aeabi_dadd+0x618>)
    1f68:	459a      	cmp	sl, r3
    1f6a:	d00b      	beq.n	1f84 <__aeabi_dadd+0x3f4>
    1f6c:	4682      	mov	sl, r0
    1f6e:	e6e7      	b.n	1d40 <__aeabi_dadd+0x1b0>
    1f70:	2800      	cmp	r0, #0
    1f72:	d000      	beq.n	1f76 <__aeabi_dadd+0x3e6>
    1f74:	e09e      	b.n	20b4 <__aeabi_dadd+0x524>
    1f76:	0018      	movs	r0, r3
    1f78:	4310      	orrs	r0, r2
    1f7a:	d100      	bne.n	1f7e <__aeabi_dadd+0x3ee>
    1f7c:	e0e9      	b.n	2152 <__aeabi_dadd+0x5c2>
    1f7e:	001c      	movs	r4, r3
    1f80:	0017      	movs	r7, r2
    1f82:	46d8      	mov	r8, fp
    1f84:	4e88      	ldr	r6, [pc, #544]	; (21a8 <__aeabi_dadd+0x618>)
    1f86:	e687      	b.n	1c98 <__aeabi_dadd+0x108>
    1f88:	2500      	movs	r5, #0
    1f8a:	e772      	b.n	1e72 <__aeabi_dadd+0x2e2>
    1f8c:	2100      	movs	r1, #0
    1f8e:	e782      	b.n	1e96 <__aeabi_dadd+0x306>
    1f90:	0023      	movs	r3, r4
    1f92:	433b      	orrs	r3, r7
    1f94:	2e00      	cmp	r6, #0
    1f96:	d000      	beq.n	1f9a <__aeabi_dadd+0x40a>
    1f98:	e0ab      	b.n	20f2 <__aeabi_dadd+0x562>
    1f9a:	2b00      	cmp	r3, #0
    1f9c:	d100      	bne.n	1fa0 <__aeabi_dadd+0x410>
    1f9e:	e0e7      	b.n	2170 <__aeabi_dadd+0x5e0>
    1fa0:	000b      	movs	r3, r1
    1fa2:	4313      	orrs	r3, r2
    1fa4:	d100      	bne.n	1fa8 <__aeabi_dadd+0x418>
    1fa6:	e677      	b.n	1c98 <__aeabi_dadd+0x108>
    1fa8:	18ba      	adds	r2, r7, r2
    1faa:	42ba      	cmp	r2, r7
    1fac:	41bf      	sbcs	r7, r7
    1fae:	1864      	adds	r4, r4, r1
    1fb0:	427f      	negs	r7, r7
    1fb2:	19e4      	adds	r4, r4, r7
    1fb4:	0223      	lsls	r3, r4, #8
    1fb6:	d400      	bmi.n	1fba <__aeabi_dadd+0x42a>
    1fb8:	e0f2      	b.n	21a0 <__aeabi_dadd+0x610>
    1fba:	4b7c      	ldr	r3, [pc, #496]	; (21ac <__aeabi_dadd+0x61c>)
    1fbc:	0017      	movs	r7, r2
    1fbe:	401c      	ands	r4, r3
    1fc0:	0006      	movs	r6, r0
    1fc2:	e669      	b.n	1c98 <__aeabi_dadd+0x108>
    1fc4:	0020      	movs	r0, r4
    1fc6:	4338      	orrs	r0, r7
    1fc8:	2e00      	cmp	r6, #0
    1fca:	d1d1      	bne.n	1f70 <__aeabi_dadd+0x3e0>
    1fcc:	2800      	cmp	r0, #0
    1fce:	d15b      	bne.n	2088 <__aeabi_dadd+0x4f8>
    1fd0:	001c      	movs	r4, r3
    1fd2:	4314      	orrs	r4, r2
    1fd4:	d100      	bne.n	1fd8 <__aeabi_dadd+0x448>
    1fd6:	e0a8      	b.n	212a <__aeabi_dadd+0x59a>
    1fd8:	001c      	movs	r4, r3
    1fda:	0017      	movs	r7, r2
    1fdc:	46d8      	mov	r8, fp
    1fde:	e65b      	b.n	1c98 <__aeabi_dadd+0x108>
    1fe0:	0006      	movs	r6, r0
    1fe2:	2400      	movs	r4, #0
    1fe4:	2700      	movs	r7, #0
    1fe6:	e697      	b.n	1d18 <__aeabi_dadd+0x188>
    1fe8:	4650      	mov	r0, sl
    1fea:	000b      	movs	r3, r1
    1fec:	3820      	subs	r0, #32
    1fee:	40c3      	lsrs	r3, r0
    1ff0:	4699      	mov	r9, r3
    1ff2:	4653      	mov	r3, sl
    1ff4:	2b20      	cmp	r3, #32
    1ff6:	d100      	bne.n	1ffa <__aeabi_dadd+0x46a>
    1ff8:	e095      	b.n	2126 <__aeabi_dadd+0x596>
    1ffa:	2340      	movs	r3, #64	; 0x40
    1ffc:	4650      	mov	r0, sl
    1ffe:	1a1b      	subs	r3, r3, r0
    2000:	4099      	lsls	r1, r3
    2002:	430a      	orrs	r2, r1
    2004:	1e51      	subs	r1, r2, #1
    2006:	418a      	sbcs	r2, r1
    2008:	464b      	mov	r3, r9
    200a:	2100      	movs	r1, #0
    200c:	431a      	orrs	r2, r3
    200e:	e69f      	b.n	1d50 <__aeabi_dadd+0x1c0>
    2010:	2e00      	cmp	r6, #0
    2012:	d130      	bne.n	2076 <__aeabi_dadd+0x4e6>
    2014:	0026      	movs	r6, r4
    2016:	433e      	orrs	r6, r7
    2018:	d067      	beq.n	20ea <__aeabi_dadd+0x55a>
    201a:	43db      	mvns	r3, r3
    201c:	469a      	mov	sl, r3
    201e:	2b00      	cmp	r3, #0
    2020:	d01c      	beq.n	205c <__aeabi_dadd+0x4cc>
    2022:	4e61      	ldr	r6, [pc, #388]	; (21a8 <__aeabi_dadd+0x618>)
    2024:	42b0      	cmp	r0, r6
    2026:	d060      	beq.n	20ea <__aeabi_dadd+0x55a>
    2028:	4653      	mov	r3, sl
    202a:	2b38      	cmp	r3, #56	; 0x38
    202c:	dd00      	ble.n	2030 <__aeabi_dadd+0x4a0>
    202e:	e096      	b.n	215e <__aeabi_dadd+0x5ce>
    2030:	2b1f      	cmp	r3, #31
    2032:	dd00      	ble.n	2036 <__aeabi_dadd+0x4a6>
    2034:	e09f      	b.n	2176 <__aeabi_dadd+0x5e6>
    2036:	2620      	movs	r6, #32
    2038:	1af3      	subs	r3, r6, r3
    203a:	0026      	movs	r6, r4
    203c:	409e      	lsls	r6, r3
    203e:	469c      	mov	ip, r3
    2040:	46b3      	mov	fp, r6
    2042:	4653      	mov	r3, sl
    2044:	003e      	movs	r6, r7
    2046:	40de      	lsrs	r6, r3
    2048:	0033      	movs	r3, r6
    204a:	465e      	mov	r6, fp
    204c:	431e      	orrs	r6, r3
    204e:	4663      	mov	r3, ip
    2050:	409f      	lsls	r7, r3
    2052:	1e7b      	subs	r3, r7, #1
    2054:	419f      	sbcs	r7, r3
    2056:	4653      	mov	r3, sl
    2058:	40dc      	lsrs	r4, r3
    205a:	4337      	orrs	r7, r6
    205c:	18bf      	adds	r7, r7, r2
    205e:	4297      	cmp	r7, r2
    2060:	4192      	sbcs	r2, r2
    2062:	1864      	adds	r4, r4, r1
    2064:	4252      	negs	r2, r2
    2066:	18a4      	adds	r4, r4, r2
    2068:	0006      	movs	r6, r0
    206a:	e678      	b.n	1d5e <__aeabi_dadd+0x1ce>
    206c:	4327      	orrs	r7, r4
    206e:	1e7c      	subs	r4, r7, #1
    2070:	41a7      	sbcs	r7, r4
    2072:	2400      	movs	r4, #0
    2074:	e737      	b.n	1ee6 <__aeabi_dadd+0x356>
    2076:	4e4c      	ldr	r6, [pc, #304]	; (21a8 <__aeabi_dadd+0x618>)
    2078:	42b0      	cmp	r0, r6
    207a:	d036      	beq.n	20ea <__aeabi_dadd+0x55a>
    207c:	2680      	movs	r6, #128	; 0x80
    207e:	425b      	negs	r3, r3
    2080:	0436      	lsls	r6, r6, #16
    2082:	469a      	mov	sl, r3
    2084:	4334      	orrs	r4, r6
    2086:	e7cf      	b.n	2028 <__aeabi_dadd+0x498>
    2088:	0018      	movs	r0, r3
    208a:	4310      	orrs	r0, r2
    208c:	d100      	bne.n	2090 <__aeabi_dadd+0x500>
    208e:	e603      	b.n	1c98 <__aeabi_dadd+0x108>
    2090:	1ab8      	subs	r0, r7, r2
    2092:	4684      	mov	ip, r0
    2094:	4567      	cmp	r7, ip
    2096:	41ad      	sbcs	r5, r5
    2098:	1ae0      	subs	r0, r4, r3
    209a:	426d      	negs	r5, r5
    209c:	1b40      	subs	r0, r0, r5
    209e:	0205      	lsls	r5, r0, #8
    20a0:	d400      	bmi.n	20a4 <__aeabi_dadd+0x514>
    20a2:	e62c      	b.n	1cfe <__aeabi_dadd+0x16e>
    20a4:	1bd7      	subs	r7, r2, r7
    20a6:	42ba      	cmp	r2, r7
    20a8:	4192      	sbcs	r2, r2
    20aa:	1b1c      	subs	r4, r3, r4
    20ac:	4252      	negs	r2, r2
    20ae:	1aa4      	subs	r4, r4, r2
    20b0:	46d8      	mov	r8, fp
    20b2:	e5f1      	b.n	1c98 <__aeabi_dadd+0x108>
    20b4:	0018      	movs	r0, r3
    20b6:	4310      	orrs	r0, r2
    20b8:	d100      	bne.n	20bc <__aeabi_dadd+0x52c>
    20ba:	e763      	b.n	1f84 <__aeabi_dadd+0x3f4>
    20bc:	08f8      	lsrs	r0, r7, #3
    20be:	0767      	lsls	r7, r4, #29
    20c0:	4307      	orrs	r7, r0
    20c2:	2080      	movs	r0, #128	; 0x80
    20c4:	08e4      	lsrs	r4, r4, #3
    20c6:	0300      	lsls	r0, r0, #12
    20c8:	4204      	tst	r4, r0
    20ca:	d008      	beq.n	20de <__aeabi_dadd+0x54e>
    20cc:	08dd      	lsrs	r5, r3, #3
    20ce:	4205      	tst	r5, r0
    20d0:	d105      	bne.n	20de <__aeabi_dadd+0x54e>
    20d2:	08d2      	lsrs	r2, r2, #3
    20d4:	0759      	lsls	r1, r3, #29
    20d6:	4311      	orrs	r1, r2
    20d8:	000f      	movs	r7, r1
    20da:	002c      	movs	r4, r5
    20dc:	46d8      	mov	r8, fp
    20de:	0f7b      	lsrs	r3, r7, #29
    20e0:	00e4      	lsls	r4, r4, #3
    20e2:	431c      	orrs	r4, r3
    20e4:	00ff      	lsls	r7, r7, #3
    20e6:	4e30      	ldr	r6, [pc, #192]	; (21a8 <__aeabi_dadd+0x618>)
    20e8:	e5d6      	b.n	1c98 <__aeabi_dadd+0x108>
    20ea:	000c      	movs	r4, r1
    20ec:	0017      	movs	r7, r2
    20ee:	0006      	movs	r6, r0
    20f0:	e5d2      	b.n	1c98 <__aeabi_dadd+0x108>
    20f2:	2b00      	cmp	r3, #0
    20f4:	d038      	beq.n	2168 <__aeabi_dadd+0x5d8>
    20f6:	000b      	movs	r3, r1
    20f8:	4313      	orrs	r3, r2
    20fa:	d100      	bne.n	20fe <__aeabi_dadd+0x56e>
    20fc:	e742      	b.n	1f84 <__aeabi_dadd+0x3f4>
    20fe:	08f8      	lsrs	r0, r7, #3
    2100:	0767      	lsls	r7, r4, #29
    2102:	4307      	orrs	r7, r0
    2104:	2080      	movs	r0, #128	; 0x80
    2106:	08e4      	lsrs	r4, r4, #3
    2108:	0300      	lsls	r0, r0, #12
    210a:	4204      	tst	r4, r0
    210c:	d0e7      	beq.n	20de <__aeabi_dadd+0x54e>
    210e:	08cb      	lsrs	r3, r1, #3
    2110:	4203      	tst	r3, r0
    2112:	d1e4      	bne.n	20de <__aeabi_dadd+0x54e>
    2114:	08d2      	lsrs	r2, r2, #3
    2116:	0749      	lsls	r1, r1, #29
    2118:	4311      	orrs	r1, r2
    211a:	000f      	movs	r7, r1
    211c:	001c      	movs	r4, r3
    211e:	e7de      	b.n	20de <__aeabi_dadd+0x54e>
    2120:	2700      	movs	r7, #0
    2122:	2400      	movs	r4, #0
    2124:	e5d5      	b.n	1cd2 <__aeabi_dadd+0x142>
    2126:	2100      	movs	r1, #0
    2128:	e76b      	b.n	2002 <__aeabi_dadd+0x472>
    212a:	2500      	movs	r5, #0
    212c:	2700      	movs	r7, #0
    212e:	e5f3      	b.n	1d18 <__aeabi_dadd+0x188>
    2130:	464e      	mov	r6, r9
    2132:	0025      	movs	r5, r4
    2134:	3e20      	subs	r6, #32
    2136:	40f5      	lsrs	r5, r6
    2138:	464b      	mov	r3, r9
    213a:	002e      	movs	r6, r5
    213c:	2b20      	cmp	r3, #32
    213e:	d02d      	beq.n	219c <__aeabi_dadd+0x60c>
    2140:	2540      	movs	r5, #64	; 0x40
    2142:	1aed      	subs	r5, r5, r3
    2144:	40ac      	lsls	r4, r5
    2146:	4327      	orrs	r7, r4
    2148:	1e7c      	subs	r4, r7, #1
    214a:	41a7      	sbcs	r7, r4
    214c:	2400      	movs	r4, #0
    214e:	4337      	orrs	r7, r6
    2150:	e6c9      	b.n	1ee6 <__aeabi_dadd+0x356>
    2152:	2480      	movs	r4, #128	; 0x80
    2154:	2500      	movs	r5, #0
    2156:	0324      	lsls	r4, r4, #12
    2158:	4e13      	ldr	r6, [pc, #76]	; (21a8 <__aeabi_dadd+0x618>)
    215a:	2700      	movs	r7, #0
    215c:	e5dc      	b.n	1d18 <__aeabi_dadd+0x188>
    215e:	4327      	orrs	r7, r4
    2160:	1e7c      	subs	r4, r7, #1
    2162:	41a7      	sbcs	r7, r4
    2164:	2400      	movs	r4, #0
    2166:	e779      	b.n	205c <__aeabi_dadd+0x4cc>
    2168:	000c      	movs	r4, r1
    216a:	0017      	movs	r7, r2
    216c:	4e0e      	ldr	r6, [pc, #56]	; (21a8 <__aeabi_dadd+0x618>)
    216e:	e593      	b.n	1c98 <__aeabi_dadd+0x108>
    2170:	000c      	movs	r4, r1
    2172:	0017      	movs	r7, r2
    2174:	e590      	b.n	1c98 <__aeabi_dadd+0x108>
    2176:	4656      	mov	r6, sl
    2178:	0023      	movs	r3, r4
    217a:	3e20      	subs	r6, #32
    217c:	40f3      	lsrs	r3, r6
    217e:	4699      	mov	r9, r3
    2180:	4653      	mov	r3, sl
    2182:	2b20      	cmp	r3, #32
    2184:	d00e      	beq.n	21a4 <__aeabi_dadd+0x614>
    2186:	2340      	movs	r3, #64	; 0x40
    2188:	4656      	mov	r6, sl
    218a:	1b9b      	subs	r3, r3, r6
    218c:	409c      	lsls	r4, r3
    218e:	4327      	orrs	r7, r4
    2190:	1e7c      	subs	r4, r7, #1
    2192:	41a7      	sbcs	r7, r4
    2194:	464b      	mov	r3, r9
    2196:	2400      	movs	r4, #0
    2198:	431f      	orrs	r7, r3
    219a:	e75f      	b.n	205c <__aeabi_dadd+0x4cc>
    219c:	2400      	movs	r4, #0
    219e:	e7d2      	b.n	2146 <__aeabi_dadd+0x5b6>
    21a0:	0017      	movs	r7, r2
    21a2:	e5b2      	b.n	1d0a <__aeabi_dadd+0x17a>
    21a4:	2400      	movs	r4, #0
    21a6:	e7f2      	b.n	218e <__aeabi_dadd+0x5fe>
    21a8:	000007ff 	.word	0x000007ff
    21ac:	ff7fffff 	.word	0xff7fffff

000021b0 <__clzsi2>:
    21b0:	211c      	movs	r1, #28
    21b2:	2301      	movs	r3, #1
    21b4:	041b      	lsls	r3, r3, #16
    21b6:	4298      	cmp	r0, r3
    21b8:	d301      	bcc.n	21be <__clzsi2+0xe>
    21ba:	0c00      	lsrs	r0, r0, #16
    21bc:	3910      	subs	r1, #16
    21be:	0a1b      	lsrs	r3, r3, #8
    21c0:	4298      	cmp	r0, r3
    21c2:	d301      	bcc.n	21c8 <__clzsi2+0x18>
    21c4:	0a00      	lsrs	r0, r0, #8
    21c6:	3908      	subs	r1, #8
    21c8:	091b      	lsrs	r3, r3, #4
    21ca:	4298      	cmp	r0, r3
    21cc:	d301      	bcc.n	21d2 <__clzsi2+0x22>
    21ce:	0900      	lsrs	r0, r0, #4
    21d0:	3904      	subs	r1, #4
    21d2:	a202      	add	r2, pc, #8	; (adr r2, 21dc <__clzsi2+0x2c>)
    21d4:	5c10      	ldrb	r0, [r2, r0]
    21d6:	1840      	adds	r0, r0, r1
    21d8:	4770      	bx	lr
    21da:	46c0      	nop			; (mov r8, r8)
    21dc:	02020304 	.word	0x02020304
    21e0:	01010101 	.word	0x01010101
	...

000021ec <__libc_init_array>:
    21ec:	b570      	push	{r4, r5, r6, lr}
    21ee:	4e0d      	ldr	r6, [pc, #52]	; (2224 <__libc_init_array+0x38>)
    21f0:	4d0d      	ldr	r5, [pc, #52]	; (2228 <__libc_init_array+0x3c>)
    21f2:	2400      	movs	r4, #0
    21f4:	1bad      	subs	r5, r5, r6
    21f6:	10ad      	asrs	r5, r5, #2
    21f8:	d005      	beq.n	2206 <__libc_init_array+0x1a>
    21fa:	00a3      	lsls	r3, r4, #2
    21fc:	58f3      	ldr	r3, [r6, r3]
    21fe:	3401      	adds	r4, #1
    2200:	4798      	blx	r3
    2202:	42a5      	cmp	r5, r4
    2204:	d1f9      	bne.n	21fa <__libc_init_array+0xe>
    2206:	f000 fc19 	bl	2a3c <_init>
    220a:	4e08      	ldr	r6, [pc, #32]	; (222c <__libc_init_array+0x40>)
    220c:	4d08      	ldr	r5, [pc, #32]	; (2230 <__libc_init_array+0x44>)
    220e:	2400      	movs	r4, #0
    2210:	1bad      	subs	r5, r5, r6
    2212:	10ad      	asrs	r5, r5, #2
    2214:	d005      	beq.n	2222 <__libc_init_array+0x36>
    2216:	00a3      	lsls	r3, r4, #2
    2218:	58f3      	ldr	r3, [r6, r3]
    221a:	3401      	adds	r4, #1
    221c:	4798      	blx	r3
    221e:	42a5      	cmp	r5, r4
    2220:	d1f9      	bne.n	2216 <__libc_init_array+0x2a>
    2222:	bd70      	pop	{r4, r5, r6, pc}
    2224:	00002a48 	.word	0x00002a48
    2228:	00002a48 	.word	0x00002a48
    222c:	00002a48 	.word	0x00002a48
    2230:	00002a50 	.word	0x00002a50

00002234 <memcpy>:
    2234:	b5f0      	push	{r4, r5, r6, r7, lr}
    2236:	0005      	movs	r5, r0
    2238:	2a0f      	cmp	r2, #15
    223a:	d92f      	bls.n	229c <memcpy+0x68>
    223c:	000b      	movs	r3, r1
    223e:	4303      	orrs	r3, r0
    2240:	079b      	lsls	r3, r3, #30
    2242:	d134      	bne.n	22ae <memcpy+0x7a>
    2244:	0016      	movs	r6, r2
    2246:	000c      	movs	r4, r1
    2248:	0003      	movs	r3, r0
    224a:	3e10      	subs	r6, #16
    224c:	0935      	lsrs	r5, r6, #4
    224e:	3501      	adds	r5, #1
    2250:	012d      	lsls	r5, r5, #4
    2252:	1945      	adds	r5, r0, r5
    2254:	6827      	ldr	r7, [r4, #0]
    2256:	601f      	str	r7, [r3, #0]
    2258:	6867      	ldr	r7, [r4, #4]
    225a:	605f      	str	r7, [r3, #4]
    225c:	68a7      	ldr	r7, [r4, #8]
    225e:	609f      	str	r7, [r3, #8]
    2260:	68e7      	ldr	r7, [r4, #12]
    2262:	3410      	adds	r4, #16
    2264:	60df      	str	r7, [r3, #12]
    2266:	3310      	adds	r3, #16
    2268:	429d      	cmp	r5, r3
    226a:	d1f3      	bne.n	2254 <memcpy+0x20>
    226c:	230f      	movs	r3, #15
    226e:	439e      	bics	r6, r3
    2270:	3610      	adds	r6, #16
    2272:	1985      	adds	r5, r0, r6
    2274:	1989      	adds	r1, r1, r6
    2276:	4013      	ands	r3, r2
    2278:	2b03      	cmp	r3, #3
    227a:	d91a      	bls.n	22b2 <memcpy+0x7e>
    227c:	1f1e      	subs	r6, r3, #4
    227e:	2300      	movs	r3, #0
    2280:	08b4      	lsrs	r4, r6, #2
    2282:	3401      	adds	r4, #1
    2284:	00a4      	lsls	r4, r4, #2
    2286:	58cf      	ldr	r7, [r1, r3]
    2288:	50ef      	str	r7, [r5, r3]
    228a:	3304      	adds	r3, #4
    228c:	42a3      	cmp	r3, r4
    228e:	d1fa      	bne.n	2286 <memcpy+0x52>
    2290:	2403      	movs	r4, #3
    2292:	43a6      	bics	r6, r4
    2294:	1d33      	adds	r3, r6, #4
    2296:	4022      	ands	r2, r4
    2298:	18c9      	adds	r1, r1, r3
    229a:	18ed      	adds	r5, r5, r3
    229c:	2a00      	cmp	r2, #0
    229e:	d005      	beq.n	22ac <memcpy+0x78>
    22a0:	2300      	movs	r3, #0
    22a2:	5ccc      	ldrb	r4, [r1, r3]
    22a4:	54ec      	strb	r4, [r5, r3]
    22a6:	3301      	adds	r3, #1
    22a8:	4293      	cmp	r3, r2
    22aa:	d1fa      	bne.n	22a2 <memcpy+0x6e>
    22ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22ae:	0005      	movs	r5, r0
    22b0:	e7f6      	b.n	22a0 <memcpy+0x6c>
    22b2:	001a      	movs	r2, r3
    22b4:	e7f2      	b.n	229c <memcpy+0x68>
    22b6:	46c0      	nop			; (mov r8, r8)

000022b8 <memset>:
    22b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    22ba:	0783      	lsls	r3, r0, #30
    22bc:	d043      	beq.n	2346 <memset+0x8e>
    22be:	1e54      	subs	r4, r2, #1
    22c0:	2a00      	cmp	r2, #0
    22c2:	d03f      	beq.n	2344 <memset+0x8c>
    22c4:	b2ce      	uxtb	r6, r1
    22c6:	0002      	movs	r2, r0
    22c8:	2503      	movs	r5, #3
    22ca:	e002      	b.n	22d2 <memset+0x1a>
    22cc:	001a      	movs	r2, r3
    22ce:	3c01      	subs	r4, #1
    22d0:	d338      	bcc.n	2344 <memset+0x8c>
    22d2:	1c53      	adds	r3, r2, #1
    22d4:	7016      	strb	r6, [r2, #0]
    22d6:	422b      	tst	r3, r5
    22d8:	d1f8      	bne.n	22cc <memset+0x14>
    22da:	2c03      	cmp	r4, #3
    22dc:	d92a      	bls.n	2334 <memset+0x7c>
    22de:	22ff      	movs	r2, #255	; 0xff
    22e0:	400a      	ands	r2, r1
    22e2:	0215      	lsls	r5, r2, #8
    22e4:	4315      	orrs	r5, r2
    22e6:	042a      	lsls	r2, r5, #16
    22e8:	4315      	orrs	r5, r2
    22ea:	2c0f      	cmp	r4, #15
    22ec:	d914      	bls.n	2318 <memset+0x60>
    22ee:	0027      	movs	r7, r4
    22f0:	001a      	movs	r2, r3
    22f2:	3f10      	subs	r7, #16
    22f4:	093e      	lsrs	r6, r7, #4
    22f6:	3601      	adds	r6, #1
    22f8:	0136      	lsls	r6, r6, #4
    22fa:	199e      	adds	r6, r3, r6
    22fc:	6015      	str	r5, [r2, #0]
    22fe:	6055      	str	r5, [r2, #4]
    2300:	6095      	str	r5, [r2, #8]
    2302:	60d5      	str	r5, [r2, #12]
    2304:	3210      	adds	r2, #16
    2306:	4296      	cmp	r6, r2
    2308:	d1f8      	bne.n	22fc <memset+0x44>
    230a:	220f      	movs	r2, #15
    230c:	4397      	bics	r7, r2
    230e:	3710      	adds	r7, #16
    2310:	19db      	adds	r3, r3, r7
    2312:	4014      	ands	r4, r2
    2314:	2c03      	cmp	r4, #3
    2316:	d90d      	bls.n	2334 <memset+0x7c>
    2318:	001a      	movs	r2, r3
    231a:	1f27      	subs	r7, r4, #4
    231c:	08be      	lsrs	r6, r7, #2
    231e:	3601      	adds	r6, #1
    2320:	00b6      	lsls	r6, r6, #2
    2322:	199e      	adds	r6, r3, r6
    2324:	c220      	stmia	r2!, {r5}
    2326:	42b2      	cmp	r2, r6
    2328:	d1fc      	bne.n	2324 <memset+0x6c>
    232a:	2203      	movs	r2, #3
    232c:	4397      	bics	r7, r2
    232e:	3704      	adds	r7, #4
    2330:	19db      	adds	r3, r3, r7
    2332:	4014      	ands	r4, r2
    2334:	2c00      	cmp	r4, #0
    2336:	d005      	beq.n	2344 <memset+0x8c>
    2338:	b2c9      	uxtb	r1, r1
    233a:	191c      	adds	r4, r3, r4
    233c:	7019      	strb	r1, [r3, #0]
    233e:	3301      	adds	r3, #1
    2340:	429c      	cmp	r4, r3
    2342:	d1fb      	bne.n	233c <memset+0x84>
    2344:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2346:	0014      	movs	r4, r2
    2348:	0003      	movs	r3, r0
    234a:	e7c6      	b.n	22da <memset+0x22>

0000234c <register_fini>:
    234c:	4b03      	ldr	r3, [pc, #12]	; (235c <register_fini+0x10>)
    234e:	b510      	push	{r4, lr}
    2350:	2b00      	cmp	r3, #0
    2352:	d002      	beq.n	235a <register_fini+0xe>
    2354:	4802      	ldr	r0, [pc, #8]	; (2360 <register_fini+0x14>)
    2356:	f000 f805 	bl	2364 <atexit>
    235a:	bd10      	pop	{r4, pc}
    235c:	00000000 	.word	0x00000000
    2360:	00002375 	.word	0x00002375

00002364 <atexit>:
    2364:	b510      	push	{r4, lr}
    2366:	0001      	movs	r1, r0
    2368:	2300      	movs	r3, #0
    236a:	2200      	movs	r2, #0
    236c:	2000      	movs	r0, #0
    236e:	f000 f81f 	bl	23b0 <__register_exitproc>
    2372:	bd10      	pop	{r4, pc}

00002374 <__libc_fini_array>:
    2374:	b570      	push	{r4, r5, r6, lr}
    2376:	4b09      	ldr	r3, [pc, #36]	; (239c <__libc_fini_array+0x28>)
    2378:	4c09      	ldr	r4, [pc, #36]	; (23a0 <__libc_fini_array+0x2c>)
    237a:	1ae4      	subs	r4, r4, r3
    237c:	10a4      	asrs	r4, r4, #2
    237e:	d009      	beq.n	2394 <__libc_fini_array+0x20>
    2380:	4a08      	ldr	r2, [pc, #32]	; (23a4 <__libc_fini_array+0x30>)
    2382:	18a5      	adds	r5, r4, r2
    2384:	00ad      	lsls	r5, r5, #2
    2386:	18ed      	adds	r5, r5, r3
    2388:	682b      	ldr	r3, [r5, #0]
    238a:	3c01      	subs	r4, #1
    238c:	4798      	blx	r3
    238e:	3d04      	subs	r5, #4
    2390:	2c00      	cmp	r4, #0
    2392:	d1f9      	bne.n	2388 <__libc_fini_array+0x14>
    2394:	f000 fb5c 	bl	2a50 <_fini>
    2398:	bd70      	pop	{r4, r5, r6, pc}
    239a:	46c0      	nop			; (mov r8, r8)
    239c:	00002a5c 	.word	0x00002a5c
    23a0:	00002a60 	.word	0x00002a60
    23a4:	3fffffff 	.word	0x3fffffff

000023a8 <__retarget_lock_acquire_recursive>:
    23a8:	4770      	bx	lr
    23aa:	46c0      	nop			; (mov r8, r8)

000023ac <__retarget_lock_release_recursive>:
    23ac:	4770      	bx	lr
    23ae:	46c0      	nop			; (mov r8, r8)

000023b0 <__register_exitproc>:
    23b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    23b2:	464e      	mov	r6, r9
    23b4:	4645      	mov	r5, r8
    23b6:	46de      	mov	lr, fp
    23b8:	4657      	mov	r7, sl
    23ba:	b5e0      	push	{r5, r6, r7, lr}
    23bc:	4d36      	ldr	r5, [pc, #216]	; (2498 <__register_exitproc+0xe8>)
    23be:	b083      	sub	sp, #12
    23c0:	0006      	movs	r6, r0
    23c2:	6828      	ldr	r0, [r5, #0]
    23c4:	4698      	mov	r8, r3
    23c6:	000f      	movs	r7, r1
    23c8:	4691      	mov	r9, r2
    23ca:	f7ff ffed 	bl	23a8 <__retarget_lock_acquire_recursive>
    23ce:	4b33      	ldr	r3, [pc, #204]	; (249c <__register_exitproc+0xec>)
    23d0:	681c      	ldr	r4, [r3, #0]
    23d2:	23a4      	movs	r3, #164	; 0xa4
    23d4:	005b      	lsls	r3, r3, #1
    23d6:	58e0      	ldr	r0, [r4, r3]
    23d8:	2800      	cmp	r0, #0
    23da:	d052      	beq.n	2482 <__register_exitproc+0xd2>
    23dc:	6843      	ldr	r3, [r0, #4]
    23de:	2b1f      	cmp	r3, #31
    23e0:	dc13      	bgt.n	240a <__register_exitproc+0x5a>
    23e2:	1c5a      	adds	r2, r3, #1
    23e4:	9201      	str	r2, [sp, #4]
    23e6:	2e00      	cmp	r6, #0
    23e8:	d128      	bne.n	243c <__register_exitproc+0x8c>
    23ea:	9a01      	ldr	r2, [sp, #4]
    23ec:	3302      	adds	r3, #2
    23ee:	009b      	lsls	r3, r3, #2
    23f0:	6042      	str	r2, [r0, #4]
    23f2:	501f      	str	r7, [r3, r0]
    23f4:	6828      	ldr	r0, [r5, #0]
    23f6:	f7ff ffd9 	bl	23ac <__retarget_lock_release_recursive>
    23fa:	2000      	movs	r0, #0
    23fc:	b003      	add	sp, #12
    23fe:	bc3c      	pop	{r2, r3, r4, r5}
    2400:	4690      	mov	r8, r2
    2402:	4699      	mov	r9, r3
    2404:	46a2      	mov	sl, r4
    2406:	46ab      	mov	fp, r5
    2408:	bdf0      	pop	{r4, r5, r6, r7, pc}
    240a:	4b25      	ldr	r3, [pc, #148]	; (24a0 <__register_exitproc+0xf0>)
    240c:	2b00      	cmp	r3, #0
    240e:	d03d      	beq.n	248c <__register_exitproc+0xdc>
    2410:	20c8      	movs	r0, #200	; 0xc8
    2412:	0040      	lsls	r0, r0, #1
    2414:	e000      	b.n	2418 <__register_exitproc+0x68>
    2416:	bf00      	nop
    2418:	2800      	cmp	r0, #0
    241a:	d037      	beq.n	248c <__register_exitproc+0xdc>
    241c:	22a4      	movs	r2, #164	; 0xa4
    241e:	2300      	movs	r3, #0
    2420:	0052      	lsls	r2, r2, #1
    2422:	58a1      	ldr	r1, [r4, r2]
    2424:	6043      	str	r3, [r0, #4]
    2426:	6001      	str	r1, [r0, #0]
    2428:	50a0      	str	r0, [r4, r2]
    242a:	3240      	adds	r2, #64	; 0x40
    242c:	5083      	str	r3, [r0, r2]
    242e:	3204      	adds	r2, #4
    2430:	5083      	str	r3, [r0, r2]
    2432:	3301      	adds	r3, #1
    2434:	9301      	str	r3, [sp, #4]
    2436:	2300      	movs	r3, #0
    2438:	2e00      	cmp	r6, #0
    243a:	d0d6      	beq.n	23ea <__register_exitproc+0x3a>
    243c:	009a      	lsls	r2, r3, #2
    243e:	4692      	mov	sl, r2
    2440:	4482      	add	sl, r0
    2442:	464a      	mov	r2, r9
    2444:	2188      	movs	r1, #136	; 0x88
    2446:	4654      	mov	r4, sl
    2448:	5062      	str	r2, [r4, r1]
    244a:	22c4      	movs	r2, #196	; 0xc4
    244c:	0052      	lsls	r2, r2, #1
    244e:	4691      	mov	r9, r2
    2450:	4481      	add	r9, r0
    2452:	464a      	mov	r2, r9
    2454:	3987      	subs	r1, #135	; 0x87
    2456:	4099      	lsls	r1, r3
    2458:	6812      	ldr	r2, [r2, #0]
    245a:	468b      	mov	fp, r1
    245c:	430a      	orrs	r2, r1
    245e:	4694      	mov	ip, r2
    2460:	464a      	mov	r2, r9
    2462:	4661      	mov	r1, ip
    2464:	6011      	str	r1, [r2, #0]
    2466:	2284      	movs	r2, #132	; 0x84
    2468:	4641      	mov	r1, r8
    246a:	0052      	lsls	r2, r2, #1
    246c:	50a1      	str	r1, [r4, r2]
    246e:	2e02      	cmp	r6, #2
    2470:	d1bb      	bne.n	23ea <__register_exitproc+0x3a>
    2472:	0002      	movs	r2, r0
    2474:	465c      	mov	r4, fp
    2476:	328d      	adds	r2, #141	; 0x8d
    2478:	32ff      	adds	r2, #255	; 0xff
    247a:	6811      	ldr	r1, [r2, #0]
    247c:	430c      	orrs	r4, r1
    247e:	6014      	str	r4, [r2, #0]
    2480:	e7b3      	b.n	23ea <__register_exitproc+0x3a>
    2482:	0020      	movs	r0, r4
    2484:	304d      	adds	r0, #77	; 0x4d
    2486:	30ff      	adds	r0, #255	; 0xff
    2488:	50e0      	str	r0, [r4, r3]
    248a:	e7a7      	b.n	23dc <__register_exitproc+0x2c>
    248c:	6828      	ldr	r0, [r5, #0]
    248e:	f7ff ff8d 	bl	23ac <__retarget_lock_release_recursive>
    2492:	2001      	movs	r0, #1
    2494:	4240      	negs	r0, r0
    2496:	e7b1      	b.n	23fc <__register_exitproc+0x4c>
    2498:	200004e8 	.word	0x200004e8
    249c:	00002a38 	.word	0x00002a38
    24a0:	00000000 	.word	0x00000000

000024a4 <color_drg_g>:
    24a4:	0000be32                                2...

000024a8 <color_drg_r>:
    24a8:	000028c8                                .(..

000024ac <color_drg_d>:
    24ac:	00c84000                                .@..

000024b0 <color_cplx_theta>:
    24b0:	000000d2                                ....

000024b4 <color_cplx_r>:
    24b4:	0000be32                                2...

000024b8 <color_cplx_im>:
    24b8:	000028c8                                .(..

000024bc <color_cplx_re>:
    24bc:	00c84000                                .@..

000024c0 <color_shift_hyp_unavail>:
    24c0:	00040600                                ....

000024c4 <color_hyp_unavail>:
    24c4:	00000700                                ....

000024c8 <color_shift_unavail>:
    24c8:	00080200                                ....

000024cc <color_normal_unavail>:
    24cc:	00030303                                ....

000024d0 <color_shift_hyp>:
    24d0:	00a0c800                                ....

000024d4 <color_hyp>:
    24d4:	0000d200                                ....

000024d8 <color_shift>:
    24d8:	00c84000                                .@..

000024dc <color_normal>:
    24dc:	003c3c3c                                <<<.

000024e0 <color_off>:
    24e0:	00000105                                ....

000024e4 <cmd_asinh>:
    24e4:	20000000                                ... 

000024e8 <cmd_asin>:
    24e8:	20000010                                ... 

000024ec <cmd_sinh>:
    24ec:	20000020                                 .. 

000024f0 <cmd_sin>:
    24f0:	20000030                                0.. 

000024f4 <cmd_mul>:
    24f4:	20000040                                @.. 

000024f8 <cmd_sub>:
    24f8:	20000050                                P.. 

000024fc <cmd_add>:
    24fc:	20000060                                `.. 

00002500 <cmd_drg_reint>:
    2500:	20000070                                p.. 

00002504 <cmd_rec_pol>:
    2504:	20000080                                ... 

00002508 <cmd_re_im>:
    2508:	20000090 00000009 00000000 00000000     ... ............
	...
    2520:	0000000c 00000000 00000001 00000000     ................
	...
    253c:	0000000d 00000000 00000001 00000000     ................
	...
    2558:	0000001a 00000000 00000010 00000000     ................
	...
    2574:	0000001d 000008dd 00000001 00000000     ................
	...
    2590:	0000000b 00000000 00000001 00000000     ................
	...
    25ac:	00000019 00000000 00000020 00000000     ........ .......
	...
    25c8:	00000005 00000941                       ....A...

000025d0 <colPorts>:
    25d0:	00000001 00000001 00000001 00000001     ................
	...

000025f0 <colPins>:
    25f0:	00000006 00000007 00000008 00000009     ................
    2600:	00000004 00000005 00000006 00000007     ................

00002610 <rowPorts>:
	...
    2618:	00000001 00000001 00000001              ............

00002624 <rowPins>:
    2624:	0000000a 0000000b 0000000a 0000000b     ................
    2634:	0000000c                                ....

00002638 <bit_expand>:
    2638:	00924924 00924926 00924934 00924936     $I..&I..4I..6I..
    2648:	009249a4 009249a6 009249b4 009249b6     .I...I...I...I..
    2658:	00924d24 00924d26 00924d34 00924d36     $M..&M..4M..6M..
    2668:	00924da4 00924da6 00924db4 00924db6     .M...M...M...M..
    2678:	00926924 00926926 00926934 00926936     $i..&i..4i..6i..
    2688:	009269a4 009269a6 009269b4 009269b6     .i...i...i...i..
    2698:	00926d24 00926d26 00926d34 00926d36     $m..&m..4m..6m..
    26a8:	00926da4 00926da6 00926db4 00926db6     .m...m...m...m..
    26b8:	00934924 00934926 00934934 00934936     $I..&I..4I..6I..
    26c8:	009349a4 009349a6 009349b4 009349b6     .I...I...I...I..
    26d8:	00934d24 00934d26 00934d34 00934d36     $M..&M..4M..6M..
    26e8:	00934da4 00934da6 00934db4 00934db6     .M...M...M...M..
    26f8:	00936924 00936926 00936934 00936936     $i..&i..4i..6i..
    2708:	009369a4 009369a6 009369b4 009369b6     .i...i...i...i..
    2718:	00936d24 00936d26 00936d34 00936d36     $m..&m..4m..6m..
    2728:	00936da4 00936da6 00936db4 00936db6     .m...m...m...m..
    2738:	009a4924 009a4926 009a4934 009a4936     $I..&I..4I..6I..
    2748:	009a49a4 009a49a6 009a49b4 009a49b6     .I...I...I...I..
    2758:	009a4d24 009a4d26 009a4d34 009a4d36     $M..&M..4M..6M..
    2768:	009a4da4 009a4da6 009a4db4 009a4db6     .M...M...M...M..
    2778:	009a6924 009a6926 009a6934 009a6936     $i..&i..4i..6i..
    2788:	009a69a4 009a69a6 009a69b4 009a69b6     .i...i...i...i..
    2798:	009a6d24 009a6d26 009a6d34 009a6d36     $m..&m..4m..6m..
    27a8:	009a6da4 009a6da6 009a6db4 009a6db6     .m...m...m...m..
    27b8:	009b4924 009b4926 009b4934 009b4936     $I..&I..4I..6I..
    27c8:	009b49a4 009b49a6 009b49b4 009b49b6     .I...I...I...I..
    27d8:	009b4d24 009b4d26 009b4d34 009b4d36     $M..&M..4M..6M..
    27e8:	009b4da4 009b4da6 009b4db4 009b4db6     .M...M...M...M..
    27f8:	009b6924 009b6926 009b6934 009b6936     $i..&i..4i..6i..
    2808:	009b69a4 009b69a6 009b69b4 009b69b6     .i...i...i...i..
    2818:	009b6d24 009b6d26 009b6d34 009b6d36     $m..&m..4m..6m..
    2828:	009b6da4 009b6da6 009b6db4 009b6db6     .m...m...m...m..
    2838:	00d24924 00d24926 00d24934 00d24936     $I..&I..4I..6I..
    2848:	00d249a4 00d249a6 00d249b4 00d249b6     .I...I...I...I..
    2858:	00d24d24 00d24d26 00d24d34 00d24d36     $M..&M..4M..6M..
    2868:	00d24da4 00d24da6 00d24db4 00d24db6     .M...M...M...M..
    2878:	00d26924 00d26926 00d26934 00d26936     $i..&i..4i..6i..
    2888:	00d269a4 00d269a6 00d269b4 00d269b6     .i...i...i...i..
    2898:	00d26d24 00d26d26 00d26d34 00d26d36     $m..&m..4m..6m..
    28a8:	00d26da4 00d26da6 00d26db4 00d26db6     .m...m...m...m..
    28b8:	00d34924 00d34926 00d34934 00d34936     $I..&I..4I..6I..
    28c8:	00d349a4 00d349a6 00d349b4 00d349b6     .I...I...I...I..
    28d8:	00d34d24 00d34d26 00d34d34 00d34d36     $M..&M..4M..6M..
    28e8:	00d34da4 00d34da6 00d34db4 00d34db6     .M...M...M...M..
    28f8:	00d36924 00d36926 00d36934 00d36936     $i..&i..4i..6i..
    2908:	00d369a4 00d369a6 00d369b4 00d369b6     .i...i...i...i..
    2918:	00d36d24 00d36d26 00d36d34 00d36d36     $m..&m..4m..6m..
    2928:	00d36da4 00d36da6 00d36db4 00d36db6     .m...m...m...m..
    2938:	00da4924 00da4926 00da4934 00da4936     $I..&I..4I..6I..
    2948:	00da49a4 00da49a6 00da49b4 00da49b6     .I...I...I...I..
    2958:	00da4d24 00da4d26 00da4d34 00da4d36     $M..&M..4M..6M..
    2968:	00da4da4 00da4da6 00da4db4 00da4db6     .M...M...M...M..
    2978:	00da6924 00da6926 00da6934 00da6936     $i..&i..4i..6i..
    2988:	00da69a4 00da69a6 00da69b4 00da69b6     .i...i...i...i..
    2998:	00da6d24 00da6d26 00da6d34 00da6d36     $m..&m..4m..6m..
    29a8:	00da6da4 00da6da6 00da6db4 00da6db6     .m...m...m...m..
    29b8:	00db4924 00db4926 00db4934 00db4936     $I..&I..4I..6I..
    29c8:	00db49a4 00db49a6 00db49b4 00db49b6     .I...I...I...I..
    29d8:	00db4d24 00db4d26 00db4d34 00db4d36     $M..&M..4M..6M..
    29e8:	00db4da4 00db4da6 00db4db4 00db4db6     .M...M...M...M..
    29f8:	00db6924 00db6926 00db6934 00db6936     $i..&i..4i..6i..
    2a08:	00db69a4 00db69a6 00db69b4 00db69b6     .i...i...i...i..
    2a18:	00db6d24 00db6d26 00db6d34 00db6d36     $m..&m..4m..6m..
    2a28:	00db6da4 00db6da6 00db6db4 00db6db6     .m...m...m...m..

00002a38 <_global_impure_ptr>:
    2a38:	200000c0                                ... 

00002a3c <_init>:
    2a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a3e:	46c0      	nop			; (mov r8, r8)
    2a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2a42:	bc08      	pop	{r3}
    2a44:	469e      	mov	lr, r3
    2a46:	4770      	bx	lr

00002a48 <__init_array_start>:
    2a48:	0000234d 	.word	0x0000234d

00002a4c <__frame_dummy_init_array_entry>:
    2a4c:	000000e1                                ....

00002a50 <_fini>:
    2a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a52:	46c0      	nop			; (mov r8, r8)
    2a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2a56:	bc08      	pop	{r3}
    2a58:	469e      	mov	lr, r3
    2a5a:	4770      	bx	lr

00002a5c <__fini_array_start>:
    2a5c:	000000b9 	.word	0x000000b9
