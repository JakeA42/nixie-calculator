
NixCalculator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002730  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004e4  20000000  00002730  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000a54  200004f0  00002c20  000204e4  2**4
                  ALLOC
  3 .stack        00001004  20000f44  00003674  000204e4  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000204e4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002050c  2**0
                  CONTENTS, READONLY
  6 .debug_info   000116cb  00000000  00000000  00020565  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015af  00000000  00000000  00031c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000002b8  00000000  00000000  000331df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000280  00000000  00000000  00033497  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  000146f0  00000000  00000000  00033717  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004eaf  00000000  00000000  00047e07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000788e3  00000000  00000000  0004ccb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000798  00000000  00000000  000c559c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001531  00000000  00000000  000c5d34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 1f 00 20 f9 02 00 00 f5 02 00 00 f5 02 00 00     H.. ............
	...
      2c:	f5 02 00 00 00 00 00 00 00 00 00 00 f5 02 00 00     ................
      3c:	15 10 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      4c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 cd 04 00 00     ................
      5c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      6c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      7c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      8c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      9c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      ac:	f5 02 00 00 00 00 00 00 f5 02 00 00                 ............

000000b8 <__do_global_dtors_aux>:
      b8:	b510      	push	{r4, lr}
      ba:	4c06      	ldr	r4, [pc, #24]	; (d4 <__do_global_dtors_aux+0x1c>)
      bc:	7823      	ldrb	r3, [r4, #0]
      be:	2b00      	cmp	r3, #0
      c0:	d107      	bne.n	d2 <__do_global_dtors_aux+0x1a>
      c2:	4b05      	ldr	r3, [pc, #20]	; (d8 <__do_global_dtors_aux+0x20>)
      c4:	2b00      	cmp	r3, #0
      c6:	d002      	beq.n	ce <__do_global_dtors_aux+0x16>
      c8:	4804      	ldr	r0, [pc, #16]	; (dc <__do_global_dtors_aux+0x24>)
      ca:	e000      	b.n	ce <__do_global_dtors_aux+0x16>
      cc:	bf00      	nop
      ce:	2301      	movs	r3, #1
      d0:	7023      	strb	r3, [r4, #0]
      d2:	bd10      	pop	{r4, pc}
      d4:	200004f0 	.word	0x200004f0
      d8:	00000000 	.word	0x00000000
      dc:	00002730 	.word	0x00002730

000000e0 <frame_dummy>:
      e0:	4b08      	ldr	r3, [pc, #32]	; (104 <frame_dummy+0x24>)
      e2:	b510      	push	{r4, lr}
      e4:	2b00      	cmp	r3, #0
      e6:	d003      	beq.n	f0 <frame_dummy+0x10>
      e8:	4907      	ldr	r1, [pc, #28]	; (108 <frame_dummy+0x28>)
      ea:	4808      	ldr	r0, [pc, #32]	; (10c <frame_dummy+0x2c>)
      ec:	e000      	b.n	f0 <frame_dummy+0x10>
      ee:	bf00      	nop
      f0:	4807      	ldr	r0, [pc, #28]	; (110 <frame_dummy+0x30>)
      f2:	6803      	ldr	r3, [r0, #0]
      f4:	2b00      	cmp	r3, #0
      f6:	d100      	bne.n	fa <frame_dummy+0x1a>
      f8:	bd10      	pop	{r4, pc}
      fa:	4b06      	ldr	r3, [pc, #24]	; (114 <frame_dummy+0x34>)
      fc:	2b00      	cmp	r3, #0
      fe:	d0fb      	beq.n	f8 <frame_dummy+0x18>
     100:	4798      	blx	r3
     102:	e7f9      	b.n	f8 <frame_dummy+0x18>
     104:	00000000 	.word	0x00000000
     108:	200004f4 	.word	0x200004f4
     10c:	00002730 	.word	0x00002730
     110:	00002730 	.word	0x00002730
     114:	00000000 	.word	0x00000000

00000118 <ClocksInit>:
// Constants for Clock multiplexers
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void ClocksInit() {
	/* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
	NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     118:	493a      	ldr	r1, [pc, #232]	; (204 <ClocksInit+0xec>)
     11a:	684a      	ldr	r2, [r1, #4]
     11c:	231e      	movs	r3, #30
     11e:	439a      	bics	r2, r3
     120:	3b1c      	subs	r3, #28
     122:	4313      	orrs	r3, r2
     124:	604b      	str	r3, [r1, #4]

	/* Turn on the digital interface clock */
	PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     126:	4a38      	ldr	r2, [pc, #224]	; (208 <ClocksInit+0xf0>)
     128:	6993      	ldr	r3, [r2, #24]
     12a:	2108      	movs	r1, #8
     12c:	430b      	orrs	r3, r1
     12e:	6193      	str	r3, [r2, #24]

	/* Enable XOSC32K clock (External on-board 32.768Hz oscillator) */
	SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     130:	4b36      	ldr	r3, [pc, #216]	; (20c <ClocksInit+0xf4>)
     132:	4a37      	ldr	r2, [pc, #220]	; (210 <ClocksInit+0xf8>)
     134:	829a      	strh	r2, [r3, #20]
	SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
	SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
     136:	8a9a      	ldrh	r2, [r3, #20]
     138:	2102      	movs	r1, #2
     13a:	430a      	orrs	r2, r1
     13c:	829a      	strh	r2, [r3, #20]
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
     13e:	4b33      	ldr	r3, [pc, #204]	; (20c <ClocksInit+0xf4>)
     140:	68db      	ldr	r3, [r3, #12]
     142:	079b      	lsls	r3, r3, #30
     144:	d5fb      	bpl.n	13e <ClocksInit+0x26>
	{
		/* Wait for oscillator stabilization */
	}

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
     146:	2201      	movs	r2, #1
     148:	4b32      	ldr	r3, [pc, #200]	; (214 <ClocksInit+0xfc>)
     14a:	701a      	strb	r2, [r3, #0]
	while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     14c:	4b31      	ldr	r3, [pc, #196]	; (214 <ClocksInit+0xfc>)
     14e:	781b      	ldrb	r3, [r3, #0]
     150:	07db      	lsls	r3, r3, #31
     152:	d504      	bpl.n	15e <ClocksInit+0x46>
     154:	4b2f      	ldr	r3, [pc, #188]	; (214 <ClocksInit+0xfc>)
     156:	785b      	ldrb	r3, [r3, #1]
     158:	b25b      	sxtb	r3, r3
     15a:	2b00      	cmp	r3, #0
     15c:	dbf6      	blt.n	14c <ClocksInit+0x34>
	{
		/* Wait for reset to complete */
	}

	/* Put XOSC32K as source of Generic Clock Generator 1 */
	GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
     15e:	2201      	movs	r2, #1
     160:	4b2c      	ldr	r3, [pc, #176]	; (214 <ClocksInit+0xfc>)
     162:	609a      	str	r2, [r3, #8]
	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     164:	4b2b      	ldr	r3, [pc, #172]	; (214 <ClocksInit+0xfc>)
     166:	785b      	ldrb	r3, [r3, #1]
     168:	b25b      	sxtb	r3, r3
     16a:	2b00      	cmp	r3, #0
     16c:	dbfa      	blt.n	164 <ClocksInit+0x4c>
	{
		/* Wait for synchronization */
	}

	/* Write Generic Clock Generator 1 configuration */
	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
     16e:	4a2a      	ldr	r2, [pc, #168]	; (218 <ClocksInit+0x100>)
     170:	4b28      	ldr	r3, [pc, #160]	; (214 <ClocksInit+0xfc>)
     172:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
	//                  GCLK_GENCTRL_OE | // Output clock to a pin for tests
	GCLK_GENCTRL_GENEN ;
	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     174:	4b27      	ldr	r3, [pc, #156]	; (214 <ClocksInit+0xfc>)
     176:	785b      	ldrb	r3, [r3, #1]
     178:	b25b      	sxtb	r3, r3
     17a:	2b00      	cmp	r3, #0
     17c:	dbfa      	blt.n	174 <ClocksInit+0x5c>
	{
		/* Wait for synchronization */
	}

	/* Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference) */
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
     17e:	2282      	movs	r2, #130	; 0x82
     180:	01d2      	lsls	r2, r2, #7
     182:	4b24      	ldr	r3, [pc, #144]	; (214 <ClocksInit+0xfc>)
     184:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
	GCLK_CLKCTRL_CLKEN ;
	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     186:	4b23      	ldr	r3, [pc, #140]	; (214 <ClocksInit+0xfc>)
     188:	785b      	ldrb	r3, [r3, #1]
     18a:	b25b      	sxtb	r3, r3
     18c:	2b00      	cmp	r3, #0
     18e:	dbfa      	blt.n	186 <ClocksInit+0x6e>
	{
		/* Wait for synchronization */
	}

	/* Enable DFLL48M clock */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     190:	2202      	movs	r2, #2
     192:	4b1e      	ldr	r3, [pc, #120]	; (20c <ClocksInit+0xf4>)
     194:	849a      	strh	r2, [r3, #36]	; 0x24
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     196:	4b1d      	ldr	r3, [pc, #116]	; (20c <ClocksInit+0xf4>)
     198:	68db      	ldr	r3, [r3, #12]
     19a:	06db      	lsls	r3, r3, #27
     19c:	d5fb      	bpl.n	196 <ClocksInit+0x7e>
	{
		/* Wait for synchronization */
	}
	SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
     19e:	4a1f      	ldr	r2, [pc, #124]	; (21c <ClocksInit+0x104>)
     1a0:	4b1a      	ldr	r3, [pc, #104]	; (20c <ClocksInit+0xf4>)
     1a2:	62da      	str	r2, [r3, #44]	; 0x2c
	SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
	SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     1a4:	4b19      	ldr	r3, [pc, #100]	; (20c <ClocksInit+0xf4>)
     1a6:	68db      	ldr	r3, [r3, #12]
     1a8:	06db      	lsls	r3, r3, #27
     1aa:	d5fb      	bpl.n	1a4 <ClocksInit+0x8c>
	{
		/* Wait for synchronization */
	}

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
     1ac:	4a17      	ldr	r2, [pc, #92]	; (20c <ClocksInit+0xf4>)
     1ae:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     1b0:	491b      	ldr	r1, [pc, #108]	; (220 <ClocksInit+0x108>)
     1b2:	430b      	orrs	r3, r1
     1b4:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL_DFLLCTRL_WAITLOCK |
	SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     1b6:	4b15      	ldr	r3, [pc, #84]	; (20c <ClocksInit+0xf4>)
     1b8:	68db      	ldr	r3, [r3, #12]
     1ba:	06db      	lsls	r3, r3, #27
     1bc:	d5fb      	bpl.n	1b6 <ClocksInit+0x9e>
	{
		/* Wait for synchronization */
	}

	/* Enable the DFLL */
	SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     1be:	4a13      	ldr	r2, [pc, #76]	; (20c <ClocksInit+0xf4>)
     1c0:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     1c2:	2102      	movs	r1, #2
     1c4:	430b      	orrs	r3, r1
     1c6:	b29b      	uxth	r3, r3
     1c8:	8493      	strh	r3, [r2, #36]	; 0x24
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     1ca:	4b10      	ldr	r3, [pc, #64]	; (20c <ClocksInit+0xf4>)
     1cc:	68db      	ldr	r3, [r3, #12]
     1ce:	061b      	lsls	r3, r3, #24
     1d0:	d5fb      	bpl.n	1ca <ClocksInit+0xb2>
	(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     1d2:	4b0e      	ldr	r3, [pc, #56]	; (20c <ClocksInit+0xf4>)
     1d4:	68db      	ldr	r3, [r3, #12]
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     1d6:	065b      	lsls	r3, r3, #25
     1d8:	d5f7      	bpl.n	1ca <ClocksInit+0xb2>
	{
		/* Wait for locks flags */
	}
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     1da:	4b0c      	ldr	r3, [pc, #48]	; (20c <ClocksInit+0xf4>)
     1dc:	68db      	ldr	r3, [r3, #12]
     1de:	06db      	lsls	r3, r3, #27
     1e0:	d5fb      	bpl.n	1da <ClocksInit+0xc2>
	{
		/* Wait for synchronization */
	}

	/* Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz. */
	GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
     1e2:	2200      	movs	r2, #0
     1e4:	4b0b      	ldr	r3, [pc, #44]	; (214 <ClocksInit+0xfc>)
     1e6:	609a      	str	r2, [r3, #8]
	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     1e8:	4b0a      	ldr	r3, [pc, #40]	; (214 <ClocksInit+0xfc>)
     1ea:	785b      	ldrb	r3, [r3, #1]
     1ec:	b25b      	sxtb	r3, r3
     1ee:	2b00      	cmp	r3, #0
     1f0:	dbfa      	blt.n	1e8 <ClocksInit+0xd0>
	{
		/* Wait for synchronization */
	}

	/* Write Generic Clock Generator 0 configuration */
	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
     1f2:	4a0c      	ldr	r2, [pc, #48]	; (224 <ClocksInit+0x10c>)
     1f4:	4b07      	ldr	r3, [pc, #28]	; (214 <ClocksInit+0xfc>)
     1f6:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
	//                  GCLK_GENCTRL_OE | // Output clock to a pin for tests
	GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
	GCLK_GENCTRL_GENEN ;
	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     1f8:	4b06      	ldr	r3, [pc, #24]	; (214 <ClocksInit+0xfc>)
     1fa:	785b      	ldrb	r3, [r3, #1]
     1fc:	b25b      	sxtb	r3, r3
     1fe:	2b00      	cmp	r3, #0
     200:	dbfa      	blt.n	1f8 <ClocksInit+0xe0>
	{
		/* Wait for synchronization */
	}
}
     202:	4770      	bx	lr
     204:	41004000 	.word	0x41004000
     208:	40000400 	.word	0x40000400
     20c:	40000800 	.word	0x40000800
     210:	0000060c 	.word	0x0000060c
     214:	40000c00 	.word	0x40000c00
     218:	00010501 	.word	0x00010501
     21c:	7dff05b9 	.word	0x7dff05b9
     220:	00000a04 	.word	0x00000a04
     224:	00030700 	.word	0x00030700

00000228 <binary_op_availableQ>:
#include "command.h"
#include "../types.h"

static int binary_op_availableQ(const calc_state_t * calc_state, const sys_state_t * sys_state) {
	return 1; // TODO: implement availability
}
     228:	2001      	movs	r0, #1
     22a:	4770      	bx	lr

0000022c <available_always>:
static int unary_op_availableQ(const calc_state_t * calc_state, const sys_state_t * sys_state) {
	return 1; // TODO: implement availability
}
static int available_always(const calc_state_t * calc_state, const sys_state_t * sys_state) {
	return 1; // TODO: implement availability
}
     22c:	2001      	movs	r0, #1
     22e:	4770      	bx	lr

00000230 <cmd_re_im_func>:

static int cmd_re_im_func(calc_state_t * calc_state, sys_state_t * sys_state) {
	switch (sys_state->ui.cpx_view) {
     230:	7a4b      	ldrb	r3, [r1, #9]
     232:	2b01      	cmp	r3, #1
     234:	d00a      	beq.n	24c <cmd_re_im_func+0x1c>
     236:	2b00      	cmp	r3, #0
     238:	d005      	beq.n	246 <cmd_re_im_func+0x16>
     23a:	2b02      	cmp	r3, #2
     23c:	d009      	beq.n	252 <cmd_re_im_func+0x22>
     23e:	2b03      	cmp	r3, #3
     240:	d00a      	beq.n	258 <cmd_re_im_func+0x28>
		case cv_theta:
			sys_state->ui.cpx_view = cv_r;
			break;
	}
	return 0;
}
     242:	2000      	movs	r0, #0
     244:	4770      	bx	lr
			sys_state->ui.cpx_view = cv_im;
     246:	2301      	movs	r3, #1
     248:	724b      	strb	r3, [r1, #9]
			break;
     24a:	e7fa      	b.n	242 <cmd_re_im_func+0x12>
			sys_state->ui.cpx_view = cv_re;
     24c:	2300      	movs	r3, #0
     24e:	724b      	strb	r3, [r1, #9]
			break;
     250:	e7f7      	b.n	242 <cmd_re_im_func+0x12>
			sys_state->ui.cpx_view = cv_theta;
     252:	2303      	movs	r3, #3
     254:	724b      	strb	r3, [r1, #9]
			break;
     256:	e7f4      	b.n	242 <cmd_re_im_func+0x12>
			sys_state->ui.cpx_view = cv_r;
     258:	2302      	movs	r3, #2
     25a:	724b      	strb	r3, [r1, #9]
			break;
     25c:	e7f1      	b.n	242 <cmd_re_im_func+0x12>

0000025e <cmd_rec_pol_func>:
	.num_operands = 0,
	.op_func = cmd_re_im_func
};

static int cmd_rec_pol_func(calc_state_t * calc_state, sys_state_t * sys_state) {
	switch (sys_state->ui.cpx_view) {
     25e:	7a4b      	ldrb	r3, [r1, #9]
     260:	2b01      	cmp	r3, #1
     262:	d00a      	beq.n	27a <cmd_rec_pol_func+0x1c>
     264:	2b00      	cmp	r3, #0
     266:	d005      	beq.n	274 <cmd_rec_pol_func+0x16>
     268:	2b02      	cmp	r3, #2
     26a:	d009      	beq.n	280 <cmd_rec_pol_func+0x22>
     26c:	2b03      	cmp	r3, #3
     26e:	d00a      	beq.n	286 <cmd_rec_pol_func+0x28>
		case cv_theta:
			sys_state->ui.cpx_view = cv_re;
			break;
	}
	return 0;
}
     270:	2000      	movs	r0, #0
     272:	4770      	bx	lr
			sys_state->ui.cpx_view = cv_r;
     274:	2302      	movs	r3, #2
     276:	724b      	strb	r3, [r1, #9]
			break;
     278:	e7fa      	b.n	270 <cmd_rec_pol_func+0x12>
			sys_state->ui.cpx_view = cv_r;
     27a:	2302      	movs	r3, #2
     27c:	724b      	strb	r3, [r1, #9]
			break;
     27e:	e7f7      	b.n	270 <cmd_rec_pol_func+0x12>
			sys_state->ui.cpx_view = cv_re;
     280:	2300      	movs	r3, #0
     282:	724b      	strb	r3, [r1, #9]
			break;
     284:	e7f4      	b.n	270 <cmd_rec_pol_func+0x12>
			sys_state->ui.cpx_view = cv_re;
     286:	2300      	movs	r3, #0
     288:	724b      	strb	r3, [r1, #9]
			break;
     28a:	e7f1      	b.n	270 <cmd_rec_pol_func+0x12>

0000028c <cmd_reint_drg_func>:
	.num_operands = 0,
	.op_func = cmd_rec_pol_func
};

static int cmd_reint_drg_func(calc_state_t * calc_state, sys_state_t * sys_state) {
	switch (sys_state->sys.angle_units) {
     28c:	784b      	ldrb	r3, [r1, #1]
     28e:	2b01      	cmp	r3, #1
     290:	d008      	beq.n	2a4 <cmd_reint_drg_func+0x18>
     292:	2b00      	cmp	r3, #0
     294:	d003      	beq.n	29e <cmd_reint_drg_func+0x12>
     296:	2b02      	cmp	r3, #2
     298:	d00c      	beq.n	2b4 <cmd_reint_drg_func+0x28>
		case au_grad:
			sys_state->sys.angle_units = au_deg;
			break;
	}
	return 0;
}
     29a:	2000      	movs	r0, #0
     29c:	4770      	bx	lr
			sys_state->sys.angle_units = au_rad;
     29e:	2301      	movs	r3, #1
     2a0:	704b      	strb	r3, [r1, #1]
			break;
     2a2:	e7fa      	b.n	29a <cmd_reint_drg_func+0xe>
			sys_state->sys.angle_units = sys_state->settings.grad_enabled ? au_grad : au_deg;
     2a4:	780b      	ldrb	r3, [r1, #0]
     2a6:	2b00      	cmp	r3, #0
     2a8:	d102      	bne.n	2b0 <cmd_reint_drg_func+0x24>
     2aa:	2300      	movs	r3, #0
     2ac:	704b      	strb	r3, [r1, #1]
			break;
     2ae:	e7f4      	b.n	29a <cmd_reint_drg_func+0xe>
			sys_state->sys.angle_units = sys_state->settings.grad_enabled ? au_grad : au_deg;
     2b0:	2302      	movs	r3, #2
     2b2:	e7fb      	b.n	2ac <cmd_reint_drg_func+0x20>
			sys_state->sys.angle_units = au_deg;
     2b4:	2300      	movs	r3, #0
     2b6:	704b      	strb	r3, [r1, #1]
			break;
     2b8:	e7ef      	b.n	29a <cmd_reint_drg_func+0xe>
	...

000002bc <cmd_add_func>:
	.op_func = cmd_reint_drg_func
};



static int cmd_add_func(calc_state_t * calc_state, sys_state_t * sys_state) {
     2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     2be:	0004      	movs	r4, r0
	if (sys_state->sys.entry_mode == em_rpn) {
     2c0:	78cb      	ldrb	r3, [r1, #3]
     2c2:	2b01      	cmp	r3, #1
     2c4:	d001      	beq.n	2ca <cmd_add_func+0xe>
		calc_state->rpn.stack[0] = calc_state->rpn.stack[0] + calc_state->rpn.stack[1];
	} else {
		
	}
	return 0;
}
     2c6:	2000      	movs	r0, #0
     2c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		calc_state->rpn.stack[0] = calc_state->rpn.stack[0] + calc_state->rpn.stack[1];
     2ca:	4d09      	ldr	r5, [pc, #36]	; (2f0 <cmd_add_func+0x34>)
     2cc:	6902      	ldr	r2, [r0, #16]
     2ce:	6943      	ldr	r3, [r0, #20]
     2d0:	6841      	ldr	r1, [r0, #4]
     2d2:	6800      	ldr	r0, [r0, #0]
     2d4:	47a8      	blx	r5
     2d6:	0006      	movs	r6, r0
     2d8:	000f      	movs	r7, r1
     2da:	69a2      	ldr	r2, [r4, #24]
     2dc:	69e3      	ldr	r3, [r4, #28]
     2de:	68a0      	ldr	r0, [r4, #8]
     2e0:	68e1      	ldr	r1, [r4, #12]
     2e2:	47a8      	blx	r5
     2e4:	6026      	str	r6, [r4, #0]
     2e6:	6067      	str	r7, [r4, #4]
     2e8:	60a0      	str	r0, [r4, #8]
     2ea:	60e1      	str	r1, [r4, #12]
     2ec:	e7eb      	b.n	2c6 <cmd_add_func+0xa>
     2ee:	46c0      	nop			; (mov r8, r8)
     2f0:	00001861 	.word	0x00001861

000002f4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2f4:	e7fe      	b.n	2f4 <Dummy_Handler>
	...

000002f8 <Reset_Handler>:
{
     2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     2fa:	4a23      	ldr	r2, [pc, #140]	; (388 <Reset_Handler+0x90>)
     2fc:	4b23      	ldr	r3, [pc, #140]	; (38c <Reset_Handler+0x94>)
     2fe:	429a      	cmp	r2, r3
     300:	d009      	beq.n	316 <Reset_Handler+0x1e>
     302:	4b22      	ldr	r3, [pc, #136]	; (38c <Reset_Handler+0x94>)
     304:	4a20      	ldr	r2, [pc, #128]	; (388 <Reset_Handler+0x90>)
     306:	e003      	b.n	310 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     308:	6811      	ldr	r1, [r2, #0]
     30a:	6019      	str	r1, [r3, #0]
     30c:	3304      	adds	r3, #4
     30e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     310:	491f      	ldr	r1, [pc, #124]	; (390 <Reset_Handler+0x98>)
     312:	428b      	cmp	r3, r1
     314:	d3f8      	bcc.n	308 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     316:	4b1f      	ldr	r3, [pc, #124]	; (394 <Reset_Handler+0x9c>)
     318:	e002      	b.n	320 <Reset_Handler+0x28>
                *pDest++ = 0;
     31a:	2200      	movs	r2, #0
     31c:	601a      	str	r2, [r3, #0]
     31e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     320:	4a1d      	ldr	r2, [pc, #116]	; (398 <Reset_Handler+0xa0>)
     322:	4293      	cmp	r3, r2
     324:	d3f9      	bcc.n	31a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     326:	4a1d      	ldr	r2, [pc, #116]	; (39c <Reset_Handler+0xa4>)
     328:	21ff      	movs	r1, #255	; 0xff
     32a:	4b1d      	ldr	r3, [pc, #116]	; (3a0 <Reset_Handler+0xa8>)
     32c:	438b      	bics	r3, r1
     32e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     330:	39fd      	subs	r1, #253	; 0xfd
     332:	2390      	movs	r3, #144	; 0x90
     334:	005b      	lsls	r3, r3, #1
     336:	4a1b      	ldr	r2, [pc, #108]	; (3a4 <Reset_Handler+0xac>)
     338:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     33a:	4a1b      	ldr	r2, [pc, #108]	; (3a8 <Reset_Handler+0xb0>)
     33c:	78d3      	ldrb	r3, [r2, #3]
     33e:	2503      	movs	r5, #3
     340:	43ab      	bics	r3, r5
     342:	2402      	movs	r4, #2
     344:	4323      	orrs	r3, r4
     346:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     348:	78d3      	ldrb	r3, [r2, #3]
     34a:	270c      	movs	r7, #12
     34c:	43bb      	bics	r3, r7
     34e:	2608      	movs	r6, #8
     350:	4333      	orrs	r3, r6
     352:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     354:	4b15      	ldr	r3, [pc, #84]	; (3ac <Reset_Handler+0xb4>)
     356:	7b98      	ldrb	r0, [r3, #14]
     358:	2230      	movs	r2, #48	; 0x30
     35a:	4390      	bics	r0, r2
     35c:	2220      	movs	r2, #32
     35e:	4310      	orrs	r0, r2
     360:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     362:	7b99      	ldrb	r1, [r3, #14]
     364:	43b9      	bics	r1, r7
     366:	4331      	orrs	r1, r6
     368:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     36a:	7b9a      	ldrb	r2, [r3, #14]
     36c:	43aa      	bics	r2, r5
     36e:	4322      	orrs	r2, r4
     370:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     372:	4a0f      	ldr	r2, [pc, #60]	; (3b0 <Reset_Handler+0xb8>)
     374:	6851      	ldr	r1, [r2, #4]
     376:	2380      	movs	r3, #128	; 0x80
     378:	430b      	orrs	r3, r1
     37a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     37c:	4b0d      	ldr	r3, [pc, #52]	; (3b4 <Reset_Handler+0xbc>)
     37e:	4798      	blx	r3
        main();
     380:	4b0d      	ldr	r3, [pc, #52]	; (3b8 <Reset_Handler+0xc0>)
     382:	4798      	blx	r3
     384:	e7fe      	b.n	384 <Reset_Handler+0x8c>
     386:	46c0      	nop			; (mov r8, r8)
     388:	00002730 	.word	0x00002730
     38c:	20000000 	.word	0x20000000
     390:	200004e4 	.word	0x200004e4
     394:	200004f0 	.word	0x200004f0
     398:	20000f44 	.word	0x20000f44
     39c:	e000ed00 	.word	0xe000ed00
     3a0:	00000000 	.word	0x00000000
     3a4:	41007000 	.word	0x41007000
     3a8:	41005000 	.word	0x41005000
     3ac:	41004800 	.word	0x41004800
     3b0:	41004000 	.word	0x41004000
     3b4:	00001ebd 	.word	0x00001ebd
     3b8:	000013b1 	.word	0x000013b1

000003bc <DMA_init>:

void DMA_init(void)
{
	static int initialized = 0;
	
	if (!initialized)
     3bc:	4b15      	ldr	r3, [pc, #84]	; (414 <DMA_init+0x58>)
     3be:	681b      	ldr	r3, [r3, #0]
     3c0:	2b00      	cmp	r3, #0
     3c2:	d126      	bne.n	412 <DMA_init+0x56>
	{
		/* enable peripheral clock */
		PM->APBBMASK.bit.DMAC_ = 1;
     3c4:	4b14      	ldr	r3, [pc, #80]	; (418 <DMA_init+0x5c>)
     3c6:	69d9      	ldr	r1, [r3, #28]
     3c8:	2210      	movs	r2, #16
     3ca:	430a      	orrs	r2, r1
     3cc:	61da      	str	r2, [r3, #28]
		
		/* enable AHB master clock */
		PM->AHBMASK.bit.DMAC_ = 1;
     3ce:	6959      	ldr	r1, [r3, #20]
     3d0:	2220      	movs	r2, #32
     3d2:	430a      	orrs	r2, r1
     3d4:	615a      	str	r2, [r3, #20]

		/* configure DMA controller */
		DMAC->BASEADDR.reg = (uint32_t)descriptor_section;                    // descriptor memory section start
     3d6:	4a0f      	ldr	r2, [pc, #60]	; (414 <DMA_init+0x58>)
     3d8:	0011      	movs	r1, r2
     3da:	3110      	adds	r1, #16
     3dc:	4b0f      	ldr	r3, [pc, #60]	; (41c <DMA_init+0x60>)
     3de:	6359      	str	r1, [r3, #52]	; 0x34
		DMAC->WRBADDR.reg = (uint32_t)write_back_section;                     // descriptor write-back memory section start
     3e0:	0011      	movs	r1, r2
     3e2:	3130      	adds	r1, #48	; 0x30
     3e4:	6399      	str	r1, [r3, #56]	; 0x38
		DMAC->CTRL.bit.LVLEN0 = 1;                                            // enable level 0 priority
     3e6:	8818      	ldrh	r0, [r3, #0]
     3e8:	2180      	movs	r1, #128	; 0x80
     3ea:	0049      	lsls	r1, r1, #1
     3ec:	4301      	orrs	r1, r0
     3ee:	8019      	strh	r1, [r3, #0]
		DMAC->CTRL.bit.LVLEN1 = 1;                                            // enable level 1 priority
     3f0:	8818      	ldrh	r0, [r3, #0]
     3f2:	2180      	movs	r1, #128	; 0x80
     3f4:	0089      	lsls	r1, r1, #2
     3f6:	4301      	orrs	r1, r0
     3f8:	8019      	strh	r1, [r3, #0]
		DMAC->CTRL.bit.LVLEN2 = 1;                                            // enable level 2 priority
     3fa:	8818      	ldrh	r0, [r3, #0]
     3fc:	2180      	movs	r1, #128	; 0x80
     3fe:	00c9      	lsls	r1, r1, #3
     400:	4301      	orrs	r1, r0
     402:	8019      	strh	r1, [r3, #0]
		DMAC->CTRL.bit.LVLEN3 = 1;                                            // enable level 3 priority
     404:	8818      	ldrh	r0, [r3, #0]
     406:	2180      	movs	r1, #128	; 0x80
     408:	0109      	lsls	r1, r1, #4
     40a:	4301      	orrs	r1, r0
     40c:	8019      	strh	r1, [r3, #0]
		
		/* DMA is initialized */
		initialized = 1;
     40e:	2301      	movs	r3, #1
     410:	6013      	str	r3, [r2, #0]
	}
}
     412:	4770      	bx	lr
     414:	20000510 	.word	0x20000510
     418:	40000400 	.word	0x40000400
     41c:	41004800 	.word	0x41004800

00000420 <DMA_add_channel>:

/* add the first least significant free channel with its descriptor (TODO: implement linked descriptors) */
void DMA_add_channel(int source, DmacDescriptor *descriptor)
{
     420:	b570      	push	{r4, r5, r6, lr}
     422:	0004      	movs	r4, r0
	/* disable DMA if enabled */
	if (DMAC->CTRL.bit.DMAENABLE)
     424:	4b1f      	ldr	r3, [pc, #124]	; (4a4 <DMA_add_channel+0x84>)
     426:	881b      	ldrh	r3, [r3, #0]
     428:	079b      	lsls	r3, r3, #30
     42a:	d504      	bpl.n	436 <DMA_add_channel+0x16>
		DMAC->CTRL.bit.DMAENABLE = 0;
     42c:	4a1d      	ldr	r2, [pc, #116]	; (4a4 <DMA_add_channel+0x84>)
     42e:	8813      	ldrh	r3, [r2, #0]
     430:	2002      	movs	r0, #2
     432:	4383      	bics	r3, r0
     434:	8013      	strh	r3, [r2, #0]
	while (DMAC->CTRL.bit.DMAENABLE)
     436:	4b1b      	ldr	r3, [pc, #108]	; (4a4 <DMA_add_channel+0x84>)
     438:	881b      	ldrh	r3, [r3, #0]
     43a:	079b      	lsls	r3, r3, #30
     43c:	d4fb      	bmi.n	436 <DMA_add_channel+0x16>
		;
		
	/* add transfer descriptor to transfer descriptor section (before enabling channel!) */
	memcpy(descriptor_section + used_channels * sizeof(DmacDescriptor), descriptor, sizeof(DmacDescriptor));
     43e:	4e1a      	ldr	r6, [pc, #104]	; (4a8 <DMA_add_channel+0x88>)
     440:	6d35      	ldr	r5, [r6, #80]	; 0x50
     442:	0030      	movs	r0, r6
     444:	3010      	adds	r0, #16
     446:	022b      	lsls	r3, r5, #8
     448:	18c0      	adds	r0, r0, r3
     44a:	2210      	movs	r2, #16
     44c:	4b17      	ldr	r3, [pc, #92]	; (4ac <DMA_add_channel+0x8c>)
     44e:	4798      	blx	r3
		
	/* configure and enable first least significant free channel */
	DMAC->CHID.bit.ID = used_channels++;                                  // use first free channel 
     450:	1c6b      	adds	r3, r5, #1
     452:	6533      	str	r3, [r6, #80]	; 0x50
     454:	4b13      	ldr	r3, [pc, #76]	; (4a4 <DMA_add_channel+0x84>)
     456:	203f      	movs	r0, #63	; 0x3f
     458:	5c1a      	ldrb	r2, [r3, r0]
     45a:	210f      	movs	r1, #15
     45c:	4029      	ands	r1, r5
     45e:	250f      	movs	r5, #15
     460:	43aa      	bics	r2, r5
     462:	430a      	orrs	r2, r1
     464:	541a      	strb	r2, [r3, r0]
	DMAC->CHCTRLB.bit.LVL = 0x00;                                         // channel priority level 0
     466:	6c59      	ldr	r1, [r3, #68]	; 0x44
     468:	2260      	movs	r2, #96	; 0x60
     46a:	4391      	bics	r1, r2
     46c:	6459      	str	r1, [r3, #68]	; 0x44
	DMAC->CHCTRLB.bit.TRIGACT = 0x02;                                     // one trigger each beat transfer
     46e:	6c59      	ldr	r1, [r3, #68]	; 0x44
     470:	4a0f      	ldr	r2, [pc, #60]	; (4b0 <DMA_add_channel+0x90>)
     472:	4011      	ands	r1, r2
     474:	2280      	movs	r2, #128	; 0x80
     476:	0412      	lsls	r2, r2, #16
     478:	430a      	orrs	r2, r1
     47a:	645a      	str	r2, [r3, #68]	; 0x44
	DMAC->CHCTRLB.bit.TRIGSRC = source;                                   // select trigger source
     47c:	4020      	ands	r0, r4
     47e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     480:	0200      	lsls	r0, r0, #8
     482:	490c      	ldr	r1, [pc, #48]	; (4b4 <DMA_add_channel+0x94>)
     484:	400a      	ands	r2, r1
     486:	4310      	orrs	r0, r2
     488:	6458      	str	r0, [r3, #68]	; 0x44
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;                             // enable channel 
     48a:	2140      	movs	r1, #64	; 0x40
     48c:	5c5a      	ldrb	r2, [r3, r1]
     48e:	2402      	movs	r4, #2
     490:	4322      	orrs	r2, r4
     492:	b2d2      	uxtb	r2, r2
     494:	545a      	strb	r2, [r3, r1]
		
	/* enable DMA block transfer complete interrupt */
	DMAC->CHINTENSET.bit.TCMPL = 1;                                       // enable DMA block transfer complete interrupt
     496:	204d      	movs	r0, #77	; 0x4d
     498:	5c1a      	ldrb	r2, [r3, r0]
     49a:	4322      	orrs	r2, r4
     49c:	541a      	strb	r2, [r3, r0]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     49e:	4b06      	ldr	r3, [pc, #24]	; (4b8 <DMA_add_channel+0x98>)
     4a0:	6019      	str	r1, [r3, #0]
	NVIC_EnableIRQ(DMAC_IRQn);                                            // enable DMA interrupt in NVIC
}
     4a2:	bd70      	pop	{r4, r5, r6, pc}
     4a4:	41004800 	.word	0x41004800
     4a8:	20000510 	.word	0x20000510
     4ac:	00001f05 	.word	0x00001f05
     4b0:	ff3fffff 	.word	0xff3fffff
     4b4:	ffffc0ff 	.word	0xffffc0ff
     4b8:	e000e100 	.word	0xe000e100

000004bc <DMA_enable>:

void DMA_enable(void)
{
	/* enable DMA controller */
	DMAC->CTRL.bit.DMAENABLE = 1;
     4bc:	4a02      	ldr	r2, [pc, #8]	; (4c8 <DMA_enable+0xc>)
     4be:	8813      	ldrh	r3, [r2, #0]
     4c0:	2102      	movs	r1, #2
     4c2:	430b      	orrs	r3, r1
     4c4:	8013      	strh	r3, [r2, #0]
}
     4c6:	4770      	bx	lr
     4c8:	41004800 	.word	0x41004800

000004cc <DMAC_Handler>:

void DMAC_Handler(void)
{
     4cc:	b530      	push	{r4, r5, lr}
	//static int count;
	for (int channel = 0 ; channel < used_channels ; channel++)  // check interrupt for every registered channel
     4ce:	2200      	movs	r2, #0
     4d0:	e000      	b.n	4d4 <DMAC_Handler+0x8>
     4d2:	3201      	adds	r2, #1
     4d4:	4b12      	ldr	r3, [pc, #72]	; (520 <DMAC_Handler+0x54>)
     4d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
     4d8:	429a      	cmp	r2, r3
     4da:	da1f      	bge.n	51c <DMAC_Handler+0x50>
	{
		DMAC->CHID.bit.ID = channel;      
     4dc:	4911      	ldr	r1, [pc, #68]	; (524 <DMAC_Handler+0x58>)
     4de:	243f      	movs	r4, #63	; 0x3f
     4e0:	5d0b      	ldrb	r3, [r1, r4]
     4e2:	200f      	movs	r0, #15
     4e4:	4010      	ands	r0, r2
     4e6:	250f      	movs	r5, #15
     4e8:	43ab      	bics	r3, r5
     4ea:	4303      	orrs	r3, r0
     4ec:	550b      	strb	r3, [r1, r4]
		if (DMAC->CHINTFLAG.bit.TCMPL && DMAC->CHINTENSET.bit.TCMPL)
     4ee:	234e      	movs	r3, #78	; 0x4e
     4f0:	5ccb      	ldrb	r3, [r1, r3]
     4f2:	079b      	lsls	r3, r3, #30
     4f4:	d5ed      	bpl.n	4d2 <DMAC_Handler+0x6>
     4f6:	234d      	movs	r3, #77	; 0x4d
     4f8:	5ccb      	ldrb	r3, [r1, r3]
     4fa:	079b      	lsls	r3, r3, #30
     4fc:	d5e9      	bpl.n	4d2 <DMAC_Handler+0x6>
		{
			if (DMAC->CHID.bit.ID == 0x00)   // handle SPI transfer complete interrupt
     4fe:	233f      	movs	r3, #63	; 0x3f
     500:	5ccb      	ldrb	r3, [r1, r3]
     502:	071b      	lsls	r3, r3, #28
     504:	d1e5      	bne.n	4d2 <DMAC_Handler+0x6>
			{
				DMAC->CHINTFLAG.bit.TCMPL = 1;                 // acknowledge interrupt
     506:	334e      	adds	r3, #78	; 0x4e
     508:	5cc8      	ldrb	r0, [r1, r3]
     50a:	2402      	movs	r4, #2
     50c:	4320      	orrs	r0, r4
     50e:	54c8      	strb	r0, [r1, r3]
				DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;      // re-enable DMA channel
     510:	2040      	movs	r0, #64	; 0x40
     512:	5c0b      	ldrb	r3, [r1, r0]
     514:	4323      	orrs	r3, r4
     516:	b2db      	uxtb	r3, r3
     518:	540b      	strb	r3, [r1, r0]
     51a:	e7da      	b.n	4d2 <DMAC_Handler+0x6>
			}
		}
	}
}
     51c:	bd30      	pop	{r4, r5, pc}
     51e:	46c0      	nop			; (mov r8, r8)
     520:	20000510 	.word	0x20000510
     524:	41004800 	.word	0x41004800

00000528 <gpio_set_pin>:
	} else if (port == PORTB) {
		REG_PORT_OUTTGL1 = 1 << pin;
	}
}
void gpio_set_pin(unsigned int port, unsigned long pin, int val) {
	if (port == PORTA) {
     528:	2800      	cmp	r0, #0
     52a:	d10b      	bne.n	544 <gpio_set_pin+0x1c>
		if (val)
     52c:	2a00      	cmp	r2, #0
     52e:	d004      	beq.n	53a <gpio_set_pin+0x12>
			REG_PORT_OUTSET0 = 1 << pin;
     530:	2301      	movs	r3, #1
     532:	408b      	lsls	r3, r1
     534:	4a0b      	ldr	r2, [pc, #44]	; (564 <gpio_set_pin+0x3c>)
     536:	6013      	str	r3, [r2, #0]
     538:	e006      	b.n	548 <gpio_set_pin+0x20>
		else
			REG_PORT_OUTCLR0 = 1 << pin;
     53a:	2301      	movs	r3, #1
     53c:	408b      	lsls	r3, r1
     53e:	4a0a      	ldr	r2, [pc, #40]	; (568 <gpio_set_pin+0x40>)
     540:	6013      	str	r3, [r2, #0]
     542:	e001      	b.n	548 <gpio_set_pin+0x20>
	} else if (port == PORTB) {
     544:	2801      	cmp	r0, #1
     546:	d000      	beq.n	54a <gpio_set_pin+0x22>
		if (val)
			REG_PORT_OUTSET1 = 1 << pin;
		else
			REG_PORT_OUTCLR1 = 1 << pin;
	}
}
     548:	4770      	bx	lr
		if (val)
     54a:	2a00      	cmp	r2, #0
     54c:	d104      	bne.n	558 <gpio_set_pin+0x30>
			REG_PORT_OUTCLR1 = 1 << pin;
     54e:	2301      	movs	r3, #1
     550:	408b      	lsls	r3, r1
     552:	4a06      	ldr	r2, [pc, #24]	; (56c <gpio_set_pin+0x44>)
     554:	6013      	str	r3, [r2, #0]
}
     556:	e7f7      	b.n	548 <gpio_set_pin+0x20>
			REG_PORT_OUTSET1 = 1 << pin;
     558:	2301      	movs	r3, #1
     55a:	408b      	lsls	r3, r1
     55c:	4a04      	ldr	r2, [pc, #16]	; (570 <gpio_set_pin+0x48>)
     55e:	6013      	str	r3, [r2, #0]
     560:	e7f2      	b.n	548 <gpio_set_pin+0x20>
     562:	46c0      	nop			; (mov r8, r8)
     564:	41004418 	.word	0x41004418
     568:	41004414 	.word	0x41004414
     56c:	41004494 	.word	0x41004494
     570:	41004498 	.word	0x41004498

00000574 <gpio_set_pin_dir>:

void gpio_set_pin_dir(unsigned int port, unsigned long pin, int val) {
	
	if (port == PORTA) {
     574:	2800      	cmp	r0, #0
     576:	d11f      	bne.n	5b8 <gpio_set_pin_dir+0x44>
		if (val == GPIO_DIR_OUT) {
     578:	2a01      	cmp	r2, #1
     57a:	d00e      	beq.n	59a <gpio_set_pin_dir+0x26>
			REG_PORT_DIRSET0 = 1 << pin;
			PORT->Group[port].PINCFG[pin].bit.INEN = 0;
		} else {
			REG_PORT_DIRCLR0 = 1 << pin;
     57c:	2301      	movs	r3, #1
     57e:	408b      	lsls	r3, r1
     580:	4a1e      	ldr	r2, [pc, #120]	; (5fc <gpio_set_pin_dir+0x88>)
     582:	6013      	str	r3, [r2, #0]
			PORT->Group[port].PINCFG[pin].bit.INEN = 1;
     584:	01c0      	lsls	r0, r0, #7
     586:	4b1e      	ldr	r3, [pc, #120]	; (600 <gpio_set_pin_dir+0x8c>)
     588:	469c      	mov	ip, r3
     58a:	4460      	add	r0, ip
     58c:	1841      	adds	r1, r0, r1
     58e:	3140      	adds	r1, #64	; 0x40
     590:	780b      	ldrb	r3, [r1, #0]
     592:	2202      	movs	r2, #2
     594:	4313      	orrs	r3, r2
     596:	700b      	strb	r3, [r1, #0]
			REG_PORT_DIRCLR1 = 1 << pin;
			PORT->Group[port].PINCFG[pin].bit.INEN = 1;
		}
	}

}
     598:	4770      	bx	lr
			REG_PORT_DIRSET0 = 1 << pin;
     59a:	2301      	movs	r3, #1
     59c:	408b      	lsls	r3, r1
     59e:	4a19      	ldr	r2, [pc, #100]	; (604 <gpio_set_pin_dir+0x90>)
     5a0:	6013      	str	r3, [r2, #0]
			PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     5a2:	01c0      	lsls	r0, r0, #7
     5a4:	4b16      	ldr	r3, [pc, #88]	; (600 <gpio_set_pin_dir+0x8c>)
     5a6:	469c      	mov	ip, r3
     5a8:	4460      	add	r0, ip
     5aa:	1841      	adds	r1, r0, r1
     5ac:	3140      	adds	r1, #64	; 0x40
     5ae:	780b      	ldrb	r3, [r1, #0]
     5b0:	2202      	movs	r2, #2
     5b2:	4393      	bics	r3, r2
     5b4:	700b      	strb	r3, [r1, #0]
     5b6:	e7ef      	b.n	598 <gpio_set_pin_dir+0x24>
		} else if (port == PORTB) {
     5b8:	2801      	cmp	r0, #1
     5ba:	d1ed      	bne.n	598 <gpio_set_pin_dir+0x24>
		if (val == GPIO_DIR_OUT) {
     5bc:	2a01      	cmp	r2, #1
     5be:	d00e      	beq.n	5de <gpio_set_pin_dir+0x6a>
			REG_PORT_DIRCLR1 = 1 << pin;
     5c0:	2301      	movs	r3, #1
     5c2:	408b      	lsls	r3, r1
     5c4:	4a10      	ldr	r2, [pc, #64]	; (608 <gpio_set_pin_dir+0x94>)
     5c6:	6013      	str	r3, [r2, #0]
			PORT->Group[port].PINCFG[pin].bit.INEN = 1;
     5c8:	01c0      	lsls	r0, r0, #7
     5ca:	4b0d      	ldr	r3, [pc, #52]	; (600 <gpio_set_pin_dir+0x8c>)
     5cc:	469c      	mov	ip, r3
     5ce:	4460      	add	r0, ip
     5d0:	1841      	adds	r1, r0, r1
     5d2:	3140      	adds	r1, #64	; 0x40
     5d4:	780b      	ldrb	r3, [r1, #0]
     5d6:	2202      	movs	r2, #2
     5d8:	4313      	orrs	r3, r2
     5da:	700b      	strb	r3, [r1, #0]
}
     5dc:	e7dc      	b.n	598 <gpio_set_pin_dir+0x24>
			REG_PORT_DIRSET1 = 1 << pin;
     5de:	2301      	movs	r3, #1
     5e0:	408b      	lsls	r3, r1
     5e2:	4a0a      	ldr	r2, [pc, #40]	; (60c <gpio_set_pin_dir+0x98>)
     5e4:	6013      	str	r3, [r2, #0]
			PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     5e6:	01c0      	lsls	r0, r0, #7
     5e8:	4b05      	ldr	r3, [pc, #20]	; (600 <gpio_set_pin_dir+0x8c>)
     5ea:	469c      	mov	ip, r3
     5ec:	4460      	add	r0, ip
     5ee:	1841      	adds	r1, r0, r1
     5f0:	3140      	adds	r1, #64	; 0x40
     5f2:	780b      	ldrb	r3, [r1, #0]
     5f4:	2202      	movs	r2, #2
     5f6:	4393      	bics	r3, r2
     5f8:	700b      	strb	r3, [r1, #0]
     5fa:	e7cd      	b.n	598 <gpio_set_pin_dir+0x24>
     5fc:	41004404 	.word	0x41004404
     600:	41004400 	.word	0x41004400
     604:	41004408 	.word	0x41004408
     608:	41004484 	.word	0x41004484
     60c:	41004488 	.word	0x41004488

00000610 <gpio_set_pin_drvstr>:
void gpio_set_pin_drvstr(unsigned int port, unsigned long pin, int val) {
	if (port != PORTA && port != PORTB) {
     610:	2801      	cmp	r0, #1
     612:	d900      	bls.n	616 <gpio_set_pin_drvstr+0x6>
		return;
	}
	PORT->Group[port].PINCFG[pin].bit.DRVSTR = (val ? 1 : 0);
}
     614:	4770      	bx	lr
	PORT->Group[port].PINCFG[pin].bit.DRVSTR = (val ? 1 : 0);
     616:	1e53      	subs	r3, r2, #1
     618:	419a      	sbcs	r2, r3
     61a:	01c0      	lsls	r0, r0, #7
     61c:	4b05      	ldr	r3, [pc, #20]	; (634 <gpio_set_pin_drvstr+0x24>)
     61e:	469c      	mov	ip, r3
     620:	4460      	add	r0, ip
     622:	1841      	adds	r1, r0, r1
     624:	3140      	adds	r1, #64	; 0x40
     626:	780b      	ldrb	r3, [r1, #0]
     628:	0192      	lsls	r2, r2, #6
     62a:	2040      	movs	r0, #64	; 0x40
     62c:	4383      	bics	r3, r0
     62e:	431a      	orrs	r2, r3
     630:	700a      	strb	r2, [r1, #0]
     632:	e7ef      	b.n	614 <gpio_set_pin_drvstr+0x4>
     634:	41004400 	.word	0x41004400

00000638 <gpio_set_pin_pull>:
void gpio_set_pin_pull(unsigned int port, unsigned long pin, int val) {
     638:	b510      	push	{r4, lr}
	if (port != PORTA && port != PORTB) {
     63a:	2801      	cmp	r0, #1
     63c:	d900      	bls.n	640 <gpio_set_pin_pull+0x8>
		PORT->Group[port].PINCFG[pin].bit.PULLEN = 1;
		PORT->Group[port].OUTSET.reg = 1 << pin;
	} else {
		PORT->Group[port].PINCFG[pin].bit.PULLEN = 0;
	}
}
     63e:	bd10      	pop	{r4, pc}
	if (val == GPIO_PULL_DOWN) {
     640:	2a02      	cmp	r2, #2
     642:	d00c      	beq.n	65e <gpio_set_pin_pull+0x26>
	} else if (val == GPIO_PULL_UP) {
     644:	2a01      	cmp	r2, #1
     646:	d018      	beq.n	67a <gpio_set_pin_pull+0x42>
		PORT->Group[port].PINCFG[pin].bit.PULLEN = 0;
     648:	01c0      	lsls	r0, r0, #7
     64a:	4b13      	ldr	r3, [pc, #76]	; (698 <gpio_set_pin_pull+0x60>)
     64c:	469c      	mov	ip, r3
     64e:	4460      	add	r0, ip
     650:	1841      	adds	r1, r0, r1
     652:	3140      	adds	r1, #64	; 0x40
     654:	780b      	ldrb	r3, [r1, #0]
     656:	2204      	movs	r2, #4
     658:	4393      	bics	r3, r2
     65a:	700b      	strb	r3, [r1, #0]
     65c:	e7ef      	b.n	63e <gpio_set_pin_pull+0x6>
		PORT->Group[port].PINCFG[pin].bit.PULLEN = 1;
     65e:	01c0      	lsls	r0, r0, #7
     660:	4b0d      	ldr	r3, [pc, #52]	; (698 <gpio_set_pin_pull+0x60>)
     662:	469c      	mov	ip, r3
     664:	4460      	add	r0, ip
     666:	1843      	adds	r3, r0, r1
     668:	3340      	adds	r3, #64	; 0x40
     66a:	781a      	ldrb	r2, [r3, #0]
     66c:	2404      	movs	r4, #4
     66e:	4322      	orrs	r2, r4
     670:	701a      	strb	r2, [r3, #0]
		PORT->Group[port].OUTCLR.reg = 1 << pin;
     672:	2301      	movs	r3, #1
     674:	408b      	lsls	r3, r1
     676:	6143      	str	r3, [r0, #20]
     678:	e7e1      	b.n	63e <gpio_set_pin_pull+0x6>
		PORT->Group[port].PINCFG[pin].bit.PULLEN = 1;
     67a:	01c0      	lsls	r0, r0, #7
     67c:	4b06      	ldr	r3, [pc, #24]	; (698 <gpio_set_pin_pull+0x60>)
     67e:	469c      	mov	ip, r3
     680:	4460      	add	r0, ip
     682:	1843      	adds	r3, r0, r1
     684:	3340      	adds	r3, #64	; 0x40
     686:	781a      	ldrb	r2, [r3, #0]
     688:	2404      	movs	r4, #4
     68a:	4322      	orrs	r2, r4
     68c:	701a      	strb	r2, [r3, #0]
		PORT->Group[port].OUTSET.reg = 1 << pin;
     68e:	2301      	movs	r3, #1
     690:	408b      	lsls	r3, r1
     692:	6183      	str	r3, [r0, #24]
     694:	e7d3      	b.n	63e <gpio_set_pin_pull+0x6>
     696:	46c0      	nop			; (mov r8, r8)
     698:	41004400 	.word	0x41004400

0000069c <gpio_read_pin>:


int gpio_read_pin(unsigned int port, unsigned long pin) {
	if (port == PORTA) {
     69c:	2800      	cmp	r0, #0
     69e:	d009      	beq.n	6b4 <gpio_read_pin+0x18>
		return (PORT->Group[0].IN.reg & (1 << pin)) ? 1 : 0;
	} else if (port == PORTB) {
     6a0:	2801      	cmp	r0, #1
     6a2:	d10f      	bne.n	6c4 <gpio_read_pin+0x28>
		return (PORT->Group[1].IN.reg & (1 << pin)) ? 1 : 0;
     6a4:	23a0      	movs	r3, #160	; 0xa0
     6a6:	4a09      	ldr	r2, [pc, #36]	; (6cc <gpio_read_pin+0x30>)
     6a8:	58d3      	ldr	r3, [r2, r3]
     6aa:	4088      	lsls	r0, r1
     6ac:	4018      	ands	r0, r3
     6ae:	1e43      	subs	r3, r0, #1
     6b0:	4198      	sbcs	r0, r3
	}
	return -1;
}
     6b2:	4770      	bx	lr
		return (PORT->Group[0].IN.reg & (1 << pin)) ? 1 : 0;
     6b4:	4b05      	ldr	r3, [pc, #20]	; (6cc <gpio_read_pin+0x30>)
     6b6:	6a1b      	ldr	r3, [r3, #32]
     6b8:	3001      	adds	r0, #1
     6ba:	4088      	lsls	r0, r1
     6bc:	4018      	ands	r0, r3
     6be:	1e43      	subs	r3, r0, #1
     6c0:	4198      	sbcs	r0, r3
     6c2:	e7f6      	b.n	6b2 <gpio_read_pin+0x16>
	return -1;
     6c4:	2001      	movs	r0, #1
     6c6:	4240      	negs	r0, r0
     6c8:	e7f3      	b.n	6b2 <gpio_read_pin+0x16>
     6ca:	46c0      	nop			; (mov r8, r8)
     6cc:	41004400 	.word	0x41004400

000006d0 <re_im_key_color>:
},
*/
//const kp_key keypad_map[KEYPAD_NUM_COLS * KEYPAD_NUM_ROWS] = {0};

// Determines the lighting of the re/im key based on the current view
static color_rgb re_im_key_color(const calc_state_t * calc_state, const sys_state_t * sys_state) {
     6d0:	b500      	push	{lr}
     6d2:	b083      	sub	sp, #12
	switch (sys_state->ui.cpx_view) {
     6d4:	7a4b      	ldrb	r3, [r1, #9]
     6d6:	2b01      	cmp	r3, #1
     6d8:	d02d      	beq.n	736 <re_im_key_color+0x66>
     6da:	2b00      	cmp	r3, #0
     6dc:	d009      	beq.n	6f2 <re_im_key_color+0x22>
     6de:	2b02      	cmp	r3, #2
     6e0:	d02f      	beq.n	742 <re_im_key_color+0x72>
     6e2:	2b03      	cmp	r3, #3
     6e4:	d033      	beq.n	74e <re_im_key_color+0x7e>
		case cv_r:
		return color_cplx_r;
		case cv_theta:
		return color_cplx_theta;
	}
	return color_off;
     6e6:	2203      	movs	r2, #3
     6e8:	491c      	ldr	r1, [pc, #112]	; (75c <re_im_key_color+0x8c>)
     6ea:	4668      	mov	r0, sp
     6ec:	4b1c      	ldr	r3, [pc, #112]	; (760 <re_im_key_color+0x90>)
     6ee:	4798      	blx	r3
     6f0:	e00d      	b.n	70e <re_im_key_color+0x3e>
		return sys_state->ui.view_is_real ? color_normal : color_cplx_re;
     6f2:	68cb      	ldr	r3, [r1, #12]
     6f4:	2b00      	cmp	r3, #0
     6f6:	d018      	beq.n	72a <re_im_key_color+0x5a>
     6f8:	2203      	movs	r2, #3
     6fa:	491a      	ldr	r1, [pc, #104]	; (764 <re_im_key_color+0x94>)
     6fc:	a801      	add	r0, sp, #4
     6fe:	4b18      	ldr	r3, [pc, #96]	; (760 <re_im_key_color+0x90>)
     700:	4798      	blx	r3
     702:	ab01      	add	r3, sp, #4
     704:	881a      	ldrh	r2, [r3, #0]
     706:	4669      	mov	r1, sp
     708:	800a      	strh	r2, [r1, #0]
     70a:	789b      	ldrb	r3, [r3, #2]
     70c:	708b      	strb	r3, [r1, #2]
     70e:	466b      	mov	r3, sp
     710:	781b      	ldrb	r3, [r3, #0]
     712:	466a      	mov	r2, sp
     714:	7852      	ldrb	r2, [r2, #1]
     716:	0212      	lsls	r2, r2, #8
     718:	20ff      	movs	r0, #255	; 0xff
     71a:	4018      	ands	r0, r3
     71c:	466b      	mov	r3, sp
     71e:	789b      	ldrb	r3, [r3, #2]
     720:	041b      	lsls	r3, r3, #16
     722:	4310      	orrs	r0, r2
     724:	4318      	orrs	r0, r3
}
     726:	b003      	add	sp, #12
     728:	bd00      	pop	{pc}
		return sys_state->ui.view_is_real ? color_normal : color_cplx_re;
     72a:	2203      	movs	r2, #3
     72c:	490e      	ldr	r1, [pc, #56]	; (768 <re_im_key_color+0x98>)
     72e:	a801      	add	r0, sp, #4
     730:	4b0b      	ldr	r3, [pc, #44]	; (760 <re_im_key_color+0x90>)
     732:	4798      	blx	r3
     734:	e7e5      	b.n	702 <re_im_key_color+0x32>
		return color_cplx_im;
     736:	2203      	movs	r2, #3
     738:	490c      	ldr	r1, [pc, #48]	; (76c <re_im_key_color+0x9c>)
     73a:	4668      	mov	r0, sp
     73c:	4b08      	ldr	r3, [pc, #32]	; (760 <re_im_key_color+0x90>)
     73e:	4798      	blx	r3
     740:	e7e5      	b.n	70e <re_im_key_color+0x3e>
		return color_cplx_r;
     742:	2203      	movs	r2, #3
     744:	490a      	ldr	r1, [pc, #40]	; (770 <re_im_key_color+0xa0>)
     746:	4668      	mov	r0, sp
     748:	4b05      	ldr	r3, [pc, #20]	; (760 <re_im_key_color+0x90>)
     74a:	4798      	blx	r3
     74c:	e7df      	b.n	70e <re_im_key_color+0x3e>
		return color_cplx_theta;
     74e:	2203      	movs	r2, #3
     750:	4908      	ldr	r1, [pc, #32]	; (774 <re_im_key_color+0xa4>)
     752:	4668      	mov	r0, sp
     754:	4b02      	ldr	r3, [pc, #8]	; (760 <re_im_key_color+0x90>)
     756:	4798      	blx	r3
     758:	e7d9      	b.n	70e <re_im_key_color+0x3e>
     75a:	46c0      	nop			; (mov r8, r8)
     75c:	000021b0 	.word	0x000021b0
     760:	00001f05 	.word	0x00001f05
     764:	000021ac 	.word	0x000021ac
     768:	0000218c 	.word	0x0000218c
     76c:	00002188 	.word	0x00002188
     770:	00002184 	.word	0x00002184
     774:	00002180 	.word	0x00002180

00000778 <drg_key_color>:

static color_rgb drg_key_color(const calc_state_t * calc_state, const sys_state_t * sys_state) {
     778:	b500      	push	{lr}
     77a:	b083      	sub	sp, #12
	switch (sys_state->sys.angle_units) {
     77c:	784b      	ldrb	r3, [r1, #1]
     77e:	2b01      	cmp	r3, #1
     780:	d01a      	beq.n	7b8 <drg_key_color+0x40>
     782:	2b00      	cmp	r3, #0
     784:	d007      	beq.n	796 <drg_key_color+0x1e>
     786:	2b02      	cmp	r3, #2
     788:	d01c      	beq.n	7c4 <drg_key_color+0x4c>
		case au_rad:
		return color_drg_r;
		case au_grad:
		return color_drg_g;
	}
	return color_off;
     78a:	2203      	movs	r2, #3
     78c:	4910      	ldr	r1, [pc, #64]	; (7d0 <drg_key_color+0x58>)
     78e:	a801      	add	r0, sp, #4
     790:	4b10      	ldr	r3, [pc, #64]	; (7d4 <drg_key_color+0x5c>)
     792:	4798      	blx	r3
     794:	e004      	b.n	7a0 <drg_key_color+0x28>
		return color_drg_d;
     796:	2203      	movs	r2, #3
     798:	490f      	ldr	r1, [pc, #60]	; (7d8 <drg_key_color+0x60>)
     79a:	a801      	add	r0, sp, #4
     79c:	4b0d      	ldr	r3, [pc, #52]	; (7d4 <drg_key_color+0x5c>)
     79e:	4798      	blx	r3
     7a0:	ab01      	add	r3, sp, #4
     7a2:	7819      	ldrb	r1, [r3, #0]
     7a4:	785a      	ldrb	r2, [r3, #1]
     7a6:	0212      	lsls	r2, r2, #8
     7a8:	20ff      	movs	r0, #255	; 0xff
     7aa:	4008      	ands	r0, r1
     7ac:	789b      	ldrb	r3, [r3, #2]
     7ae:	041b      	lsls	r3, r3, #16
     7b0:	4310      	orrs	r0, r2
     7b2:	4318      	orrs	r0, r3
}
     7b4:	b003      	add	sp, #12
     7b6:	bd00      	pop	{pc}
		return color_drg_r;
     7b8:	2203      	movs	r2, #3
     7ba:	4908      	ldr	r1, [pc, #32]	; (7dc <drg_key_color+0x64>)
     7bc:	a801      	add	r0, sp, #4
     7be:	4b05      	ldr	r3, [pc, #20]	; (7d4 <drg_key_color+0x5c>)
     7c0:	4798      	blx	r3
     7c2:	e7ed      	b.n	7a0 <drg_key_color+0x28>
		return color_drg_g;
     7c4:	2203      	movs	r2, #3
     7c6:	4906      	ldr	r1, [pc, #24]	; (7e0 <drg_key_color+0x68>)
     7c8:	a801      	add	r0, sp, #4
     7ca:	4b02      	ldr	r3, [pc, #8]	; (7d4 <drg_key_color+0x5c>)
     7cc:	4798      	blx	r3
     7ce:	e7e7      	b.n	7a0 <drg_key_color+0x28>
     7d0:	000021b0 	.word	0x000021b0
     7d4:	00001f05 	.word	0x00001f05
     7d8:	0000217c 	.word	0x0000217c
     7dc:	00002178 	.word	0x00002178
     7e0:	00002174 	.word	0x00002174

000007e4 <shift_key_color>:

static color_rgb shift_key_color(const calc_state_t * calc_state, const sys_state_t * sys_state) {
     7e4:	b500      	push	{lr}
     7e6:	b083      	sub	sp, #12
	return sys_state->sys.modifiers.shift ? (sys_state->sys.modifiers.hyp ? color_shift_hyp : color_shift) : color_normal;
     7e8:	790b      	ldrb	r3, [r1, #4]
     7ea:	2b00      	cmp	r3, #0
     7ec:	d00e      	beq.n	80c <shift_key_color+0x28>
     7ee:	794b      	ldrb	r3, [r1, #5]
     7f0:	2b00      	cmp	r3, #0
     7f2:	d005      	beq.n	800 <shift_key_color+0x1c>
     7f4:	2203      	movs	r2, #3
     7f6:	490f      	ldr	r1, [pc, #60]	; (834 <shift_key_color+0x50>)
     7f8:	a801      	add	r0, sp, #4
     7fa:	4b0f      	ldr	r3, [pc, #60]	; (838 <shift_key_color+0x54>)
     7fc:	4798      	blx	r3
     7fe:	e00a      	b.n	816 <shift_key_color+0x32>
     800:	2203      	movs	r2, #3
     802:	490e      	ldr	r1, [pc, #56]	; (83c <shift_key_color+0x58>)
     804:	a801      	add	r0, sp, #4
     806:	4b0c      	ldr	r3, [pc, #48]	; (838 <shift_key_color+0x54>)
     808:	4798      	blx	r3
     80a:	e004      	b.n	816 <shift_key_color+0x32>
     80c:	2203      	movs	r2, #3
     80e:	490c      	ldr	r1, [pc, #48]	; (840 <shift_key_color+0x5c>)
     810:	a801      	add	r0, sp, #4
     812:	4b09      	ldr	r3, [pc, #36]	; (838 <shift_key_color+0x54>)
     814:	4798      	blx	r3
     816:	a901      	add	r1, sp, #4
     818:	880b      	ldrh	r3, [r1, #0]
     81a:	0a1a      	lsrs	r2, r3, #8
     81c:	0212      	lsls	r2, r2, #8
     81e:	20ff      	movs	r0, #255	; 0xff
     820:	4018      	ands	r0, r3
     822:	4310      	orrs	r0, r2
     824:	788a      	ldrb	r2, [r1, #2]
     826:	0412      	lsls	r2, r2, #16
     828:	4b06      	ldr	r3, [pc, #24]	; (844 <shift_key_color+0x60>)
     82a:	4018      	ands	r0, r3
     82c:	4310      	orrs	r0, r2
}
     82e:	b003      	add	sp, #12
     830:	bd00      	pop	{pc}
     832:	46c0      	nop			; (mov r8, r8)
     834:	000021a0 	.word	0x000021a0
     838:	00001f05 	.word	0x00001f05
     83c:	000021a8 	.word	0x000021a8
     840:	000021ac 	.word	0x000021ac
     844:	ff00ffff 	.word	0xff00ffff

00000848 <hyp_key_color>:
static color_rgb hyp_key_color(const calc_state_t * calc_state, const sys_state_t * sys_state) {
     848:	b500      	push	{lr}
     84a:	b083      	sub	sp, #12
	return sys_state->sys.modifiers.hyp ? (sys_state->sys.modifiers.shift ? color_shift_hyp : color_hyp) : color_normal;
     84c:	794b      	ldrb	r3, [r1, #5]
     84e:	2b00      	cmp	r3, #0
     850:	d00e      	beq.n	870 <hyp_key_color+0x28>
     852:	790b      	ldrb	r3, [r1, #4]
     854:	2b00      	cmp	r3, #0
     856:	d005      	beq.n	864 <hyp_key_color+0x1c>
     858:	2203      	movs	r2, #3
     85a:	490f      	ldr	r1, [pc, #60]	; (898 <hyp_key_color+0x50>)
     85c:	a801      	add	r0, sp, #4
     85e:	4b0f      	ldr	r3, [pc, #60]	; (89c <hyp_key_color+0x54>)
     860:	4798      	blx	r3
     862:	e00a      	b.n	87a <hyp_key_color+0x32>
     864:	2203      	movs	r2, #3
     866:	490e      	ldr	r1, [pc, #56]	; (8a0 <hyp_key_color+0x58>)
     868:	a801      	add	r0, sp, #4
     86a:	4b0c      	ldr	r3, [pc, #48]	; (89c <hyp_key_color+0x54>)
     86c:	4798      	blx	r3
     86e:	e004      	b.n	87a <hyp_key_color+0x32>
     870:	2203      	movs	r2, #3
     872:	490c      	ldr	r1, [pc, #48]	; (8a4 <hyp_key_color+0x5c>)
     874:	a801      	add	r0, sp, #4
     876:	4b09      	ldr	r3, [pc, #36]	; (89c <hyp_key_color+0x54>)
     878:	4798      	blx	r3
     87a:	a901      	add	r1, sp, #4
     87c:	880b      	ldrh	r3, [r1, #0]
     87e:	0a1a      	lsrs	r2, r3, #8
     880:	0212      	lsls	r2, r2, #8
     882:	20ff      	movs	r0, #255	; 0xff
     884:	4018      	ands	r0, r3
     886:	4310      	orrs	r0, r2
     888:	788a      	ldrb	r2, [r1, #2]
     88a:	0412      	lsls	r2, r2, #16
     88c:	4b06      	ldr	r3, [pc, #24]	; (8a8 <hyp_key_color+0x60>)
     88e:	4018      	ands	r0, r3
     890:	4310      	orrs	r0, r2
}
     892:	b003      	add	sp, #12
     894:	bd00      	pop	{pc}
     896:	46c0      	nop			; (mov r8, r8)
     898:	000021a0 	.word	0x000021a0
     89c:	00001f05 	.word	0x00001f05
     8a0:	000021a4 	.word	0x000021a4
     8a4:	000021ac 	.word	0x000021ac
     8a8:	ff00ffff 	.word	0xff00ffff

000008ac <build_keymap>:



void build_keymap() {
     8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     8ae:	46d6      	mov	lr, sl
     8b0:	464f      	mov	r7, r9
     8b2:	4646      	mov	r6, r8
     8b4:	b5c0      	push	{r6, r7, lr}
	keypad_map[0] = (kp_key){0};
     8b6:	4cfd      	ldr	r4, [pc, #1012]	; (cac <build_keymap+0x400>)
     8b8:	221c      	movs	r2, #28
     8ba:	2100      	movs	r1, #0
     8bc:	0020      	movs	r0, r4
     8be:	4bfc      	ldr	r3, [pc, #1008]	; (cb0 <build_keymap+0x404>)
     8c0:	4698      	mov	r8, r3
     8c2:	4798      	blx	r3
	keypad_map[1] = (kp_key){0};
     8c4:	0020      	movs	r0, r4
     8c6:	301c      	adds	r0, #28
     8c8:	221c      	movs	r2, #28
     8ca:	2100      	movs	r1, #0
     8cc:	47c0      	blx	r8
	keypad_map[2] = (kp_key){ //menu/pwr key
     8ce:	4bf9      	ldr	r3, [pc, #996]	; (cb4 <build_keymap+0x408>)
     8d0:	469a      	mov	sl, r3
     8d2:	0023      	movs	r3, r4
     8d4:	3338      	adds	r3, #56	; 0x38
     8d6:	4652      	mov	r2, sl
     8d8:	ca23      	ldmia	r2!, {r0, r1, r5}
     8da:	c323      	stmia	r3!, {r0, r1, r5}
     8dc:	ca23      	ldmia	r2!, {r0, r1, r5}
     8de:	c323      	stmia	r3!, {r0, r1, r5}
     8e0:	6812      	ldr	r2, [r2, #0]
     8e2:	601a      	str	r2, [r3, #0]
		.pixel_idx = 12,
		.special_color = NULL
	};
	keypad_map[3] = (kp_key){ //drg key
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_drg_reint, //TODO: reinterpret drg
     8e4:	4bf4      	ldr	r3, [pc, #976]	; (cb8 <build_keymap+0x40c>)
     8e6:	681b      	ldr	r3, [r3, #0]
     8e8:	65a3      	str	r3, [r4, #88]	; 0x58
	keypad_map[3] = (kp_key){ //drg key
     8ea:	2601      	movs	r6, #1
     8ec:	2354      	movs	r3, #84	; 0x54
     8ee:	54e6      	strb	r6, [r4, r3]
     8f0:	2500      	movs	r5, #0
     8f2:	65e5      	str	r5, [r4, #92]	; 0x5c
     8f4:	6625      	str	r5, [r4, #96]	; 0x60
     8f6:	6665      	str	r5, [r4, #100]	; 0x64
     8f8:	3b39      	subs	r3, #57	; 0x39
     8fa:	66a3      	str	r3, [r4, #104]	; 0x68
     8fc:	4bef      	ldr	r3, [pc, #956]	; (cbc <build_keymap+0x410>)
     8fe:	66e3      	str	r3, [r4, #108]	; 0x6c
		.pixel_idx = 27,
		.special_color = drg_key_color
	};
	keypad_map[4] = (kp_key){ //re/im key
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_re_im, //TODO: re/im
     900:	4bef      	ldr	r3, [pc, #956]	; (cc0 <build_keymap+0x414>)
     902:	681b      	ldr	r3, [r3, #0]
     904:	6763      	str	r3, [r4, #116]	; 0x74
		.shift_cmd = (cmd_generic*)cmd_rec_pol, // TODO: rec/pol
     906:	4bef      	ldr	r3, [pc, #956]	; (cc4 <build_keymap+0x418>)
     908:	681b      	ldr	r3, [r3, #0]
     90a:	67a3      	str	r3, [r4, #120]	; 0x78
	keypad_map[4] = (kp_key){ //re/im key
     90c:	2370      	movs	r3, #112	; 0x70
     90e:	54e6      	strb	r6, [r4, r3]
     910:	67e5      	str	r5, [r4, #124]	; 0x7c
     912:	3310      	adds	r3, #16
     914:	50e5      	str	r5, [r4, r3]
     916:	3304      	adds	r3, #4
     918:	221c      	movs	r2, #28
     91a:	50e2      	str	r2, [r4, r3]
     91c:	4aea      	ldr	r2, [pc, #936]	; (cc8 <build_keymap+0x41c>)
     91e:	3304      	adds	r3, #4
     920:	50e2      	str	r2, [r4, r3]
		.pixel_idx = 28,
		.special_color = re_im_key_color
	};
		
	// COL 1 ////////////////////////////
	keypad_map[5] = (kp_key){0};
     922:	0020      	movs	r0, r4
     924:	308c      	adds	r0, #140	; 0x8c
     926:	221c      	movs	r2, #28
     928:	2100      	movs	r1, #0
     92a:	47c0      	blx	r8
	keypad_map[6] = (kp_key){0};
     92c:	0020      	movs	r0, r4
     92e:	30a8      	adds	r0, #168	; 0xa8
     930:	221c      	movs	r2, #28
     932:	2100      	movs	r1, #0
     934:	47c0      	blx	r8
	keypad_map[7] = (kp_key){ // EEX
     936:	0023      	movs	r3, r4
     938:	33c4      	adds	r3, #196	; 0xc4
     93a:	4652      	mov	r2, sl
     93c:	321c      	adds	r2, #28
     93e:	ca83      	ldmia	r2!, {r0, r1, r7}
     940:	c383      	stmia	r3!, {r0, r1, r7}
     942:	ca83      	ldmia	r2!, {r0, r1, r7}
     944:	c383      	stmia	r3!, {r0, r1, r7}
     946:	6812      	ldr	r2, [r2, #0]
     948:	601a      	str	r2, [r3, #0]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 13,
		.special_color = NULL
	};
	keypad_map[8] = (kp_key){ // roll up/down
     94a:	0023      	movs	r3, r4
     94c:	33e0      	adds	r3, #224	; 0xe0
     94e:	4652      	mov	r2, sl
     950:	3238      	adds	r2, #56	; 0x38
     952:	ca83      	ldmia	r2!, {r0, r1, r7}
     954:	c383      	stmia	r3!, {r0, r1, r7}
     956:	ca83      	ldmia	r2!, {r0, r1, r7}
     958:	c383      	stmia	r3!, {r0, r1, r7}
     95a:	6812      	ldr	r2, [r2, #0]
     95c:	601a      	str	r2, [r3, #0]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 26,
		.special_color = NULL
	};
	keypad_map[9] = (kp_key){ // 2nd
     95e:	0023      	movs	r3, r4
     960:	33fc      	adds	r3, #252	; 0xfc
     962:	4652      	mov	r2, sl
     964:	3254      	adds	r2, #84	; 0x54
     966:	ca83      	ldmia	r2!, {r0, r1, r7}
     968:	c383      	stmia	r3!, {r0, r1, r7}
     96a:	ca83      	ldmia	r2!, {r0, r1, r7}
     96c:	c383      	stmia	r3!, {r0, r1, r7}
     96e:	6812      	ldr	r2, [r2, #0]
     970:	601a      	str	r2, [r3, #0]
		.pixel_idx = 29,
		.special_color = shift_key_color
	};
		
	// COL 2 ////////////////////////////
	keypad_map[10] = (kp_key){ // C/AC
     972:	2309      	movs	r3, #9
     974:	4699      	mov	r9, r3
     976:	3310      	adds	r3, #16
     978:	33ff      	adds	r3, #255	; 0xff
     97a:	464a      	mov	r2, r9
     97c:	54e2      	strb	r2, [r4, r3]
     97e:	3304      	adds	r3, #4
     980:	50e5      	str	r5, [r4, r3]
     982:	3304      	adds	r3, #4
     984:	50e5      	str	r5, [r4, r3]
     986:	3304      	adds	r3, #4
     988:	50e5      	str	r5, [r4, r3]
     98a:	3304      	adds	r3, #4
     98c:	50e5      	str	r5, [r4, r3]
     98e:	3304      	adds	r3, #4
     990:	50e5      	str	r5, [r4, r3]
     992:	3304      	adds	r3, #4
     994:	50e5      	str	r5, [r4, r3]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 0,
		.special_color = NULL // TODO: clear colors?
	};
	keypad_map[11] = (kp_key){ // bksp
     996:	0022      	movs	r2, r4
     998:	3235      	adds	r2, #53	; 0x35
     99a:	32ff      	adds	r2, #255	; 0xff
     99c:	4657      	mov	r7, sl
     99e:	3770      	adds	r7, #112	; 0x70
     9a0:	cf0b      	ldmia	r7!, {r0, r1, r3}
     9a2:	c20b      	stmia	r2!, {r0, r1, r3}
     9a4:	cf0b      	ldmia	r7!, {r0, r1, r3}
     9a6:	c20b      	stmia	r2!, {r0, r1, r3}
     9a8:	683b      	ldr	r3, [r7, #0]
     9aa:	6013      	str	r3, [r2, #0]
		.special_color = NULL
	};
	keypad_map[12] = (kp_key){ // +/-
		.key_type = KEY_TYPE_STD,
		.base_cmd = NULL, // TODO: +/-
		.shift_cmd = (cmd_generic*)cmd_abs,
     9ac:	4bc7      	ldr	r3, [pc, #796]	; (ccc <build_keymap+0x420>)
     9ae:	681a      	ldr	r2, [r3, #0]
	keypad_map[12] = (kp_key){ // +/-
     9b0:	23a8      	movs	r3, #168	; 0xa8
     9b2:	005b      	lsls	r3, r3, #1
     9b4:	54e6      	strb	r6, [r4, r3]
     9b6:	3304      	adds	r3, #4
     9b8:	50e5      	str	r5, [r4, r3]
     9ba:	3304      	adds	r3, #4
     9bc:	50e2      	str	r2, [r4, r3]
     9be:	3304      	adds	r3, #4
     9c0:	50e5      	str	r5, [r4, r3]
     9c2:	3304      	adds	r3, #4
     9c4:	50e5      	str	r5, [r4, r3]
     9c6:	220e      	movs	r2, #14
     9c8:	3304      	adds	r3, #4
     9ca:	50e2      	str	r2, [r4, r3]
     9cc:	3304      	adds	r3, #4
     9ce:	50e5      	str	r5, [r4, r3]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 14,
		.special_color = NULL
	};
	keypad_map[13] = (kp_key){ // enter
     9d0:	4bbf      	ldr	r3, [pc, #764]	; (cd0 <build_keymap+0x424>)
     9d2:	469a      	mov	sl, r3
     9d4:	0023      	movs	r3, r4
     9d6:	336d      	adds	r3, #109	; 0x6d
     9d8:	33ff      	adds	r3, #255	; 0xff
     9da:	4652      	mov	r2, sl
     9dc:	320c      	adds	r2, #12
     9de:	ca83      	ldmia	r2!, {r0, r1, r7}
     9e0:	c383      	stmia	r3!, {r0, r1, r7}
     9e2:	ca83      	ldmia	r2!, {r0, r1, r7}
     9e4:	c383      	stmia	r3!, {r0, r1, r7}
     9e6:	6812      	ldr	r2, [r2, #0]
     9e8:	601a      	str	r2, [r3, #0]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 25,
		.special_color = NULL
	};
	keypad_map[14] = (kp_key){0};
     9ea:	0020      	movs	r0, r4
     9ec:	3089      	adds	r0, #137	; 0x89
     9ee:	30ff      	adds	r0, #255	; 0xff
     9f0:	221c      	movs	r2, #28
     9f2:	2100      	movs	r1, #0
     9f4:	47c0      	blx	r8
		
	// COL 3 ////////////////////////////
	keypad_map[15] = (kp_key){ // sin
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_sin,
     9f6:	4bb7      	ldr	r3, [pc, #732]	; (cd4 <build_keymap+0x428>)
     9f8:	681b      	ldr	r3, [r3, #0]
     9fa:	469c      	mov	ip, r3
		.shift_cmd = (cmd_generic*)cmd_asin,
     9fc:	4bb6      	ldr	r3, [pc, #728]	; (cd8 <build_keymap+0x42c>)
     9fe:	6818      	ldr	r0, [r3, #0]
		.hyp_cmd = (cmd_generic*)cmd_sinh,
     a00:	4bb6      	ldr	r3, [pc, #728]	; (cdc <build_keymap+0x430>)
     a02:	6819      	ldr	r1, [r3, #0]
		.shift_hyp_cmd = (cmd_generic*)cmd_asinh,
     a04:	4bb6      	ldr	r3, [pc, #728]	; (ce0 <build_keymap+0x434>)
     a06:	681a      	ldr	r2, [r3, #0]
	keypad_map[15] = (kp_key){ // sin
     a08:	23d2      	movs	r3, #210	; 0xd2
     a0a:	005b      	lsls	r3, r3, #1
     a0c:	54e6      	strb	r6, [r4, r3]
     a0e:	3304      	adds	r3, #4
     a10:	4667      	mov	r7, ip
     a12:	50e7      	str	r7, [r4, r3]
     a14:	3304      	adds	r3, #4
     a16:	50e0      	str	r0, [r4, r3]
     a18:	3304      	adds	r3, #4
     a1a:	50e1      	str	r1, [r4, r3]
     a1c:	3304      	adds	r3, #4
     a1e:	50e2      	str	r2, [r4, r3]
     a20:	3304      	adds	r3, #4
     a22:	50e6      	str	r6, [r4, r3]
     a24:	3304      	adds	r3, #4
     a26:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 1,
		.special_color = NULL
	};
	keypad_map[16] = (kp_key){ // 7
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_7,
     a28:	4bae      	ldr	r3, [pc, #696]	; (ce4 <build_keymap+0x438>)
     a2a:	681a      	ldr	r2, [r3, #0]
	keypad_map[16] = (kp_key){ // 7
     a2c:	23e0      	movs	r3, #224	; 0xe0
     a2e:	005b      	lsls	r3, r3, #1
     a30:	54e6      	strb	r6, [r4, r3]
     a32:	3304      	adds	r3, #4
     a34:	50e2      	str	r2, [r4, r3]
     a36:	3304      	adds	r3, #4
     a38:	50e5      	str	r5, [r4, r3]
     a3a:	3304      	adds	r3, #4
     a3c:	50e5      	str	r5, [r4, r3]
     a3e:	3304      	adds	r3, #4
     a40:	50e5      	str	r5, [r4, r3]
     a42:	220a      	movs	r2, #10
     a44:	3304      	adds	r3, #4
     a46:	50e2      	str	r2, [r4, r3]
     a48:	3304      	adds	r3, #4
     a4a:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 10,
		.special_color = NULL
	};
	keypad_map[17] = (kp_key){ // 4
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_4,
     a4c:	4ba6      	ldr	r3, [pc, #664]	; (ce8 <build_keymap+0x43c>)
     a4e:	681a      	ldr	r2, [r3, #0]
	keypad_map[17] = (kp_key){ // 4
     a50:	23ee      	movs	r3, #238	; 0xee
     a52:	005b      	lsls	r3, r3, #1
     a54:	54e6      	strb	r6, [r4, r3]
     a56:	3304      	adds	r3, #4
     a58:	50e2      	str	r2, [r4, r3]
     a5a:	3304      	adds	r3, #4
     a5c:	50e5      	str	r5, [r4, r3]
     a5e:	3304      	adds	r3, #4
     a60:	50e5      	str	r5, [r4, r3]
     a62:	3304      	adds	r3, #4
     a64:	50e5      	str	r5, [r4, r3]
     a66:	220f      	movs	r2, #15
     a68:	3304      	adds	r3, #4
     a6a:	50e2      	str	r2, [r4, r3]
     a6c:	3304      	adds	r3, #4
     a6e:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 15,
		.special_color = NULL
	};
	keypad_map[18] = (kp_key){ // 1
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_1,
     a70:	4b9e      	ldr	r3, [pc, #632]	; (cec <build_keymap+0x440>)
     a72:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_i,
     a74:	4b9e      	ldr	r3, [pc, #632]	; (cf0 <build_keymap+0x444>)
     a76:	681a      	ldr	r2, [r3, #0]
	keypad_map[18] = (kp_key){ // 1
     a78:	23fc      	movs	r3, #252	; 0xfc
     a7a:	005b      	lsls	r3, r3, #1
     a7c:	54e6      	strb	r6, [r4, r3]
     a7e:	3304      	adds	r3, #4
     a80:	50e1      	str	r1, [r4, r3]
     a82:	3304      	adds	r3, #4
     a84:	50e2      	str	r2, [r4, r3]
     a86:	3304      	adds	r3, #4
     a88:	50e5      	str	r5, [r4, r3]
     a8a:	3304      	adds	r3, #4
     a8c:	50e5      	str	r5, [r4, r3]
     a8e:	2218      	movs	r2, #24
     a90:	3304      	adds	r3, #4
     a92:	50e2      	str	r2, [r4, r3]
     a94:	3304      	adds	r3, #4
     a96:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 24,
		.special_color = NULL
	};
	keypad_map[19] = (kp_key){ // 0
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_0,
     a98:	4b96      	ldr	r3, [pc, #600]	; (cf4 <build_keymap+0x448>)
     a9a:	681a      	ldr	r2, [r3, #0]
	keypad_map[19] = (kp_key){ // 0
     a9c:	2385      	movs	r3, #133	; 0x85
     a9e:	009b      	lsls	r3, r3, #2
     aa0:	54e6      	strb	r6, [r4, r3]
     aa2:	3304      	adds	r3, #4
     aa4:	50e2      	str	r2, [r4, r3]
     aa6:	3304      	adds	r3, #4
     aa8:	50e5      	str	r5, [r4, r3]
     aaa:	3304      	adds	r3, #4
     aac:	50e5      	str	r5, [r4, r3]
     aae:	3304      	adds	r3, #4
     ab0:	50e5      	str	r5, [r4, r3]
     ab2:	221e      	movs	r2, #30
     ab4:	3304      	adds	r3, #4
     ab6:	50e2      	str	r2, [r4, r3]
     ab8:	3304      	adds	r3, #4
     aba:	50e5      	str	r5, [r4, r3]
	};
		
	// COL 4 ////////////////////////////
	keypad_map[20] = (kp_key){ // cos
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_cos,
     abc:	4b8e      	ldr	r3, [pc, #568]	; (cf8 <build_keymap+0x44c>)
     abe:	681b      	ldr	r3, [r3, #0]
     ac0:	469c      	mov	ip, r3
		.shift_cmd = (cmd_generic*)cmd_acos,
     ac2:	4b8e      	ldr	r3, [pc, #568]	; (cfc <build_keymap+0x450>)
     ac4:	6818      	ldr	r0, [r3, #0]
		.hyp_cmd = (cmd_generic*)cmd_cosh,
     ac6:	4b8e      	ldr	r3, [pc, #568]	; (d00 <build_keymap+0x454>)
     ac8:	6819      	ldr	r1, [r3, #0]
		.shift_hyp_cmd = (cmd_generic*)cmd_acosh,
     aca:	4b8e      	ldr	r3, [pc, #568]	; (d04 <build_keymap+0x458>)
     acc:	681a      	ldr	r2, [r3, #0]
	keypad_map[20] = (kp_key){ // cos
     ace:	238c      	movs	r3, #140	; 0x8c
     ad0:	009b      	lsls	r3, r3, #2
     ad2:	54e6      	strb	r6, [r4, r3]
     ad4:	3304      	adds	r3, #4
     ad6:	4667      	mov	r7, ip
     ad8:	50e7      	str	r7, [r4, r3]
     ada:	3304      	adds	r3, #4
     adc:	50e0      	str	r0, [r4, r3]
     ade:	3304      	adds	r3, #4
     ae0:	50e1      	str	r1, [r4, r3]
     ae2:	3304      	adds	r3, #4
     ae4:	50e2      	str	r2, [r4, r3]
     ae6:	2202      	movs	r2, #2
     ae8:	3304      	adds	r3, #4
     aea:	50e2      	str	r2, [r4, r3]
     aec:	3304      	adds	r3, #4
     aee:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 2,
		.special_color = NULL
	};
	keypad_map[21] = (kp_key){ // 8
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_8,
     af0:	4b85      	ldr	r3, [pc, #532]	; (d08 <build_keymap+0x45c>)
     af2:	681a      	ldr	r2, [r3, #0]
	keypad_map[21] = (kp_key){ // 8
     af4:	2393      	movs	r3, #147	; 0x93
     af6:	009b      	lsls	r3, r3, #2
     af8:	54e6      	strb	r6, [r4, r3]
     afa:	3304      	adds	r3, #4
     afc:	50e2      	str	r2, [r4, r3]
     afe:	3304      	adds	r3, #4
     b00:	50e5      	str	r5, [r4, r3]
     b02:	3304      	adds	r3, #4
     b04:	50e5      	str	r5, [r4, r3]
     b06:	3304      	adds	r3, #4
     b08:	50e5      	str	r5, [r4, r3]
     b0a:	3304      	adds	r3, #4
     b0c:	464a      	mov	r2, r9
     b0e:	50e2      	str	r2, [r4, r3]
     b10:	3304      	adds	r3, #4
     b12:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 9,
		.special_color = NULL
	};
	keypad_map[22] = (kp_key){ // 5
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_5,
     b14:	4b7d      	ldr	r3, [pc, #500]	; (d0c <build_keymap+0x460>)
     b16:	681a      	ldr	r2, [r3, #0]
	keypad_map[22] = (kp_key){ // 5
     b18:	239a      	movs	r3, #154	; 0x9a
     b1a:	009b      	lsls	r3, r3, #2
     b1c:	54e6      	strb	r6, [r4, r3]
     b1e:	3304      	adds	r3, #4
     b20:	50e2      	str	r2, [r4, r3]
     b22:	3304      	adds	r3, #4
     b24:	50e5      	str	r5, [r4, r3]
     b26:	3304      	adds	r3, #4
     b28:	50e5      	str	r5, [r4, r3]
     b2a:	3304      	adds	r3, #4
     b2c:	50e5      	str	r5, [r4, r3]
     b2e:	2210      	movs	r2, #16
     b30:	3304      	adds	r3, #4
     b32:	50e2      	str	r2, [r4, r3]
     b34:	3304      	adds	r3, #4
     b36:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 16,
		.special_color = NULL
	};
	keypad_map[23] = (kp_key){ // 2
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_2,
     b38:	4b75      	ldr	r3, [pc, #468]	; (d10 <build_keymap+0x464>)
     b3a:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_e,
     b3c:	4b75      	ldr	r3, [pc, #468]	; (d14 <build_keymap+0x468>)
     b3e:	681a      	ldr	r2, [r3, #0]
	keypad_map[23] = (kp_key){ // 2
     b40:	23a1      	movs	r3, #161	; 0xa1
     b42:	009b      	lsls	r3, r3, #2
     b44:	54e6      	strb	r6, [r4, r3]
     b46:	3304      	adds	r3, #4
     b48:	50e1      	str	r1, [r4, r3]
     b4a:	3304      	adds	r3, #4
     b4c:	50e2      	str	r2, [r4, r3]
     b4e:	3304      	adds	r3, #4
     b50:	50e5      	str	r5, [r4, r3]
     b52:	3304      	adds	r3, #4
     b54:	50e5      	str	r5, [r4, r3]
     b56:	2217      	movs	r2, #23
     b58:	3304      	adds	r3, #4
     b5a:	50e2      	str	r2, [r4, r3]
     b5c:	3304      	adds	r3, #4
     b5e:	50e5      	str	r5, [r4, r3]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 23,
		.special_color = NULL
	};
	keypad_map[24] = (kp_key){0};
     b60:	3304      	adds	r3, #4
     b62:	18e0      	adds	r0, r4, r3
     b64:	3205      	adds	r2, #5
     b66:	2100      	movs	r1, #0
     b68:	47c0      	blx	r8

	// COL 5 ////////////////////////////
	keypad_map[25] = (kp_key){ // tan
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_tan,
     b6a:	4b6b      	ldr	r3, [pc, #428]	; (d18 <build_keymap+0x46c>)
     b6c:	681b      	ldr	r3, [r3, #0]
     b6e:	469c      	mov	ip, r3
		.shift_cmd = (cmd_generic*)cmd_atan,
     b70:	4b6a      	ldr	r3, [pc, #424]	; (d1c <build_keymap+0x470>)
     b72:	6818      	ldr	r0, [r3, #0]
		.hyp_cmd = (cmd_generic*)cmd_tanh,
     b74:	4b6a      	ldr	r3, [pc, #424]	; (d20 <build_keymap+0x474>)
     b76:	6819      	ldr	r1, [r3, #0]
		.shift_hyp_cmd = (cmd_generic*)cmd_atanh,
     b78:	4b6a      	ldr	r3, [pc, #424]	; (d24 <build_keymap+0x478>)
     b7a:	681a      	ldr	r2, [r3, #0]
	keypad_map[25] = (kp_key){ // tan
     b7c:	23af      	movs	r3, #175	; 0xaf
     b7e:	009b      	lsls	r3, r3, #2
     b80:	54e6      	strb	r6, [r4, r3]
     b82:	3304      	adds	r3, #4
     b84:	4667      	mov	r7, ip
     b86:	50e7      	str	r7, [r4, r3]
     b88:	3304      	adds	r3, #4
     b8a:	50e0      	str	r0, [r4, r3]
     b8c:	3304      	adds	r3, #4
     b8e:	50e1      	str	r1, [r4, r3]
     b90:	3304      	adds	r3, #4
     b92:	50e2      	str	r2, [r4, r3]
     b94:	2203      	movs	r2, #3
     b96:	3304      	adds	r3, #4
     b98:	50e2      	str	r2, [r4, r3]
     b9a:	3304      	adds	r3, #4
     b9c:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 3,
		.special_color = NULL
	};
	keypad_map[26] = (kp_key){ // 9
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_9,
     b9e:	4b62      	ldr	r3, [pc, #392]	; (d28 <build_keymap+0x47c>)
     ba0:	681a      	ldr	r2, [r3, #0]
	keypad_map[26] = (kp_key){ // 9
     ba2:	23b6      	movs	r3, #182	; 0xb6
     ba4:	009b      	lsls	r3, r3, #2
     ba6:	54e6      	strb	r6, [r4, r3]
     ba8:	3304      	adds	r3, #4
     baa:	50e2      	str	r2, [r4, r3]
     bac:	3304      	adds	r3, #4
     bae:	50e5      	str	r5, [r4, r3]
     bb0:	3304      	adds	r3, #4
     bb2:	50e5      	str	r5, [r4, r3]
     bb4:	3304      	adds	r3, #4
     bb6:	50e5      	str	r5, [r4, r3]
     bb8:	2208      	movs	r2, #8
     bba:	3304      	adds	r3, #4
     bbc:	50e2      	str	r2, [r4, r3]
     bbe:	3304      	adds	r3, #4
     bc0:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 8,
		.special_color = NULL
	};
	keypad_map[27] = (kp_key){ // 6
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_6,
     bc2:	4b5a      	ldr	r3, [pc, #360]	; (d2c <build_keymap+0x480>)
     bc4:	681a      	ldr	r2, [r3, #0]
	keypad_map[27] = (kp_key){ // 6
     bc6:	23bd      	movs	r3, #189	; 0xbd
     bc8:	009b      	lsls	r3, r3, #2
     bca:	54e6      	strb	r6, [r4, r3]
     bcc:	3304      	adds	r3, #4
     bce:	50e2      	str	r2, [r4, r3]
     bd0:	3304      	adds	r3, #4
     bd2:	50e5      	str	r5, [r4, r3]
     bd4:	3304      	adds	r3, #4
     bd6:	50e5      	str	r5, [r4, r3]
     bd8:	3304      	adds	r3, #4
     bda:	50e5      	str	r5, [r4, r3]
     bdc:	2211      	movs	r2, #17
     bde:	3304      	adds	r3, #4
     be0:	50e2      	str	r2, [r4, r3]
     be2:	3304      	adds	r3, #4
     be4:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 17,
		.special_color = NULL
	};
	keypad_map[28] = (kp_key){ // 3
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_3,
     be6:	4b52      	ldr	r3, [pc, #328]	; (d30 <build_keymap+0x484>)
     be8:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_pi,
     bea:	4b52      	ldr	r3, [pc, #328]	; (d34 <build_keymap+0x488>)
     bec:	681a      	ldr	r2, [r3, #0]
	keypad_map[28] = (kp_key){ // 3
     bee:	23c4      	movs	r3, #196	; 0xc4
     bf0:	009b      	lsls	r3, r3, #2
     bf2:	54e6      	strb	r6, [r4, r3]
     bf4:	3304      	adds	r3, #4
     bf6:	50e1      	str	r1, [r4, r3]
     bf8:	3304      	adds	r3, #4
     bfa:	50e2      	str	r2, [r4, r3]
     bfc:	3304      	adds	r3, #4
     bfe:	50e5      	str	r5, [r4, r3]
     c00:	3304      	adds	r3, #4
     c02:	50e5      	str	r5, [r4, r3]
     c04:	2216      	movs	r2, #22
     c06:	3304      	adds	r3, #4
     c08:	50e2      	str	r2, [r4, r3]
     c0a:	3304      	adds	r3, #4
     c0c:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 22,
		.special_color = NULL
	};
	keypad_map[29] = (kp_key){ // .
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_decimal,
     c0e:	4b4a      	ldr	r3, [pc, #296]	; (d38 <build_keymap+0x48c>)
     c10:	681a      	ldr	r2, [r3, #0]
	keypad_map[29] = (kp_key){ // .
     c12:	23cb      	movs	r3, #203	; 0xcb
     c14:	009b      	lsls	r3, r3, #2
     c16:	54e6      	strb	r6, [r4, r3]
     c18:	3304      	adds	r3, #4
     c1a:	50e2      	str	r2, [r4, r3]
     c1c:	3304      	adds	r3, #4
     c1e:	50e5      	str	r5, [r4, r3]
     c20:	3304      	adds	r3, #4
     c22:	50e5      	str	r5, [r4, r3]
     c24:	3304      	adds	r3, #4
     c26:	50e5      	str	r5, [r4, r3]
     c28:	221f      	movs	r2, #31
     c2a:	3304      	adds	r3, #4
     c2c:	50e2      	str	r2, [r4, r3]
     c2e:	3304      	adds	r3, #4
     c30:	50e5      	str	r5, [r4, r3]
	};
		
	// COL 6 ////////////////////////////
	keypad_map[30] = (kp_key){ // div
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_div,
     c32:	4b42      	ldr	r3, [pc, #264]	; (d3c <build_keymap+0x490>)
     c34:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_inv,
     c36:	4b42      	ldr	r3, [pc, #264]	; (d40 <build_keymap+0x494>)
     c38:	681a      	ldr	r2, [r3, #0]
	keypad_map[30] = (kp_key){ // div
     c3a:	23d2      	movs	r3, #210	; 0xd2
     c3c:	009b      	lsls	r3, r3, #2
     c3e:	54e6      	strb	r6, [r4, r3]
     c40:	3304      	adds	r3, #4
     c42:	50e1      	str	r1, [r4, r3]
     c44:	3304      	adds	r3, #4
     c46:	50e2      	str	r2, [r4, r3]
     c48:	3304      	adds	r3, #4
     c4a:	50e5      	str	r5, [r4, r3]
     c4c:	3304      	adds	r3, #4
     c4e:	50e5      	str	r5, [r4, r3]
     c50:	2204      	movs	r2, #4
     c52:	3304      	adds	r3, #4
     c54:	50e2      	str	r2, [r4, r3]
     c56:	3304      	adds	r3, #4
     c58:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 4,
		.special_color = NULL
	};
	keypad_map[31] = (kp_key){ // mul
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_mul,
     c5a:	4b3a      	ldr	r3, [pc, #232]	; (d44 <build_keymap+0x498>)
     c5c:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_phasor,
     c5e:	4b3a      	ldr	r3, [pc, #232]	; (d48 <build_keymap+0x49c>)
     c60:	681a      	ldr	r2, [r3, #0]
	keypad_map[31] = (kp_key){ // mul
     c62:	23d9      	movs	r3, #217	; 0xd9
     c64:	009b      	lsls	r3, r3, #2
     c66:	54e6      	strb	r6, [r4, r3]
     c68:	3304      	adds	r3, #4
     c6a:	50e1      	str	r1, [r4, r3]
     c6c:	3304      	adds	r3, #4
     c6e:	50e2      	str	r2, [r4, r3]
     c70:	3304      	adds	r3, #4
     c72:	50e5      	str	r5, [r4, r3]
     c74:	3304      	adds	r3, #4
     c76:	50e5      	str	r5, [r4, r3]
     c78:	2207      	movs	r2, #7
     c7a:	3304      	adds	r3, #4
     c7c:	50e2      	str	r2, [r4, r3]
     c7e:	3304      	adds	r3, #4
     c80:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 7,
		.special_color = NULL
	};
	keypad_map[32] = (kp_key){ // sub
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_sub,
     c82:	4b32      	ldr	r3, [pc, #200]	; (d4c <build_keymap+0x4a0>)
     c84:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_parallel,
     c86:	4b32      	ldr	r3, [pc, #200]	; (d50 <build_keymap+0x4a4>)
     c88:	681a      	ldr	r2, [r3, #0]
	keypad_map[32] = (kp_key){ // sub
     c8a:	23e0      	movs	r3, #224	; 0xe0
     c8c:	009b      	lsls	r3, r3, #2
     c8e:	54e6      	strb	r6, [r4, r3]
     c90:	3304      	adds	r3, #4
     c92:	50e1      	str	r1, [r4, r3]
     c94:	3304      	adds	r3, #4
     c96:	50e2      	str	r2, [r4, r3]
     c98:	3304      	adds	r3, #4
     c9a:	50e5      	str	r5, [r4, r3]
     c9c:	3304      	adds	r3, #4
     c9e:	50e5      	str	r5, [r4, r3]
     ca0:	2212      	movs	r2, #18
     ca2:	3304      	adds	r3, #4
     ca4:	50e2      	str	r2, [r4, r3]
     ca6:	3304      	adds	r3, #4
     ca8:	50e5      	str	r5, [r4, r3]
     caa:	e053      	b.n	d54 <build_keymap+0x4a8>
     cac:	20000a48 	.word	0x20000a48
     cb0:	00001f89 	.word	0x00001f89
     cb4:	000021dc 	.word	0x000021dc
     cb8:	000021d0 	.word	0x000021d0
     cbc:	00000779 	.word	0x00000779
     cc0:	000021d8 	.word	0x000021d8
     cc4:	000021d4 	.word	0x000021d4
     cc8:	000006d1 	.word	0x000006d1
     ccc:	20000ecc 	.word	0x20000ecc
     cd0:	0000225c 	.word	0x0000225c
     cd4:	000021c0 	.word	0x000021c0
     cd8:	000021b8 	.word	0x000021b8
     cdc:	000021bc 	.word	0x000021bc
     ce0:	000021b4 	.word	0x000021b4
     ce4:	20000a34 	.word	0x20000a34
     ce8:	20000a2c 	.word	0x20000a2c
     cec:	20000a00 	.word	0x20000a00
     cf0:	20000a10 	.word	0x20000a10
     cf4:	20000ec0 	.word	0x20000ec0
     cf8:	20000a30 	.word	0x20000a30
     cfc:	20000a20 	.word	0x20000a20
     d00:	20000a08 	.word	0x20000a08
     d04:	20000a38 	.word	0x20000a38
     d08:	20000a18 	.word	0x20000a18
     d0c:	20000ec8 	.word	0x20000ec8
     d10:	20000eb0 	.word	0x20000eb0
     d14:	20000a14 	.word	0x20000a14
     d18:	20000ee0 	.word	0x20000ee0
     d1c:	20000ed4 	.word	0x20000ed4
     d20:	20000ee8 	.word	0x20000ee8
     d24:	20000a40 	.word	0x20000a40
     d28:	20000eec 	.word	0x20000eec
     d2c:	20000eb8 	.word	0x20000eb8
     d30:	20000ed0 	.word	0x20000ed0
     d34:	200009fc 	.word	0x200009fc
     d38:	20000a28 	.word	0x20000a28
     d3c:	20000eb4 	.word	0x20000eb4
     d40:	20000ee4 	.word	0x20000ee4
     d44:	000021c4 	.word	0x000021c4
     d48:	20000edc 	.word	0x20000edc
     d4c:	000021c8 	.word	0x000021c8
     d50:	20000ea8 	.word	0x20000ea8
		.pixel_idx = 18,
		.special_color = NULL
	};
	keypad_map[33] = (kp_key){ // add
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_add,
     d54:	4b3a      	ldr	r3, [pc, #232]	; (e40 <build_keymap+0x594>)
     d56:	681a      	ldr	r2, [r3, #0]
	keypad_map[33] = (kp_key){ // add
     d58:	23e7      	movs	r3, #231	; 0xe7
     d5a:	009b      	lsls	r3, r3, #2
     d5c:	54e6      	strb	r6, [r4, r3]
     d5e:	3304      	adds	r3, #4
     d60:	50e2      	str	r2, [r4, r3]
     d62:	3304      	adds	r3, #4
     d64:	50e5      	str	r5, [r4, r3]
     d66:	3304      	adds	r3, #4
     d68:	50e5      	str	r5, [r4, r3]
     d6a:	3304      	adds	r3, #4
     d6c:	50e5      	str	r5, [r4, r3]
     d6e:	2215      	movs	r2, #21
     d70:	3304      	adds	r3, #4
     d72:	50e2      	str	r2, [r4, r3]
     d74:	3304      	adds	r3, #4
     d76:	50e5      	str	r5, [r4, r3]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 21,
		.special_color = NULL
	};
	keypad_map[34] = (kp_key){0};
     d78:	3304      	adds	r3, #4
     d7a:	18e0      	adds	r0, r4, r3
     d7c:	3207      	adds	r2, #7
     d7e:	2100      	movs	r1, #0
     d80:	47c0      	blx	r8
		
	// COL 7 ////////////////////////////
	keypad_map[35] = (kp_key){ // hyp
     d82:	23f5      	movs	r3, #245	; 0xf5
     d84:	009b      	lsls	r3, r3, #2
     d86:	18e2      	adds	r2, r4, r3
     d88:	4657      	mov	r7, sl
     d8a:	3728      	adds	r7, #40	; 0x28
     d8c:	cf0b      	ldmia	r7!, {r0, r1, r3}
     d8e:	c20b      	stmia	r2!, {r0, r1, r3}
     d90:	cf0b      	ldmia	r7!, {r0, r1, r3}
     d92:	c20b      	stmia	r2!, {r0, r1, r3}
     d94:	683b      	ldr	r3, [r7, #0]
     d96:	6013      	str	r3, [r2, #0]
		.pixel_idx = 5,
		.special_color = hyp_key_color
	};
	keypad_map[36] = (kp_key){ // pow
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_pow,
     d98:	4b2a      	ldr	r3, [pc, #168]	; (e44 <build_keymap+0x598>)
     d9a:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_root,
     d9c:	4b2a      	ldr	r3, [pc, #168]	; (e48 <build_keymap+0x59c>)
     d9e:	681a      	ldr	r2, [r3, #0]
	keypad_map[36] = (kp_key){ // pow
     da0:	23fc      	movs	r3, #252	; 0xfc
     da2:	009b      	lsls	r3, r3, #2
     da4:	54e6      	strb	r6, [r4, r3]
     da6:	3304      	adds	r3, #4
     da8:	50e1      	str	r1, [r4, r3]
     daa:	3304      	adds	r3, #4
     dac:	50e2      	str	r2, [r4, r3]
     dae:	3304      	adds	r3, #4
     db0:	50e5      	str	r5, [r4, r3]
     db2:	3304      	adds	r3, #4
     db4:	50e5      	str	r5, [r4, r3]
     db6:	2206      	movs	r2, #6
     db8:	4b24      	ldr	r3, [pc, #144]	; (e4c <build_keymap+0x5a0>)
     dba:	50e2      	str	r2, [r4, r3]
     dbc:	3304      	adds	r3, #4
     dbe:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 6,
		.special_color = NULL
	};
	keypad_map[37] = (kp_key){ // sqr
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_sqr,
     dc0:	4b23      	ldr	r3, [pc, #140]	; (e50 <build_keymap+0x5a4>)
     dc2:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_sqrt,
     dc4:	4b23      	ldr	r3, [pc, #140]	; (e54 <build_keymap+0x5a8>)
     dc6:	681a      	ldr	r2, [r3, #0]
	keypad_map[37] = (kp_key){ // sqr
     dc8:	4b23      	ldr	r3, [pc, #140]	; (e58 <build_keymap+0x5ac>)
     dca:	54e6      	strb	r6, [r4, r3]
     dcc:	3304      	adds	r3, #4
     dce:	50e1      	str	r1, [r4, r3]
     dd0:	4b22      	ldr	r3, [pc, #136]	; (e5c <build_keymap+0x5b0>)
     dd2:	50e2      	str	r2, [r4, r3]
     dd4:	3304      	adds	r3, #4
     dd6:	50e5      	str	r5, [r4, r3]
     dd8:	4b21      	ldr	r3, [pc, #132]	; (e60 <build_keymap+0x5b4>)
     dda:	50e5      	str	r5, [r4, r3]
     ddc:	2213      	movs	r2, #19
     dde:	3304      	adds	r3, #4
     de0:	50e2      	str	r2, [r4, r3]
     de2:	4b20      	ldr	r3, [pc, #128]	; (e64 <build_keymap+0x5b8>)
     de4:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 19,
		.special_color = NULL
	};
	keypad_map[38] = (kp_key){ // log
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_log,
     de6:	4b20      	ldr	r3, [pc, #128]	; (e68 <build_keymap+0x5bc>)
     de8:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_alog,
     dea:	4b20      	ldr	r3, [pc, #128]	; (e6c <build_keymap+0x5c0>)
     dec:	681a      	ldr	r2, [r3, #0]
	keypad_map[38] = (kp_key){ // log
     dee:	2385      	movs	r3, #133	; 0x85
     df0:	00db      	lsls	r3, r3, #3
     df2:	54e6      	strb	r6, [r4, r3]
     df4:	4b1e      	ldr	r3, [pc, #120]	; (e70 <build_keymap+0x5c4>)
     df6:	50e1      	str	r1, [r4, r3]
     df8:	3304      	adds	r3, #4
     dfa:	50e2      	str	r2, [r4, r3]
     dfc:	4b1d      	ldr	r3, [pc, #116]	; (e74 <build_keymap+0x5c8>)
     dfe:	50e5      	str	r5, [r4, r3]
     e00:	3304      	adds	r3, #4
     e02:	50e5      	str	r5, [r4, r3]
     e04:	2214      	movs	r2, #20
     e06:	4b1c      	ldr	r3, [pc, #112]	; (e78 <build_keymap+0x5cc>)
     e08:	50e2      	str	r2, [r4, r3]
     e0a:	3304      	adds	r3, #4
     e0c:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 20,
		.special_color = NULL
	};
	keypad_map[39] = (kp_key){ // ln
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_ln,
     e0e:	4b1b      	ldr	r3, [pc, #108]	; (e7c <build_keymap+0x5d0>)
     e10:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_exp,
     e12:	4b1b      	ldr	r3, [pc, #108]	; (e80 <build_keymap+0x5d4>)
     e14:	681a      	ldr	r2, [r3, #0]
	keypad_map[39] = (kp_key){ // ln
     e16:	4b1b      	ldr	r3, [pc, #108]	; (e84 <build_keymap+0x5d8>)
     e18:	54e6      	strb	r6, [r4, r3]
     e1a:	3304      	adds	r3, #4
     e1c:	50e1      	str	r1, [r4, r3]
     e1e:	4b1a      	ldr	r3, [pc, #104]	; (e88 <build_keymap+0x5dc>)
     e20:	50e2      	str	r2, [r4, r3]
     e22:	3304      	adds	r3, #4
     e24:	50e5      	str	r5, [r4, r3]
     e26:	4b19      	ldr	r3, [pc, #100]	; (e8c <build_keymap+0x5e0>)
     e28:	50e5      	str	r5, [r4, r3]
     e2a:	2220      	movs	r2, #32
     e2c:	3304      	adds	r3, #4
     e2e:	50e2      	str	r2, [r4, r3]
     e30:	4b17      	ldr	r3, [pc, #92]	; (e90 <build_keymap+0x5e4>)
     e32:	50e5      	str	r5, [r4, r3]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 32,
		.special_color = NULL
	};
}
     e34:	bc1c      	pop	{r2, r3, r4}
     e36:	4690      	mov	r8, r2
     e38:	4699      	mov	r9, r3
     e3a:	46a2      	mov	sl, r4
     e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e3e:	46c0      	nop			; (mov r8, r8)
     e40:	000021cc 	.word	0x000021cc
     e44:	20000a44 	.word	0x20000a44
     e48:	20000a04 	.word	0x20000a04
     e4c:	00000404 	.word	0x00000404
     e50:	20000ed8 	.word	0x20000ed8
     e54:	20000ebc 	.word	0x20000ebc
     e58:	0000040c 	.word	0x0000040c
     e5c:	00000414 	.word	0x00000414
     e60:	0000041c 	.word	0x0000041c
     e64:	00000424 	.word	0x00000424
     e68:	20000a3c 	.word	0x20000a3c
     e6c:	20000a0c 	.word	0x20000a0c
     e70:	0000042c 	.word	0x0000042c
     e74:	00000434 	.word	0x00000434
     e78:	0000043c 	.word	0x0000043c
     e7c:	20000a24 	.word	0x20000a24
     e80:	20000a1c 	.word	0x20000a1c
     e84:	00000444 	.word	0x00000444
     e88:	0000044c 	.word	0x0000044c
     e8c:	00000454 	.word	0x00000454
     e90:	0000045c 	.word	0x0000045c

00000e94 <keypad_scan_keys>:
	uint64_t newkeys = keypad_inst->rawKeys & (~previous_scan);
	previous_scan = keypad_inst->rawKeys;
	return newkeys;
}

void keypad_scan_keys() {
     e94:	b5f0      	push	{r4, r5, r6, r7, lr}
     e96:	46d6      	mov	lr, sl
     e98:	464f      	mov	r7, r9
     e9a:	4646      	mov	r6, r8
     e9c:	b5c0      	push	{r6, r7, lr}
     e9e:	b082      	sub	sp, #8
	keypad_inst->rawKeys = 0ULL;
     ea0:	4b3c      	ldr	r3, [pc, #240]	; (f94 <keypad_scan_keys+0x100>)
     ea2:	681b      	ldr	r3, [r3, #0]
     ea4:	2000      	movs	r0, #0
     ea6:	2100      	movs	r1, #0
     ea8:	6098      	str	r0, [r3, #8]
     eaa:	60d9      	str	r1, [r3, #12]
	gpio_set_pin(colPorts[0], colPins[0], 0);
     eac:	2200      	movs	r2, #0
     eae:	2106      	movs	r1, #6
     eb0:	3001      	adds	r0, #1
     eb2:	4b39      	ldr	r3, [pc, #228]	; (f98 <keypad_scan_keys+0x104>)
     eb4:	4798      	blx	r3
	for (int col = 0; col < KEYPAD_NUM_COLS; col++) {
     eb6:	2300      	movs	r3, #0
     eb8:	4698      	mov	r8, r3
     eba:	e03d      	b.n	f38 <keypad_scan_keys+0xa4>
		gpio_set_pin(colPorts[col], colPins[col], 1);
		
		for (int row = 0; row < KEYPAD_NUM_ROWS; row++) {
			int key=gpio_read_pin(rowPorts[row], rowPins[row]);
			keypad_inst->rawKeys |= (key ? (1ULL << (row + col * 5)) : 0ULL);
     ebc:	2320      	movs	r3, #32
     ebe:	464e      	mov	r6, r9
     ec0:	1b9b      	subs	r3, r3, r6
     ec2:	469a      	mov	sl, r3
     ec4:	2301      	movs	r3, #1
     ec6:	4656      	mov	r6, sl
     ec8:	40f3      	lsrs	r3, r6
     eca:	469c      	mov	ip, r3
     ecc:	2601      	movs	r6, #1
     ece:	464b      	mov	r3, r9
     ed0:	409e      	lsls	r6, r3
     ed2:	0033      	movs	r3, r6
     ed4:	430b      	orrs	r3, r1
     ed6:	001c      	movs	r4, r3
     ed8:	4663      	mov	r3, ip
     eda:	4313      	orrs	r3, r2
     edc:	001d      	movs	r5, r3
     ede:	6084      	str	r4, [r0, #8]
     ee0:	60c5      	str	r5, [r0, #12]
		for (int row = 0; row < KEYPAD_NUM_ROWS; row++) {
     ee2:	3701      	adds	r7, #1
     ee4:	2f04      	cmp	r7, #4
     ee6:	dc1f      	bgt.n	f28 <keypad_scan_keys+0x94>
			int key=gpio_read_pin(rowPorts[row], rowPins[row]);
     ee8:	00ba      	lsls	r2, r7, #2
     eea:	4b2c      	ldr	r3, [pc, #176]	; (f9c <keypad_scan_keys+0x108>)
     eec:	189b      	adds	r3, r3, r2
     eee:	6c18      	ldr	r0, [r3, #64]	; 0x40
     ef0:	6d59      	ldr	r1, [r3, #84]	; 0x54
     ef2:	4b2b      	ldr	r3, [pc, #172]	; (fa0 <keypad_scan_keys+0x10c>)
     ef4:	4798      	blx	r3
     ef6:	0003      	movs	r3, r0
			keypad_inst->rawKeys |= (key ? (1ULL << (row + col * 5)) : 0ULL);
     ef8:	4a26      	ldr	r2, [pc, #152]	; (f94 <keypad_scan_keys+0x100>)
     efa:	6810      	ldr	r0, [r2, #0]
     efc:	6881      	ldr	r1, [r0, #8]
     efe:	68c2      	ldr	r2, [r0, #12]
     f00:	2b00      	cmp	r3, #0
     f02:	d00d      	beq.n	f20 <keypad_scan_keys+0x8c>
     f04:	4643      	mov	r3, r8
     f06:	009b      	lsls	r3, r3, #2
     f08:	4443      	add	r3, r8
     f0a:	4699      	mov	r9, r3
     f0c:	44b9      	add	r9, r7
     f0e:	464e      	mov	r6, r9
     f10:	3e20      	subs	r6, #32
     f12:	46b2      	mov	sl, r6
     f14:	d4d2      	bmi.n	ebc <keypad_scan_keys+0x28>
     f16:	2601      	movs	r6, #1
     f18:	4653      	mov	r3, sl
     f1a:	409e      	lsls	r6, r3
     f1c:	46b4      	mov	ip, r6
     f1e:	e7d5      	b.n	ecc <keypad_scan_keys+0x38>
     f20:	2300      	movs	r3, #0
     f22:	2600      	movs	r6, #0
     f24:	46b4      	mov	ip, r6
     f26:	e7d5      	b.n	ed4 <keypad_scan_keys+0x40>
		}
		gpio_set_pin(colPorts[col], colPins[col], 0);
     f28:	2200      	movs	r2, #0
     f2a:	9901      	ldr	r1, [sp, #4]
     f2c:	9800      	ldr	r0, [sp, #0]
     f2e:	4b1a      	ldr	r3, [pc, #104]	; (f98 <keypad_scan_keys+0x104>)
     f30:	4798      	blx	r3
	for (int col = 0; col < KEYPAD_NUM_COLS; col++) {
     f32:	2301      	movs	r3, #1
     f34:	469c      	mov	ip, r3
     f36:	44e0      	add	r8, ip
     f38:	4643      	mov	r3, r8
     f3a:	2b07      	cmp	r3, #7
     f3c:	dc0e      	bgt.n	f5c <keypad_scan_keys+0xc8>
		gpio_set_pin(colPorts[col], colPins[col], 1);
     f3e:	4b17      	ldr	r3, [pc, #92]	; (f9c <keypad_scan_keys+0x108>)
     f40:	4642      	mov	r2, r8
     f42:	0092      	lsls	r2, r2, #2
     f44:	58d1      	ldr	r1, [r2, r3]
     f46:	0008      	movs	r0, r1
     f48:	9100      	str	r1, [sp, #0]
     f4a:	189b      	adds	r3, r3, r2
     f4c:	6a1b      	ldr	r3, [r3, #32]
     f4e:	9301      	str	r3, [sp, #4]
     f50:	2201      	movs	r2, #1
     f52:	0019      	movs	r1, r3
     f54:	4b10      	ldr	r3, [pc, #64]	; (f98 <keypad_scan_keys+0x104>)
     f56:	4798      	blx	r3
		for (int row = 0; row < KEYPAD_NUM_ROWS; row++) {
     f58:	2700      	movs	r7, #0
     f5a:	e7c3      	b.n	ee4 <keypad_scan_keys+0x50>
	}
	keypad_inst->changed |= keypad_inst->rawKeys & (~keypad_inst->previous);
     f5c:	4b0d      	ldr	r3, [pc, #52]	; (f94 <keypad_scan_keys+0x100>)
     f5e:	681b      	ldr	r3, [r3, #0]
     f60:	6898      	ldr	r0, [r3, #8]
     f62:	68d9      	ldr	r1, [r3, #12]
     f64:	699c      	ldr	r4, [r3, #24]
     f66:	69dd      	ldr	r5, [r3, #28]
     f68:	0006      	movs	r6, r0
     f6a:	43a6      	bics	r6, r4
     f6c:	000a      	movs	r2, r1
     f6e:	43aa      	bics	r2, r5
     f70:	691c      	ldr	r4, [r3, #16]
     f72:	695d      	ldr	r5, [r3, #20]
     f74:	4326      	orrs	r6, r4
     f76:	0030      	movs	r0, r6
     f78:	432a      	orrs	r2, r5
     f7a:	0011      	movs	r1, r2
     f7c:	6118      	str	r0, [r3, #16]
     f7e:	6159      	str	r1, [r3, #20]
	keypad_inst->previous = keypad_inst->rawKeys;
     f80:	6898      	ldr	r0, [r3, #8]
     f82:	68d9      	ldr	r1, [r3, #12]
     f84:	6198      	str	r0, [r3, #24]
     f86:	61d9      	str	r1, [r3, #28]
}
     f88:	b002      	add	sp, #8
     f8a:	bc1c      	pop	{r2, r3, r4}
     f8c:	4690      	mov	r8, r2
     f8e:	4699      	mov	r9, r3
     f90:	46a2      	mov	sl, r4
     f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f94:	20000568 	.word	0x20000568
     f98:	00000529 	.word	0x00000529
     f9c:	000022a0 	.word	0x000022a0
     fa0:	0000069d 	.word	0x0000069d

00000fa4 <keypad_init>:

void keypad_init(keypad *status) {
     fa4:	b570      	push	{r4, r5, r6, lr}
	keypad_inst = status;
     fa6:	4b17      	ldr	r3, [pc, #92]	; (1004 <STACK_SIZE+0x4>)
     fa8:	6018      	str	r0, [r3, #0]
	for (int i = 0; i < KEYPAD_NUM_COLS; i++) {
     faa:	2400      	movs	r4, #0
     fac:	e008      	b.n	fc0 <keypad_init+0x1c>
		gpio_set_pin_dir(colPorts[i], colPins[i], GPIO_DIR_OUT);
     fae:	4b16      	ldr	r3, [pc, #88]	; (1008 <STACK_SIZE+0x8>)
     fb0:	00a2      	lsls	r2, r4, #2
     fb2:	58d0      	ldr	r0, [r2, r3]
     fb4:	189b      	adds	r3, r3, r2
     fb6:	6a19      	ldr	r1, [r3, #32]
     fb8:	2201      	movs	r2, #1
     fba:	4b14      	ldr	r3, [pc, #80]	; (100c <STACK_SIZE+0xc>)
     fbc:	4798      	blx	r3
	for (int i = 0; i < KEYPAD_NUM_COLS; i++) {
     fbe:	3401      	adds	r4, #1
     fc0:	2c07      	cmp	r4, #7
     fc2:	ddf4      	ble.n	fae <keypad_init+0xa>
     fc4:	2400      	movs	r4, #0
     fc6:	e00f      	b.n	fe8 <keypad_init+0x44>
	}
	for (int i = 0; i < KEYPAD_NUM_ROWS; i++) {
		gpio_set_pin_dir(rowPorts[i], rowPins[i], GPIO_DIR_IN);
     fc8:	00a2      	lsls	r2, r4, #2
     fca:	4b0f      	ldr	r3, [pc, #60]	; (1008 <STACK_SIZE+0x8>)
     fcc:	189b      	adds	r3, r3, r2
     fce:	6c1d      	ldr	r5, [r3, #64]	; 0x40
     fd0:	6d5e      	ldr	r6, [r3, #84]	; 0x54
     fd2:	2200      	movs	r2, #0
     fd4:	0031      	movs	r1, r6
     fd6:	0028      	movs	r0, r5
     fd8:	4b0c      	ldr	r3, [pc, #48]	; (100c <STACK_SIZE+0xc>)
     fda:	4798      	blx	r3
		gpio_set_pin_pull(rowPorts[i], rowPins[i], GPIO_PULL_DOWN);
     fdc:	2202      	movs	r2, #2
     fde:	0031      	movs	r1, r6
     fe0:	0028      	movs	r0, r5
     fe2:	4b0b      	ldr	r3, [pc, #44]	; (1010 <STACK_SIZE+0x10>)
     fe4:	4798      	blx	r3
	for (int i = 0; i < KEYPAD_NUM_ROWS; i++) {
     fe6:	3401      	adds	r4, #1
     fe8:	2c04      	cmp	r4, #4
     fea:	dded      	ble.n	fc8 <keypad_init+0x24>
	}
	keypad_inst->rawKeys = 0;
     fec:	4b05      	ldr	r3, [pc, #20]	; (1004 <STACK_SIZE+0x4>)
     fee:	681b      	ldr	r3, [r3, #0]
     ff0:	2000      	movs	r0, #0
     ff2:	2100      	movs	r1, #0
     ff4:	6098      	str	r0, [r3, #8]
     ff6:	60d9      	str	r1, [r3, #12]
	keypad_inst->changed = 0;
     ff8:	6118      	str	r0, [r3, #16]
     ffa:	6159      	str	r1, [r3, #20]
	keypad_inst->previous = 0;
     ffc:	6198      	str	r0, [r3, #24]
     ffe:	61d9      	str	r1, [r3, #28]
} //Keypad
    1000:	bd70      	pop	{r4, r5, r6, pc}
    1002:	46c0      	nop			; (mov r8, r8)
    1004:	20000568 	.word	0x20000568
    1008:	000022a0 	.word	0x000022a0
    100c:	00000575 	.word	0x00000575
    1010:	00000639 	.word	0x00000639

00001014 <SysTick_Handler>:
	//bool shift_state;
	//bool hyp_state;
	//
//} system_status;

void SysTick_Handler(void) {
    1014:	b510      	push	{r4, lr}
	static unsigned int tickCountSci = 0, tickCountKeys = 0;
	tickCountSci++; tickCountKeys++;
    1016:	4a10      	ldr	r2, [pc, #64]	; (1058 <SysTick_Handler+0x44>)
    1018:	6813      	ldr	r3, [r2, #0]
    101a:	3301      	adds	r3, #1
    101c:	6013      	str	r3, [r2, #0]
    101e:	6851      	ldr	r1, [r2, #4]
    1020:	3101      	adds	r1, #1
    1022:	6051      	str	r1, [r2, #4]
	if (tickCountSci > io_devices.ssd.update_period_ticks) {
    1024:	4a0d      	ldr	r2, [pc, #52]	; (105c <SysTick_Handler+0x48>)
    1026:	8812      	ldrh	r2, [r2, #0]
    1028:	4293      	cmp	r3, r2
    102a:	d808      	bhi.n	103e <SysTick_Handler+0x2a>
		tickCountSci = 0;
		SSD_updateDisp();
	}
	if (tickCountKeys > 10) {
    102c:	4b0a      	ldr	r3, [pc, #40]	; (1058 <SysTick_Handler+0x44>)
    102e:	685b      	ldr	r3, [r3, #4]
    1030:	2b0a      	cmp	r3, #10
    1032:	d80a      	bhi.n	104a <SysTick_Handler+0x36>
		//if (io_devices.keypad.changed) {
			//
			//io_devices.keypad.changed = 0;
		//}
	}
	systick_timer_ms++;
    1034:	4a08      	ldr	r2, [pc, #32]	; (1058 <SysTick_Handler+0x44>)
    1036:	6893      	ldr	r3, [r2, #8]
    1038:	3301      	adds	r3, #1
    103a:	6093      	str	r3, [r2, #8]
}
    103c:	bd10      	pop	{r4, pc}
		tickCountSci = 0;
    103e:	2200      	movs	r2, #0
    1040:	4b05      	ldr	r3, [pc, #20]	; (1058 <SysTick_Handler+0x44>)
    1042:	601a      	str	r2, [r3, #0]
		SSD_updateDisp();
    1044:	4b06      	ldr	r3, [pc, #24]	; (1060 <SysTick_Handler+0x4c>)
    1046:	4798      	blx	r3
    1048:	e7f0      	b.n	102c <SysTick_Handler+0x18>
		tickCountKeys = 0;
    104a:	2200      	movs	r2, #0
    104c:	4b02      	ldr	r3, [pc, #8]	; (1058 <SysTick_Handler+0x44>)
    104e:	605a      	str	r2, [r3, #4]
		keypad_scan_keys();
    1050:	4b04      	ldr	r3, [pc, #16]	; (1064 <SysTick_Handler+0x50>)
    1052:	4798      	blx	r3
    1054:	e7ee      	b.n	1034 <SysTick_Handler+0x20>
    1056:	46c0      	nop			; (mov r8, r8)
    1058:	20000578 	.word	0x20000578
    105c:	20000ef0 	.word	0x20000ef0
    1060:	00001655 	.word	0x00001655
    1064:	00000e95 	.word	0x00000e95

00001068 <GpioInit>:
		}
	}
	sys_state.sys.modifiers.shift = (shiftstate == mod_inactive) ? mod_inactive : mod_active;
}

void GpioInit() {
    1068:	b570      	push	{r4, r5, r6, lr}
	//gpio_set_pin_dir(PWR_LED_PORT, PWR_LED_PIN, GPIO_DIR_OUT);
	//gpio_set_pin_dir(BUSY_LED_PORT, BUSY_LED_PORT, GPIO_DIR_OUT);
	//gpio_set_pin_drvstr(PWR_LED_PORT, PWR_LED_PIN, 1);
	//gpio_set_pin_drvstr(BUSY_LED_PORT, BUSY_LED_PORT, 1);
	gpio_set_pin_dir(GPIO(PWR_LED), GPIO_DIR_OUT);
    106a:	2201      	movs	r2, #1
    106c:	2116      	movs	r1, #22
    106e:	2001      	movs	r0, #1
    1070:	4c09      	ldr	r4, [pc, #36]	; (1098 <GpioInit+0x30>)
    1072:	47a0      	blx	r4
	gpio_set_pin_dir(GPIO(BUSY_LED), GPIO_DIR_OUT);
    1074:	2201      	movs	r2, #1
    1076:	2117      	movs	r1, #23
    1078:	2001      	movs	r0, #1
    107a:	47a0      	blx	r4
	gpio_set_pin_drvstr(GPIO(PWR_LED), 1);
    107c:	2201      	movs	r2, #1
    107e:	2116      	movs	r1, #22
    1080:	2001      	movs	r0, #1
    1082:	4d06      	ldr	r5, [pc, #24]	; (109c <GpioInit+0x34>)
    1084:	47a8      	blx	r5
	gpio_set_pin_drvstr(GPIO(BUSY_LED), 1);
    1086:	2201      	movs	r2, #1
    1088:	2117      	movs	r1, #23
    108a:	2001      	movs	r0, #1
    108c:	47a8      	blx	r5
	gpio_set_pin_dir(GPIO(PWR_CTRL), GPIO_DIR_OUT);
    108e:	2201      	movs	r2, #1
    1090:	2111      	movs	r1, #17
    1092:	2001      	movs	r0, #1
    1094:	47a0      	blx	r4
		
}
    1096:	bd70      	pop	{r4, r5, r6, pc}
    1098:	00000575 	.word	0x00000575
    109c:	00000611 	.word	0x00000611

000010a0 <enablePwr>:

void enablePwr() {
    10a0:	b510      	push	{r4, lr}
	// TODO: check voltage level
	gpio_set_pin(GPIO(PWR_CTRL), 1);
    10a2:	2201      	movs	r2, #1
    10a4:	2111      	movs	r1, #17
    10a6:	2001      	movs	r0, #1
    10a8:	4b01      	ldr	r3, [pc, #4]	; (10b0 <enablePwr+0x10>)
    10aa:	4798      	blx	r3
}
    10ac:	bd10      	pop	{r4, pc}
    10ae:	46c0      	nop			; (mov r8, r8)
    10b0:	00000529 	.word	0x00000529

000010b4 <LvPeripheralsInit>:

void LvPeripheralsInit() {
    10b4:	b510      	push	{r4, lr}
	SSD_init(&io_devices.ssd);
    10b6:	4c05      	ldr	r4, [pc, #20]	; (10cc <LvPeripheralsInit+0x18>)
    10b8:	0020      	movs	r0, r4
    10ba:	4b05      	ldr	r3, [pc, #20]	; (10d0 <LvPeripheralsInit+0x1c>)
    10bc:	4798      	blx	r3
	keypad_init(&io_devices.keypad);
    10be:	0020      	movs	r0, r4
    10c0:	3010      	adds	r0, #16
    10c2:	4b04      	ldr	r3, [pc, #16]	; (10d4 <LvPeripheralsInit+0x20>)
    10c4:	4798      	blx	r3
	build_keymap();
    10c6:	4b04      	ldr	r3, [pc, #16]	; (10d8 <LvPeripheralsInit+0x24>)
    10c8:	4798      	blx	r3
}
    10ca:	bd10      	pop	{r4, pc}
    10cc:	20000ef0 	.word	0x20000ef0
    10d0:	00001831 	.word	0x00001831
    10d4:	00000fa5 	.word	0x00000fa5
    10d8:	000008ad 	.word	0x000008ad

000010dc <normal_keypad_lighting>:
}


const color_rgb colors[] = {{32, 32, 32}, {128, 128, 128}, {255, 255, 255}, {0, 64, 200}, {0, 220, 0}, {255, 0, 0}, {190, 0, 128}};

void normal_keypad_lighting() {
    10dc:	b530      	push	{r4, r5, lr}
    10de:	b083      	sub	sp, #12
	for (int i = 0; i < KEYPAD_GRID_SIZE; i++) {
    10e0:	2400      	movs	r4, #0
    10e2:	e049      	b.n	1178 <normal_keypad_lighting+0x9c>
			if (currentkey->special_color) {
				// If the key has special color rules, apply that instead
				c = currentkey->special_color(&calc_state, &sys_state);
			} else {
				// Lighting depends on modifiers and command availability
				if (sys_state.sys.modifiers.shift && sys_state.sys.modifiers.hyp) {
    10e4:	4b58      	ldr	r3, [pc, #352]	; (1248 <normal_keypad_lighting+0x16c>)
    10e6:	791b      	ldrb	r3, [r3, #4]
    10e8:	2b00      	cmp	r3, #0
    10ea:	d020      	beq.n	112e <normal_keypad_lighting+0x52>
    10ec:	4a56      	ldr	r2, [pc, #344]	; (1248 <normal_keypad_lighting+0x16c>)
    10ee:	7952      	ldrb	r2, [r2, #5]
    10f0:	2a00      	cmp	r2, #0
    10f2:	d01c      	beq.n	112e <normal_keypad_lighting+0x52>
					if (currentkey->shift_hyp_cmd && currentkey->shift_hyp_cmd->available != NULL) {
    10f4:	00e3      	lsls	r3, r4, #3
    10f6:	1b1b      	subs	r3, r3, r4
    10f8:	009a      	lsls	r2, r3, #2
    10fa:	4b54      	ldr	r3, [pc, #336]	; (124c <normal_keypad_lighting+0x170>)
    10fc:	189b      	adds	r3, r3, r2
    10fe:	691b      	ldr	r3, [r3, #16]
    1100:	2b00      	cmp	r3, #0
    1102:	d006      	beq.n	1112 <normal_keypad_lighting+0x36>
    1104:	685b      	ldr	r3, [r3, #4]
    1106:	2b00      	cmp	r3, #0
    1108:	d003      	beq.n	1112 <normal_keypad_lighting+0x36>
						available = currentkey->shift_hyp_cmd->available(&calc_state, &sys_state);
    110a:	494f      	ldr	r1, [pc, #316]	; (1248 <normal_keypad_lighting+0x16c>)
    110c:	4850      	ldr	r0, [pc, #320]	; (1250 <normal_keypad_lighting+0x174>)
    110e:	3010      	adds	r0, #16
    1110:	4798      	blx	r3
					}
					c = available ? color_shift_hyp : color_shift_hyp_unavail;
    1112:	2800      	cmp	r0, #0
    1114:	d005      	beq.n	1122 <normal_keypad_lighting+0x46>
    1116:	2203      	movs	r2, #3
    1118:	494e      	ldr	r1, [pc, #312]	; (1254 <normal_keypad_lighting+0x178>)
    111a:	a801      	add	r0, sp, #4
    111c:	4b4e      	ldr	r3, [pc, #312]	; (1258 <normal_keypad_lighting+0x17c>)
    111e:	4798      	blx	r3
    1120:	e01d      	b.n	115e <normal_keypad_lighting+0x82>
    1122:	2203      	movs	r2, #3
    1124:	494d      	ldr	r1, [pc, #308]	; (125c <normal_keypad_lighting+0x180>)
    1126:	a801      	add	r0, sp, #4
    1128:	4b4b      	ldr	r3, [pc, #300]	; (1258 <normal_keypad_lighting+0x17c>)
    112a:	4798      	blx	r3
    112c:	e017      	b.n	115e <normal_keypad_lighting+0x82>
				} else if (sys_state.sys.modifiers.shift) {
    112e:	2b00      	cmp	r3, #0
    1130:	d048      	beq.n	11c4 <normal_keypad_lighting+0xe8>
					if (currentkey->shift_cmd && currentkey->shift_cmd->available != NULL) {
    1132:	00e3      	lsls	r3, r4, #3
    1134:	1b1b      	subs	r3, r3, r4
    1136:	009a      	lsls	r2, r3, #2
    1138:	4b44      	ldr	r3, [pc, #272]	; (124c <normal_keypad_lighting+0x170>)
    113a:	189b      	adds	r3, r3, r2
    113c:	689b      	ldr	r3, [r3, #8]
    113e:	2b00      	cmp	r3, #0
    1140:	d006      	beq.n	1150 <normal_keypad_lighting+0x74>
    1142:	685b      	ldr	r3, [r3, #4]
    1144:	2b00      	cmp	r3, #0
    1146:	d003      	beq.n	1150 <normal_keypad_lighting+0x74>
						available = currentkey->shift_cmd->available(&calc_state, &sys_state);
    1148:	493f      	ldr	r1, [pc, #252]	; (1248 <normal_keypad_lighting+0x16c>)
    114a:	4841      	ldr	r0, [pc, #260]	; (1250 <normal_keypad_lighting+0x174>)
    114c:	3010      	adds	r0, #16
    114e:	4798      	blx	r3
					}
					c = available ? color_shift : color_shift_unavail;
    1150:	2800      	cmp	r0, #0
    1152:	d031      	beq.n	11b8 <normal_keypad_lighting+0xdc>
    1154:	2203      	movs	r2, #3
    1156:	4942      	ldr	r1, [pc, #264]	; (1260 <normal_keypad_lighting+0x184>)
    1158:	a801      	add	r0, sp, #4
    115a:	4b3f      	ldr	r3, [pc, #252]	; (1258 <normal_keypad_lighting+0x17c>)
    115c:	4798      	blx	r3
						available = currentkey->base_cmd->available(&calc_state, &sys_state);
					}
					c = available ? color_normal : color_normal_unavail;
				}
			}
			NeoPixel_set_pixel(currentkey->pixel_idx, c.r, c.g, c.b);
    115e:	a901      	add	r1, sp, #4
    1160:	788b      	ldrb	r3, [r1, #2]
    1162:	784a      	ldrb	r2, [r1, #1]
    1164:	7809      	ldrb	r1, [r1, #0]
    1166:	00e0      	lsls	r0, r4, #3
    1168:	1b00      	subs	r0, r0, r4
    116a:	0085      	lsls	r5, r0, #2
    116c:	4837      	ldr	r0, [pc, #220]	; (124c <normal_keypad_lighting+0x170>)
    116e:	1940      	adds	r0, r0, r5
    1170:	6940      	ldr	r0, [r0, #20]
    1172:	4d3c      	ldr	r5, [pc, #240]	; (1264 <normal_keypad_lighting+0x188>)
    1174:	47a8      	blx	r5
	for (int i = 0; i < KEYPAD_GRID_SIZE; i++) {
    1176:	3401      	adds	r4, #1
    1178:	2c27      	cmp	r4, #39	; 0x27
    117a:	dc61      	bgt.n	1240 <normal_keypad_lighting+0x164>
		if (currentkey->key_type != 0) {
    117c:	00e3      	lsls	r3, r4, #3
    117e:	1b1b      	subs	r3, r3, r4
    1180:	009a      	lsls	r2, r3, #2
    1182:	4b32      	ldr	r3, [pc, #200]	; (124c <normal_keypad_lighting+0x170>)
    1184:	5cd0      	ldrb	r0, [r2, r3]
    1186:	2800      	cmp	r0, #0
    1188:	d0f5      	beq.n	1176 <normal_keypad_lighting+0x9a>
			int available = (currentkey->key_type & KEY_TYPE_MOD_MASK) ? 1 : 0;
    118a:	230f      	movs	r3, #15
    118c:	4398      	bics	r0, r3
    118e:	1e43      	subs	r3, r0, #1
    1190:	4198      	sbcs	r0, r3
    1192:	b2c0      	uxtb	r0, r0
			if (currentkey->special_color) {
    1194:	4b2d      	ldr	r3, [pc, #180]	; (124c <normal_keypad_lighting+0x170>)
    1196:	189b      	adds	r3, r3, r2
    1198:	699b      	ldr	r3, [r3, #24]
    119a:	2b00      	cmp	r3, #0
    119c:	d0a2      	beq.n	10e4 <normal_keypad_lighting+0x8>
				c = currentkey->special_color(&calc_state, &sys_state);
    119e:	492a      	ldr	r1, [pc, #168]	; (1248 <normal_keypad_lighting+0x16c>)
    11a0:	482b      	ldr	r0, [pc, #172]	; (1250 <normal_keypad_lighting+0x174>)
    11a2:	3010      	adds	r0, #16
    11a4:	4798      	blx	r3
    11a6:	ab01      	add	r3, sp, #4
    11a8:	7018      	strb	r0, [r3, #0]
    11aa:	0402      	lsls	r2, r0, #16
    11ac:	0e12      	lsrs	r2, r2, #24
    11ae:	705a      	strb	r2, [r3, #1]
    11b0:	0200      	lsls	r0, r0, #8
    11b2:	0e00      	lsrs	r0, r0, #24
    11b4:	7098      	strb	r0, [r3, #2]
    11b6:	e7d2      	b.n	115e <normal_keypad_lighting+0x82>
					c = available ? color_shift : color_shift_unavail;
    11b8:	2203      	movs	r2, #3
    11ba:	492b      	ldr	r1, [pc, #172]	; (1268 <normal_keypad_lighting+0x18c>)
    11bc:	a801      	add	r0, sp, #4
    11be:	4b26      	ldr	r3, [pc, #152]	; (1258 <normal_keypad_lighting+0x17c>)
    11c0:	4798      	blx	r3
    11c2:	e7cc      	b.n	115e <normal_keypad_lighting+0x82>
				} else if (sys_state.sys.modifiers.hyp) {
    11c4:	4b20      	ldr	r3, [pc, #128]	; (1248 <normal_keypad_lighting+0x16c>)
    11c6:	795b      	ldrb	r3, [r3, #5]
    11c8:	2b00      	cmp	r3, #0
    11ca:	d01c      	beq.n	1206 <normal_keypad_lighting+0x12a>
					if (currentkey->hyp_cmd && currentkey->hyp_cmd->available != NULL) {
    11cc:	00e3      	lsls	r3, r4, #3
    11ce:	1b1b      	subs	r3, r3, r4
    11d0:	009a      	lsls	r2, r3, #2
    11d2:	4b1e      	ldr	r3, [pc, #120]	; (124c <normal_keypad_lighting+0x170>)
    11d4:	189b      	adds	r3, r3, r2
    11d6:	68db      	ldr	r3, [r3, #12]
    11d8:	2b00      	cmp	r3, #0
    11da:	d006      	beq.n	11ea <normal_keypad_lighting+0x10e>
    11dc:	685b      	ldr	r3, [r3, #4]
    11de:	2b00      	cmp	r3, #0
    11e0:	d003      	beq.n	11ea <normal_keypad_lighting+0x10e>
						available = currentkey->hyp_cmd->available(&calc_state, &sys_state);
    11e2:	4919      	ldr	r1, [pc, #100]	; (1248 <normal_keypad_lighting+0x16c>)
    11e4:	481a      	ldr	r0, [pc, #104]	; (1250 <normal_keypad_lighting+0x174>)
    11e6:	3010      	adds	r0, #16
    11e8:	4798      	blx	r3
					c = available ? color_hyp : color_hyp_unavail;
    11ea:	2800      	cmp	r0, #0
    11ec:	d005      	beq.n	11fa <normal_keypad_lighting+0x11e>
    11ee:	2203      	movs	r2, #3
    11f0:	491e      	ldr	r1, [pc, #120]	; (126c <normal_keypad_lighting+0x190>)
    11f2:	a801      	add	r0, sp, #4
    11f4:	4b18      	ldr	r3, [pc, #96]	; (1258 <normal_keypad_lighting+0x17c>)
    11f6:	4798      	blx	r3
    11f8:	e7b1      	b.n	115e <normal_keypad_lighting+0x82>
    11fa:	2203      	movs	r2, #3
    11fc:	491c      	ldr	r1, [pc, #112]	; (1270 <normal_keypad_lighting+0x194>)
    11fe:	a801      	add	r0, sp, #4
    1200:	4b15      	ldr	r3, [pc, #84]	; (1258 <normal_keypad_lighting+0x17c>)
    1202:	4798      	blx	r3
    1204:	e7ab      	b.n	115e <normal_keypad_lighting+0x82>
					if (currentkey->base_cmd && currentkey->base_cmd->available != NULL) {
    1206:	00e3      	lsls	r3, r4, #3
    1208:	1b1b      	subs	r3, r3, r4
    120a:	009a      	lsls	r2, r3, #2
    120c:	4b0f      	ldr	r3, [pc, #60]	; (124c <normal_keypad_lighting+0x170>)
    120e:	189b      	adds	r3, r3, r2
    1210:	685b      	ldr	r3, [r3, #4]
    1212:	2b00      	cmp	r3, #0
    1214:	d006      	beq.n	1224 <normal_keypad_lighting+0x148>
    1216:	685b      	ldr	r3, [r3, #4]
    1218:	2b00      	cmp	r3, #0
    121a:	d003      	beq.n	1224 <normal_keypad_lighting+0x148>
						available = currentkey->base_cmd->available(&calc_state, &sys_state);
    121c:	490a      	ldr	r1, [pc, #40]	; (1248 <normal_keypad_lighting+0x16c>)
    121e:	480c      	ldr	r0, [pc, #48]	; (1250 <normal_keypad_lighting+0x174>)
    1220:	3010      	adds	r0, #16
    1222:	4798      	blx	r3
					c = available ? color_normal : color_normal_unavail;
    1224:	2800      	cmp	r0, #0
    1226:	d005      	beq.n	1234 <normal_keypad_lighting+0x158>
    1228:	2203      	movs	r2, #3
    122a:	4912      	ldr	r1, [pc, #72]	; (1274 <normal_keypad_lighting+0x198>)
    122c:	a801      	add	r0, sp, #4
    122e:	4b0a      	ldr	r3, [pc, #40]	; (1258 <normal_keypad_lighting+0x17c>)
    1230:	4798      	blx	r3
    1232:	e794      	b.n	115e <normal_keypad_lighting+0x82>
    1234:	2203      	movs	r2, #3
    1236:	4910      	ldr	r1, [pc, #64]	; (1278 <normal_keypad_lighting+0x19c>)
    1238:	a801      	add	r0, sp, #4
    123a:	4b07      	ldr	r3, [pc, #28]	; (1258 <normal_keypad_lighting+0x17c>)
    123c:	4798      	blx	r3
    123e:	e78e      	b.n	115e <normal_keypad_lighting+0x82>
		}
	}
	NeoPixel_update();
    1240:	4b0e      	ldr	r3, [pc, #56]	; (127c <normal_keypad_lighting+0x1a0>)
    1242:	4798      	blx	r3
}
    1244:	b003      	add	sp, #12
    1246:	bd30      	pop	{r4, r5, pc}
    1248:	200000a0 	.word	0x200000a0
    124c:	20000a48 	.word	0x20000a48
    1250:	20000578 	.word	0x20000578
    1254:	000021a0 	.word	0x000021a0
    1258:	00001f05 	.word	0x00001f05
    125c:	00002190 	.word	0x00002190
    1260:	000021a8 	.word	0x000021a8
    1264:	0000147d 	.word	0x0000147d
    1268:	00002198 	.word	0x00002198
    126c:	000021a4 	.word	0x000021a4
    1270:	00002194 	.word	0x00002194
    1274:	000021ac 	.word	0x000021ac
    1278:	0000219c 	.word	0x0000219c
    127c:	0000156d 	.word	0x0000156d

00001280 <process_keypress>:

void process_modifiers() {
	
}

cmd_generic *process_keypress() {
    1280:	b530      	push	{r4, r5, lr}
	uint64_t keys = io_devices.keypad.changed;
    1282:	4b3b      	ldr	r3, [pc, #236]	; (1370 <process_keypress+0xf0>)
    1284:	6a18      	ldr	r0, [r3, #32]
    1286:	6a59      	ldr	r1, [r3, #36]	; 0x24
	// clear the pending key press
	io_devices.keypad.changed = 0ULL;
    1288:	2400      	movs	r4, #0
    128a:	2500      	movs	r5, #0
    128c:	621c      	str	r4, [r3, #32]
    128e:	625d      	str	r5, [r3, #36]	; 0x24
	
	for (int i = 0; i < KEYPAD_GRID_SIZE; i++) {
    1290:	2300      	movs	r3, #0
    1292:	e042      	b.n	131a <process_keypress+0x9a>
		// TODO: special rules?
		if (keys & (1ULL << i)) {
    1294:	2220      	movs	r2, #32
    1296:	1ad2      	subs	r2, r2, r3
    1298:	000c      	movs	r4, r1
    129a:	4094      	lsls	r4, r2
    129c:	0002      	movs	r2, r0
    129e:	40da      	lsrs	r2, r3
    12a0:	4322      	orrs	r2, r4
    12a2:	e043      	b.n	132c <process_keypress+0xac>
			if (currentkey->key_type != 0) {
				cmd_generic *cmd = NULL;
				uint8_t modifier = (currentkey->key_type & KEY_TYPE_MOD_MASK);
				if (modifier) {
					// Set modifiers if button pressed. If modifier is already active, let it be changed to 'held'
					if (modifier == KEY_TYPE_SHIFT && !sys_state.sys.modifiers.shift) {
    12a4:	4933      	ldr	r1, [pc, #204]	; (1374 <process_keypress+0xf4>)
    12a6:	7909      	ldrb	r1, [r1, #4]
    12a8:	2900      	cmp	r1, #0
    12aa:	d14d      	bne.n	1348 <process_keypress+0xc8>
						sys_state.sys.modifiers.shift = mod_active;
    12ac:	3a0f      	subs	r2, #15
    12ae:	4b31      	ldr	r3, [pc, #196]	; (1374 <process_keypress+0xf4>)
    12b0:	711a      	strb	r2, [r3, #4]
						return NULL; // No command
    12b2:	2000      	movs	r0, #0
    12b4:	e05a      	b.n	136c <process_keypress+0xec>
					}
					if (modifier == KEY_TYPE_HYP && !sys_state.sys.modifiers.hyp) {
    12b6:	4a2f      	ldr	r2, [pc, #188]	; (1374 <process_keypress+0xf4>)
    12b8:	7952      	ldrb	r2, [r2, #5]
    12ba:	2a00      	cmp	r2, #0
    12bc:	d146      	bne.n	134c <process_keypress+0xcc>
						sys_state.sys.modifiers.hyp = mod_active;
    12be:	3201      	adds	r2, #1
    12c0:	4b2c      	ldr	r3, [pc, #176]	; (1374 <process_keypress+0xf4>)
    12c2:	715a      	strb	r2, [r3, #5]
						return NULL; // No command
    12c4:	2000      	movs	r0, #0
    12c6:	e051      	b.n	136c <process_keypress+0xec>
				}
				
				// find the command based on the modifiers
				if (sys_state.sys.modifiers.shift && sys_state.sys.modifiers.hyp) {
					cmd = currentkey->shift_hyp_cmd;
				} else if (sys_state.sys.modifiers.shift) {
    12c8:	2a00      	cmp	r2, #0
    12ca:	d00f      	beq.n	12ec <process_keypress+0x6c>
					cmd = currentkey->shift_cmd;
    12cc:	00d9      	lsls	r1, r3, #3
    12ce:	1acb      	subs	r3, r1, r3
    12d0:	0099      	lsls	r1, r3, #2
    12d2:	4b29      	ldr	r3, [pc, #164]	; (1378 <process_keypress+0xf8>)
    12d4:	185b      	adds	r3, r3, r1
    12d6:	6898      	ldr	r0, [r3, #8]
					cmd = currentkey->hyp_cmd;
				} else if (currentkey->base_cmd) {
					cmd = currentkey->base_cmd;
				}
				// Set any modifiers to 'held'
				if (sys_state.sys.modifiers.shift == mod_active) {
    12d8:	2a01      	cmp	r2, #1
    12da:	d019      	beq.n	1310 <process_keypress+0x90>
					sys_state.sys.modifiers.shift = mod_held;
				}
				if (sys_state.sys.modifiers.hyp == mod_active) {
    12dc:	4b25      	ldr	r3, [pc, #148]	; (1374 <process_keypress+0xf4>)
    12de:	795b      	ldrb	r3, [r3, #5]
    12e0:	2b01      	cmp	r3, #1
    12e2:	d143      	bne.n	136c <process_keypress+0xec>
					sys_state.sys.modifiers.hyp = mod_held;
    12e4:	2202      	movs	r2, #2
    12e6:	4b23      	ldr	r3, [pc, #140]	; (1374 <process_keypress+0xf4>)
    12e8:	715a      	strb	r2, [r3, #5]
    12ea:	e03f      	b.n	136c <process_keypress+0xec>
				} else if (sys_state.sys.modifiers.hyp) {
    12ec:	4921      	ldr	r1, [pc, #132]	; (1374 <process_keypress+0xf4>)
    12ee:	7949      	ldrb	r1, [r1, #5]
    12f0:	2900      	cmp	r1, #0
    12f2:	d006      	beq.n	1302 <process_keypress+0x82>
					cmd = currentkey->hyp_cmd;
    12f4:	00d9      	lsls	r1, r3, #3
    12f6:	1acb      	subs	r3, r1, r3
    12f8:	0099      	lsls	r1, r3, #2
    12fa:	4b1f      	ldr	r3, [pc, #124]	; (1378 <process_keypress+0xf8>)
    12fc:	185b      	adds	r3, r3, r1
    12fe:	68d8      	ldr	r0, [r3, #12]
    1300:	e7ea      	b.n	12d8 <process_keypress+0x58>
				} else if (currentkey->base_cmd) {
    1302:	00d9      	lsls	r1, r3, #3
    1304:	1acb      	subs	r3, r1, r3
    1306:	0099      	lsls	r1, r3, #2
    1308:	4b1b      	ldr	r3, [pc, #108]	; (1378 <process_keypress+0xf8>)
    130a:	185b      	adds	r3, r3, r1
    130c:	6858      	ldr	r0, [r3, #4]
    130e:	e7e3      	b.n	12d8 <process_keypress+0x58>
					sys_state.sys.modifiers.shift = mod_held;
    1310:	3201      	adds	r2, #1
    1312:	4b18      	ldr	r3, [pc, #96]	; (1374 <process_keypress+0xf4>)
    1314:	711a      	strb	r2, [r3, #4]
    1316:	e7e1      	b.n	12dc <process_keypress+0x5c>
	for (int i = 0; i < KEYPAD_GRID_SIZE; i++) {
    1318:	3301      	adds	r3, #1
    131a:	2b27      	cmp	r3, #39	; 0x27
    131c:	dc25      	bgt.n	136a <process_keypress+0xea>
		if (keys & (1ULL << i)) {
    131e:	2220      	movs	r2, #32
    1320:	4252      	negs	r2, r2
    1322:	189a      	adds	r2, r3, r2
    1324:	d4b6      	bmi.n	1294 <process_keypress+0x14>
    1326:	000c      	movs	r4, r1
    1328:	40d4      	lsrs	r4, r2
    132a:	0022      	movs	r2, r4
    132c:	07d2      	lsls	r2, r2, #31
    132e:	d5f3      	bpl.n	1318 <process_keypress+0x98>
			if (currentkey->key_type != 0) {
    1330:	00da      	lsls	r2, r3, #3
    1332:	1ad2      	subs	r2, r2, r3
    1334:	0094      	lsls	r4, r2, #2
    1336:	4a10      	ldr	r2, [pc, #64]	; (1378 <process_keypress+0xf8>)
    1338:	5ca2      	ldrb	r2, [r4, r2]
    133a:	2a00      	cmp	r2, #0
    133c:	d0ec      	beq.n	1318 <process_keypress+0x98>
				uint8_t modifier = (currentkey->key_type & KEY_TYPE_MOD_MASK);
    133e:	210f      	movs	r1, #15
    1340:	438a      	bics	r2, r1
				if (modifier) {
    1342:	d003      	beq.n	134c <process_keypress+0xcc>
					if (modifier == KEY_TYPE_SHIFT && !sys_state.sys.modifiers.shift) {
    1344:	2a10      	cmp	r2, #16
    1346:	d0ad      	beq.n	12a4 <process_keypress+0x24>
					if (modifier == KEY_TYPE_HYP && !sys_state.sys.modifiers.hyp) {
    1348:	2a20      	cmp	r2, #32
    134a:	d0b4      	beq.n	12b6 <process_keypress+0x36>
				if (sys_state.sys.modifiers.shift && sys_state.sys.modifiers.hyp) {
    134c:	4a09      	ldr	r2, [pc, #36]	; (1374 <process_keypress+0xf4>)
    134e:	7912      	ldrb	r2, [r2, #4]
    1350:	2a00      	cmp	r2, #0
    1352:	d0b9      	beq.n	12c8 <process_keypress+0x48>
    1354:	4907      	ldr	r1, [pc, #28]	; (1374 <process_keypress+0xf4>)
    1356:	7949      	ldrb	r1, [r1, #5]
    1358:	2900      	cmp	r1, #0
    135a:	d0b5      	beq.n	12c8 <process_keypress+0x48>
					cmd = currentkey->shift_hyp_cmd;
    135c:	00d9      	lsls	r1, r3, #3
    135e:	1acb      	subs	r3, r1, r3
    1360:	0099      	lsls	r1, r3, #2
    1362:	4b05      	ldr	r3, [pc, #20]	; (1378 <process_keypress+0xf8>)
    1364:	185b      	adds	r3, r3, r1
    1366:	6918      	ldr	r0, [r3, #16]
    1368:	e7b6      	b.n	12d8 <process_keypress+0x58>
				}
				return cmd;
			}
		}
	}
	return NULL;
    136a:	2000      	movs	r0, #0
}
    136c:	bd30      	pop	{r4, r5, pc}
    136e:	46c0      	nop			; (mov r8, r8)
    1370:	20000ef0 	.word	0x20000ef0
    1374:	200000a0 	.word	0x200000a0
    1378:	20000a48 	.word	0x20000a48

0000137c <exec_cmd>:

void exec_cmd(const cmd_generic *cmd) {
    137c:	b510      	push	{r4, lr}
    137e:	1e04      	subs	r4, r0, #0
	if (cmd && cmd->available(&calc_state, &sys_state)) {
    1380:	d00b      	beq.n	139a <exec_cmd+0x1e>
    1382:	4909      	ldr	r1, [pc, #36]	; (13a8 <exec_cmd+0x2c>)
    1384:	4809      	ldr	r0, [pc, #36]	; (13ac <exec_cmd+0x30>)
    1386:	3010      	adds	r0, #16
    1388:	6863      	ldr	r3, [r4, #4]
    138a:	4798      	blx	r3
    138c:	2800      	cmp	r0, #0
    138e:	d004      	beq.n	139a <exec_cmd+0x1e>
		// check command type
		if ((cmd->cmd_type & CMD_TYPE_MASK) == CMD_TYPE_OP) {
    1390:	7823      	ldrb	r3, [r4, #0]
    1392:	220f      	movs	r2, #15
    1394:	4393      	bics	r3, r2
    1396:	2b10      	cmp	r3, #16
    1398:	d000      	beq.n	139c <exec_cmd+0x20>
			// a
		}	
	} else {
		// TODO: unavailable command pressed
	}
}
    139a:	bd10      	pop	{r4, pc}
			op->op_func(&calc_state, &sys_state);
    139c:	68e3      	ldr	r3, [r4, #12]
    139e:	4902      	ldr	r1, [pc, #8]	; (13a8 <exec_cmd+0x2c>)
    13a0:	4802      	ldr	r0, [pc, #8]	; (13ac <exec_cmd+0x30>)
    13a2:	3010      	adds	r0, #16
    13a4:	4798      	blx	r3
}
    13a6:	e7f8      	b.n	139a <exec_cmd+0x1e>
    13a8:	200000a0 	.word	0x200000a0
    13ac:	20000578 	.word	0x20000578

000013b0 <main>:

int main(void)


{
    13b0:	b510      	push	{r4, lr}
    GpioInit();
    13b2:	4b24      	ldr	r3, [pc, #144]	; (1444 <main+0x94>)
    13b4:	4798      	blx	r3
	gpio_set_pin(GPIO(PWR_LED), 1);
    13b6:	2201      	movs	r2, #1
    13b8:	2116      	movs	r1, #22
    13ba:	2001      	movs	r0, #1
    13bc:	4c22      	ldr	r4, [pc, #136]	; (1448 <main+0x98>)
    13be:	47a0      	blx	r4
	gpio_set_pin(GPIO(BUSY_LED), 1);
    13c0:	2201      	movs	r2, #1
    13c2:	2117      	movs	r1, #23
    13c4:	2001      	movs	r0, #1
    13c6:	47a0      	blx	r4
	ClocksInit();
    13c8:	4b20      	ldr	r3, [pc, #128]	; (144c <main+0x9c>)
    13ca:	4798      	blx	r3
	gpio_set_pin(GPIO(BUSY_LED), 0);
    13cc:	2200      	movs	r2, #0
    13ce:	2117      	movs	r1, #23
    13d0:	2001      	movs	r0, #1
    13d2:	47a0      	blx	r4

	LvPeripheralsInit();
    13d4:	4b1e      	ldr	r3, [pc, #120]	; (1450 <main+0xa0>)
    13d6:	4798      	blx	r3

	enablePwr();
    13d8:	4b1e      	ldr	r3, [pc, #120]	; (1454 <main+0xa4>)
    13da:	4798      	blx	r3
	NeoPixel_init();
    13dc:	4b1e      	ldr	r3, [pc, #120]	; (1458 <main+0xa8>)
    13de:	4798      	blx	r3
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    13e0:	4a1e      	ldr	r2, [pc, #120]	; (145c <main+0xac>)
    13e2:	4b1f      	ldr	r3, [pc, #124]	; (1460 <main+0xb0>)
    13e4:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    13e6:	481f      	ldr	r0, [pc, #124]	; (1464 <main+0xb4>)
    13e8:	6a03      	ldr	r3, [r0, #32]
    13ea:	021b      	lsls	r3, r3, #8
    13ec:	0a1b      	lsrs	r3, r3, #8
    13ee:	21c0      	movs	r1, #192	; 0xc0
    13f0:	0609      	lsls	r1, r1, #24
    13f2:	430b      	orrs	r3, r1
    13f4:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    13f6:	2300      	movs	r3, #0
    13f8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    13fa:	3307      	adds	r3, #7
    13fc:	6013      	str	r3, [r2, #0]
    13fe:	e010      	b.n	1422 <main+0x72>
		//modifierfsm();
		//sys_state.sys.modifiers.shift = (io_devices.keypad.rawKeys & KEY_MOD_SHIFT_IDX) ? mod_active : mod_inactive;
		//sys_state.sys.modifiers.hyp = (io_devices.keypad.rawKeys & KEY_MOD_HYP_IDX) ? mod_active : mod_inactive;
		//uint64_t keys = io_devices.keypad.changed; // keypad_get_presses();
		//process_modifiers();
		if (sys_state.sys.modifiers.shift == mod_held && !(io_devices.keypad.rawKeys & KEY_MOD_SHIFT_IDX)) {
    1400:	4b19      	ldr	r3, [pc, #100]	; (1468 <main+0xb8>)
    1402:	699a      	ldr	r2, [r3, #24]
    1404:	69db      	ldr	r3, [r3, #28]
    1406:	2380      	movs	r3, #128	; 0x80
    1408:	009b      	lsls	r3, r3, #2
    140a:	4213      	tst	r3, r2
    140c:	d10d      	bne.n	142a <main+0x7a>
			 sys_state.sys.modifiers.shift = mod_inactive;
    140e:	2200      	movs	r2, #0
    1410:	4b16      	ldr	r3, [pc, #88]	; (146c <main+0xbc>)
    1412:	711a      	strb	r2, [r3, #4]
    1414:	e009      	b.n	142a <main+0x7a>
		}
		if (sys_state.sys.modifiers.hyp == mod_held && !(io_devices.keypad.rawKeys & KEY_MOD_HYP_IDX)) {
			 sys_state.sys.modifiers.hyp = mod_inactive;
		}
		cmd_generic *pressed_cmd = process_keypress();
    1416:	4b16      	ldr	r3, [pc, #88]	; (1470 <main+0xc0>)
    1418:	4798      	blx	r3
		exec_cmd(pressed_cmd);
    141a:	4b16      	ldr	r3, [pc, #88]	; (1474 <main+0xc4>)
    141c:	4798      	blx	r3
		normal_keypad_lighting();
    141e:	4b16      	ldr	r3, [pc, #88]	; (1478 <main+0xc8>)
    1420:	4798      	blx	r3
		if (sys_state.sys.modifiers.shift == mod_held && !(io_devices.keypad.rawKeys & KEY_MOD_SHIFT_IDX)) {
    1422:	4b12      	ldr	r3, [pc, #72]	; (146c <main+0xbc>)
    1424:	791b      	ldrb	r3, [r3, #4]
    1426:	2b02      	cmp	r3, #2
    1428:	d0ea      	beq.n	1400 <main+0x50>
		if (sys_state.sys.modifiers.hyp == mod_held && !(io_devices.keypad.rawKeys & KEY_MOD_HYP_IDX)) {
    142a:	4b10      	ldr	r3, [pc, #64]	; (146c <main+0xbc>)
    142c:	795b      	ldrb	r3, [r3, #5]
    142e:	2b02      	cmp	r3, #2
    1430:	d1f1      	bne.n	1416 <main+0x66>
    1432:	4b0d      	ldr	r3, [pc, #52]	; (1468 <main+0xb8>)
    1434:	699a      	ldr	r2, [r3, #24]
    1436:	69db      	ldr	r3, [r3, #28]
    1438:	071b      	lsls	r3, r3, #28
    143a:	d4ec      	bmi.n	1416 <main+0x66>
			 sys_state.sys.modifiers.hyp = mod_inactive;
    143c:	2200      	movs	r2, #0
    143e:	4b0b      	ldr	r3, [pc, #44]	; (146c <main+0xbc>)
    1440:	715a      	strb	r2, [r3, #5]
    1442:	e7e8      	b.n	1416 <main+0x66>
    1444:	00001069 	.word	0x00001069
    1448:	00000529 	.word	0x00000529
    144c:	00000119 	.word	0x00000119
    1450:	000010b5 	.word	0x000010b5
    1454:	000010a1 	.word	0x000010a1
    1458:	000014b1 	.word	0x000014b1
    145c:	e000e010 	.word	0xe000e010
    1460:	000012bf 	.word	0x000012bf
    1464:	e000ed00 	.word	0xe000ed00
    1468:	20000ef0 	.word	0x20000ef0
    146c:	200000a0 	.word	0x200000a0
    1470:	00001281 	.word	0x00001281
    1474:	0000137d 	.word	0x0000137d
    1478:	000010dd 	.word	0x000010dd

0000147c <NeoPixel_set_pixel>:
	ws2812_SPI_init();
}

/* set pixel color (pixel are numbered from 0 to NUM_PIXELS - 1) */
void NeoPixel_set_pixel(int pixel, uint8_t red, uint8_t green, uint8_t blue)
{
    147c:	b510      	push	{r4, lr}
	if (pixel < 0 || pixel >= NUM_PIXELS)
    147e:	2820      	cmp	r0, #32
    1480:	d807      	bhi.n	1492 <NeoPixel_set_pixel+0x16>
		return;
	int n = pixel * 3;
    1482:	0044      	lsls	r4, r0, #1
    1484:	1820      	adds	r0, r4, r0
	pixel_buffer[n] = green;
    1486:	4c03      	ldr	r4, [pc, #12]	; (1494 <NeoPixel_set_pixel+0x18>)
    1488:	5422      	strb	r2, [r4, r0]
	pixel_buffer[n + 1] = red;
    148a:	1c42      	adds	r2, r0, #1
    148c:	54a1      	strb	r1, [r4, r2]
	pixel_buffer[n + 2] = blue; 
    148e:	3002      	adds	r0, #2
    1490:	5423      	strb	r3, [r4, r0]
}
    1492:	bd10      	pop	{r4, pc}
    1494:	20000810 	.word	0x20000810

00001498 <NeoPixel_clear_pixels>:

/* all pixels off */
void NeoPixel_clear_pixels(void)
{
	for (int i = 0 ; i < NUM_PIXELS * 3 ; i++)
    1498:	2300      	movs	r3, #0
    149a:	e003      	b.n	14a4 <NeoPixel_clear_pixels+0xc>
		pixel_buffer[i] = 0;
    149c:	2100      	movs	r1, #0
    149e:	4a03      	ldr	r2, [pc, #12]	; (14ac <NeoPixel_clear_pixels+0x14>)
    14a0:	54d1      	strb	r1, [r2, r3]
	for (int i = 0 ; i < NUM_PIXELS * 3 ; i++)
    14a2:	3301      	adds	r3, #1
    14a4:	2b62      	cmp	r3, #98	; 0x62
    14a6:	ddf9      	ble.n	149c <NeoPixel_clear_pixels+0x4>
}
    14a8:	4770      	bx	lr
    14aa:	46c0      	nop			; (mov r8, r8)
    14ac:	20000810 	.word	0x20000810

000014b0 <NeoPixel_init>:
{
    14b0:	b500      	push	{lr}
    14b2:	b085      	sub	sp, #20
	NeoPixel_clear_pixels();
    14b4:	4b24      	ldr	r3, [pc, #144]	; (1548 <NeoPixel_init+0x98>)
    14b6:	4798      	blx	r3
	for (int i = 0 ; i < sizeof dma_buffer ; i++)
    14b8:	2300      	movs	r3, #0
    14ba:	e005      	b.n	14c8 <NeoPixel_init+0x18>
		dma_buffer[i] = 0x00;
    14bc:	4a23      	ldr	r2, [pc, #140]	; (154c <NeoPixel_init+0x9c>)
    14be:	18d2      	adds	r2, r2, r3
    14c0:	2000      	movs	r0, #0
    14c2:	2164      	movs	r1, #100	; 0x64
    14c4:	5450      	strb	r0, [r2, r1]
	for (int i = 0 ; i < sizeof dma_buffer ; i++)
    14c6:	3301      	adds	r3, #1
    14c8:	22c1      	movs	r2, #193	; 0xc1
    14ca:	0052      	lsls	r2, r2, #1
    14cc:	4293      	cmp	r3, r2
    14ce:	d9f5      	bls.n	14bc <NeoPixel_init+0xc>
	descriptor.DSTADDR.reg = (uint32_t)&SERCOM2->SPI.DATA;                // destination address is SPI DATA register
    14d0:	4b1f      	ldr	r3, [pc, #124]	; (1550 <NeoPixel_init+0xa0>)
    14d2:	9302      	str	r3, [sp, #8]
	descriptor.SRCADDR.reg = (uint32_t)(dma_buffer + sizeof dma_buffer);  // source address is the DMA buffer
    14d4:	4b1d      	ldr	r3, [pc, #116]	; (154c <NeoPixel_init+0x9c>)
    14d6:	33e8      	adds	r3, #232	; 0xe8
    14d8:	33ff      	adds	r3, #255	; 0xff
    14da:	9301      	str	r3, [sp, #4]
	descriptor.DESCADDR.reg = 0;                                          // only one transfer descriptor
    14dc:	2300      	movs	r3, #0
    14de:	9303      	str	r3, [sp, #12]
	descriptor.BTCTRL.bit.BEATSIZE = DMAC_BTCTRL_BEATSIZE_BYTE_Val;       // beat size is one byte
    14e0:	466b      	mov	r3, sp
    14e2:	881b      	ldrh	r3, [r3, #0]
    14e4:	4a1b      	ldr	r2, [pc, #108]	; (1554 <NeoPixel_init+0xa4>)
    14e6:	4013      	ands	r3, r2
    14e8:	466a      	mov	r2, sp
    14ea:	8013      	strh	r3, [r2, #0]
	descriptor.BTCTRL.bit.DSTINC = 0;                                     // destination address increment disabled
    14ec:	8813      	ldrh	r3, [r2, #0]
    14ee:	4a1a      	ldr	r2, [pc, #104]	; (1558 <NeoPixel_init+0xa8>)
    14f0:	4013      	ands	r3, r2
    14f2:	466a      	mov	r2, sp
    14f4:	8013      	strh	r3, [r2, #0]
	descriptor.BTCTRL.bit.SRCINC = 1;                                     // source address increment enabled
    14f6:	8812      	ldrh	r2, [r2, #0]
    14f8:	2380      	movs	r3, #128	; 0x80
    14fa:	00db      	lsls	r3, r3, #3
    14fc:	4313      	orrs	r3, r2
    14fe:	466a      	mov	r2, sp
    1500:	8013      	strh	r3, [r2, #0]
	descriptor.BTCTRL.bit.STEPSEL = DMAC_BTCTRL_STEPSEL_SRC_Val;          // flexible source address increment size
    1502:	8812      	ldrh	r2, [r2, #0]
    1504:	2380      	movs	r3, #128	; 0x80
    1506:	015b      	lsls	r3, r3, #5
    1508:	4313      	orrs	r3, r2
    150a:	466a      	mov	r2, sp
    150c:	8013      	strh	r3, [r2, #0]
	descriptor.BTCTRL.bit.STEPSIZE = DMAC_BTCTRL_STEPSIZE_X1_Val;         // source address increment is one byte
    150e:	8813      	ldrh	r3, [r2, #0]
    1510:	04db      	lsls	r3, r3, #19
    1512:	0cdb      	lsrs	r3, r3, #19
    1514:	8013      	strh	r3, [r2, #0]
	descriptor.BTCTRL.bit.BLOCKACT = DMAC_BTCTRL_BLOCKACT_NOACT_Val;      // request interrupt at end of block transfer
    1516:	8813      	ldrh	r3, [r2, #0]
    1518:	2218      	movs	r2, #24
    151a:	4393      	bics	r3, r2
    151c:	466a      	mov	r2, sp
    151e:	8013      	strh	r3, [r2, #0]
	descriptor.BTCNT.reg = sizeof dma_buffer;                             // beat count
    1520:	2384      	movs	r3, #132	; 0x84
    1522:	33ff      	adds	r3, #255	; 0xff
    1524:	8053      	strh	r3, [r2, #2]
	descriptor.BTCTRL.bit.VALID = 1;                                      // descriptor is valid
    1526:	8813      	ldrh	r3, [r2, #0]
    1528:	2201      	movs	r2, #1
    152a:	4313      	orrs	r3, r2
    152c:	466a      	mov	r2, sp
    152e:	8013      	strh	r3, [r2, #0]
	DMA_init();
    1530:	4b0a      	ldr	r3, [pc, #40]	; (155c <NeoPixel_init+0xac>)
    1532:	4798      	blx	r3
	DMA_add_channel(DMA_SOURCE_SERCOM2, &descriptor);
    1534:	4669      	mov	r1, sp
    1536:	2006      	movs	r0, #6
    1538:	4b09      	ldr	r3, [pc, #36]	; (1560 <NeoPixel_init+0xb0>)
    153a:	4798      	blx	r3
	DMA_enable();
    153c:	4b09      	ldr	r3, [pc, #36]	; (1564 <NeoPixel_init+0xb4>)
    153e:	4798      	blx	r3
	ws2812_SPI_init();
    1540:	4b09      	ldr	r3, [pc, #36]	; (1568 <NeoPixel_init+0xb8>)
    1542:	4798      	blx	r3
}
    1544:	b005      	add	sp, #20
    1546:	bd00      	pop	{pc}
    1548:	00001499 	.word	0x00001499
    154c:	20000810 	.word	0x20000810
    1550:	42001028 	.word	0x42001028
    1554:	fffffcff 	.word	0xfffffcff
    1558:	fffff7ff 	.word	0xfffff7ff
    155c:	000003bd 	.word	0x000003bd
    1560:	00000421 	.word	0x00000421
    1564:	000004bd 	.word	0x000004bd
    1568:	000015a9 	.word	0x000015a9

0000156c <NeoPixel_update>:
#endif


/* update DMA buffer */
void NeoPixel_update(void)
{
    156c:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0, j = 0 ; i < sizeof pixel_buffer ; i++, j += 3)
    156e:	2200      	movs	r2, #0
    1570:	2100      	movs	r1, #0
    1572:	e011      	b.n	1598 <NeoPixel_update+0x2c>
	{
		#if USELUT
		uint32_t expanded = bit_expand[pixel_buffer[i]];
    1574:	4b0a      	ldr	r3, [pc, #40]	; (15a0 <NeoPixel_update+0x34>)
    1576:	5c58      	ldrb	r0, [r3, r1]
    1578:	0080      	lsls	r0, r0, #2
    157a:	4c0a      	ldr	r4, [pc, #40]	; (15a4 <NeoPixel_update+0x38>)
    157c:	5904      	ldr	r4, [r0, r4]
		for (int bit = 1; bit < 8; bit++) {
			expanded |= (pixel_buffer[i] & (1 << bit)) << (2 * bit + 1);
		}
		#endif

		dma_buffer[j] = expanded >> 16;
    157e:	0c26      	lsrs	r6, r4, #16
    1580:	2064      	movs	r0, #100	; 0x64
    1582:	189d      	adds	r5, r3, r2
    1584:	542e      	strb	r6, [r5, r0]
		dma_buffer[j + 1] = expanded >> 8;
    1586:	1c55      	adds	r5, r2, #1
    1588:	0a26      	lsrs	r6, r4, #8
    158a:	195d      	adds	r5, r3, r5
    158c:	542e      	strb	r6, [r5, r0]
		dma_buffer[j + 2] = expanded;
    158e:	1c95      	adds	r5, r2, #2
    1590:	195b      	adds	r3, r3, r5
    1592:	541c      	strb	r4, [r3, r0]
	for (int i = 0, j = 0 ; i < sizeof pixel_buffer ; i++, j += 3)
    1594:	3101      	adds	r1, #1
    1596:	3203      	adds	r2, #3
    1598:	2962      	cmp	r1, #98	; 0x62
    159a:	d9eb      	bls.n	1574 <NeoPixel_update+0x8>
	}
}
    159c:	bd70      	pop	{r4, r5, r6, pc}
    159e:	46c0      	nop			; (mov r8, r8)
    15a0:	20000810 	.word	0x20000810
    15a4:	00002308 	.word	0x00002308

000015a8 <ws2812_SPI_init>:
 * http://www.lucadavidian.com/2018/03/08/wifi-controlled-neo-pixels-strips/
 */
void ws2812_SPI_init()
{
	/* enable peripheral clock */
	PM->APBCMASK.bit.SERCOM2_ = 1;
    15a8:	4a21      	ldr	r2, [pc, #132]	; (1630 <ws2812_SPI_init+0x88>)
    15aa:	6a11      	ldr	r1, [r2, #32]
    15ac:	2310      	movs	r3, #16
    15ae:	430b      	orrs	r3, r1
    15b0:	6213      	str	r3, [r2, #32]
	
	/* enable generic clock */
	GCLK->CLKCTRL.bit.ID = GCLK_CLKCTRL_ID_SERCOM2_CORE_Val;     // configure generic clock for SERCOM2
    15b2:	4b20      	ldr	r3, [pc, #128]	; (1634 <ws2812_SPI_init+0x8c>)
    15b4:	885a      	ldrh	r2, [r3, #2]
    15b6:	213f      	movs	r1, #63	; 0x3f
    15b8:	438a      	bics	r2, r1
    15ba:	2116      	movs	r1, #22
    15bc:	430a      	orrs	r2, r1
    15be:	805a      	strh	r2, [r3, #2]
	
	GCLK->CLKCTRL.bit.GEN = GCLK_CLKCTRL_GEN_GCLK0_Val;          // source is generic clock generator 0 
    15c0:	885a      	ldrh	r2, [r3, #2]
    15c2:	491d      	ldr	r1, [pc, #116]	; (1638 <ws2812_SPI_init+0x90>)
    15c4:	400a      	ands	r2, r1
    15c6:	805a      	strh	r2, [r3, #2]
	GCLK->CLKCTRL.bit.CLKEN = 1;                                 // enable generic clock
    15c8:	8859      	ldrh	r1, [r3, #2]
    15ca:	2280      	movs	r2, #128	; 0x80
    15cc:	01d2      	lsls	r2, r2, #7
    15ce:	430a      	orrs	r2, r1
    15d0:	805a      	strh	r2, [r3, #2]
	
	/* select GPIO pins alternative function */
	PORT->Group[BACKLIGHT_MOSI_PORT].PINCFG[BACKLIGHT_MOSI_PIN].bit.PMUXEN = 1;                // enable alternative function for pin
    15d2:	4a1a      	ldr	r2, [pc, #104]	; (163c <ws2812_SPI_init+0x94>)
    15d4:	214c      	movs	r1, #76	; 0x4c
    15d6:	5c53      	ldrb	r3, [r2, r1]
    15d8:	2001      	movs	r0, #1
    15da:	4303      	orrs	r3, r0
    15dc:	5453      	strb	r3, [r2, r1]
	PORT->Group[BACKLIGHT_MOSI_PORT].PMUX[BACKLIGHT_MOSI_PIN/2].bit.PMUXE = BACKLIGHT_MOSI_PMUX; // PMUX->SERCOM2
    15de:	3916      	subs	r1, #22
    15e0:	5c53      	ldrb	r3, [r2, r1]
    15e2:	200f      	movs	r0, #15
    15e4:	4383      	bics	r3, r0
    15e6:	2002      	movs	r0, #2
    15e8:	4303      	orrs	r3, r0
    15ea:	5453      	strb	r3, [r2, r1]
	
	/* configure peripheral */
	BACKLIGHT_SERCOM->SPI.CTRLA.bit.DOPO = BACKLIGHT_MOSI_PAD;            // MOSI on pad 0 (pin PA12)
    15ec:	4b14      	ldr	r3, [pc, #80]	; (1640 <ws2812_SPI_init+0x98>)
    15ee:	6819      	ldr	r1, [r3, #0]
    15f0:	4a14      	ldr	r2, [pc, #80]	; (1644 <ws2812_SPI_init+0x9c>)
    15f2:	400a      	ands	r2, r1
    15f4:	601a      	str	r2, [r3, #0]
	BACKLIGHT_SERCOM->SPI.CTRLA.bit.CPHA = 0x00;  
    15f6:	6819      	ldr	r1, [r3, #0]
    15f8:	4a13      	ldr	r2, [pc, #76]	; (1648 <ws2812_SPI_init+0xa0>)
    15fa:	400a      	ands	r2, r1
    15fc:	601a      	str	r2, [r3, #0]
	BACKLIGHT_SERCOM->SPI.CTRLA.bit.CPOL = 0x00;                          // transfer mode 0
    15fe:	6819      	ldr	r1, [r3, #0]
    1600:	4a12      	ldr	r2, [pc, #72]	; (164c <ws2812_SPI_init+0xa4>)
    1602:	400a      	ands	r2, r1
    1604:	601a      	str	r2, [r3, #0]
	BACKLIGHT_SERCOM->SPI.CTRLA.bit.DORD = 0x00;                          // MSB first
    1606:	6819      	ldr	r1, [r3, #0]
    1608:	4a11      	ldr	r2, [pc, #68]	; (1650 <ws2812_SPI_init+0xa8>)
    160a:	400a      	ands	r2, r1
    160c:	601a      	str	r2, [r3, #0]
	BACKLIGHT_SERCOM->SPI.CTRLA.bit.MODE = 0x03;                          // SPI master operation
    160e:	6819      	ldr	r1, [r3, #0]
    1610:	221c      	movs	r2, #28
    1612:	4391      	bics	r1, r2
    1614:	3a10      	subs	r2, #16
    1616:	430a      	orrs	r2, r1
    1618:	601a      	str	r2, [r3, #0]
	BACKLIGHT_SERCOM->SPI.CTRLB.bit.CHSIZE = 0x00;                        // 8 bit character size
    161a:	6859      	ldr	r1, [r3, #4]
    161c:	2207      	movs	r2, #7
    161e:	4391      	bics	r1, r2
    1620:	6059      	str	r1, [r3, #4]
	BACKLIGHT_SERCOM->SPI.BAUD.reg = 9;                                   // SPI frequency 2.4 MHz (BAUD = gclk/(2*f_baud) - 1)
    1622:	2209      	movs	r2, #9
    1624:	731a      	strb	r2, [r3, #12]
	
	/* enable peripheral */
	SERCOM2->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1626:	681a      	ldr	r2, [r3, #0]
    1628:	2102      	movs	r1, #2
    162a:	430a      	orrs	r2, r1
    162c:	601a      	str	r2, [r3, #0]
}
    162e:	4770      	bx	lr
    1630:	40000400 	.word	0x40000400
    1634:	40000c00 	.word	0x40000c00
    1638:	fffff0ff 	.word	0xfffff0ff
    163c:	41004400 	.word	0x41004400
    1640:	42001000 	.word	0x42001000
    1644:	fffcffff 	.word	0xfffcffff
    1648:	efffffff 	.word	0xefffffff
    164c:	dfffffff 	.word	0xdfffffff
    1650:	bfffffff 	.word	0xbfffffff

00001654 <SSD_updateDisp>:
			}
		}
	}
}

void SSD_updateDisp() {
    1654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	gpio_set_pin(SSD_DIG0_PORT, SSD_DIG0_PIN, 1); // Active low, clear display to prevent ghosting
    1656:	2201      	movs	r2, #1
    1658:	2103      	movs	r1, #3
    165a:	2001      	movs	r0, #1
    165c:	4c46      	ldr	r4, [pc, #280]	; (1778 <SSD_updateDisp+0x124>)
    165e:	47a0      	blx	r4
	gpio_set_pin(SSD_DIG1_PORT, SSD_DIG1_PIN, 1);
    1660:	2201      	movs	r2, #1
    1662:	2102      	movs	r1, #2
    1664:	2001      	movs	r0, #1
    1666:	47a0      	blx	r4
	gpio_set_pin(SSD_DIG2_PORT, SSD_DIG2_PIN, 1);
    1668:	2201      	movs	r2, #1
    166a:	2101      	movs	r1, #1
    166c:	2001      	movs	r0, #1
    166e:	47a0      	blx	r4
	gpio_set_pin(SSD_DIG3_PORT, SSD_DIG3_PIN, 1);
    1670:	2201      	movs	r2, #1
    1672:	2100      	movs	r1, #0
    1674:	2001      	movs	r0, #1
    1676:	47a0      	blx	r4

	gpio_set_pin(SSD_SEG_PORT, SSD_SEGA_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_A));
    1678:	4d40      	ldr	r5, [pc, #256]	; (177c <SSD_updateDisp+0x128>)
    167a:	682b      	ldr	r3, [r5, #0]
    167c:	789a      	ldrb	r2, [r3, #2]
    167e:	189b      	adds	r3, r3, r2
    1680:	78da      	ldrb	r2, [r3, #3]
    1682:	2601      	movs	r6, #1
    1684:	2701      	movs	r7, #1
    1686:	407a      	eors	r2, r7
    1688:	4032      	ands	r2, r6
    168a:	2110      	movs	r1, #16
    168c:	2000      	movs	r0, #0
    168e:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGB_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_B));
    1690:	682b      	ldr	r3, [r5, #0]
    1692:	789a      	ldrb	r2, [r3, #2]
    1694:	189b      	adds	r3, r3, r2
    1696:	78da      	ldrb	r2, [r3, #3]
    1698:	0852      	lsrs	r2, r2, #1
    169a:	407a      	eors	r2, r7
    169c:	4032      	ands	r2, r6
    169e:	2111      	movs	r1, #17
    16a0:	2000      	movs	r0, #0
    16a2:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGC_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_C));
    16a4:	682b      	ldr	r3, [r5, #0]
    16a6:	789a      	ldrb	r2, [r3, #2]
    16a8:	189b      	adds	r3, r3, r2
    16aa:	78da      	ldrb	r2, [r3, #3]
    16ac:	0892      	lsrs	r2, r2, #2
    16ae:	407a      	eors	r2, r7
    16b0:	4032      	ands	r2, r6
    16b2:	2112      	movs	r1, #18
    16b4:	2000      	movs	r0, #0
    16b6:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGD_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_D));
    16b8:	682b      	ldr	r3, [r5, #0]
    16ba:	789a      	ldrb	r2, [r3, #2]
    16bc:	189b      	adds	r3, r3, r2
    16be:	78da      	ldrb	r2, [r3, #3]
    16c0:	08d2      	lsrs	r2, r2, #3
    16c2:	407a      	eors	r2, r7
    16c4:	4032      	ands	r2, r6
    16c6:	2113      	movs	r1, #19
    16c8:	2000      	movs	r0, #0
    16ca:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGE_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_E));
    16cc:	682b      	ldr	r3, [r5, #0]
    16ce:	789a      	ldrb	r2, [r3, #2]
    16d0:	189b      	adds	r3, r3, r2
    16d2:	78da      	ldrb	r2, [r3, #3]
    16d4:	0912      	lsrs	r2, r2, #4
    16d6:	407a      	eors	r2, r7
    16d8:	4032      	ands	r2, r6
    16da:	2115      	movs	r1, #21
    16dc:	2000      	movs	r0, #0
    16de:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGF_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_F));
    16e0:	682b      	ldr	r3, [r5, #0]
    16e2:	789a      	ldrb	r2, [r3, #2]
    16e4:	189b      	adds	r3, r3, r2
    16e6:	78da      	ldrb	r2, [r3, #3]
    16e8:	0952      	lsrs	r2, r2, #5
    16ea:	407a      	eors	r2, r7
    16ec:	4032      	ands	r2, r6
    16ee:	210f      	movs	r1, #15
    16f0:	2000      	movs	r0, #0
    16f2:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGG_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_G));
    16f4:	682b      	ldr	r3, [r5, #0]
    16f6:	789a      	ldrb	r2, [r3, #2]
    16f8:	189b      	adds	r3, r3, r2
    16fa:	78da      	ldrb	r2, [r3, #3]
    16fc:	0992      	lsrs	r2, r2, #6
    16fe:	407a      	eors	r2, r7
    1700:	4032      	ands	r2, r6
    1702:	2116      	movs	r1, #22
    1704:	2000      	movs	r0, #0
    1706:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGDP_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_DP));
    1708:	682b      	ldr	r3, [r5, #0]
    170a:	789a      	ldrb	r2, [r3, #2]
    170c:	189b      	adds	r3, r3, r2
    170e:	78da      	ldrb	r2, [r3, #3]
    1710:	b252      	sxtb	r2, r2
    1712:	43d2      	mvns	r2, r2
    1714:	0fd2      	lsrs	r2, r2, #31
    1716:	2117      	movs	r1, #23
    1718:	2000      	movs	r0, #0
    171a:	47a0      	blx	r4

	gpio_set_pin(SSD_DIG0_PORT, SSD_DIG0_PIN, ssd->currentDig != 0); // Active low
    171c:	682b      	ldr	r3, [r5, #0]
    171e:	789a      	ldrb	r2, [r3, #2]
    1720:	1e53      	subs	r3, r2, #1
    1722:	419a      	sbcs	r2, r3
    1724:	2103      	movs	r1, #3
    1726:	2001      	movs	r0, #1
    1728:	47a0      	blx	r4
	gpio_set_pin(SSD_DIG1_PORT, SSD_DIG1_PIN, ssd->currentDig != 1);
    172a:	682b      	ldr	r3, [r5, #0]
    172c:	789a      	ldrb	r2, [r3, #2]
    172e:	3a01      	subs	r2, #1
    1730:	1e53      	subs	r3, r2, #1
    1732:	419a      	sbcs	r2, r3
    1734:	2102      	movs	r1, #2
    1736:	2001      	movs	r0, #1
    1738:	47a0      	blx	r4
	gpio_set_pin(SSD_DIG2_PORT, SSD_DIG2_PIN, ssd->currentDig != 2);
    173a:	682b      	ldr	r3, [r5, #0]
    173c:	789a      	ldrb	r2, [r3, #2]
    173e:	3a02      	subs	r2, #2
    1740:	1e53      	subs	r3, r2, #1
    1742:	419a      	sbcs	r2, r3
    1744:	2101      	movs	r1, #1
    1746:	2001      	movs	r0, #1
    1748:	47a0      	blx	r4
	gpio_set_pin(SSD_DIG3_PORT, SSD_DIG3_PIN, ssd->currentDig != 3);
    174a:	682b      	ldr	r3, [r5, #0]
    174c:	789a      	ldrb	r2, [r3, #2]
    174e:	3a03      	subs	r2, #3
    1750:	1e53      	subs	r3, r2, #1
    1752:	419a      	sbcs	r2, r3
    1754:	2100      	movs	r1, #0
    1756:	2001      	movs	r0, #1
    1758:	47a0      	blx	r4
	ssd->currentDig++;
    175a:	682a      	ldr	r2, [r5, #0]
    175c:	7893      	ldrb	r3, [r2, #2]
    175e:	3301      	adds	r3, #1
    1760:	b2db      	uxtb	r3, r3
    1762:	7093      	strb	r3, [r2, #2]
	if (ssd->currentDig >= DISP_SIZE + ssd->blankInterval) {
    1764:	7891      	ldrb	r1, [r2, #2]
    1766:	b2c9      	uxtb	r1, r1
    1768:	8913      	ldrh	r3, [r2, #8]
    176a:	3304      	adds	r3, #4
    176c:	4299      	cmp	r1, r3
    176e:	db01      	blt.n	1774 <SSD_updateDisp+0x120>
		ssd->currentDig = 0;
    1770:	2300      	movs	r3, #0
    1772:	7093      	strb	r3, [r2, #2]
	}
}
    1774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1776:	46c0      	nop			; (mov r8, r8)
    1778:	00000529 	.word	0x00000529
    177c:	200009f8 	.word	0x200009f8

00001780 <SSDgpioInit>:
void SSD_setBrightness(int brightness) {
	
}


void SSDgpioInit() {
    1780:	b570      	push	{r4, r5, r6, lr}
	gpio_set_pin_dir(SSD_DIG0_PORT, SSD_DIG0_PIN, GPIO_DIR_OUT); // Active low
    1782:	2201      	movs	r2, #1
    1784:	2103      	movs	r1, #3
    1786:	2001      	movs	r0, #1
    1788:	4c27      	ldr	r4, [pc, #156]	; (1828 <SSDgpioInit+0xa8>)
    178a:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_DIG1_PORT, SSD_DIG1_PIN, GPIO_DIR_OUT);
    178c:	2201      	movs	r2, #1
    178e:	2102      	movs	r1, #2
    1790:	2001      	movs	r0, #1
    1792:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_DIG2_PORT, SSD_DIG2_PIN, GPIO_DIR_OUT);
    1794:	2201      	movs	r2, #1
    1796:	2101      	movs	r1, #1
    1798:	2001      	movs	r0, #1
    179a:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_DIG3_PORT, SSD_DIG3_PIN, GPIO_DIR_OUT);
    179c:	2201      	movs	r2, #1
    179e:	2100      	movs	r1, #0
    17a0:	2001      	movs	r0, #1
    17a2:	47a0      	blx	r4
	
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGA_PIN, 1);
    17a4:	2201      	movs	r2, #1
    17a6:	2110      	movs	r1, #16
    17a8:	2000      	movs	r0, #0
    17aa:	4d20      	ldr	r5, [pc, #128]	; (182c <SSDgpioInit+0xac>)
    17ac:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGB_PIN, 1);
    17ae:	2201      	movs	r2, #1
    17b0:	2111      	movs	r1, #17
    17b2:	2000      	movs	r0, #0
    17b4:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGC_PIN, 1);
    17b6:	2201      	movs	r2, #1
    17b8:	2112      	movs	r1, #18
    17ba:	2000      	movs	r0, #0
    17bc:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGD_PIN, 1);
    17be:	2201      	movs	r2, #1
    17c0:	2113      	movs	r1, #19
    17c2:	2000      	movs	r0, #0
    17c4:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGE_PIN, 1);
    17c6:	2201      	movs	r2, #1
    17c8:	2115      	movs	r1, #21
    17ca:	2000      	movs	r0, #0
    17cc:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGF_PIN, 1);
    17ce:	2201      	movs	r2, #1
    17d0:	210f      	movs	r1, #15
    17d2:	2000      	movs	r0, #0
    17d4:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGG_PIN, 1);
    17d6:	2201      	movs	r2, #1
    17d8:	2116      	movs	r1, #22
    17da:	2000      	movs	r0, #0
    17dc:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGDP_PIN, 1);
    17de:	2201      	movs	r2, #1
    17e0:	2117      	movs	r1, #23
    17e2:	2000      	movs	r0, #0
    17e4:	47a8      	blx	r5

	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGA_PIN, GPIO_DIR_OUT);
    17e6:	2201      	movs	r2, #1
    17e8:	2110      	movs	r1, #16
    17ea:	2000      	movs	r0, #0
    17ec:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGB_PIN, GPIO_DIR_OUT);
    17ee:	2201      	movs	r2, #1
    17f0:	2111      	movs	r1, #17
    17f2:	2000      	movs	r0, #0
    17f4:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGC_PIN, GPIO_DIR_OUT);
    17f6:	2201      	movs	r2, #1
    17f8:	2112      	movs	r1, #18
    17fa:	2000      	movs	r0, #0
    17fc:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGD_PIN, GPIO_DIR_OUT);
    17fe:	2201      	movs	r2, #1
    1800:	2113      	movs	r1, #19
    1802:	2000      	movs	r0, #0
    1804:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGE_PIN, GPIO_DIR_OUT);
    1806:	2201      	movs	r2, #1
    1808:	2115      	movs	r1, #21
    180a:	2000      	movs	r0, #0
    180c:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGF_PIN, GPIO_DIR_OUT);
    180e:	2201      	movs	r2, #1
    1810:	210f      	movs	r1, #15
    1812:	2000      	movs	r0, #0
    1814:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGG_PIN, GPIO_DIR_OUT);
    1816:	2201      	movs	r2, #1
    1818:	2116      	movs	r1, #22
    181a:	2000      	movs	r0, #0
    181c:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGDP_PIN, GPIO_DIR_OUT);
    181e:	2201      	movs	r2, #1
    1820:	2117      	movs	r1, #23
    1822:	2000      	movs	r0, #0
    1824:	47a0      	blx	r4
}
    1826:	bd70      	pop	{r4, r5, r6, pc}
    1828:	00000575 	.word	0x00000575
    182c:	00000611 	.word	0x00000611

00001830 <SSD_init>:

void SSD_init(SSDisplay* disp_status) {
    1830:	b510      	push	{r4, lr}
	ssd = disp_status;
    1832:	4b09      	ldr	r3, [pc, #36]	; (1858 <SSD_init+0x28>)
    1834:	6018      	str	r0, [r3, #0]
	ssd->update_period_ticks = 16;
    1836:	2310      	movs	r3, #16
    1838:	8003      	strh	r3, [r0, #0]
	ssd->currentDig = 0;
    183a:	2300      	movs	r3, #0
    183c:	7083      	strb	r3, [r0, #2]
	for (int i = 0; i < DISP_SIZE; i++) {
    183e:	e003      	b.n	1848 <SSD_init+0x18>
		ssd->currentData[i] = 0;
    1840:	18c2      	adds	r2, r0, r3
    1842:	2100      	movs	r1, #0
    1844:	70d1      	strb	r1, [r2, #3]
	for (int i = 0; i < DISP_SIZE; i++) {
    1846:	3301      	adds	r3, #1
    1848:	2b03      	cmp	r3, #3
    184a:	ddf9      	ble.n	1840 <SSD_init+0x10>
	}
	ssd->blankInterval = 0;
    184c:	2300      	movs	r3, #0
    184e:	8103      	strh	r3, [r0, #8]
	SSDgpioInit();
    1850:	4b02      	ldr	r3, [pc, #8]	; (185c <SSD_init+0x2c>)
    1852:	4798      	blx	r3
}
    1854:	bd10      	pop	{r4, pc}
    1856:	46c0      	nop			; (mov r8, r8)
    1858:	200009f8 	.word	0x200009f8
    185c:	00001781 	.word	0x00001781

00001860 <__aeabi_dadd>:
    1860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1862:	4645      	mov	r5, r8
    1864:	46de      	mov	lr, fp
    1866:	4657      	mov	r7, sl
    1868:	464e      	mov	r6, r9
    186a:	030c      	lsls	r4, r1, #12
    186c:	b5e0      	push	{r5, r6, r7, lr}
    186e:	004e      	lsls	r6, r1, #1
    1870:	0fc9      	lsrs	r1, r1, #31
    1872:	4688      	mov	r8, r1
    1874:	000d      	movs	r5, r1
    1876:	0a61      	lsrs	r1, r4, #9
    1878:	0f44      	lsrs	r4, r0, #29
    187a:	430c      	orrs	r4, r1
    187c:	00c7      	lsls	r7, r0, #3
    187e:	0319      	lsls	r1, r3, #12
    1880:	0058      	lsls	r0, r3, #1
    1882:	0fdb      	lsrs	r3, r3, #31
    1884:	469b      	mov	fp, r3
    1886:	0a4b      	lsrs	r3, r1, #9
    1888:	0f51      	lsrs	r1, r2, #29
    188a:	430b      	orrs	r3, r1
    188c:	0d76      	lsrs	r6, r6, #21
    188e:	0d40      	lsrs	r0, r0, #21
    1890:	0019      	movs	r1, r3
    1892:	00d2      	lsls	r2, r2, #3
    1894:	45d8      	cmp	r8, fp
    1896:	d100      	bne.n	189a <__aeabi_dadd+0x3a>
    1898:	e0ae      	b.n	19f8 <__aeabi_dadd+0x198>
    189a:	1a35      	subs	r5, r6, r0
    189c:	2d00      	cmp	r5, #0
    189e:	dc00      	bgt.n	18a2 <__aeabi_dadd+0x42>
    18a0:	e0f6      	b.n	1a90 <__aeabi_dadd+0x230>
    18a2:	2800      	cmp	r0, #0
    18a4:	d10f      	bne.n	18c6 <__aeabi_dadd+0x66>
    18a6:	4313      	orrs	r3, r2
    18a8:	d100      	bne.n	18ac <__aeabi_dadd+0x4c>
    18aa:	e0db      	b.n	1a64 <__aeabi_dadd+0x204>
    18ac:	1e6b      	subs	r3, r5, #1
    18ae:	2b00      	cmp	r3, #0
    18b0:	d000      	beq.n	18b4 <__aeabi_dadd+0x54>
    18b2:	e137      	b.n	1b24 <__aeabi_dadd+0x2c4>
    18b4:	1aba      	subs	r2, r7, r2
    18b6:	4297      	cmp	r7, r2
    18b8:	41bf      	sbcs	r7, r7
    18ba:	1a64      	subs	r4, r4, r1
    18bc:	427f      	negs	r7, r7
    18be:	1be4      	subs	r4, r4, r7
    18c0:	2601      	movs	r6, #1
    18c2:	0017      	movs	r7, r2
    18c4:	e024      	b.n	1910 <__aeabi_dadd+0xb0>
    18c6:	4bc6      	ldr	r3, [pc, #792]	; (1be0 <__aeabi_dadd+0x380>)
    18c8:	429e      	cmp	r6, r3
    18ca:	d04d      	beq.n	1968 <__aeabi_dadd+0x108>
    18cc:	2380      	movs	r3, #128	; 0x80
    18ce:	041b      	lsls	r3, r3, #16
    18d0:	4319      	orrs	r1, r3
    18d2:	2d38      	cmp	r5, #56	; 0x38
    18d4:	dd00      	ble.n	18d8 <__aeabi_dadd+0x78>
    18d6:	e107      	b.n	1ae8 <__aeabi_dadd+0x288>
    18d8:	2d1f      	cmp	r5, #31
    18da:	dd00      	ble.n	18de <__aeabi_dadd+0x7e>
    18dc:	e138      	b.n	1b50 <__aeabi_dadd+0x2f0>
    18de:	2020      	movs	r0, #32
    18e0:	1b43      	subs	r3, r0, r5
    18e2:	469a      	mov	sl, r3
    18e4:	000b      	movs	r3, r1
    18e6:	4650      	mov	r0, sl
    18e8:	4083      	lsls	r3, r0
    18ea:	4699      	mov	r9, r3
    18ec:	0013      	movs	r3, r2
    18ee:	4648      	mov	r0, r9
    18f0:	40eb      	lsrs	r3, r5
    18f2:	4318      	orrs	r0, r3
    18f4:	0003      	movs	r3, r0
    18f6:	4650      	mov	r0, sl
    18f8:	4082      	lsls	r2, r0
    18fa:	1e50      	subs	r0, r2, #1
    18fc:	4182      	sbcs	r2, r0
    18fe:	40e9      	lsrs	r1, r5
    1900:	431a      	orrs	r2, r3
    1902:	1aba      	subs	r2, r7, r2
    1904:	1a61      	subs	r1, r4, r1
    1906:	4297      	cmp	r7, r2
    1908:	41a4      	sbcs	r4, r4
    190a:	0017      	movs	r7, r2
    190c:	4264      	negs	r4, r4
    190e:	1b0c      	subs	r4, r1, r4
    1910:	0223      	lsls	r3, r4, #8
    1912:	d562      	bpl.n	19da <__aeabi_dadd+0x17a>
    1914:	0264      	lsls	r4, r4, #9
    1916:	0a65      	lsrs	r5, r4, #9
    1918:	2d00      	cmp	r5, #0
    191a:	d100      	bne.n	191e <__aeabi_dadd+0xbe>
    191c:	e0df      	b.n	1ade <__aeabi_dadd+0x27e>
    191e:	0028      	movs	r0, r5
    1920:	f000 faae 	bl	1e80 <__clzsi2>
    1924:	0003      	movs	r3, r0
    1926:	3b08      	subs	r3, #8
    1928:	2b1f      	cmp	r3, #31
    192a:	dd00      	ble.n	192e <__aeabi_dadd+0xce>
    192c:	e0d2      	b.n	1ad4 <__aeabi_dadd+0x274>
    192e:	2220      	movs	r2, #32
    1930:	003c      	movs	r4, r7
    1932:	1ad2      	subs	r2, r2, r3
    1934:	409d      	lsls	r5, r3
    1936:	40d4      	lsrs	r4, r2
    1938:	409f      	lsls	r7, r3
    193a:	4325      	orrs	r5, r4
    193c:	429e      	cmp	r6, r3
    193e:	dd00      	ble.n	1942 <__aeabi_dadd+0xe2>
    1940:	e0c4      	b.n	1acc <__aeabi_dadd+0x26c>
    1942:	1b9e      	subs	r6, r3, r6
    1944:	1c73      	adds	r3, r6, #1
    1946:	2b1f      	cmp	r3, #31
    1948:	dd00      	ble.n	194c <__aeabi_dadd+0xec>
    194a:	e0f1      	b.n	1b30 <__aeabi_dadd+0x2d0>
    194c:	2220      	movs	r2, #32
    194e:	0038      	movs	r0, r7
    1950:	0029      	movs	r1, r5
    1952:	1ad2      	subs	r2, r2, r3
    1954:	40d8      	lsrs	r0, r3
    1956:	4091      	lsls	r1, r2
    1958:	4097      	lsls	r7, r2
    195a:	002c      	movs	r4, r5
    195c:	4301      	orrs	r1, r0
    195e:	1e78      	subs	r0, r7, #1
    1960:	4187      	sbcs	r7, r0
    1962:	40dc      	lsrs	r4, r3
    1964:	2600      	movs	r6, #0
    1966:	430f      	orrs	r7, r1
    1968:	077b      	lsls	r3, r7, #29
    196a:	d009      	beq.n	1980 <__aeabi_dadd+0x120>
    196c:	230f      	movs	r3, #15
    196e:	403b      	ands	r3, r7
    1970:	2b04      	cmp	r3, #4
    1972:	d005      	beq.n	1980 <__aeabi_dadd+0x120>
    1974:	1d3b      	adds	r3, r7, #4
    1976:	42bb      	cmp	r3, r7
    1978:	41bf      	sbcs	r7, r7
    197a:	427f      	negs	r7, r7
    197c:	19e4      	adds	r4, r4, r7
    197e:	001f      	movs	r7, r3
    1980:	0223      	lsls	r3, r4, #8
    1982:	d52c      	bpl.n	19de <__aeabi_dadd+0x17e>
    1984:	4b96      	ldr	r3, [pc, #600]	; (1be0 <__aeabi_dadd+0x380>)
    1986:	3601      	adds	r6, #1
    1988:	429e      	cmp	r6, r3
    198a:	d100      	bne.n	198e <__aeabi_dadd+0x12e>
    198c:	e09a      	b.n	1ac4 <__aeabi_dadd+0x264>
    198e:	4645      	mov	r5, r8
    1990:	4b94      	ldr	r3, [pc, #592]	; (1be4 <__aeabi_dadd+0x384>)
    1992:	08ff      	lsrs	r7, r7, #3
    1994:	401c      	ands	r4, r3
    1996:	0760      	lsls	r0, r4, #29
    1998:	0576      	lsls	r6, r6, #21
    199a:	0264      	lsls	r4, r4, #9
    199c:	4307      	orrs	r7, r0
    199e:	0b24      	lsrs	r4, r4, #12
    19a0:	0d76      	lsrs	r6, r6, #21
    19a2:	2100      	movs	r1, #0
    19a4:	0324      	lsls	r4, r4, #12
    19a6:	0b23      	lsrs	r3, r4, #12
    19a8:	0d0c      	lsrs	r4, r1, #20
    19aa:	4a8f      	ldr	r2, [pc, #572]	; (1be8 <__aeabi_dadd+0x388>)
    19ac:	0524      	lsls	r4, r4, #20
    19ae:	431c      	orrs	r4, r3
    19b0:	4014      	ands	r4, r2
    19b2:	0533      	lsls	r3, r6, #20
    19b4:	4323      	orrs	r3, r4
    19b6:	005b      	lsls	r3, r3, #1
    19b8:	07ed      	lsls	r5, r5, #31
    19ba:	085b      	lsrs	r3, r3, #1
    19bc:	432b      	orrs	r3, r5
    19be:	0038      	movs	r0, r7
    19c0:	0019      	movs	r1, r3
    19c2:	bc3c      	pop	{r2, r3, r4, r5}
    19c4:	4690      	mov	r8, r2
    19c6:	4699      	mov	r9, r3
    19c8:	46a2      	mov	sl, r4
    19ca:	46ab      	mov	fp, r5
    19cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19ce:	4664      	mov	r4, ip
    19d0:	4304      	orrs	r4, r0
    19d2:	d100      	bne.n	19d6 <__aeabi_dadd+0x176>
    19d4:	e211      	b.n	1dfa <__aeabi_dadd+0x59a>
    19d6:	0004      	movs	r4, r0
    19d8:	4667      	mov	r7, ip
    19da:	077b      	lsls	r3, r7, #29
    19dc:	d1c6      	bne.n	196c <__aeabi_dadd+0x10c>
    19de:	4645      	mov	r5, r8
    19e0:	0760      	lsls	r0, r4, #29
    19e2:	08ff      	lsrs	r7, r7, #3
    19e4:	4307      	orrs	r7, r0
    19e6:	08e4      	lsrs	r4, r4, #3
    19e8:	4b7d      	ldr	r3, [pc, #500]	; (1be0 <__aeabi_dadd+0x380>)
    19ea:	429e      	cmp	r6, r3
    19ec:	d030      	beq.n	1a50 <__aeabi_dadd+0x1f0>
    19ee:	0324      	lsls	r4, r4, #12
    19f0:	0576      	lsls	r6, r6, #21
    19f2:	0b24      	lsrs	r4, r4, #12
    19f4:	0d76      	lsrs	r6, r6, #21
    19f6:	e7d4      	b.n	19a2 <__aeabi_dadd+0x142>
    19f8:	1a33      	subs	r3, r6, r0
    19fa:	469a      	mov	sl, r3
    19fc:	2b00      	cmp	r3, #0
    19fe:	dd78      	ble.n	1af2 <__aeabi_dadd+0x292>
    1a00:	2800      	cmp	r0, #0
    1a02:	d031      	beq.n	1a68 <__aeabi_dadd+0x208>
    1a04:	4876      	ldr	r0, [pc, #472]	; (1be0 <__aeabi_dadd+0x380>)
    1a06:	4286      	cmp	r6, r0
    1a08:	d0ae      	beq.n	1968 <__aeabi_dadd+0x108>
    1a0a:	2080      	movs	r0, #128	; 0x80
    1a0c:	0400      	lsls	r0, r0, #16
    1a0e:	4301      	orrs	r1, r0
    1a10:	4653      	mov	r3, sl
    1a12:	2b38      	cmp	r3, #56	; 0x38
    1a14:	dc00      	bgt.n	1a18 <__aeabi_dadd+0x1b8>
    1a16:	e0e9      	b.n	1bec <__aeabi_dadd+0x38c>
    1a18:	430a      	orrs	r2, r1
    1a1a:	1e51      	subs	r1, r2, #1
    1a1c:	418a      	sbcs	r2, r1
    1a1e:	2100      	movs	r1, #0
    1a20:	19d2      	adds	r2, r2, r7
    1a22:	42ba      	cmp	r2, r7
    1a24:	41bf      	sbcs	r7, r7
    1a26:	1909      	adds	r1, r1, r4
    1a28:	427c      	negs	r4, r7
    1a2a:	0017      	movs	r7, r2
    1a2c:	190c      	adds	r4, r1, r4
    1a2e:	0223      	lsls	r3, r4, #8
    1a30:	d5d3      	bpl.n	19da <__aeabi_dadd+0x17a>
    1a32:	4b6b      	ldr	r3, [pc, #428]	; (1be0 <__aeabi_dadd+0x380>)
    1a34:	3601      	adds	r6, #1
    1a36:	429e      	cmp	r6, r3
    1a38:	d100      	bne.n	1a3c <__aeabi_dadd+0x1dc>
    1a3a:	e13a      	b.n	1cb2 <__aeabi_dadd+0x452>
    1a3c:	2001      	movs	r0, #1
    1a3e:	4b69      	ldr	r3, [pc, #420]	; (1be4 <__aeabi_dadd+0x384>)
    1a40:	401c      	ands	r4, r3
    1a42:	087b      	lsrs	r3, r7, #1
    1a44:	4007      	ands	r7, r0
    1a46:	431f      	orrs	r7, r3
    1a48:	07e0      	lsls	r0, r4, #31
    1a4a:	4307      	orrs	r7, r0
    1a4c:	0864      	lsrs	r4, r4, #1
    1a4e:	e78b      	b.n	1968 <__aeabi_dadd+0x108>
    1a50:	0023      	movs	r3, r4
    1a52:	433b      	orrs	r3, r7
    1a54:	d100      	bne.n	1a58 <__aeabi_dadd+0x1f8>
    1a56:	e1cb      	b.n	1df0 <__aeabi_dadd+0x590>
    1a58:	2280      	movs	r2, #128	; 0x80
    1a5a:	0312      	lsls	r2, r2, #12
    1a5c:	4314      	orrs	r4, r2
    1a5e:	0324      	lsls	r4, r4, #12
    1a60:	0b24      	lsrs	r4, r4, #12
    1a62:	e79e      	b.n	19a2 <__aeabi_dadd+0x142>
    1a64:	002e      	movs	r6, r5
    1a66:	e77f      	b.n	1968 <__aeabi_dadd+0x108>
    1a68:	0008      	movs	r0, r1
    1a6a:	4310      	orrs	r0, r2
    1a6c:	d100      	bne.n	1a70 <__aeabi_dadd+0x210>
    1a6e:	e0b4      	b.n	1bda <__aeabi_dadd+0x37a>
    1a70:	1e58      	subs	r0, r3, #1
    1a72:	2800      	cmp	r0, #0
    1a74:	d000      	beq.n	1a78 <__aeabi_dadd+0x218>
    1a76:	e0de      	b.n	1c36 <__aeabi_dadd+0x3d6>
    1a78:	18ba      	adds	r2, r7, r2
    1a7a:	42ba      	cmp	r2, r7
    1a7c:	419b      	sbcs	r3, r3
    1a7e:	1864      	adds	r4, r4, r1
    1a80:	425b      	negs	r3, r3
    1a82:	18e4      	adds	r4, r4, r3
    1a84:	0017      	movs	r7, r2
    1a86:	2601      	movs	r6, #1
    1a88:	0223      	lsls	r3, r4, #8
    1a8a:	d5a6      	bpl.n	19da <__aeabi_dadd+0x17a>
    1a8c:	2602      	movs	r6, #2
    1a8e:	e7d5      	b.n	1a3c <__aeabi_dadd+0x1dc>
    1a90:	2d00      	cmp	r5, #0
    1a92:	d16e      	bne.n	1b72 <__aeabi_dadd+0x312>
    1a94:	1c70      	adds	r0, r6, #1
    1a96:	0540      	lsls	r0, r0, #21
    1a98:	0d40      	lsrs	r0, r0, #21
    1a9a:	2801      	cmp	r0, #1
    1a9c:	dc00      	bgt.n	1aa0 <__aeabi_dadd+0x240>
    1a9e:	e0f9      	b.n	1c94 <__aeabi_dadd+0x434>
    1aa0:	1ab8      	subs	r0, r7, r2
    1aa2:	4684      	mov	ip, r0
    1aa4:	4287      	cmp	r7, r0
    1aa6:	4180      	sbcs	r0, r0
    1aa8:	1ae5      	subs	r5, r4, r3
    1aaa:	4240      	negs	r0, r0
    1aac:	1a2d      	subs	r5, r5, r0
    1aae:	0228      	lsls	r0, r5, #8
    1ab0:	d400      	bmi.n	1ab4 <__aeabi_dadd+0x254>
    1ab2:	e089      	b.n	1bc8 <__aeabi_dadd+0x368>
    1ab4:	1bd7      	subs	r7, r2, r7
    1ab6:	42ba      	cmp	r2, r7
    1ab8:	4192      	sbcs	r2, r2
    1aba:	1b1c      	subs	r4, r3, r4
    1abc:	4252      	negs	r2, r2
    1abe:	1aa5      	subs	r5, r4, r2
    1ac0:	46d8      	mov	r8, fp
    1ac2:	e729      	b.n	1918 <__aeabi_dadd+0xb8>
    1ac4:	4645      	mov	r5, r8
    1ac6:	2400      	movs	r4, #0
    1ac8:	2700      	movs	r7, #0
    1aca:	e76a      	b.n	19a2 <__aeabi_dadd+0x142>
    1acc:	4c45      	ldr	r4, [pc, #276]	; (1be4 <__aeabi_dadd+0x384>)
    1ace:	1af6      	subs	r6, r6, r3
    1ad0:	402c      	ands	r4, r5
    1ad2:	e749      	b.n	1968 <__aeabi_dadd+0x108>
    1ad4:	003d      	movs	r5, r7
    1ad6:	3828      	subs	r0, #40	; 0x28
    1ad8:	4085      	lsls	r5, r0
    1ada:	2700      	movs	r7, #0
    1adc:	e72e      	b.n	193c <__aeabi_dadd+0xdc>
    1ade:	0038      	movs	r0, r7
    1ae0:	f000 f9ce 	bl	1e80 <__clzsi2>
    1ae4:	3020      	adds	r0, #32
    1ae6:	e71d      	b.n	1924 <__aeabi_dadd+0xc4>
    1ae8:	430a      	orrs	r2, r1
    1aea:	1e51      	subs	r1, r2, #1
    1aec:	418a      	sbcs	r2, r1
    1aee:	2100      	movs	r1, #0
    1af0:	e707      	b.n	1902 <__aeabi_dadd+0xa2>
    1af2:	2b00      	cmp	r3, #0
    1af4:	d000      	beq.n	1af8 <__aeabi_dadd+0x298>
    1af6:	e0f3      	b.n	1ce0 <__aeabi_dadd+0x480>
    1af8:	1c70      	adds	r0, r6, #1
    1afa:	0543      	lsls	r3, r0, #21
    1afc:	0d5b      	lsrs	r3, r3, #21
    1afe:	2b01      	cmp	r3, #1
    1b00:	dc00      	bgt.n	1b04 <__aeabi_dadd+0x2a4>
    1b02:	e0ad      	b.n	1c60 <__aeabi_dadd+0x400>
    1b04:	4b36      	ldr	r3, [pc, #216]	; (1be0 <__aeabi_dadd+0x380>)
    1b06:	4298      	cmp	r0, r3
    1b08:	d100      	bne.n	1b0c <__aeabi_dadd+0x2ac>
    1b0a:	e0d1      	b.n	1cb0 <__aeabi_dadd+0x450>
    1b0c:	18ba      	adds	r2, r7, r2
    1b0e:	42ba      	cmp	r2, r7
    1b10:	41bf      	sbcs	r7, r7
    1b12:	1864      	adds	r4, r4, r1
    1b14:	427f      	negs	r7, r7
    1b16:	19e4      	adds	r4, r4, r7
    1b18:	07e7      	lsls	r7, r4, #31
    1b1a:	0852      	lsrs	r2, r2, #1
    1b1c:	4317      	orrs	r7, r2
    1b1e:	0864      	lsrs	r4, r4, #1
    1b20:	0006      	movs	r6, r0
    1b22:	e721      	b.n	1968 <__aeabi_dadd+0x108>
    1b24:	482e      	ldr	r0, [pc, #184]	; (1be0 <__aeabi_dadd+0x380>)
    1b26:	4285      	cmp	r5, r0
    1b28:	d100      	bne.n	1b2c <__aeabi_dadd+0x2cc>
    1b2a:	e093      	b.n	1c54 <__aeabi_dadd+0x3f4>
    1b2c:	001d      	movs	r5, r3
    1b2e:	e6d0      	b.n	18d2 <__aeabi_dadd+0x72>
    1b30:	0029      	movs	r1, r5
    1b32:	3e1f      	subs	r6, #31
    1b34:	40f1      	lsrs	r1, r6
    1b36:	2b20      	cmp	r3, #32
    1b38:	d100      	bne.n	1b3c <__aeabi_dadd+0x2dc>
    1b3a:	e08d      	b.n	1c58 <__aeabi_dadd+0x3f8>
    1b3c:	2240      	movs	r2, #64	; 0x40
    1b3e:	1ad3      	subs	r3, r2, r3
    1b40:	409d      	lsls	r5, r3
    1b42:	432f      	orrs	r7, r5
    1b44:	1e7d      	subs	r5, r7, #1
    1b46:	41af      	sbcs	r7, r5
    1b48:	2400      	movs	r4, #0
    1b4a:	430f      	orrs	r7, r1
    1b4c:	2600      	movs	r6, #0
    1b4e:	e744      	b.n	19da <__aeabi_dadd+0x17a>
    1b50:	002b      	movs	r3, r5
    1b52:	0008      	movs	r0, r1
    1b54:	3b20      	subs	r3, #32
    1b56:	40d8      	lsrs	r0, r3
    1b58:	0003      	movs	r3, r0
    1b5a:	2d20      	cmp	r5, #32
    1b5c:	d100      	bne.n	1b60 <__aeabi_dadd+0x300>
    1b5e:	e07d      	b.n	1c5c <__aeabi_dadd+0x3fc>
    1b60:	2040      	movs	r0, #64	; 0x40
    1b62:	1b45      	subs	r5, r0, r5
    1b64:	40a9      	lsls	r1, r5
    1b66:	430a      	orrs	r2, r1
    1b68:	1e51      	subs	r1, r2, #1
    1b6a:	418a      	sbcs	r2, r1
    1b6c:	2100      	movs	r1, #0
    1b6e:	431a      	orrs	r2, r3
    1b70:	e6c7      	b.n	1902 <__aeabi_dadd+0xa2>
    1b72:	2e00      	cmp	r6, #0
    1b74:	d050      	beq.n	1c18 <__aeabi_dadd+0x3b8>
    1b76:	4e1a      	ldr	r6, [pc, #104]	; (1be0 <__aeabi_dadd+0x380>)
    1b78:	42b0      	cmp	r0, r6
    1b7a:	d057      	beq.n	1c2c <__aeabi_dadd+0x3cc>
    1b7c:	2680      	movs	r6, #128	; 0x80
    1b7e:	426b      	negs	r3, r5
    1b80:	4699      	mov	r9, r3
    1b82:	0436      	lsls	r6, r6, #16
    1b84:	4334      	orrs	r4, r6
    1b86:	464b      	mov	r3, r9
    1b88:	2b38      	cmp	r3, #56	; 0x38
    1b8a:	dd00      	ble.n	1b8e <__aeabi_dadd+0x32e>
    1b8c:	e0d6      	b.n	1d3c <__aeabi_dadd+0x4dc>
    1b8e:	2b1f      	cmp	r3, #31
    1b90:	dd00      	ble.n	1b94 <__aeabi_dadd+0x334>
    1b92:	e135      	b.n	1e00 <__aeabi_dadd+0x5a0>
    1b94:	2620      	movs	r6, #32
    1b96:	1af5      	subs	r5, r6, r3
    1b98:	0026      	movs	r6, r4
    1b9a:	40ae      	lsls	r6, r5
    1b9c:	46b2      	mov	sl, r6
    1b9e:	003e      	movs	r6, r7
    1ba0:	40de      	lsrs	r6, r3
    1ba2:	46ac      	mov	ip, r5
    1ba4:	0035      	movs	r5, r6
    1ba6:	4656      	mov	r6, sl
    1ba8:	432e      	orrs	r6, r5
    1baa:	4665      	mov	r5, ip
    1bac:	40af      	lsls	r7, r5
    1bae:	1e7d      	subs	r5, r7, #1
    1bb0:	41af      	sbcs	r7, r5
    1bb2:	40dc      	lsrs	r4, r3
    1bb4:	4337      	orrs	r7, r6
    1bb6:	1bd7      	subs	r7, r2, r7
    1bb8:	42ba      	cmp	r2, r7
    1bba:	4192      	sbcs	r2, r2
    1bbc:	1b0c      	subs	r4, r1, r4
    1bbe:	4252      	negs	r2, r2
    1bc0:	1aa4      	subs	r4, r4, r2
    1bc2:	0006      	movs	r6, r0
    1bc4:	46d8      	mov	r8, fp
    1bc6:	e6a3      	b.n	1910 <__aeabi_dadd+0xb0>
    1bc8:	4664      	mov	r4, ip
    1bca:	4667      	mov	r7, ip
    1bcc:	432c      	orrs	r4, r5
    1bce:	d000      	beq.n	1bd2 <__aeabi_dadd+0x372>
    1bd0:	e6a2      	b.n	1918 <__aeabi_dadd+0xb8>
    1bd2:	2500      	movs	r5, #0
    1bd4:	2600      	movs	r6, #0
    1bd6:	2700      	movs	r7, #0
    1bd8:	e706      	b.n	19e8 <__aeabi_dadd+0x188>
    1bda:	001e      	movs	r6, r3
    1bdc:	e6c4      	b.n	1968 <__aeabi_dadd+0x108>
    1bde:	46c0      	nop			; (mov r8, r8)
    1be0:	000007ff 	.word	0x000007ff
    1be4:	ff7fffff 	.word	0xff7fffff
    1be8:	800fffff 	.word	0x800fffff
    1bec:	2b1f      	cmp	r3, #31
    1bee:	dc63      	bgt.n	1cb8 <__aeabi_dadd+0x458>
    1bf0:	2020      	movs	r0, #32
    1bf2:	1ac3      	subs	r3, r0, r3
    1bf4:	0008      	movs	r0, r1
    1bf6:	4098      	lsls	r0, r3
    1bf8:	469c      	mov	ip, r3
    1bfa:	4683      	mov	fp, r0
    1bfc:	4653      	mov	r3, sl
    1bfe:	0010      	movs	r0, r2
    1c00:	40d8      	lsrs	r0, r3
    1c02:	0003      	movs	r3, r0
    1c04:	4658      	mov	r0, fp
    1c06:	4318      	orrs	r0, r3
    1c08:	4663      	mov	r3, ip
    1c0a:	409a      	lsls	r2, r3
    1c0c:	1e53      	subs	r3, r2, #1
    1c0e:	419a      	sbcs	r2, r3
    1c10:	4653      	mov	r3, sl
    1c12:	4302      	orrs	r2, r0
    1c14:	40d9      	lsrs	r1, r3
    1c16:	e703      	b.n	1a20 <__aeabi_dadd+0x1c0>
    1c18:	0026      	movs	r6, r4
    1c1a:	433e      	orrs	r6, r7
    1c1c:	d006      	beq.n	1c2c <__aeabi_dadd+0x3cc>
    1c1e:	43eb      	mvns	r3, r5
    1c20:	4699      	mov	r9, r3
    1c22:	2b00      	cmp	r3, #0
    1c24:	d0c7      	beq.n	1bb6 <__aeabi_dadd+0x356>
    1c26:	4e94      	ldr	r6, [pc, #592]	; (1e78 <__aeabi_dadd+0x618>)
    1c28:	42b0      	cmp	r0, r6
    1c2a:	d1ac      	bne.n	1b86 <__aeabi_dadd+0x326>
    1c2c:	000c      	movs	r4, r1
    1c2e:	0017      	movs	r7, r2
    1c30:	0006      	movs	r6, r0
    1c32:	46d8      	mov	r8, fp
    1c34:	e698      	b.n	1968 <__aeabi_dadd+0x108>
    1c36:	4b90      	ldr	r3, [pc, #576]	; (1e78 <__aeabi_dadd+0x618>)
    1c38:	459a      	cmp	sl, r3
    1c3a:	d00b      	beq.n	1c54 <__aeabi_dadd+0x3f4>
    1c3c:	4682      	mov	sl, r0
    1c3e:	e6e7      	b.n	1a10 <__aeabi_dadd+0x1b0>
    1c40:	2800      	cmp	r0, #0
    1c42:	d000      	beq.n	1c46 <__aeabi_dadd+0x3e6>
    1c44:	e09e      	b.n	1d84 <__aeabi_dadd+0x524>
    1c46:	0018      	movs	r0, r3
    1c48:	4310      	orrs	r0, r2
    1c4a:	d100      	bne.n	1c4e <__aeabi_dadd+0x3ee>
    1c4c:	e0e9      	b.n	1e22 <__aeabi_dadd+0x5c2>
    1c4e:	001c      	movs	r4, r3
    1c50:	0017      	movs	r7, r2
    1c52:	46d8      	mov	r8, fp
    1c54:	4e88      	ldr	r6, [pc, #544]	; (1e78 <__aeabi_dadd+0x618>)
    1c56:	e687      	b.n	1968 <__aeabi_dadd+0x108>
    1c58:	2500      	movs	r5, #0
    1c5a:	e772      	b.n	1b42 <__aeabi_dadd+0x2e2>
    1c5c:	2100      	movs	r1, #0
    1c5e:	e782      	b.n	1b66 <__aeabi_dadd+0x306>
    1c60:	0023      	movs	r3, r4
    1c62:	433b      	orrs	r3, r7
    1c64:	2e00      	cmp	r6, #0
    1c66:	d000      	beq.n	1c6a <__aeabi_dadd+0x40a>
    1c68:	e0ab      	b.n	1dc2 <__aeabi_dadd+0x562>
    1c6a:	2b00      	cmp	r3, #0
    1c6c:	d100      	bne.n	1c70 <__aeabi_dadd+0x410>
    1c6e:	e0e7      	b.n	1e40 <__aeabi_dadd+0x5e0>
    1c70:	000b      	movs	r3, r1
    1c72:	4313      	orrs	r3, r2
    1c74:	d100      	bne.n	1c78 <__aeabi_dadd+0x418>
    1c76:	e677      	b.n	1968 <__aeabi_dadd+0x108>
    1c78:	18ba      	adds	r2, r7, r2
    1c7a:	42ba      	cmp	r2, r7
    1c7c:	41bf      	sbcs	r7, r7
    1c7e:	1864      	adds	r4, r4, r1
    1c80:	427f      	negs	r7, r7
    1c82:	19e4      	adds	r4, r4, r7
    1c84:	0223      	lsls	r3, r4, #8
    1c86:	d400      	bmi.n	1c8a <__aeabi_dadd+0x42a>
    1c88:	e0f2      	b.n	1e70 <__aeabi_dadd+0x610>
    1c8a:	4b7c      	ldr	r3, [pc, #496]	; (1e7c <__aeabi_dadd+0x61c>)
    1c8c:	0017      	movs	r7, r2
    1c8e:	401c      	ands	r4, r3
    1c90:	0006      	movs	r6, r0
    1c92:	e669      	b.n	1968 <__aeabi_dadd+0x108>
    1c94:	0020      	movs	r0, r4
    1c96:	4338      	orrs	r0, r7
    1c98:	2e00      	cmp	r6, #0
    1c9a:	d1d1      	bne.n	1c40 <__aeabi_dadd+0x3e0>
    1c9c:	2800      	cmp	r0, #0
    1c9e:	d15b      	bne.n	1d58 <__aeabi_dadd+0x4f8>
    1ca0:	001c      	movs	r4, r3
    1ca2:	4314      	orrs	r4, r2
    1ca4:	d100      	bne.n	1ca8 <__aeabi_dadd+0x448>
    1ca6:	e0a8      	b.n	1dfa <__aeabi_dadd+0x59a>
    1ca8:	001c      	movs	r4, r3
    1caa:	0017      	movs	r7, r2
    1cac:	46d8      	mov	r8, fp
    1cae:	e65b      	b.n	1968 <__aeabi_dadd+0x108>
    1cb0:	0006      	movs	r6, r0
    1cb2:	2400      	movs	r4, #0
    1cb4:	2700      	movs	r7, #0
    1cb6:	e697      	b.n	19e8 <__aeabi_dadd+0x188>
    1cb8:	4650      	mov	r0, sl
    1cba:	000b      	movs	r3, r1
    1cbc:	3820      	subs	r0, #32
    1cbe:	40c3      	lsrs	r3, r0
    1cc0:	4699      	mov	r9, r3
    1cc2:	4653      	mov	r3, sl
    1cc4:	2b20      	cmp	r3, #32
    1cc6:	d100      	bne.n	1cca <__aeabi_dadd+0x46a>
    1cc8:	e095      	b.n	1df6 <__aeabi_dadd+0x596>
    1cca:	2340      	movs	r3, #64	; 0x40
    1ccc:	4650      	mov	r0, sl
    1cce:	1a1b      	subs	r3, r3, r0
    1cd0:	4099      	lsls	r1, r3
    1cd2:	430a      	orrs	r2, r1
    1cd4:	1e51      	subs	r1, r2, #1
    1cd6:	418a      	sbcs	r2, r1
    1cd8:	464b      	mov	r3, r9
    1cda:	2100      	movs	r1, #0
    1cdc:	431a      	orrs	r2, r3
    1cde:	e69f      	b.n	1a20 <__aeabi_dadd+0x1c0>
    1ce0:	2e00      	cmp	r6, #0
    1ce2:	d130      	bne.n	1d46 <__aeabi_dadd+0x4e6>
    1ce4:	0026      	movs	r6, r4
    1ce6:	433e      	orrs	r6, r7
    1ce8:	d067      	beq.n	1dba <__aeabi_dadd+0x55a>
    1cea:	43db      	mvns	r3, r3
    1cec:	469a      	mov	sl, r3
    1cee:	2b00      	cmp	r3, #0
    1cf0:	d01c      	beq.n	1d2c <__aeabi_dadd+0x4cc>
    1cf2:	4e61      	ldr	r6, [pc, #388]	; (1e78 <__aeabi_dadd+0x618>)
    1cf4:	42b0      	cmp	r0, r6
    1cf6:	d060      	beq.n	1dba <__aeabi_dadd+0x55a>
    1cf8:	4653      	mov	r3, sl
    1cfa:	2b38      	cmp	r3, #56	; 0x38
    1cfc:	dd00      	ble.n	1d00 <__aeabi_dadd+0x4a0>
    1cfe:	e096      	b.n	1e2e <__aeabi_dadd+0x5ce>
    1d00:	2b1f      	cmp	r3, #31
    1d02:	dd00      	ble.n	1d06 <__aeabi_dadd+0x4a6>
    1d04:	e09f      	b.n	1e46 <__aeabi_dadd+0x5e6>
    1d06:	2620      	movs	r6, #32
    1d08:	1af3      	subs	r3, r6, r3
    1d0a:	0026      	movs	r6, r4
    1d0c:	409e      	lsls	r6, r3
    1d0e:	469c      	mov	ip, r3
    1d10:	46b3      	mov	fp, r6
    1d12:	4653      	mov	r3, sl
    1d14:	003e      	movs	r6, r7
    1d16:	40de      	lsrs	r6, r3
    1d18:	0033      	movs	r3, r6
    1d1a:	465e      	mov	r6, fp
    1d1c:	431e      	orrs	r6, r3
    1d1e:	4663      	mov	r3, ip
    1d20:	409f      	lsls	r7, r3
    1d22:	1e7b      	subs	r3, r7, #1
    1d24:	419f      	sbcs	r7, r3
    1d26:	4653      	mov	r3, sl
    1d28:	40dc      	lsrs	r4, r3
    1d2a:	4337      	orrs	r7, r6
    1d2c:	18bf      	adds	r7, r7, r2
    1d2e:	4297      	cmp	r7, r2
    1d30:	4192      	sbcs	r2, r2
    1d32:	1864      	adds	r4, r4, r1
    1d34:	4252      	negs	r2, r2
    1d36:	18a4      	adds	r4, r4, r2
    1d38:	0006      	movs	r6, r0
    1d3a:	e678      	b.n	1a2e <__aeabi_dadd+0x1ce>
    1d3c:	4327      	orrs	r7, r4
    1d3e:	1e7c      	subs	r4, r7, #1
    1d40:	41a7      	sbcs	r7, r4
    1d42:	2400      	movs	r4, #0
    1d44:	e737      	b.n	1bb6 <__aeabi_dadd+0x356>
    1d46:	4e4c      	ldr	r6, [pc, #304]	; (1e78 <__aeabi_dadd+0x618>)
    1d48:	42b0      	cmp	r0, r6
    1d4a:	d036      	beq.n	1dba <__aeabi_dadd+0x55a>
    1d4c:	2680      	movs	r6, #128	; 0x80
    1d4e:	425b      	negs	r3, r3
    1d50:	0436      	lsls	r6, r6, #16
    1d52:	469a      	mov	sl, r3
    1d54:	4334      	orrs	r4, r6
    1d56:	e7cf      	b.n	1cf8 <__aeabi_dadd+0x498>
    1d58:	0018      	movs	r0, r3
    1d5a:	4310      	orrs	r0, r2
    1d5c:	d100      	bne.n	1d60 <__aeabi_dadd+0x500>
    1d5e:	e603      	b.n	1968 <__aeabi_dadd+0x108>
    1d60:	1ab8      	subs	r0, r7, r2
    1d62:	4684      	mov	ip, r0
    1d64:	4567      	cmp	r7, ip
    1d66:	41ad      	sbcs	r5, r5
    1d68:	1ae0      	subs	r0, r4, r3
    1d6a:	426d      	negs	r5, r5
    1d6c:	1b40      	subs	r0, r0, r5
    1d6e:	0205      	lsls	r5, r0, #8
    1d70:	d400      	bmi.n	1d74 <__aeabi_dadd+0x514>
    1d72:	e62c      	b.n	19ce <__aeabi_dadd+0x16e>
    1d74:	1bd7      	subs	r7, r2, r7
    1d76:	42ba      	cmp	r2, r7
    1d78:	4192      	sbcs	r2, r2
    1d7a:	1b1c      	subs	r4, r3, r4
    1d7c:	4252      	negs	r2, r2
    1d7e:	1aa4      	subs	r4, r4, r2
    1d80:	46d8      	mov	r8, fp
    1d82:	e5f1      	b.n	1968 <__aeabi_dadd+0x108>
    1d84:	0018      	movs	r0, r3
    1d86:	4310      	orrs	r0, r2
    1d88:	d100      	bne.n	1d8c <__aeabi_dadd+0x52c>
    1d8a:	e763      	b.n	1c54 <__aeabi_dadd+0x3f4>
    1d8c:	08f8      	lsrs	r0, r7, #3
    1d8e:	0767      	lsls	r7, r4, #29
    1d90:	4307      	orrs	r7, r0
    1d92:	2080      	movs	r0, #128	; 0x80
    1d94:	08e4      	lsrs	r4, r4, #3
    1d96:	0300      	lsls	r0, r0, #12
    1d98:	4204      	tst	r4, r0
    1d9a:	d008      	beq.n	1dae <__aeabi_dadd+0x54e>
    1d9c:	08dd      	lsrs	r5, r3, #3
    1d9e:	4205      	tst	r5, r0
    1da0:	d105      	bne.n	1dae <__aeabi_dadd+0x54e>
    1da2:	08d2      	lsrs	r2, r2, #3
    1da4:	0759      	lsls	r1, r3, #29
    1da6:	4311      	orrs	r1, r2
    1da8:	000f      	movs	r7, r1
    1daa:	002c      	movs	r4, r5
    1dac:	46d8      	mov	r8, fp
    1dae:	0f7b      	lsrs	r3, r7, #29
    1db0:	00e4      	lsls	r4, r4, #3
    1db2:	431c      	orrs	r4, r3
    1db4:	00ff      	lsls	r7, r7, #3
    1db6:	4e30      	ldr	r6, [pc, #192]	; (1e78 <__aeabi_dadd+0x618>)
    1db8:	e5d6      	b.n	1968 <__aeabi_dadd+0x108>
    1dba:	000c      	movs	r4, r1
    1dbc:	0017      	movs	r7, r2
    1dbe:	0006      	movs	r6, r0
    1dc0:	e5d2      	b.n	1968 <__aeabi_dadd+0x108>
    1dc2:	2b00      	cmp	r3, #0
    1dc4:	d038      	beq.n	1e38 <__aeabi_dadd+0x5d8>
    1dc6:	000b      	movs	r3, r1
    1dc8:	4313      	orrs	r3, r2
    1dca:	d100      	bne.n	1dce <__aeabi_dadd+0x56e>
    1dcc:	e742      	b.n	1c54 <__aeabi_dadd+0x3f4>
    1dce:	08f8      	lsrs	r0, r7, #3
    1dd0:	0767      	lsls	r7, r4, #29
    1dd2:	4307      	orrs	r7, r0
    1dd4:	2080      	movs	r0, #128	; 0x80
    1dd6:	08e4      	lsrs	r4, r4, #3
    1dd8:	0300      	lsls	r0, r0, #12
    1dda:	4204      	tst	r4, r0
    1ddc:	d0e7      	beq.n	1dae <__aeabi_dadd+0x54e>
    1dde:	08cb      	lsrs	r3, r1, #3
    1de0:	4203      	tst	r3, r0
    1de2:	d1e4      	bne.n	1dae <__aeabi_dadd+0x54e>
    1de4:	08d2      	lsrs	r2, r2, #3
    1de6:	0749      	lsls	r1, r1, #29
    1de8:	4311      	orrs	r1, r2
    1dea:	000f      	movs	r7, r1
    1dec:	001c      	movs	r4, r3
    1dee:	e7de      	b.n	1dae <__aeabi_dadd+0x54e>
    1df0:	2700      	movs	r7, #0
    1df2:	2400      	movs	r4, #0
    1df4:	e5d5      	b.n	19a2 <__aeabi_dadd+0x142>
    1df6:	2100      	movs	r1, #0
    1df8:	e76b      	b.n	1cd2 <__aeabi_dadd+0x472>
    1dfa:	2500      	movs	r5, #0
    1dfc:	2700      	movs	r7, #0
    1dfe:	e5f3      	b.n	19e8 <__aeabi_dadd+0x188>
    1e00:	464e      	mov	r6, r9
    1e02:	0025      	movs	r5, r4
    1e04:	3e20      	subs	r6, #32
    1e06:	40f5      	lsrs	r5, r6
    1e08:	464b      	mov	r3, r9
    1e0a:	002e      	movs	r6, r5
    1e0c:	2b20      	cmp	r3, #32
    1e0e:	d02d      	beq.n	1e6c <__aeabi_dadd+0x60c>
    1e10:	2540      	movs	r5, #64	; 0x40
    1e12:	1aed      	subs	r5, r5, r3
    1e14:	40ac      	lsls	r4, r5
    1e16:	4327      	orrs	r7, r4
    1e18:	1e7c      	subs	r4, r7, #1
    1e1a:	41a7      	sbcs	r7, r4
    1e1c:	2400      	movs	r4, #0
    1e1e:	4337      	orrs	r7, r6
    1e20:	e6c9      	b.n	1bb6 <__aeabi_dadd+0x356>
    1e22:	2480      	movs	r4, #128	; 0x80
    1e24:	2500      	movs	r5, #0
    1e26:	0324      	lsls	r4, r4, #12
    1e28:	4e13      	ldr	r6, [pc, #76]	; (1e78 <__aeabi_dadd+0x618>)
    1e2a:	2700      	movs	r7, #0
    1e2c:	e5dc      	b.n	19e8 <__aeabi_dadd+0x188>
    1e2e:	4327      	orrs	r7, r4
    1e30:	1e7c      	subs	r4, r7, #1
    1e32:	41a7      	sbcs	r7, r4
    1e34:	2400      	movs	r4, #0
    1e36:	e779      	b.n	1d2c <__aeabi_dadd+0x4cc>
    1e38:	000c      	movs	r4, r1
    1e3a:	0017      	movs	r7, r2
    1e3c:	4e0e      	ldr	r6, [pc, #56]	; (1e78 <__aeabi_dadd+0x618>)
    1e3e:	e593      	b.n	1968 <__aeabi_dadd+0x108>
    1e40:	000c      	movs	r4, r1
    1e42:	0017      	movs	r7, r2
    1e44:	e590      	b.n	1968 <__aeabi_dadd+0x108>
    1e46:	4656      	mov	r6, sl
    1e48:	0023      	movs	r3, r4
    1e4a:	3e20      	subs	r6, #32
    1e4c:	40f3      	lsrs	r3, r6
    1e4e:	4699      	mov	r9, r3
    1e50:	4653      	mov	r3, sl
    1e52:	2b20      	cmp	r3, #32
    1e54:	d00e      	beq.n	1e74 <__aeabi_dadd+0x614>
    1e56:	2340      	movs	r3, #64	; 0x40
    1e58:	4656      	mov	r6, sl
    1e5a:	1b9b      	subs	r3, r3, r6
    1e5c:	409c      	lsls	r4, r3
    1e5e:	4327      	orrs	r7, r4
    1e60:	1e7c      	subs	r4, r7, #1
    1e62:	41a7      	sbcs	r7, r4
    1e64:	464b      	mov	r3, r9
    1e66:	2400      	movs	r4, #0
    1e68:	431f      	orrs	r7, r3
    1e6a:	e75f      	b.n	1d2c <__aeabi_dadd+0x4cc>
    1e6c:	2400      	movs	r4, #0
    1e6e:	e7d2      	b.n	1e16 <__aeabi_dadd+0x5b6>
    1e70:	0017      	movs	r7, r2
    1e72:	e5b2      	b.n	19da <__aeabi_dadd+0x17a>
    1e74:	2400      	movs	r4, #0
    1e76:	e7f2      	b.n	1e5e <__aeabi_dadd+0x5fe>
    1e78:	000007ff 	.word	0x000007ff
    1e7c:	ff7fffff 	.word	0xff7fffff

00001e80 <__clzsi2>:
    1e80:	211c      	movs	r1, #28
    1e82:	2301      	movs	r3, #1
    1e84:	041b      	lsls	r3, r3, #16
    1e86:	4298      	cmp	r0, r3
    1e88:	d301      	bcc.n	1e8e <__clzsi2+0xe>
    1e8a:	0c00      	lsrs	r0, r0, #16
    1e8c:	3910      	subs	r1, #16
    1e8e:	0a1b      	lsrs	r3, r3, #8
    1e90:	4298      	cmp	r0, r3
    1e92:	d301      	bcc.n	1e98 <__clzsi2+0x18>
    1e94:	0a00      	lsrs	r0, r0, #8
    1e96:	3908      	subs	r1, #8
    1e98:	091b      	lsrs	r3, r3, #4
    1e9a:	4298      	cmp	r0, r3
    1e9c:	d301      	bcc.n	1ea2 <__clzsi2+0x22>
    1e9e:	0900      	lsrs	r0, r0, #4
    1ea0:	3904      	subs	r1, #4
    1ea2:	a202      	add	r2, pc, #8	; (adr r2, 1eac <__clzsi2+0x2c>)
    1ea4:	5c10      	ldrb	r0, [r2, r0]
    1ea6:	1840      	adds	r0, r0, r1
    1ea8:	4770      	bx	lr
    1eaa:	46c0      	nop			; (mov r8, r8)
    1eac:	02020304 	.word	0x02020304
    1eb0:	01010101 	.word	0x01010101
	...

00001ebc <__libc_init_array>:
    1ebc:	b570      	push	{r4, r5, r6, lr}
    1ebe:	4e0d      	ldr	r6, [pc, #52]	; (1ef4 <__libc_init_array+0x38>)
    1ec0:	4d0d      	ldr	r5, [pc, #52]	; (1ef8 <__libc_init_array+0x3c>)
    1ec2:	2400      	movs	r4, #0
    1ec4:	1bad      	subs	r5, r5, r6
    1ec6:	10ad      	asrs	r5, r5, #2
    1ec8:	d005      	beq.n	1ed6 <__libc_init_array+0x1a>
    1eca:	00a3      	lsls	r3, r4, #2
    1ecc:	58f3      	ldr	r3, [r6, r3]
    1ece:	3401      	adds	r4, #1
    1ed0:	4798      	blx	r3
    1ed2:	42a5      	cmp	r5, r4
    1ed4:	d1f9      	bne.n	1eca <__libc_init_array+0xe>
    1ed6:	f000 fc19 	bl	270c <_init>
    1eda:	4e08      	ldr	r6, [pc, #32]	; (1efc <__libc_init_array+0x40>)
    1edc:	4d08      	ldr	r5, [pc, #32]	; (1f00 <__libc_init_array+0x44>)
    1ede:	2400      	movs	r4, #0
    1ee0:	1bad      	subs	r5, r5, r6
    1ee2:	10ad      	asrs	r5, r5, #2
    1ee4:	d005      	beq.n	1ef2 <__libc_init_array+0x36>
    1ee6:	00a3      	lsls	r3, r4, #2
    1ee8:	58f3      	ldr	r3, [r6, r3]
    1eea:	3401      	adds	r4, #1
    1eec:	4798      	blx	r3
    1eee:	42a5      	cmp	r5, r4
    1ef0:	d1f9      	bne.n	1ee6 <__libc_init_array+0x2a>
    1ef2:	bd70      	pop	{r4, r5, r6, pc}
    1ef4:	00002718 	.word	0x00002718
    1ef8:	00002718 	.word	0x00002718
    1efc:	00002718 	.word	0x00002718
    1f00:	00002720 	.word	0x00002720

00001f04 <memcpy>:
    1f04:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f06:	0005      	movs	r5, r0
    1f08:	2a0f      	cmp	r2, #15
    1f0a:	d92f      	bls.n	1f6c <memcpy+0x68>
    1f0c:	000b      	movs	r3, r1
    1f0e:	4303      	orrs	r3, r0
    1f10:	079b      	lsls	r3, r3, #30
    1f12:	d134      	bne.n	1f7e <memcpy+0x7a>
    1f14:	0016      	movs	r6, r2
    1f16:	000c      	movs	r4, r1
    1f18:	0003      	movs	r3, r0
    1f1a:	3e10      	subs	r6, #16
    1f1c:	0935      	lsrs	r5, r6, #4
    1f1e:	3501      	adds	r5, #1
    1f20:	012d      	lsls	r5, r5, #4
    1f22:	1945      	adds	r5, r0, r5
    1f24:	6827      	ldr	r7, [r4, #0]
    1f26:	601f      	str	r7, [r3, #0]
    1f28:	6867      	ldr	r7, [r4, #4]
    1f2a:	605f      	str	r7, [r3, #4]
    1f2c:	68a7      	ldr	r7, [r4, #8]
    1f2e:	609f      	str	r7, [r3, #8]
    1f30:	68e7      	ldr	r7, [r4, #12]
    1f32:	3410      	adds	r4, #16
    1f34:	60df      	str	r7, [r3, #12]
    1f36:	3310      	adds	r3, #16
    1f38:	429d      	cmp	r5, r3
    1f3a:	d1f3      	bne.n	1f24 <memcpy+0x20>
    1f3c:	230f      	movs	r3, #15
    1f3e:	439e      	bics	r6, r3
    1f40:	3610      	adds	r6, #16
    1f42:	1985      	adds	r5, r0, r6
    1f44:	1989      	adds	r1, r1, r6
    1f46:	4013      	ands	r3, r2
    1f48:	2b03      	cmp	r3, #3
    1f4a:	d91a      	bls.n	1f82 <memcpy+0x7e>
    1f4c:	1f1e      	subs	r6, r3, #4
    1f4e:	2300      	movs	r3, #0
    1f50:	08b4      	lsrs	r4, r6, #2
    1f52:	3401      	adds	r4, #1
    1f54:	00a4      	lsls	r4, r4, #2
    1f56:	58cf      	ldr	r7, [r1, r3]
    1f58:	50ef      	str	r7, [r5, r3]
    1f5a:	3304      	adds	r3, #4
    1f5c:	42a3      	cmp	r3, r4
    1f5e:	d1fa      	bne.n	1f56 <memcpy+0x52>
    1f60:	2403      	movs	r4, #3
    1f62:	43a6      	bics	r6, r4
    1f64:	1d33      	adds	r3, r6, #4
    1f66:	4022      	ands	r2, r4
    1f68:	18c9      	adds	r1, r1, r3
    1f6a:	18ed      	adds	r5, r5, r3
    1f6c:	2a00      	cmp	r2, #0
    1f6e:	d005      	beq.n	1f7c <memcpy+0x78>
    1f70:	2300      	movs	r3, #0
    1f72:	5ccc      	ldrb	r4, [r1, r3]
    1f74:	54ec      	strb	r4, [r5, r3]
    1f76:	3301      	adds	r3, #1
    1f78:	4293      	cmp	r3, r2
    1f7a:	d1fa      	bne.n	1f72 <memcpy+0x6e>
    1f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f7e:	0005      	movs	r5, r0
    1f80:	e7f6      	b.n	1f70 <memcpy+0x6c>
    1f82:	001a      	movs	r2, r3
    1f84:	e7f2      	b.n	1f6c <memcpy+0x68>
    1f86:	46c0      	nop			; (mov r8, r8)

00001f88 <memset>:
    1f88:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f8a:	0783      	lsls	r3, r0, #30
    1f8c:	d043      	beq.n	2016 <memset+0x8e>
    1f8e:	1e54      	subs	r4, r2, #1
    1f90:	2a00      	cmp	r2, #0
    1f92:	d03f      	beq.n	2014 <memset+0x8c>
    1f94:	b2ce      	uxtb	r6, r1
    1f96:	0002      	movs	r2, r0
    1f98:	2503      	movs	r5, #3
    1f9a:	e002      	b.n	1fa2 <memset+0x1a>
    1f9c:	001a      	movs	r2, r3
    1f9e:	3c01      	subs	r4, #1
    1fa0:	d338      	bcc.n	2014 <memset+0x8c>
    1fa2:	1c53      	adds	r3, r2, #1
    1fa4:	7016      	strb	r6, [r2, #0]
    1fa6:	422b      	tst	r3, r5
    1fa8:	d1f8      	bne.n	1f9c <memset+0x14>
    1faa:	2c03      	cmp	r4, #3
    1fac:	d92a      	bls.n	2004 <memset+0x7c>
    1fae:	22ff      	movs	r2, #255	; 0xff
    1fb0:	400a      	ands	r2, r1
    1fb2:	0215      	lsls	r5, r2, #8
    1fb4:	4315      	orrs	r5, r2
    1fb6:	042a      	lsls	r2, r5, #16
    1fb8:	4315      	orrs	r5, r2
    1fba:	2c0f      	cmp	r4, #15
    1fbc:	d914      	bls.n	1fe8 <memset+0x60>
    1fbe:	0027      	movs	r7, r4
    1fc0:	001a      	movs	r2, r3
    1fc2:	3f10      	subs	r7, #16
    1fc4:	093e      	lsrs	r6, r7, #4
    1fc6:	3601      	adds	r6, #1
    1fc8:	0136      	lsls	r6, r6, #4
    1fca:	199e      	adds	r6, r3, r6
    1fcc:	6015      	str	r5, [r2, #0]
    1fce:	6055      	str	r5, [r2, #4]
    1fd0:	6095      	str	r5, [r2, #8]
    1fd2:	60d5      	str	r5, [r2, #12]
    1fd4:	3210      	adds	r2, #16
    1fd6:	4296      	cmp	r6, r2
    1fd8:	d1f8      	bne.n	1fcc <memset+0x44>
    1fda:	220f      	movs	r2, #15
    1fdc:	4397      	bics	r7, r2
    1fde:	3710      	adds	r7, #16
    1fe0:	19db      	adds	r3, r3, r7
    1fe2:	4014      	ands	r4, r2
    1fe4:	2c03      	cmp	r4, #3
    1fe6:	d90d      	bls.n	2004 <memset+0x7c>
    1fe8:	001a      	movs	r2, r3
    1fea:	1f27      	subs	r7, r4, #4
    1fec:	08be      	lsrs	r6, r7, #2
    1fee:	3601      	adds	r6, #1
    1ff0:	00b6      	lsls	r6, r6, #2
    1ff2:	199e      	adds	r6, r3, r6
    1ff4:	c220      	stmia	r2!, {r5}
    1ff6:	42b2      	cmp	r2, r6
    1ff8:	d1fc      	bne.n	1ff4 <memset+0x6c>
    1ffa:	2203      	movs	r2, #3
    1ffc:	4397      	bics	r7, r2
    1ffe:	3704      	adds	r7, #4
    2000:	19db      	adds	r3, r3, r7
    2002:	4014      	ands	r4, r2
    2004:	2c00      	cmp	r4, #0
    2006:	d005      	beq.n	2014 <memset+0x8c>
    2008:	b2c9      	uxtb	r1, r1
    200a:	191c      	adds	r4, r3, r4
    200c:	7019      	strb	r1, [r3, #0]
    200e:	3301      	adds	r3, #1
    2010:	429c      	cmp	r4, r3
    2012:	d1fb      	bne.n	200c <memset+0x84>
    2014:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2016:	0014      	movs	r4, r2
    2018:	0003      	movs	r3, r0
    201a:	e7c6      	b.n	1faa <memset+0x22>

0000201c <register_fini>:
    201c:	4b03      	ldr	r3, [pc, #12]	; (202c <register_fini+0x10>)
    201e:	b510      	push	{r4, lr}
    2020:	2b00      	cmp	r3, #0
    2022:	d002      	beq.n	202a <register_fini+0xe>
    2024:	4802      	ldr	r0, [pc, #8]	; (2030 <register_fini+0x14>)
    2026:	f000 f805 	bl	2034 <atexit>
    202a:	bd10      	pop	{r4, pc}
    202c:	00000000 	.word	0x00000000
    2030:	00002045 	.word	0x00002045

00002034 <atexit>:
    2034:	b510      	push	{r4, lr}
    2036:	0001      	movs	r1, r0
    2038:	2300      	movs	r3, #0
    203a:	2200      	movs	r2, #0
    203c:	2000      	movs	r0, #0
    203e:	f000 f81f 	bl	2080 <__register_exitproc>
    2042:	bd10      	pop	{r4, pc}

00002044 <__libc_fini_array>:
    2044:	b570      	push	{r4, r5, r6, lr}
    2046:	4b09      	ldr	r3, [pc, #36]	; (206c <__libc_fini_array+0x28>)
    2048:	4c09      	ldr	r4, [pc, #36]	; (2070 <__libc_fini_array+0x2c>)
    204a:	1ae4      	subs	r4, r4, r3
    204c:	10a4      	asrs	r4, r4, #2
    204e:	d009      	beq.n	2064 <__libc_fini_array+0x20>
    2050:	4a08      	ldr	r2, [pc, #32]	; (2074 <__libc_fini_array+0x30>)
    2052:	18a5      	adds	r5, r4, r2
    2054:	00ad      	lsls	r5, r5, #2
    2056:	18ed      	adds	r5, r5, r3
    2058:	682b      	ldr	r3, [r5, #0]
    205a:	3c01      	subs	r4, #1
    205c:	4798      	blx	r3
    205e:	3d04      	subs	r5, #4
    2060:	2c00      	cmp	r4, #0
    2062:	d1f9      	bne.n	2058 <__libc_fini_array+0x14>
    2064:	f000 fb5c 	bl	2720 <_fini>
    2068:	bd70      	pop	{r4, r5, r6, pc}
    206a:	46c0      	nop			; (mov r8, r8)
    206c:	0000272c 	.word	0x0000272c
    2070:	00002730 	.word	0x00002730
    2074:	3fffffff 	.word	0x3fffffff

00002078 <__retarget_lock_acquire_recursive>:
    2078:	4770      	bx	lr
    207a:	46c0      	nop			; (mov r8, r8)

0000207c <__retarget_lock_release_recursive>:
    207c:	4770      	bx	lr
    207e:	46c0      	nop			; (mov r8, r8)

00002080 <__register_exitproc>:
    2080:	b5f0      	push	{r4, r5, r6, r7, lr}
    2082:	464e      	mov	r6, r9
    2084:	4645      	mov	r5, r8
    2086:	46de      	mov	lr, fp
    2088:	4657      	mov	r7, sl
    208a:	b5e0      	push	{r5, r6, r7, lr}
    208c:	4d36      	ldr	r5, [pc, #216]	; (2168 <__register_exitproc+0xe8>)
    208e:	b083      	sub	sp, #12
    2090:	0006      	movs	r6, r0
    2092:	6828      	ldr	r0, [r5, #0]
    2094:	4698      	mov	r8, r3
    2096:	000f      	movs	r7, r1
    2098:	4691      	mov	r9, r2
    209a:	f7ff ffed 	bl	2078 <__retarget_lock_acquire_recursive>
    209e:	4b33      	ldr	r3, [pc, #204]	; (216c <__register_exitproc+0xec>)
    20a0:	681c      	ldr	r4, [r3, #0]
    20a2:	23a4      	movs	r3, #164	; 0xa4
    20a4:	005b      	lsls	r3, r3, #1
    20a6:	58e0      	ldr	r0, [r4, r3]
    20a8:	2800      	cmp	r0, #0
    20aa:	d052      	beq.n	2152 <__register_exitproc+0xd2>
    20ac:	6843      	ldr	r3, [r0, #4]
    20ae:	2b1f      	cmp	r3, #31
    20b0:	dc13      	bgt.n	20da <__register_exitproc+0x5a>
    20b2:	1c5a      	adds	r2, r3, #1
    20b4:	9201      	str	r2, [sp, #4]
    20b6:	2e00      	cmp	r6, #0
    20b8:	d128      	bne.n	210c <__register_exitproc+0x8c>
    20ba:	9a01      	ldr	r2, [sp, #4]
    20bc:	3302      	adds	r3, #2
    20be:	009b      	lsls	r3, r3, #2
    20c0:	6042      	str	r2, [r0, #4]
    20c2:	501f      	str	r7, [r3, r0]
    20c4:	6828      	ldr	r0, [r5, #0]
    20c6:	f7ff ffd9 	bl	207c <__retarget_lock_release_recursive>
    20ca:	2000      	movs	r0, #0
    20cc:	b003      	add	sp, #12
    20ce:	bc3c      	pop	{r2, r3, r4, r5}
    20d0:	4690      	mov	r8, r2
    20d2:	4699      	mov	r9, r3
    20d4:	46a2      	mov	sl, r4
    20d6:	46ab      	mov	fp, r5
    20d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20da:	4b25      	ldr	r3, [pc, #148]	; (2170 <__register_exitproc+0xf0>)
    20dc:	2b00      	cmp	r3, #0
    20de:	d03d      	beq.n	215c <__register_exitproc+0xdc>
    20e0:	20c8      	movs	r0, #200	; 0xc8
    20e2:	0040      	lsls	r0, r0, #1
    20e4:	e000      	b.n	20e8 <__register_exitproc+0x68>
    20e6:	bf00      	nop
    20e8:	2800      	cmp	r0, #0
    20ea:	d037      	beq.n	215c <__register_exitproc+0xdc>
    20ec:	22a4      	movs	r2, #164	; 0xa4
    20ee:	2300      	movs	r3, #0
    20f0:	0052      	lsls	r2, r2, #1
    20f2:	58a1      	ldr	r1, [r4, r2]
    20f4:	6043      	str	r3, [r0, #4]
    20f6:	6001      	str	r1, [r0, #0]
    20f8:	50a0      	str	r0, [r4, r2]
    20fa:	3240      	adds	r2, #64	; 0x40
    20fc:	5083      	str	r3, [r0, r2]
    20fe:	3204      	adds	r2, #4
    2100:	5083      	str	r3, [r0, r2]
    2102:	3301      	adds	r3, #1
    2104:	9301      	str	r3, [sp, #4]
    2106:	2300      	movs	r3, #0
    2108:	2e00      	cmp	r6, #0
    210a:	d0d6      	beq.n	20ba <__register_exitproc+0x3a>
    210c:	009a      	lsls	r2, r3, #2
    210e:	4692      	mov	sl, r2
    2110:	4482      	add	sl, r0
    2112:	464a      	mov	r2, r9
    2114:	2188      	movs	r1, #136	; 0x88
    2116:	4654      	mov	r4, sl
    2118:	5062      	str	r2, [r4, r1]
    211a:	22c4      	movs	r2, #196	; 0xc4
    211c:	0052      	lsls	r2, r2, #1
    211e:	4691      	mov	r9, r2
    2120:	4481      	add	r9, r0
    2122:	464a      	mov	r2, r9
    2124:	3987      	subs	r1, #135	; 0x87
    2126:	4099      	lsls	r1, r3
    2128:	6812      	ldr	r2, [r2, #0]
    212a:	468b      	mov	fp, r1
    212c:	430a      	orrs	r2, r1
    212e:	4694      	mov	ip, r2
    2130:	464a      	mov	r2, r9
    2132:	4661      	mov	r1, ip
    2134:	6011      	str	r1, [r2, #0]
    2136:	2284      	movs	r2, #132	; 0x84
    2138:	4641      	mov	r1, r8
    213a:	0052      	lsls	r2, r2, #1
    213c:	50a1      	str	r1, [r4, r2]
    213e:	2e02      	cmp	r6, #2
    2140:	d1bb      	bne.n	20ba <__register_exitproc+0x3a>
    2142:	0002      	movs	r2, r0
    2144:	465c      	mov	r4, fp
    2146:	328d      	adds	r2, #141	; 0x8d
    2148:	32ff      	adds	r2, #255	; 0xff
    214a:	6811      	ldr	r1, [r2, #0]
    214c:	430c      	orrs	r4, r1
    214e:	6014      	str	r4, [r2, #0]
    2150:	e7b3      	b.n	20ba <__register_exitproc+0x3a>
    2152:	0020      	movs	r0, r4
    2154:	304d      	adds	r0, #77	; 0x4d
    2156:	30ff      	adds	r0, #255	; 0xff
    2158:	50e0      	str	r0, [r4, r3]
    215a:	e7a7      	b.n	20ac <__register_exitproc+0x2c>
    215c:	6828      	ldr	r0, [r5, #0]
    215e:	f7ff ff8d 	bl	207c <__retarget_lock_release_recursive>
    2162:	2001      	movs	r0, #1
    2164:	4240      	negs	r0, r0
    2166:	e7b1      	b.n	20cc <__register_exitproc+0x4c>
    2168:	200004e0 	.word	0x200004e0
    216c:	00002708 	.word	0x00002708
    2170:	00000000 	.word	0x00000000

00002174 <color_drg_g>:
    2174:	0000be32                                2...

00002178 <color_drg_r>:
    2178:	000028c8                                .(..

0000217c <color_drg_d>:
    217c:	00c84000                                .@..

00002180 <color_cplx_theta>:
    2180:	000000d2                                ....

00002184 <color_cplx_r>:
    2184:	0000be32                                2...

00002188 <color_cplx_im>:
    2188:	000028c8                                .(..

0000218c <color_cplx_re>:
    218c:	00c84000                                .@..

00002190 <color_shift_hyp_unavail>:
    2190:	00040600                                ....

00002194 <color_hyp_unavail>:
    2194:	00000700                                ....

00002198 <color_shift_unavail>:
    2198:	00080200                                ....

0000219c <color_normal_unavail>:
    219c:	00030303                                ....

000021a0 <color_shift_hyp>:
    21a0:	00a0c800                                ....

000021a4 <color_hyp>:
    21a4:	0000d200                                ....

000021a8 <color_shift>:
    21a8:	00c84000                                .@..

000021ac <color_normal>:
    21ac:	003c3c3c                                <<<.

000021b0 <color_off>:
    21b0:	00000105                                ....

000021b4 <cmd_asinh>:
    21b4:	20000000                                ... 

000021b8 <cmd_asin>:
    21b8:	20000010                                ... 

000021bc <cmd_sinh>:
    21bc:	20000020                                 .. 

000021c0 <cmd_sin>:
    21c0:	20000030                                0.. 

000021c4 <cmd_mul>:
    21c4:	20000040                                @.. 

000021c8 <cmd_sub>:
    21c8:	20000050                                P.. 

000021cc <cmd_add>:
    21cc:	20000060                                `.. 

000021d0 <cmd_drg_reint>:
    21d0:	20000070                                p.. 

000021d4 <cmd_rec_pol>:
    21d4:	20000080                                ... 

000021d8 <cmd_re_im>:
    21d8:	20000090 00000009 00000000 00000000     ... ............
	...
    21f0:	0000000c 00000000 00000001 00000000     ................
	...
    220c:	0000000d 00000000 00000001 00000000     ................
	...
    2228:	0000001a 00000000 00000010 00000000     ................
	...
    2244:	0000001d 000007e5 00000001 00000000     ................
	...
    2260:	0000000b 00000000 00000001 00000000     ................
	...
    227c:	00000019 00000000 00000020 00000000     ........ .......
	...
    2298:	00000005 00000849                       ....I...

000022a0 <colPorts>:
    22a0:	00000001 00000001 00000001 00000001     ................
	...

000022c0 <colPins>:
    22c0:	00000006 00000007 00000008 00000009     ................
    22d0:	00000004 00000005 00000006 00000007     ................

000022e0 <rowPorts>:
	...
    22e8:	00000001 00000001 00000001              ............

000022f4 <rowPins>:
    22f4:	0000000a 0000000b 0000000a 0000000b     ................
    2304:	0000000c                                ....

00002308 <bit_expand>:
    2308:	00924924 00924926 00924934 00924936     $I..&I..4I..6I..
    2318:	009249a4 009249a6 009249b4 009249b6     .I...I...I...I..
    2328:	00924d24 00924d26 00924d34 00924d36     $M..&M..4M..6M..
    2338:	00924da4 00924da6 00924db4 00924db6     .M...M...M...M..
    2348:	00926924 00926926 00926934 00926936     $i..&i..4i..6i..
    2358:	009269a4 009269a6 009269b4 009269b6     .i...i...i...i..
    2368:	00926d24 00926d26 00926d34 00926d36     $m..&m..4m..6m..
    2378:	00926da4 00926da6 00926db4 00926db6     .m...m...m...m..
    2388:	00934924 00934926 00934934 00934936     $I..&I..4I..6I..
    2398:	009349a4 009349a6 009349b4 009349b6     .I...I...I...I..
    23a8:	00934d24 00934d26 00934d34 00934d36     $M..&M..4M..6M..
    23b8:	00934da4 00934da6 00934db4 00934db6     .M...M...M...M..
    23c8:	00936924 00936926 00936934 00936936     $i..&i..4i..6i..
    23d8:	009369a4 009369a6 009369b4 009369b6     .i...i...i...i..
    23e8:	00936d24 00936d26 00936d34 00936d36     $m..&m..4m..6m..
    23f8:	00936da4 00936da6 00936db4 00936db6     .m...m...m...m..
    2408:	009a4924 009a4926 009a4934 009a4936     $I..&I..4I..6I..
    2418:	009a49a4 009a49a6 009a49b4 009a49b6     .I...I...I...I..
    2428:	009a4d24 009a4d26 009a4d34 009a4d36     $M..&M..4M..6M..
    2438:	009a4da4 009a4da6 009a4db4 009a4db6     .M...M...M...M..
    2448:	009a6924 009a6926 009a6934 009a6936     $i..&i..4i..6i..
    2458:	009a69a4 009a69a6 009a69b4 009a69b6     .i...i...i...i..
    2468:	009a6d24 009a6d26 009a6d34 009a6d36     $m..&m..4m..6m..
    2478:	009a6da4 009a6da6 009a6db4 009a6db6     .m...m...m...m..
    2488:	009b4924 009b4926 009b4934 009b4936     $I..&I..4I..6I..
    2498:	009b49a4 009b49a6 009b49b4 009b49b6     .I...I...I...I..
    24a8:	009b4d24 009b4d26 009b4d34 009b4d36     $M..&M..4M..6M..
    24b8:	009b4da4 009b4da6 009b4db4 009b4db6     .M...M...M...M..
    24c8:	009b6924 009b6926 009b6934 009b6936     $i..&i..4i..6i..
    24d8:	009b69a4 009b69a6 009b69b4 009b69b6     .i...i...i...i..
    24e8:	009b6d24 009b6d26 009b6d34 009b6d36     $m..&m..4m..6m..
    24f8:	009b6da4 009b6da6 009b6db4 009b6db6     .m...m...m...m..
    2508:	00d24924 00d24926 00d24934 00d24936     $I..&I..4I..6I..
    2518:	00d249a4 00d249a6 00d249b4 00d249b6     .I...I...I...I..
    2528:	00d24d24 00d24d26 00d24d34 00d24d36     $M..&M..4M..6M..
    2538:	00d24da4 00d24da6 00d24db4 00d24db6     .M...M...M...M..
    2548:	00d26924 00d26926 00d26934 00d26936     $i..&i..4i..6i..
    2558:	00d269a4 00d269a6 00d269b4 00d269b6     .i...i...i...i..
    2568:	00d26d24 00d26d26 00d26d34 00d26d36     $m..&m..4m..6m..
    2578:	00d26da4 00d26da6 00d26db4 00d26db6     .m...m...m...m..
    2588:	00d34924 00d34926 00d34934 00d34936     $I..&I..4I..6I..
    2598:	00d349a4 00d349a6 00d349b4 00d349b6     .I...I...I...I..
    25a8:	00d34d24 00d34d26 00d34d34 00d34d36     $M..&M..4M..6M..
    25b8:	00d34da4 00d34da6 00d34db4 00d34db6     .M...M...M...M..
    25c8:	00d36924 00d36926 00d36934 00d36936     $i..&i..4i..6i..
    25d8:	00d369a4 00d369a6 00d369b4 00d369b6     .i...i...i...i..
    25e8:	00d36d24 00d36d26 00d36d34 00d36d36     $m..&m..4m..6m..
    25f8:	00d36da4 00d36da6 00d36db4 00d36db6     .m...m...m...m..
    2608:	00da4924 00da4926 00da4934 00da4936     $I..&I..4I..6I..
    2618:	00da49a4 00da49a6 00da49b4 00da49b6     .I...I...I...I..
    2628:	00da4d24 00da4d26 00da4d34 00da4d36     $M..&M..4M..6M..
    2638:	00da4da4 00da4da6 00da4db4 00da4db6     .M...M...M...M..
    2648:	00da6924 00da6926 00da6934 00da6936     $i..&i..4i..6i..
    2658:	00da69a4 00da69a6 00da69b4 00da69b6     .i...i...i...i..
    2668:	00da6d24 00da6d26 00da6d34 00da6d36     $m..&m..4m..6m..
    2678:	00da6da4 00da6da6 00da6db4 00da6db6     .m...m...m...m..
    2688:	00db4924 00db4926 00db4934 00db4936     $I..&I..4I..6I..
    2698:	00db49a4 00db49a6 00db49b4 00db49b6     .I...I...I...I..
    26a8:	00db4d24 00db4d26 00db4d34 00db4d36     $M..&M..4M..6M..
    26b8:	00db4da4 00db4da6 00db4db4 00db4db6     .M...M...M...M..
    26c8:	00db6924 00db6926 00db6934 00db6936     $i..&i..4i..6i..
    26d8:	00db69a4 00db69a6 00db69b4 00db69b6     .i...i...i...i..
    26e8:	00db6d24 00db6d26 00db6d34 00db6d36     $m..&m..4m..6m..
    26f8:	00db6da4 00db6da6 00db6db4 00db6db6     .m...m...m...m..

00002708 <_global_impure_ptr>:
    2708:	200000b8                                ... 

0000270c <_init>:
    270c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    270e:	46c0      	nop			; (mov r8, r8)
    2710:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2712:	bc08      	pop	{r3}
    2714:	469e      	mov	lr, r3
    2716:	4770      	bx	lr

00002718 <__init_array_start>:
    2718:	0000201d 	.word	0x0000201d

0000271c <__frame_dummy_init_array_entry>:
    271c:	000000e1                                ....

00002720 <_fini>:
    2720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2722:	46c0      	nop			; (mov r8, r8)
    2724:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2726:	bc08      	pop	{r3}
    2728:	469e      	mov	lr, r3
    272a:	4770      	bx	lr

0000272c <__fini_array_start>:
    272c:	000000b9 	.word	0x000000b9
