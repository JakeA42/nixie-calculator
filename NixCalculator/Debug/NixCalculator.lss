
NixCalculator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000046f4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000604  20000000  000046f4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000938  20000610  00004d10  00020610  2**4
                  ALLOC
  3 .stack        00001000  20000f48  00005648  00020610  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020604  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002062c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00017807  00000000  00000000  00020685  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cc9  00000000  00000000  00037e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000003e0  00000000  00000000  00039b55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002a71  00000000  00000000  00039f35  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000036d6  00000000  00000000  0003c9a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022cf  00000000  00000000  0004007c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b0  00000000  00000000  0004234b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000bc8  00000000  00000000  000426fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 1f 00 20 09 04 00 00 05 04 00 00 05 04 00 00     H.. ............
	...
      2c:	05 04 00 00 00 00 00 00 00 00 00 00 05 04 00 00     ................
      3c:	cd 04 00 00 05 04 00 00 05 04 00 00 05 04 00 00     ................
      4c:	05 04 00 00 05 04 00 00 05 04 00 00 a1 0c 00 00     ................
      5c:	05 04 00 00 05 04 00 00 05 04 00 00 05 04 00 00     ................
      6c:	05 04 00 00 05 04 00 00 05 04 00 00 05 04 00 00     ................
      7c:	05 04 00 00 05 04 00 00 05 04 00 00 05 04 00 00     ................
      8c:	05 04 00 00 05 04 00 00 05 04 00 00 05 04 00 00     ................
      9c:	05 04 00 00 05 04 00 00 05 04 00 00 05 04 00 00     ................
      ac:	05 04 00 00 00 00 00 00 05 04 00 00                 ............

000000b8 <__do_global_dtors_aux>:
      b8:	b510      	push	{r4, lr}
      ba:	4c06      	ldr	r4, [pc, #24]	; (d4 <__do_global_dtors_aux+0x1c>)
      bc:	7823      	ldrb	r3, [r4, #0]
      be:	2b00      	cmp	r3, #0
      c0:	d107      	bne.n	d2 <__do_global_dtors_aux+0x1a>
      c2:	4b05      	ldr	r3, [pc, #20]	; (d8 <__do_global_dtors_aux+0x20>)
      c4:	2b00      	cmp	r3, #0
      c6:	d002      	beq.n	ce <__do_global_dtors_aux+0x16>
      c8:	4804      	ldr	r0, [pc, #16]	; (dc <__do_global_dtors_aux+0x24>)
      ca:	e000      	b.n	ce <__do_global_dtors_aux+0x16>
      cc:	bf00      	nop
      ce:	2301      	movs	r3, #1
      d0:	7023      	strb	r3, [r4, #0]
      d2:	bd10      	pop	{r4, pc}
      d4:	20000610 	.word	0x20000610
      d8:	00000000 	.word	0x00000000
      dc:	000046f4 	.word	0x000046f4

000000e0 <frame_dummy>:
      e0:	4b08      	ldr	r3, [pc, #32]	; (104 <frame_dummy+0x24>)
      e2:	b510      	push	{r4, lr}
      e4:	2b00      	cmp	r3, #0
      e6:	d003      	beq.n	f0 <frame_dummy+0x10>
      e8:	4907      	ldr	r1, [pc, #28]	; (108 <frame_dummy+0x28>)
      ea:	4808      	ldr	r0, [pc, #32]	; (10c <frame_dummy+0x2c>)
      ec:	e000      	b.n	f0 <frame_dummy+0x10>
      ee:	bf00      	nop
      f0:	4807      	ldr	r0, [pc, #28]	; (110 <frame_dummy+0x30>)
      f2:	6803      	ldr	r3, [r0, #0]
      f4:	2b00      	cmp	r3, #0
      f6:	d100      	bne.n	fa <frame_dummy+0x1a>
      f8:	bd10      	pop	{r4, pc}
      fa:	4b06      	ldr	r3, [pc, #24]	; (114 <frame_dummy+0x34>)
      fc:	2b00      	cmp	r3, #0
      fe:	d0fb      	beq.n	f8 <frame_dummy+0x18>
     100:	4798      	blx	r3
     102:	e7f9      	b.n	f8 <frame_dummy+0x18>
     104:	00000000 	.word	0x00000000
     108:	20000614 	.word	0x20000614
     10c:	000046f4 	.word	0x000046f4
     110:	000046f4 	.word	0x000046f4
     114:	00000000 	.word	0x00000000

00000118 <binary_op_availableQ>:
#include <stdbool.h>
#include <stdint.h>

static int binary_op_availableQ(const calc_state_t * calc_state, const sys_state_t * sys_state) {
	return 1; // TODO: implement availability
}
     118:	2001      	movs	r0, #1
     11a:	4770      	bx	lr

0000011c <unary_op_availableQ>:
static int unary_op_availableQ(const calc_state_t * calc_state, const sys_state_t * sys_state) {
	return 0; // TODO: implement availability
}
     11c:	2000      	movs	r0, #0
     11e:	4770      	bx	lr

00000120 <available_always>:
static int available_always(const calc_state_t * calc_state, const sys_state_t * sys_state) {
	return 1; // TODO: implement availability
}
     120:	2001      	movs	r0, #1
     122:	4770      	bx	lr

00000124 <cmd_re_im_func>:

static int cmd_re_im_func(calc_state_t * calc_state, sys_state_t * sys_state) {
	switch (sys_state->ui.cpx_view) {
     124:	7a4b      	ldrb	r3, [r1, #9]
     126:	2b01      	cmp	r3, #1
     128:	d00a      	beq.n	140 <cmd_re_im_func+0x1c>
     12a:	2b00      	cmp	r3, #0
     12c:	d005      	beq.n	13a <cmd_re_im_func+0x16>
     12e:	2b02      	cmp	r3, #2
     130:	d009      	beq.n	146 <cmd_re_im_func+0x22>
     132:	2b03      	cmp	r3, #3
     134:	d00a      	beq.n	14c <cmd_re_im_func+0x28>
		case cv_theta:
			sys_state->ui.cpx_view = cv_r;
			break;
	}
	return 0;
}
     136:	2000      	movs	r0, #0
     138:	4770      	bx	lr
			sys_state->ui.cpx_view = cv_im;
     13a:	2301      	movs	r3, #1
     13c:	724b      	strb	r3, [r1, #9]
			break;
     13e:	e7fa      	b.n	136 <cmd_re_im_func+0x12>
			sys_state->ui.cpx_view = cv_re;
     140:	2300      	movs	r3, #0
     142:	724b      	strb	r3, [r1, #9]
			break;
     144:	e7f7      	b.n	136 <cmd_re_im_func+0x12>
			sys_state->ui.cpx_view = cv_theta;
     146:	2303      	movs	r3, #3
     148:	724b      	strb	r3, [r1, #9]
			break;
     14a:	e7f4      	b.n	136 <cmd_re_im_func+0x12>
			sys_state->ui.cpx_view = cv_r;
     14c:	2302      	movs	r3, #2
     14e:	724b      	strb	r3, [r1, #9]
			break;
     150:	e7f1      	b.n	136 <cmd_re_im_func+0x12>

00000152 <cmd_rec_pol_func>:
	.num_operands = 0,
	.op_func = cmd_re_im_func
};

static int cmd_rec_pol_func(calc_state_t * calc_state, sys_state_t * sys_state) {
	switch (sys_state->ui.cpx_view) {
     152:	7a4b      	ldrb	r3, [r1, #9]
     154:	2b01      	cmp	r3, #1
     156:	d00a      	beq.n	16e <cmd_rec_pol_func+0x1c>
     158:	2b00      	cmp	r3, #0
     15a:	d005      	beq.n	168 <cmd_rec_pol_func+0x16>
     15c:	2b02      	cmp	r3, #2
     15e:	d009      	beq.n	174 <cmd_rec_pol_func+0x22>
     160:	2b03      	cmp	r3, #3
     162:	d00a      	beq.n	17a <cmd_rec_pol_func+0x28>
		case cv_theta:
			sys_state->ui.cpx_view = cv_re;
			break;
	}
	return 0;
}
     164:	2000      	movs	r0, #0
     166:	4770      	bx	lr
			sys_state->ui.cpx_view = cv_r;
     168:	2302      	movs	r3, #2
     16a:	724b      	strb	r3, [r1, #9]
			break;
     16c:	e7fa      	b.n	164 <cmd_rec_pol_func+0x12>
			sys_state->ui.cpx_view = cv_r;
     16e:	2302      	movs	r3, #2
     170:	724b      	strb	r3, [r1, #9]
			break;
     172:	e7f7      	b.n	164 <cmd_rec_pol_func+0x12>
			sys_state->ui.cpx_view = cv_re;
     174:	2300      	movs	r3, #0
     176:	724b      	strb	r3, [r1, #9]
			break;
     178:	e7f4      	b.n	164 <cmd_rec_pol_func+0x12>
			sys_state->ui.cpx_view = cv_re;
     17a:	2300      	movs	r3, #0
     17c:	724b      	strb	r3, [r1, #9]
			break;
     17e:	e7f1      	b.n	164 <cmd_rec_pol_func+0x12>

00000180 <cmd_reint_drg_func>:
	.num_operands = 0,
	.op_func = cmd_rec_pol_func
};

static int cmd_reint_drg_func(calc_state_t * calc_state, sys_state_t * sys_state) {
	switch (sys_state->sys.angle_units) {
     180:	788b      	ldrb	r3, [r1, #2]
     182:	2b01      	cmp	r3, #1
     184:	d008      	beq.n	198 <cmd_reint_drg_func+0x18>
     186:	2b00      	cmp	r3, #0
     188:	d003      	beq.n	192 <cmd_reint_drg_func+0x12>
     18a:	2b02      	cmp	r3, #2
     18c:	d00c      	beq.n	1a8 <cmd_reint_drg_func+0x28>
		case au_grad:
		sys_state->sys.angle_units = au_deg;
		break;
	}
	return 0;
}
     18e:	2000      	movs	r0, #0
     190:	4770      	bx	lr
		sys_state->sys.angle_units = au_rad;
     192:	2301      	movs	r3, #1
     194:	708b      	strb	r3, [r1, #2]
		break;
     196:	e7fa      	b.n	18e <cmd_reint_drg_func+0xe>
		sys_state->sys.angle_units = sys_state->settings.grad_enabled ? au_grad : au_deg;
     198:	780b      	ldrb	r3, [r1, #0]
     19a:	2b00      	cmp	r3, #0
     19c:	d102      	bne.n	1a4 <cmd_reint_drg_func+0x24>
     19e:	2300      	movs	r3, #0
     1a0:	708b      	strb	r3, [r1, #2]
		break;
     1a2:	e7f4      	b.n	18e <cmd_reint_drg_func+0xe>
		sys_state->sys.angle_units = sys_state->settings.grad_enabled ? au_grad : au_deg;
     1a4:	2302      	movs	r3, #2
     1a6:	e7fb      	b.n	1a0 <cmd_reint_drg_func+0x20>
		sys_state->sys.angle_units = au_deg;
     1a8:	2300      	movs	r3, #0
     1aa:	708b      	strb	r3, [r1, #2]
		break;
     1ac:	e7ef      	b.n	18e <cmd_reint_drg_func+0xe>

000001ae <cmd_convert_drg_func>:
	.num_operands = 0,
	.op_func = cmd_reint_drg_func
};

static int cmd_convert_drg_func(calc_state_t * calc_state, sys_state_t * sys_state) {
	switch (sys_state->sys.angle_units) {
     1ae:	788b      	ldrb	r3, [r1, #2]
     1b0:	2b01      	cmp	r3, #1
     1b2:	d008      	beq.n	1c6 <cmd_convert_drg_func+0x18>
     1b4:	2b00      	cmp	r3, #0
     1b6:	d003      	beq.n	1c0 <cmd_convert_drg_func+0x12>
     1b8:	2b02      	cmp	r3, #2
     1ba:	d00c      	beq.n	1d6 <cmd_convert_drg_func+0x28>
		case au_grad:
		sys_state->sys.angle_units = au_deg;
		break;
	}
	return 0;
}
     1bc:	2000      	movs	r0, #0
     1be:	4770      	bx	lr
		sys_state->sys.angle_units = au_rad;
     1c0:	2301      	movs	r3, #1
     1c2:	708b      	strb	r3, [r1, #2]
		break;
     1c4:	e7fa      	b.n	1bc <cmd_convert_drg_func+0xe>
		sys_state->sys.angle_units = sys_state->settings.grad_enabled ? au_grad : au_deg;
     1c6:	780b      	ldrb	r3, [r1, #0]
     1c8:	2b00      	cmp	r3, #0
     1ca:	d102      	bne.n	1d2 <cmd_convert_drg_func+0x24>
     1cc:	2300      	movs	r3, #0
     1ce:	708b      	strb	r3, [r1, #2]
		break;
     1d0:	e7f4      	b.n	1bc <cmd_convert_drg_func+0xe>
		sys_state->sys.angle_units = sys_state->settings.grad_enabled ? au_grad : au_deg;
     1d2:	2302      	movs	r3, #2
     1d4:	e7fb      	b.n	1ce <cmd_convert_drg_func+0x20>
		sys_state->sys.angle_units = au_deg;
     1d6:	2300      	movs	r3, #0
     1d8:	708b      	strb	r3, [r1, #2]
		break;
     1da:	e7ef      	b.n	1bc <cmd_convert_drg_func+0xe>

000001dc <cmd_clear_func>:
	.op_func = cmd_convert_drg_func
};


static int cmd_clear_func(calc_state_t * calc_state, sys_state_t * sys_state) {
	calc_state->in_buffer.main.length = 0;
     1dc:	2300      	movs	r3, #0
     1de:	22b9      	movs	r2, #185	; 0xb9
     1e0:	0052      	lsls	r2, r2, #1
     1e2:	5483      	strb	r3, [r0, r2]
	calc_state->in_buffer.main.decimal = -1;
     1e4:	21ff      	movs	r1, #255	; 0xff
     1e6:	2272      	movs	r2, #114	; 0x72
     1e8:	32ff      	adds	r2, #255	; 0xff
     1ea:	5481      	strb	r1, [r0, r2]
	calc_state->in_buffer.main.sign = 0;
     1ec:	3a01      	subs	r2, #1
     1ee:	5483      	strb	r3, [r0, r2]
	return 0;
}
     1f0:	2000      	movs	r0, #0
     1f2:	4770      	bx	lr

000001f4 <cmd_clearall_func>:
	.num_operands = 0,
	.op_func = cmd_clear_func
};

static int cmd_clearall_func(calc_state_t * calc_state, sys_state_t * sys_state) {
	calc_state->in_buffer.main.length = 0;
     1f4:	2300      	movs	r3, #0
     1f6:	22b9      	movs	r2, #185	; 0xb9
     1f8:	0052      	lsls	r2, r2, #1
     1fa:	5483      	strb	r3, [r0, r2]
	calc_state->in_buffer.main.decimal = -1;
     1fc:	21ff      	movs	r1, #255	; 0xff
     1fe:	2272      	movs	r2, #114	; 0x72
     200:	32ff      	adds	r2, #255	; 0xff
     202:	5481      	strb	r1, [r0, r2]
	calc_state->in_buffer.main.sign = 0;
     204:	3a01      	subs	r2, #1
     206:	5483      	strb	r3, [r0, r2]
	return 0;
}
     208:	2000      	movs	r0, #0
     20a:	4770      	bx	lr

0000020c <cmd_bksp_func>:
	.available = available_always,
	.num_operands = 0,
	.op_func = cmd_clearall_func
};

static int cmd_bksp_func(calc_state_t * calc_state, sys_state_t * sys_state) {
     20c:	b510      	push	{r4, lr}
	if (calc_state->in_buffer.main.length > 0) {
     20e:	23b9      	movs	r3, #185	; 0xb9
     210:	005b      	lsls	r3, r3, #1
     212:	5cc3      	ldrb	r3, [r0, r3]
     214:	2b00      	cmp	r3, #0
     216:	d009      	beq.n	22c <cmd_bksp_func+0x20>
		calc_state->in_buffer.main.length--;
     218:	3b01      	subs	r3, #1
     21a:	b2db      	uxtb	r3, r3
     21c:	22b9      	movs	r2, #185	; 0xb9
     21e:	0052      	lsls	r2, r2, #1
     220:	5483      	strb	r3, [r0, r2]
		if (calc_state->in_buffer.main.length == calc_state->in_buffer.main.decimal) {
     222:	2272      	movs	r2, #114	; 0x72
     224:	32ff      	adds	r2, #255	; 0xff
     226:	5682      	ldrsb	r2, [r0, r2]
     228:	4293      	cmp	r3, r2
     22a:	d001      	beq.n	230 <cmd_bksp_func+0x24>
				calc_state->in_buffer.main.length--;
			}
		}
	}
	return 0;
}
     22c:	2000      	movs	r0, #0
     22e:	bd10      	pop	{r4, pc}
			calc_state->in_buffer.main.decimal = -1;
     230:	21ff      	movs	r1, #255	; 0xff
     232:	2272      	movs	r2, #114	; 0x72
     234:	32ff      	adds	r2, #255	; 0xff
     236:	5481      	strb	r1, [r0, r2]
			if (calc_state->in_buffer.main.length == 1 && calc_state->in_buffer.main.nums[0] == 0) {
     238:	0001      	movs	r1, r0
     23a:	3171      	adds	r1, #113	; 0x71
     23c:	31ff      	adds	r1, #255	; 0xff
     23e:	788c      	ldrb	r4, [r1, #2]
     240:	78ca      	ldrb	r2, [r1, #3]
     242:	0212      	lsls	r2, r2, #8
     244:	4322      	orrs	r2, r4
     246:	2a01      	cmp	r2, #1
     248:	d1f0      	bne.n	22c <cmd_bksp_func+0x20>
				calc_state->in_buffer.main.length--;
     24a:	3b01      	subs	r3, #1
     24c:	3272      	adds	r2, #114	; 0x72
     24e:	32ff      	adds	r2, #255	; 0xff
     250:	5483      	strb	r3, [r0, r2]
     252:	e7eb      	b.n	22c <cmd_bksp_func+0x20>

00000254 <cmd_chs_func>:
	.num_operands = 0,
	.op_func = cmd_bksp_func
};

static int cmd_chs_func(calc_state_t * calc_state, sys_state_t * sys_state) {
	if (calc_state->in_buffer.main.sign < 0) {
     254:	23b8      	movs	r3, #184	; 0xb8
     256:	005b      	lsls	r3, r3, #1
     258:	56c3      	ldrsb	r3, [r0, r3]
     25a:	2b00      	cmp	r3, #0
     25c:	db05      	blt.n	26a <cmd_chs_func+0x16>
		calc_state->in_buffer.main.sign = 0;
	} else {
		calc_state->in_buffer.main.sign = -1;
     25e:	22ff      	movs	r2, #255	; 0xff
     260:	23b8      	movs	r3, #184	; 0xb8
     262:	005b      	lsls	r3, r3, #1
     264:	54c2      	strb	r2, [r0, r3]
	}
	return 0;
}
     266:	2000      	movs	r0, #0
     268:	4770      	bx	lr
		calc_state->in_buffer.main.sign = 0;
     26a:	2200      	movs	r2, #0
     26c:	23b8      	movs	r3, #184	; 0xb8
     26e:	005b      	lsls	r3, r3, #1
     270:	54c2      	strb	r2, [r0, r3]
     272:	e7f8      	b.n	266 <cmd_chs_func+0x12>

00000274 <cmd_stdnumber>:
	.num_operands = 1,
	.op_func = cmd_add_func
};


static int cmd_stdnumber(calc_state_t * calc_state, sys_state_t * sys_state, int number) {
     274:	b510      	push	{r4, lr}
	calc_state->entry_in_progress = true;
     276:	2101      	movs	r1, #1
     278:	2384      	movs	r3, #132	; 0x84
     27a:	33ff      	adds	r3, #255	; 0xff
     27c:	54c1      	strb	r1, [r0, r3]
	switch (calc_state->in_buffer.entry_field) {
     27e:	3b01      	subs	r3, #1
     280:	5cc3      	ldrb	r3, [r0, r3]
     282:	2b01      	cmp	r3, #1
     284:	d810      	bhi.n	2a8 <cmd_stdnumber+0x34>
		case ent_none:
		case ent_normal:
			// TODO: Fix this temporary
			if (calc_state->in_buffer.main.length < 8) {
     286:	23b9      	movs	r3, #185	; 0xb9
     288:	005b      	lsls	r3, r3, #1
     28a:	5cc3      	ldrb	r3, [r0, r3]
     28c:	2b07      	cmp	r3, #7
     28e:	d80b      	bhi.n	2a8 <cmd_stdnumber+0x34>
				//calc_state->in_buffer.main.dispstr[calc_state->in_buffer.main.length++] = (char)number + '0';
				if (calc_state->in_buffer.main.length == 0 && number == 0) {
     290:	2b00      	cmp	r3, #0
     292:	d101      	bne.n	298 <cmd_stdnumber+0x24>
     294:	2a00      	cmp	r2, #0
     296:	d007      	beq.n	2a8 <cmd_stdnumber+0x34>
					return 0;
				}
				calc_state->in_buffer.main.nums[calc_state->in_buffer.main.length++] = (int8_t)number;
     298:	1c5c      	adds	r4, r3, #1
     29a:	21b9      	movs	r1, #185	; 0xb9
     29c:	0049      	lsls	r1, r1, #1
     29e:	5444      	strb	r4, [r0, r1]
     2a0:	18c0      	adds	r0, r0, r3
     2a2:	3074      	adds	r0, #116	; 0x74
     2a4:	30ff      	adds	r0, #255	; 0xff
     2a6:	7002      	strb	r2, [r0, #0]
			}
			break;
	}
	return 0;
}
     2a8:	2000      	movs	r0, #0
     2aa:	bd10      	pop	{r4, pc}

000002ac <cmd_dp_func>:
	.number = 9,
	.num_func = cmd_stdnumber
};

static int cmd_dp_func(calc_state_t * calc_state, sys_state_t * sys_state, int number) {
	calc_state->entry_in_progress = true;
     2ac:	2201      	movs	r2, #1
     2ae:	2384      	movs	r3, #132	; 0x84
     2b0:	33ff      	adds	r3, #255	; 0xff
     2b2:	54c2      	strb	r2, [r0, r3]
	switch (calc_state->in_buffer.entry_field) {
     2b4:	3b01      	subs	r3, #1
     2b6:	5cc3      	ldrb	r3, [r0, r3]
     2b8:	2b01      	cmp	r3, #1
     2ba:	d809      	bhi.n	2d0 <cmd_dp_func+0x24>
		case ent_none:
		case ent_normal:
		// TODO: Fix this temporary
		if (calc_state->in_buffer.main.length < 8 && calc_state->in_buffer.main.decimal == -1) {
     2bc:	23b9      	movs	r3, #185	; 0xb9
     2be:	005b      	lsls	r3, r3, #1
     2c0:	5cc3      	ldrb	r3, [r0, r3]
     2c2:	2b07      	cmp	r3, #7
     2c4:	d804      	bhi.n	2d0 <cmd_dp_func+0x24>
     2c6:	2272      	movs	r2, #114	; 0x72
     2c8:	32ff      	adds	r2, #255	; 0xff
     2ca:	5682      	ldrsb	r2, [r0, r2]
     2cc:	3201      	adds	r2, #1
     2ce:	d001      	beq.n	2d4 <cmd_dp_func+0x28>
			calc_state->in_buffer.main.nums[calc_state->in_buffer.main.length++] = 0xFF;
		}
		break;
	}
	return 0;
}
     2d0:	2000      	movs	r0, #0
     2d2:	4770      	bx	lr
			if (calc_state->in_buffer.main.length == 0) {
     2d4:	2b00      	cmp	r3, #0
     2d6:	d106      	bne.n	2e6 <cmd_dp_func+0x3a>
				calc_state->in_buffer.main.nums[0] = 0;
     2d8:	2100      	movs	r1, #0
     2da:	2274      	movs	r2, #116	; 0x74
     2dc:	32ff      	adds	r2, #255	; 0xff
     2de:	5481      	strb	r1, [r0, r2]
				calc_state->in_buffer.main.length++;
     2e0:	3301      	adds	r3, #1
     2e2:	3a01      	subs	r2, #1
     2e4:	5483      	strb	r3, [r0, r2]
			calc_state->in_buffer.main.decimal = calc_state->in_buffer.main.length;
     2e6:	22b9      	movs	r2, #185	; 0xb9
     2e8:	0052      	lsls	r2, r2, #1
     2ea:	5c83      	ldrb	r3, [r0, r2]
     2ec:	2172      	movs	r1, #114	; 0x72
     2ee:	31ff      	adds	r1, #255	; 0xff
     2f0:	5443      	strb	r3, [r0, r1]
			calc_state->in_buffer.main.nums[calc_state->in_buffer.main.length++] = 0xFF;
     2f2:	1c59      	adds	r1, r3, #1
     2f4:	5481      	strb	r1, [r0, r2]
     2f6:	18c0      	adds	r0, r0, r3
     2f8:	3074      	adds	r0, #116	; 0x74
     2fa:	30ff      	adds	r0, #255	; 0xff
     2fc:	23ff      	movs	r3, #255	; 0xff
     2fe:	7003      	strb	r3, [r0, #0]
     300:	e7e6      	b.n	2d0 <cmd_dp_func+0x24>
	...

00000304 <cmd_add_func>:
static int cmd_add_func(calc_state_t * calc_state, sys_state_t * sys_state) {
     304:	b510      	push	{r4, lr}
	if (sys_state->sys.entry_mode == em_rpn) {
     306:	790b      	ldrb	r3, [r1, #4]
     308:	2b01      	cmp	r3, #1
     30a:	d013      	beq.n	334 <cmd_add_func+0x30>
		calc_state->infix.op_cache.active = true;
     30c:	2201      	movs	r2, #1
     30e:	235e      	movs	r3, #94	; 0x5e
     310:	33ff      	adds	r3, #255	; 0xff
     312:	54c2      	strb	r2, [r0, r3]
		calc_state->infix.op_cache.binary_fn = r_add;
     314:	4a0a      	ldr	r2, [pc, #40]	; (340 <cmd_add_func+0x3c>)
     316:	3b11      	subs	r3, #17
     318:	50c2      	str	r2, [r0, r3]
		calc_state->infix.op_cache.opa = &calc_state->infix.reg1;
     31a:	0002      	movs	r2, r0
     31c:	3261      	adds	r2, #97	; 0x61
     31e:	32ff      	adds	r2, #255	; 0xff
     320:	3304      	adds	r3, #4
     322:	50c2      	str	r2, [r0, r3]
		calc_state->infix.op_cache.num_operands = 2;
     324:	2202      	movs	r2, #2
     326:	330c      	adds	r3, #12
     328:	54c2      	strb	r2, [r0, r3]
		calc_state->infix.op_cache.unary_fn = NULL;
     32a:	2200      	movs	r2, #0
     32c:	3b14      	subs	r3, #20
     32e:	50c2      	str	r2, [r0, r3]
}
     330:	2000      	movs	r0, #0
     332:	bd10      	pop	{r4, pc}
		r_add(&calc_state->rpn.stack[0], &calc_state->rpn.stack[0], &calc_state->rpn.stack[1]);
     334:	0002      	movs	r2, r0
     336:	3208      	adds	r2, #8
     338:	0001      	movs	r1, r0
     33a:	4b01      	ldr	r3, [pc, #4]	; (340 <cmd_add_func+0x3c>)
     33c:	4798      	blx	r3
     33e:	e7f7      	b.n	330 <cmd_add_func+0x2c>
     340:	000008f1 	.word	0x000008f1

00000344 <cmd_sub_func>:
static int cmd_sub_func(calc_state_t * calc_state, sys_state_t * sys_state) {
     344:	b510      	push	{r4, lr}
	if (sys_state->sys.entry_mode == em_rpn) {
     346:	790b      	ldrb	r3, [r1, #4]
     348:	2b01      	cmp	r3, #1
     34a:	d013      	beq.n	374 <cmd_sub_func+0x30>
		calc_state->infix.op_cache.active = true;
     34c:	2201      	movs	r2, #1
     34e:	235e      	movs	r3, #94	; 0x5e
     350:	33ff      	adds	r3, #255	; 0xff
     352:	54c2      	strb	r2, [r0, r3]
		calc_state->infix.op_cache.binary_fn = r_sub;
     354:	4a0a      	ldr	r2, [pc, #40]	; (380 <cmd_sub_func+0x3c>)
     356:	3b11      	subs	r3, #17
     358:	50c2      	str	r2, [r0, r3]
		calc_state->infix.op_cache.opa = &calc_state->infix.reg1;
     35a:	0002      	movs	r2, r0
     35c:	3261      	adds	r2, #97	; 0x61
     35e:	32ff      	adds	r2, #255	; 0xff
     360:	3304      	adds	r3, #4
     362:	50c2      	str	r2, [r0, r3]
		calc_state->infix.op_cache.num_operands = 2;
     364:	2202      	movs	r2, #2
     366:	330c      	adds	r3, #12
     368:	54c2      	strb	r2, [r0, r3]
		calc_state->infix.op_cache.unary_fn = NULL;
     36a:	2200      	movs	r2, #0
     36c:	3b14      	subs	r3, #20
     36e:	50c2      	str	r2, [r0, r3]
}
     370:	2000      	movs	r0, #0
     372:	bd10      	pop	{r4, pc}
		r_sub(&calc_state->rpn.stack[0], &calc_state->rpn.stack[0], &calc_state->rpn.stack[1]);
     374:	0002      	movs	r2, r0
     376:	3208      	adds	r2, #8
     378:	0001      	movs	r1, r0
     37a:	4b01      	ldr	r3, [pc, #4]	; (380 <cmd_sub_func+0x3c>)
     37c:	4798      	blx	r3
     37e:	e7f7      	b.n	370 <cmd_sub_func+0x2c>
     380:	0000090d 	.word	0x0000090d

00000384 <cmd_mul_func>:
static int cmd_mul_func(calc_state_t * calc_state, sys_state_t * sys_state) {
     384:	b510      	push	{r4, lr}
	if (sys_state->sys.entry_mode == em_rpn) {
     386:	790b      	ldrb	r3, [r1, #4]
     388:	2b01      	cmp	r3, #1
     38a:	d013      	beq.n	3b4 <cmd_mul_func+0x30>
		calc_state->infix.op_cache.active = true;
     38c:	2201      	movs	r2, #1
     38e:	235e      	movs	r3, #94	; 0x5e
     390:	33ff      	adds	r3, #255	; 0xff
     392:	54c2      	strb	r2, [r0, r3]
		calc_state->infix.op_cache.binary_fn = r_mul;
     394:	4a0a      	ldr	r2, [pc, #40]	; (3c0 <cmd_mul_func+0x3c>)
     396:	3b11      	subs	r3, #17
     398:	50c2      	str	r2, [r0, r3]
		calc_state->infix.op_cache.opa = &calc_state->infix.reg1;
     39a:	0002      	movs	r2, r0
     39c:	3261      	adds	r2, #97	; 0x61
     39e:	32ff      	adds	r2, #255	; 0xff
     3a0:	3304      	adds	r3, #4
     3a2:	50c2      	str	r2, [r0, r3]
		calc_state->infix.op_cache.num_operands = 2;
     3a4:	2202      	movs	r2, #2
     3a6:	330c      	adds	r3, #12
     3a8:	54c2      	strb	r2, [r0, r3]
		calc_state->infix.op_cache.unary_fn = NULL;
     3aa:	2200      	movs	r2, #0
     3ac:	3b14      	subs	r3, #20
     3ae:	50c2      	str	r2, [r0, r3]
}
     3b0:	2000      	movs	r0, #0
     3b2:	bd10      	pop	{r4, pc}
		r_mul(&calc_state->rpn.stack[0], &calc_state->rpn.stack[0], &calc_state->rpn.stack[1]);
     3b4:	0002      	movs	r2, r0
     3b6:	3208      	adds	r2, #8
     3b8:	0001      	movs	r1, r0
     3ba:	4b01      	ldr	r3, [pc, #4]	; (3c0 <cmd_mul_func+0x3c>)
     3bc:	4798      	blx	r3
     3be:	e7f7      	b.n	3b0 <cmd_mul_func+0x2c>
     3c0:	00000929 	.word	0x00000929

000003c4 <cmd_div_func>:
static int cmd_div_func(calc_state_t * calc_state, sys_state_t * sys_state) {
     3c4:	b510      	push	{r4, lr}
	if (sys_state->sys.entry_mode == em_rpn) {
     3c6:	790b      	ldrb	r3, [r1, #4]
     3c8:	2b01      	cmp	r3, #1
     3ca:	d013      	beq.n	3f4 <cmd_div_func+0x30>
		calc_state->infix.op_cache.active = true;
     3cc:	2201      	movs	r2, #1
     3ce:	235e      	movs	r3, #94	; 0x5e
     3d0:	33ff      	adds	r3, #255	; 0xff
     3d2:	54c2      	strb	r2, [r0, r3]
		calc_state->infix.op_cache.binary_fn = r_div;
     3d4:	4a0a      	ldr	r2, [pc, #40]	; (400 <cmd_div_func+0x3c>)
     3d6:	3b11      	subs	r3, #17
     3d8:	50c2      	str	r2, [r0, r3]
		calc_state->infix.op_cache.opa = &calc_state->infix.reg1;
     3da:	0002      	movs	r2, r0
     3dc:	3261      	adds	r2, #97	; 0x61
     3de:	32ff      	adds	r2, #255	; 0xff
     3e0:	3304      	adds	r3, #4
     3e2:	50c2      	str	r2, [r0, r3]
		calc_state->infix.op_cache.num_operands = 2;
     3e4:	2202      	movs	r2, #2
     3e6:	330c      	adds	r3, #12
     3e8:	54c2      	strb	r2, [r0, r3]
		calc_state->infix.op_cache.unary_fn = NULL;
     3ea:	2200      	movs	r2, #0
     3ec:	3b14      	subs	r3, #20
     3ee:	50c2      	str	r2, [r0, r3]
}
     3f0:	2000      	movs	r0, #0
     3f2:	bd10      	pop	{r4, pc}
		r_div(&calc_state->rpn.stack[0], &calc_state->rpn.stack[0], &calc_state->rpn.stack[1]);
     3f4:	0002      	movs	r2, r0
     3f6:	3208      	adds	r2, #8
     3f8:	0001      	movs	r1, r0
     3fa:	4b01      	ldr	r3, [pc, #4]	; (400 <cmd_div_func+0x3c>)
     3fc:	4798      	blx	r3
     3fe:	e7f7      	b.n	3f0 <cmd_div_func+0x2c>
     400:	00000945 	.word	0x00000945

00000404 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     404:	e7fe      	b.n	404 <Dummy_Handler>
	...

00000408 <Reset_Handler>:
{
     408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     40a:	4a23      	ldr	r2, [pc, #140]	; (498 <Reset_Handler+0x90>)
     40c:	4b23      	ldr	r3, [pc, #140]	; (49c <Reset_Handler+0x94>)
     40e:	429a      	cmp	r2, r3
     410:	d009      	beq.n	426 <Reset_Handler+0x1e>
     412:	4b22      	ldr	r3, [pc, #136]	; (49c <Reset_Handler+0x94>)
     414:	4a20      	ldr	r2, [pc, #128]	; (498 <Reset_Handler+0x90>)
     416:	e003      	b.n	420 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     418:	6811      	ldr	r1, [r2, #0]
     41a:	6019      	str	r1, [r3, #0]
     41c:	3304      	adds	r3, #4
     41e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     420:	491f      	ldr	r1, [pc, #124]	; (4a0 <Reset_Handler+0x98>)
     422:	428b      	cmp	r3, r1
     424:	d3f8      	bcc.n	418 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     426:	4b1f      	ldr	r3, [pc, #124]	; (4a4 <Reset_Handler+0x9c>)
     428:	e002      	b.n	430 <Reset_Handler+0x28>
                *pDest++ = 0;
     42a:	2200      	movs	r2, #0
     42c:	601a      	str	r2, [r3, #0]
     42e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     430:	4a1d      	ldr	r2, [pc, #116]	; (4a8 <Reset_Handler+0xa0>)
     432:	4293      	cmp	r3, r2
     434:	d3f9      	bcc.n	42a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     436:	4a1d      	ldr	r2, [pc, #116]	; (4ac <Reset_Handler+0xa4>)
     438:	21ff      	movs	r1, #255	; 0xff
     43a:	4b1d      	ldr	r3, [pc, #116]	; (4b0 <Reset_Handler+0xa8>)
     43c:	438b      	bics	r3, r1
     43e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     440:	39fd      	subs	r1, #253	; 0xfd
     442:	2390      	movs	r3, #144	; 0x90
     444:	005b      	lsls	r3, r3, #1
     446:	4a1b      	ldr	r2, [pc, #108]	; (4b4 <Reset_Handler+0xac>)
     448:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     44a:	4a1b      	ldr	r2, [pc, #108]	; (4b8 <Reset_Handler+0xb0>)
     44c:	78d3      	ldrb	r3, [r2, #3]
     44e:	2503      	movs	r5, #3
     450:	43ab      	bics	r3, r5
     452:	2402      	movs	r4, #2
     454:	4323      	orrs	r3, r4
     456:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     458:	78d3      	ldrb	r3, [r2, #3]
     45a:	270c      	movs	r7, #12
     45c:	43bb      	bics	r3, r7
     45e:	2608      	movs	r6, #8
     460:	4333      	orrs	r3, r6
     462:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     464:	4b15      	ldr	r3, [pc, #84]	; (4bc <Reset_Handler+0xb4>)
     466:	7b98      	ldrb	r0, [r3, #14]
     468:	2230      	movs	r2, #48	; 0x30
     46a:	4390      	bics	r0, r2
     46c:	2220      	movs	r2, #32
     46e:	4310      	orrs	r0, r2
     470:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     472:	7b99      	ldrb	r1, [r3, #14]
     474:	43b9      	bics	r1, r7
     476:	4331      	orrs	r1, r6
     478:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     47a:	7b9a      	ldrb	r2, [r3, #14]
     47c:	43aa      	bics	r2, r5
     47e:	4322      	orrs	r2, r4
     480:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     482:	4a0f      	ldr	r2, [pc, #60]	; (4c0 <Reset_Handler+0xb8>)
     484:	6851      	ldr	r1, [r2, #4]
     486:	2380      	movs	r3, #128	; 0x80
     488:	430b      	orrs	r3, r1
     48a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     48c:	4b0d      	ldr	r3, [pc, #52]	; (4c4 <Reset_Handler+0xbc>)
     48e:	4798      	blx	r3
        main();
     490:	4b0d      	ldr	r3, [pc, #52]	; (4c8 <Reset_Handler+0xc0>)
     492:	4798      	blx	r3
     494:	e7fe      	b.n	494 <Reset_Handler+0x8c>
     496:	46c0      	nop			; (mov r8, r8)
     498:	000046f4 	.word	0x000046f4
     49c:	20000000 	.word	0x20000000
     4a0:	20000604 	.word	0x20000604
     4a4:	20000610 	.word	0x20000610
     4a8:	20000f48 	.word	0x20000f48
     4ac:	e000ed00 	.word	0xe000ed00
     4b0:	00000000 	.word	0x00000000
     4b4:	41007000 	.word	0x41007000
     4b8:	41005000 	.word	0x41005000
     4bc:	41004800 	.word	0x41004800
     4c0:	41004000 	.word	0x41004000
     4c4:	00003dd9 	.word	0x00003dd9
     4c8:	00000805 	.word	0x00000805

000004cc <SysTick_Handler>:
NXConfig nxconfig = {
	.dp_space = 1,
	.dp_template = NX_DPR
};

void SysTick_Handler(void) {
     4cc:	b510      	push	{r4, lr}
	static unsigned int tickCountSci = 0, tickCountKeys = 0;
	tickCountSci++; tickCountKeys++;
     4ce:	4a11      	ldr	r2, [pc, #68]	; (514 <SysTick_Handler+0x48>)
     4d0:	6813      	ldr	r3, [r2, #0]
     4d2:	3301      	adds	r3, #1
     4d4:	6013      	str	r3, [r2, #0]
     4d6:	6851      	ldr	r1, [r2, #4]
     4d8:	3101      	adds	r1, #1
     4da:	6051      	str	r1, [r2, #4]
	if (tickCountSci > io_devices.ssd.update_period_ticks) {
     4dc:	4a0e      	ldr	r2, [pc, #56]	; (518 <SysTick_Handler+0x4c>)
     4de:	8812      	ldrh	r2, [r2, #0]
     4e0:	4293      	cmp	r3, r2
     4e2:	d80a      	bhi.n	4fa <SysTick_Handler+0x2e>
		tickCountSci = 0;
		SSD_updateDisp();
	}
	if (tickCountKeys > 10) {
     4e4:	4b0b      	ldr	r3, [pc, #44]	; (514 <SysTick_Handler+0x48>)
     4e6:	685b      	ldr	r3, [r3, #4]
     4e8:	2b0a      	cmp	r3, #10
     4ea:	d80c      	bhi.n	506 <SysTick_Handler+0x3a>
		tickCountKeys = 0;
		keypad_scan_keys();
	}
	buzzer_timer_tick();
     4ec:	4b0b      	ldr	r3, [pc, #44]	; (51c <SysTick_Handler+0x50>)
     4ee:	4798      	blx	r3
	systick_timer_ms++;
     4f0:	4a08      	ldr	r2, [pc, #32]	; (514 <SysTick_Handler+0x48>)
     4f2:	6893      	ldr	r3, [r2, #8]
     4f4:	3301      	adds	r3, #1
     4f6:	6093      	str	r3, [r2, #8]
}
     4f8:	bd10      	pop	{r4, pc}
		tickCountSci = 0;
     4fa:	2200      	movs	r2, #0
     4fc:	4b05      	ldr	r3, [pc, #20]	; (514 <SysTick_Handler+0x48>)
     4fe:	601a      	str	r2, [r3, #0]
		SSD_updateDisp();
     500:	4b07      	ldr	r3, [pc, #28]	; (520 <SysTick_Handler+0x54>)
     502:	4798      	blx	r3
     504:	e7ee      	b.n	4e4 <SysTick_Handler+0x18>
		tickCountKeys = 0;
     506:	2200      	movs	r2, #0
     508:	4b02      	ldr	r3, [pc, #8]	; (514 <SysTick_Handler+0x48>)
     50a:	605a      	str	r2, [r3, #4]
		keypad_scan_keys();
     50c:	4b05      	ldr	r3, [pc, #20]	; (524 <SysTick_Handler+0x58>)
     50e:	4798      	blx	r3
     510:	e7ec      	b.n	4ec <SysTick_Handler+0x20>
     512:	46c0      	nop			; (mov r8, r8)
     514:	20000630 	.word	0x20000630
     518:	20000a68 	.word	0x20000a68
     51c:	00000a51 	.word	0x00000a51
     520:	00001e75 	.word	0x00001e75
     524:	000018e9 	.word	0x000018e9

00000528 <GpioInit>:
		case uimode_mainmenu:
		break;
	}
}

void GpioInit() {
     528:	b570      	push	{r4, r5, r6, lr}
	gpio_set_pin_dir(GPIO(PWR_LED), GPIO_DIR_OUT);
     52a:	2201      	movs	r2, #1
     52c:	2116      	movs	r1, #22
     52e:	2001      	movs	r0, #1
     530:	4c09      	ldr	r4, [pc, #36]	; (558 <GpioInit+0x30>)
     532:	47a0      	blx	r4
	gpio_set_pin_dir(GPIO(BUSY_LED), GPIO_DIR_OUT);
     534:	2201      	movs	r2, #1
     536:	2117      	movs	r1, #23
     538:	2001      	movs	r0, #1
     53a:	47a0      	blx	r4
	gpio_set_pin_drvstr(GPIO(PWR_LED), 1);
     53c:	2201      	movs	r2, #1
     53e:	2116      	movs	r1, #22
     540:	2001      	movs	r0, #1
     542:	4d06      	ldr	r5, [pc, #24]	; (55c <GpioInit+0x34>)
     544:	47a8      	blx	r5
	gpio_set_pin_drvstr(GPIO(BUSY_LED), 1);
     546:	2201      	movs	r2, #1
     548:	2117      	movs	r1, #23
     54a:	2001      	movs	r0, #1
     54c:	47a8      	blx	r5
	gpio_set_pin_dir(GPIO(PWR_CTRL), GPIO_DIR_OUT);
     54e:	2201      	movs	r2, #1
     550:	2111      	movs	r1, #17
     552:	2001      	movs	r0, #1
     554:	47a0      	blx	r4
}
     556:	bd70      	pop	{r4, r5, r6, pc}
     558:	00000d49 	.word	0x00000d49
     55c:	00000de5 	.word	0x00000de5

00000560 <enable_pwr>:

void enable_pwr() {
     560:	b510      	push	{r4, lr}
	// TODO: check voltage level
	gpio_set_pin(GPIO(PWR_CTRL), 1);
     562:	2201      	movs	r2, #1
     564:	2111      	movs	r1, #17
     566:	2001      	movs	r0, #1
     568:	4b01      	ldr	r3, [pc, #4]	; (570 <enable_pwr+0x10>)
     56a:	4798      	blx	r3
}
     56c:	bd10      	pop	{r4, pc}
     56e:	46c0      	nop			; (mov r8, r8)
     570:	00000cfd 	.word	0x00000cfd

00000574 <LvPeripheralsInit>:

void LvPeripheralsInit() {
     574:	b510      	push	{r4, lr}
	SSD_init(&io_devices.ssd);
     576:	4c07      	ldr	r4, [pc, #28]	; (594 <LvPeripheralsInit+0x20>)
     578:	0020      	movs	r0, r4
     57a:	4b07      	ldr	r3, [pc, #28]	; (598 <LvPeripheralsInit+0x24>)
     57c:	4798      	blx	r3
	keypad_init(&io_devices.keypad);
     57e:	0020      	movs	r0, r4
     580:	3010      	adds	r0, #16
     582:	4b06      	ldr	r3, [pc, #24]	; (59c <LvPeripheralsInit+0x28>)
     584:	4798      	blx	r3
	build_keymap();
     586:	4b06      	ldr	r3, [pc, #24]	; (5a0 <LvPeripheralsInit+0x2c>)
     588:	4798      	blx	r3
	
	buzzer_init();
     58a:	4b06      	ldr	r3, [pc, #24]	; (5a4 <LvPeripheralsInit+0x30>)
     58c:	4798      	blx	r3
	fplights_init();
     58e:	4b06      	ldr	r3, [pc, #24]	; (5a8 <LvPeripheralsInit+0x34>)
     590:	4798      	blx	r3
}
     592:	bd10      	pop	{r4, pc}
     594:	20000a68 	.word	0x20000a68
     598:	00002051 	.word	0x00002051
     59c:	000019f9 	.word	0x000019f9
     5a0:	000012e9 	.word	0x000012e9
     5a4:	0000098d 	.word	0x0000098d
     5a8:	00000ea5 	.word	0x00000ea5

000005ac <HvPeripheralsInit>:

void HvPeripheralsInit() {
     5ac:	b510      	push	{r4, lr}
	enable_pwr();
     5ae:	4b04      	ldr	r3, [pc, #16]	; (5c0 <HvPeripheralsInit+0x14>)
     5b0:	4798      	blx	r3
	
	NeoPixel_init();
     5b2:	4b04      	ldr	r3, [pc, #16]	; (5c4 <HvPeripheralsInit+0x18>)
     5b4:	4798      	blx	r3
	NXDisplay_init(&nxconfig);
     5b6:	4804      	ldr	r0, [pc, #16]	; (5c8 <HvPeripheralsInit+0x1c>)
     5b8:	4b04      	ldr	r3, [pc, #16]	; (5cc <HvPeripheralsInit+0x20>)
     5ba:	4798      	blx	r3
}
     5bc:	bd10      	pop	{r4, pc}
     5be:	46c0      	nop			; (mov r8, r8)
     5c0:	00000561 	.word	0x00000561
     5c4:	00001a9d 	.word	0x00001a9d
     5c8:	200001b0 	.word	0x200001b0
     5cc:	00001c35 	.word	0x00001c35

000005d0 <normal_keypad_lighting>:


const color_rgb colors[] = {{32, 32, 32}, {128, 128, 128}, {255, 255, 255}, {0, 64, 200}, {0, 220, 0}, {255, 0, 0}, {190, 0, 128}};

void normal_keypad_lighting() {
     5d0:	b530      	push	{r4, r5, lr}
     5d2:	b083      	sub	sp, #12
	for (int i = 0; i < KEYPAD_GRID_SIZE; i++) {
     5d4:	2400      	movs	r4, #0
     5d6:	e01a      	b.n	60e <normal_keypad_lighting+0x3e>
			if (currentkey->special_color) {
				// If the key has special color rules, apply that instead
				c = currentkey->special_color(currentkey, &calc_state, &sys_state);
			} else {
				// Lighting depends on modifiers and command availability
				c = standard_color(currentkey, &calc_state, &sys_state);
     5d8:	4a1f      	ldr	r2, [pc, #124]	; (658 <normal_keypad_lighting+0x88>)
     5da:	3204      	adds	r2, #4
     5dc:	491f      	ldr	r1, [pc, #124]	; (65c <normal_keypad_lighting+0x8c>)
     5de:	3110      	adds	r1, #16
     5e0:	4b1f      	ldr	r3, [pc, #124]	; (660 <normal_keypad_lighting+0x90>)
     5e2:	4798      	blx	r3
     5e4:	ab01      	add	r3, sp, #4
     5e6:	7018      	strb	r0, [r3, #0]
     5e8:	0402      	lsls	r2, r0, #16
     5ea:	0e12      	lsrs	r2, r2, #24
     5ec:	705a      	strb	r2, [r3, #1]
     5ee:	0200      	lsls	r0, r0, #8
     5f0:	0e00      	lsrs	r0, r0, #24
     5f2:	7098      	strb	r0, [r3, #2]
						//available = currentkey->base_cmd->available(&calc_state, &sys_state);
					//}
					//c = available ? color_normal : color_normal_unavail;
				//}
			}
			NeoPixel_set_pixel(currentkey->pixel_idx, c.r, c.g, c.b);
     5f4:	a901      	add	r1, sp, #4
     5f6:	788b      	ldrb	r3, [r1, #2]
     5f8:	784a      	ldrb	r2, [r1, #1]
     5fa:	7809      	ldrb	r1, [r1, #0]
     5fc:	00e0      	lsls	r0, r4, #3
     5fe:	1b00      	subs	r0, r0, r4
     600:	0085      	lsls	r5, r0, #2
     602:	4818      	ldr	r0, [pc, #96]	; (664 <normal_keypad_lighting+0x94>)
     604:	1940      	adds	r0, r0, r5
     606:	6940      	ldr	r0, [r0, #20]
     608:	4d17      	ldr	r5, [pc, #92]	; (668 <normal_keypad_lighting+0x98>)
     60a:	47a8      	blx	r5
	for (int i = 0; i < KEYPAD_GRID_SIZE; i++) {
     60c:	3401      	adds	r4, #1
     60e:	2c27      	cmp	r4, #39	; 0x27
     610:	dc1a      	bgt.n	648 <normal_keypad_lighting+0x78>
		const kp_key *currentkey = &keypad_map[i];
     612:	00e3      	lsls	r3, r4, #3
     614:	1b1a      	subs	r2, r3, r4
     616:	0090      	lsls	r0, r2, #2
     618:	4a12      	ldr	r2, [pc, #72]	; (664 <normal_keypad_lighting+0x94>)
     61a:	1880      	adds	r0, r0, r2
		if (currentkey->key_type != 0) {
     61c:	1b1b      	subs	r3, r3, r4
     61e:	0099      	lsls	r1, r3, #2
     620:	5c8b      	ldrb	r3, [r1, r2]
     622:	2b00      	cmp	r3, #0
     624:	d0f2      	beq.n	60c <normal_keypad_lighting+0x3c>
			if (currentkey->special_color) {
     626:	6983      	ldr	r3, [r0, #24]
     628:	2b00      	cmp	r3, #0
     62a:	d0d5      	beq.n	5d8 <normal_keypad_lighting+0x8>
				c = currentkey->special_color(currentkey, &calc_state, &sys_state);
     62c:	4a0a      	ldr	r2, [pc, #40]	; (658 <normal_keypad_lighting+0x88>)
     62e:	3204      	adds	r2, #4
     630:	490a      	ldr	r1, [pc, #40]	; (65c <normal_keypad_lighting+0x8c>)
     632:	3110      	adds	r1, #16
     634:	4798      	blx	r3
     636:	ab01      	add	r3, sp, #4
     638:	7018      	strb	r0, [r3, #0]
     63a:	0402      	lsls	r2, r0, #16
     63c:	0e12      	lsrs	r2, r2, #24
     63e:	705a      	strb	r2, [r3, #1]
     640:	0200      	lsls	r0, r0, #8
     642:	0e00      	lsrs	r0, r0, #24
     644:	7098      	strb	r0, [r3, #2]
     646:	e7d5      	b.n	5f4 <normal_keypad_lighting+0x24>
		}
	}
	NeoPixel_update();
     648:	4b08      	ldr	r3, [pc, #32]	; (66c <normal_keypad_lighting+0x9c>)
     64a:	4798      	blx	r3
	fplights_show(&sys_state);
     64c:	4802      	ldr	r0, [pc, #8]	; (658 <normal_keypad_lighting+0x88>)
     64e:	3004      	adds	r0, #4
     650:	4b07      	ldr	r3, [pc, #28]	; (670 <normal_keypad_lighting+0xa0>)
     652:	4798      	blx	r3
}
     654:	b003      	add	sp, #12
     656:	bd30      	pop	{r4, r5, pc}
     658:	200001b0 	.word	0x200001b0
     65c:	20000630 	.word	0x20000630
     660:	000011bd 	.word	0x000011bd
     664:	20000aa0 	.word	0x20000aa0
     668:	00001a69 	.word	0x00001a69
     66c:	00001b59 	.word	0x00001b59
     670:	00000ef5 	.word	0x00000ef5

00000674 <process_keypress>:

void process_modifiers() {
	
}

cmd_generic *process_keypress() {
     674:	b570      	push	{r4, r5, r6, lr}
	uint64_t keys = io_devices.keypad.changed;
     676:	4b40      	ldr	r3, [pc, #256]	; (778 <process_keypress+0x104>)
     678:	6a18      	ldr	r0, [r3, #32]
     67a:	6a59      	ldr	r1, [r3, #36]	; 0x24
	// clear the pending key press
	io_devices.keypad.changed = 0ULL;
     67c:	2400      	movs	r4, #0
     67e:	2500      	movs	r5, #0
     680:	621c      	str	r4, [r3, #32]
     682:	625d      	str	r5, [r3, #36]	; 0x24
	
	for (int i = 0; i < KEYPAD_GRID_SIZE; i++) {
     684:	2300      	movs	r3, #0
     686:	e04c      	b.n	722 <process_keypress+0xae>
		// TODO: special rules?
		if (keys & (1ULL << i)) {
     688:	2220      	movs	r2, #32
     68a:	1ad2      	subs	r2, r2, r3
     68c:	000c      	movs	r4, r1
     68e:	4094      	lsls	r4, r2
     690:	0002      	movs	r2, r0
     692:	40da      	lsrs	r2, r3
     694:	4322      	orrs	r2, r4
     696:	e04d      	b.n	734 <process_keypress+0xc0>
			if (currentkey->key_type != 0) {
				cmd_generic *cmd = NULL;
				uint8_t modifier = (currentkey->key_type & KEY_TYPE_MOD_MASK);
				if (modifier) {
					// Set modifiers if button pressed. If modifier is already active, let it be changed to 'held'
					if (modifier == KEY_TYPE_SHIFT && !sys_state.mods.shift) {
     698:	4938      	ldr	r1, [pc, #224]	; (77c <process_keypress+0x108>)
     69a:	7a49      	ldrb	r1, [r1, #9]
     69c:	2900      	cmp	r1, #0
     69e:	d157      	bne.n	750 <process_keypress+0xdc>
						sys_state.mods.shift = mod_active;
     6a0:	3a0f      	subs	r2, #15
     6a2:	4b36      	ldr	r3, [pc, #216]	; (77c <process_keypress+0x108>)
     6a4:	725a      	strb	r2, [r3, #9]
						BUZZER_TONE_GOOD();
     6a6:	21e1      	movs	r1, #225	; 0xe1
     6a8:	00c9      	lsls	r1, r1, #3
     6aa:	2010      	movs	r0, #16
     6ac:	4b34      	ldr	r3, [pc, #208]	; (780 <process_keypress+0x10c>)
     6ae:	4798      	blx	r3
						return NULL; // No command
     6b0:	2000      	movs	r0, #0
     6b2:	e05f      	b.n	774 <process_keypress+0x100>
					}
					if (modifier == KEY_TYPE_HYP && !sys_state.mods.hyp) {
     6b4:	4a31      	ldr	r2, [pc, #196]	; (77c <process_keypress+0x108>)
     6b6:	7a92      	ldrb	r2, [r2, #10]
     6b8:	2a00      	cmp	r2, #0
     6ba:	d14b      	bne.n	754 <process_keypress+0xe0>
						sys_state.mods.hyp = mod_active;
     6bc:	3201      	adds	r2, #1
     6be:	4b2f      	ldr	r3, [pc, #188]	; (77c <process_keypress+0x108>)
     6c0:	729a      	strb	r2, [r3, #10]
						BUZZER_TONE_GOOD();
     6c2:	21e1      	movs	r1, #225	; 0xe1
     6c4:	00c9      	lsls	r1, r1, #3
     6c6:	2010      	movs	r0, #16
     6c8:	4b2d      	ldr	r3, [pc, #180]	; (780 <process_keypress+0x10c>)
     6ca:	4798      	blx	r3
						return NULL; // No command
     6cc:	2000      	movs	r0, #0
     6ce:	e051      	b.n	774 <process_keypress+0x100>
				}
				
				// find the command based on the modifiers
				if (sys_state.mods.shift && sys_state.mods.hyp) {
					cmd = currentkey->shift_hyp_cmd;
				} else if (sys_state.mods.shift) {
     6d0:	2a00      	cmp	r2, #0
     6d2:	d00f      	beq.n	6f4 <process_keypress+0x80>
					cmd = currentkey->shift_cmd;
     6d4:	00d9      	lsls	r1, r3, #3
     6d6:	1acb      	subs	r3, r1, r3
     6d8:	0099      	lsls	r1, r3, #2
     6da:	4b2a      	ldr	r3, [pc, #168]	; (784 <process_keypress+0x110>)
     6dc:	185b      	adds	r3, r3, r1
     6de:	6898      	ldr	r0, [r3, #8]
					cmd = currentkey->hyp_cmd;
				} else if (currentkey->base_cmd) {
					cmd = currentkey->base_cmd;
				}
				// Set any modifiers to 'held'
				if (sys_state.mods.shift == mod_active) {
     6e0:	2a01      	cmp	r2, #1
     6e2:	d019      	beq.n	718 <process_keypress+0xa4>
					sys_state.mods.shift = mod_held;
				}
				if (sys_state.mods.hyp == mod_active) {
     6e4:	4b25      	ldr	r3, [pc, #148]	; (77c <process_keypress+0x108>)
     6e6:	7a9b      	ldrb	r3, [r3, #10]
     6e8:	2b01      	cmp	r3, #1
     6ea:	d143      	bne.n	774 <process_keypress+0x100>
					sys_state.mods.hyp = mod_held;
     6ec:	2202      	movs	r2, #2
     6ee:	4b23      	ldr	r3, [pc, #140]	; (77c <process_keypress+0x108>)
     6f0:	729a      	strb	r2, [r3, #10]
     6f2:	e03f      	b.n	774 <process_keypress+0x100>
				} else if (sys_state.mods.hyp) {
     6f4:	4921      	ldr	r1, [pc, #132]	; (77c <process_keypress+0x108>)
     6f6:	7a89      	ldrb	r1, [r1, #10]
     6f8:	2900      	cmp	r1, #0
     6fa:	d006      	beq.n	70a <process_keypress+0x96>
					cmd = currentkey->hyp_cmd;
     6fc:	00d9      	lsls	r1, r3, #3
     6fe:	1acb      	subs	r3, r1, r3
     700:	0099      	lsls	r1, r3, #2
     702:	4b20      	ldr	r3, [pc, #128]	; (784 <process_keypress+0x110>)
     704:	185b      	adds	r3, r3, r1
     706:	68d8      	ldr	r0, [r3, #12]
     708:	e7ea      	b.n	6e0 <process_keypress+0x6c>
				} else if (currentkey->base_cmd) {
     70a:	00d9      	lsls	r1, r3, #3
     70c:	1acb      	subs	r3, r1, r3
     70e:	0099      	lsls	r1, r3, #2
     710:	4b1c      	ldr	r3, [pc, #112]	; (784 <process_keypress+0x110>)
     712:	185b      	adds	r3, r3, r1
     714:	6858      	ldr	r0, [r3, #4]
     716:	e7e3      	b.n	6e0 <process_keypress+0x6c>
					sys_state.mods.shift = mod_held;
     718:	3201      	adds	r2, #1
     71a:	4b18      	ldr	r3, [pc, #96]	; (77c <process_keypress+0x108>)
     71c:	725a      	strb	r2, [r3, #9]
     71e:	e7e1      	b.n	6e4 <process_keypress+0x70>
	for (int i = 0; i < KEYPAD_GRID_SIZE; i++) {
     720:	3301      	adds	r3, #1
     722:	2b27      	cmp	r3, #39	; 0x27
     724:	dc25      	bgt.n	772 <process_keypress+0xfe>
		if (keys & (1ULL << i)) {
     726:	2220      	movs	r2, #32
     728:	4252      	negs	r2, r2
     72a:	189a      	adds	r2, r3, r2
     72c:	d4ac      	bmi.n	688 <process_keypress+0x14>
     72e:	000c      	movs	r4, r1
     730:	40d4      	lsrs	r4, r2
     732:	0022      	movs	r2, r4
     734:	07d2      	lsls	r2, r2, #31
     736:	d5f3      	bpl.n	720 <process_keypress+0xac>
			if (currentkey->key_type != 0) {
     738:	00da      	lsls	r2, r3, #3
     73a:	1ad2      	subs	r2, r2, r3
     73c:	0094      	lsls	r4, r2, #2
     73e:	4a11      	ldr	r2, [pc, #68]	; (784 <process_keypress+0x110>)
     740:	5ca2      	ldrb	r2, [r4, r2]
     742:	2a00      	cmp	r2, #0
     744:	d0ec      	beq.n	720 <process_keypress+0xac>
				uint8_t modifier = (currentkey->key_type & KEY_TYPE_MOD_MASK);
     746:	210f      	movs	r1, #15
     748:	438a      	bics	r2, r1
				if (modifier) {
     74a:	d003      	beq.n	754 <process_keypress+0xe0>
					if (modifier == KEY_TYPE_SHIFT && !sys_state.mods.shift) {
     74c:	2a10      	cmp	r2, #16
     74e:	d0a3      	beq.n	698 <process_keypress+0x24>
					if (modifier == KEY_TYPE_HYP && !sys_state.mods.hyp) {
     750:	2a20      	cmp	r2, #32
     752:	d0af      	beq.n	6b4 <process_keypress+0x40>
				if (sys_state.mods.shift && sys_state.mods.hyp) {
     754:	4a09      	ldr	r2, [pc, #36]	; (77c <process_keypress+0x108>)
     756:	7a52      	ldrb	r2, [r2, #9]
     758:	2a00      	cmp	r2, #0
     75a:	d0b9      	beq.n	6d0 <process_keypress+0x5c>
     75c:	4907      	ldr	r1, [pc, #28]	; (77c <process_keypress+0x108>)
     75e:	7a89      	ldrb	r1, [r1, #10]
     760:	2900      	cmp	r1, #0
     762:	d0b5      	beq.n	6d0 <process_keypress+0x5c>
					cmd = currentkey->shift_hyp_cmd;
     764:	00d9      	lsls	r1, r3, #3
     766:	1acb      	subs	r3, r1, r3
     768:	0099      	lsls	r1, r3, #2
     76a:	4b06      	ldr	r3, [pc, #24]	; (784 <process_keypress+0x110>)
     76c:	185b      	adds	r3, r3, r1
     76e:	6918      	ldr	r0, [r3, #16]
     770:	e7b6      	b.n	6e0 <process_keypress+0x6c>
				}
				return cmd;
			}
		}
	}
	return NULL;
     772:	2000      	movs	r0, #0
}
     774:	bd70      	pop	{r4, r5, r6, pc}
     776:	46c0      	nop			; (mov r8, r8)
     778:	20000a68 	.word	0x20000a68
     77c:	200001b0 	.word	0x200001b0
     780:	00000a0d 	.word	0x00000a0d
     784:	20000aa0 	.word	0x20000aa0

00000788 <exec_cmd>:

void exec_cmd(const cmd_generic *cmd) {
     788:	b510      	push	{r4, lr}
     78a:	0004      	movs	r4, r0
	if (cmd->available && cmd->available(&calc_state, &sys_state)) {
     78c:	6843      	ldr	r3, [r0, #4]
     78e:	2b00      	cmp	r3, #0
     790:	d006      	beq.n	7a0 <exec_cmd+0x18>
     792:	4918      	ldr	r1, [pc, #96]	; (7f4 <exec_cmd+0x6c>)
     794:	3104      	adds	r1, #4
     796:	4818      	ldr	r0, [pc, #96]	; (7f8 <exec_cmd+0x70>)
     798:	3010      	adds	r0, #16
     79a:	4798      	blx	r3
     79c:	2800      	cmp	r0, #0
     79e:	d105      	bne.n	7ac <exec_cmd+0x24>
			//}
			//NXDisplay_dispStr(buf);
		}
		NXDisplay_dispBuf(&calc_state.in_buffer, 0);
	} else {
		BUZZER_TONE_BAD();
     7a0:	2196      	movs	r1, #150	; 0x96
     7a2:	0089      	lsls	r1, r1, #2
     7a4:	2050      	movs	r0, #80	; 0x50
     7a6:	4b15      	ldr	r3, [pc, #84]	; (7fc <exec_cmd+0x74>)
     7a8:	4798      	blx	r3
		// TODO: unavailable command pressed
	}
}
     7aa:	bd10      	pop	{r4, pc}
		BUZZER_TONE_GOOD();
     7ac:	21e1      	movs	r1, #225	; 0xe1
     7ae:	00c9      	lsls	r1, r1, #3
     7b0:	2010      	movs	r0, #16
     7b2:	4b12      	ldr	r3, [pc, #72]	; (7fc <exec_cmd+0x74>)
     7b4:	4798      	blx	r3
		if ((cmd->cmd_type & CMD_TYPE_MASK) == CMD_TYPE_OP) {
     7b6:	7823      	ldrb	r3, [r4, #0]
     7b8:	220f      	movs	r2, #15
     7ba:	4393      	bics	r3, r2
     7bc:	2b10      	cmp	r3, #16
     7be:	d00a      	beq.n	7d6 <exec_cmd+0x4e>
		} else if ((cmd->cmd_type & CMD_TYPE_MASK) == CMD_TYPE_MENU) {
     7c0:	2b20      	cmp	r3, #32
     7c2:	d001      	beq.n	7c8 <exec_cmd+0x40>
		} else if ((cmd->cmd_type & CMD_TYPE_MASK) == CMD_TYPE_NUM) {
     7c4:	2b30      	cmp	r3, #48	; 0x30
     7c6:	d00d      	beq.n	7e4 <exec_cmd+0x5c>
		NXDisplay_dispBuf(&calc_state.in_buffer, 0);
     7c8:	480b      	ldr	r0, [pc, #44]	; (7f8 <exec_cmd+0x70>)
     7ca:	3081      	adds	r0, #129	; 0x81
     7cc:	30ff      	adds	r0, #255	; 0xff
     7ce:	2100      	movs	r1, #0
     7d0:	4b0b      	ldr	r3, [pc, #44]	; (800 <exec_cmd+0x78>)
     7d2:	4798      	blx	r3
     7d4:	e7e9      	b.n	7aa <exec_cmd+0x22>
			op->op_func(&calc_state, &sys_state);
     7d6:	68e3      	ldr	r3, [r4, #12]
     7d8:	4906      	ldr	r1, [pc, #24]	; (7f4 <exec_cmd+0x6c>)
     7da:	3104      	adds	r1, #4
     7dc:	4806      	ldr	r0, [pc, #24]	; (7f8 <exec_cmd+0x70>)
     7de:	3010      	adds	r0, #16
     7e0:	4798      	blx	r3
     7e2:	e7f1      	b.n	7c8 <exec_cmd+0x40>
			cmd_num->num_func(&calc_state, &sys_state, cmd_num->number);
     7e4:	68e3      	ldr	r3, [r4, #12]
     7e6:	68a2      	ldr	r2, [r4, #8]
     7e8:	4902      	ldr	r1, [pc, #8]	; (7f4 <exec_cmd+0x6c>)
     7ea:	3104      	adds	r1, #4
     7ec:	4802      	ldr	r0, [pc, #8]	; (7f8 <exec_cmd+0x70>)
     7ee:	3010      	adds	r0, #16
     7f0:	4798      	blx	r3
     7f2:	e7e9      	b.n	7c8 <exec_cmd+0x40>
     7f4:	200001b0 	.word	0x200001b0
     7f8:	20000630 	.word	0x20000630
     7fc:	00000a0d 	.word	0x00000a0d
     800:	00001c7d 	.word	0x00001c7d

00000804 <main>:

int main(void) {
     804:	b570      	push	{r4, r5, r6, lr}
    GpioInit();
     806:	4b2c      	ldr	r3, [pc, #176]	; (8b8 <main+0xb4>)
     808:	4798      	blx	r3
	gpio_set_pin(GPIO(PWR_LED), 1);
     80a:	2201      	movs	r2, #1
     80c:	2116      	movs	r1, #22
     80e:	2001      	movs	r0, #1
     810:	4c2a      	ldr	r4, [pc, #168]	; (8bc <main+0xb8>)
     812:	47a0      	blx	r4
	gpio_set_pin(GPIO(BUSY_LED), 1);
     814:	2201      	movs	r2, #1
     816:	2117      	movs	r1, #23
     818:	2001      	movs	r0, #1
     81a:	47a0      	blx	r4
	ClocksInit();
     81c:	4b28      	ldr	r3, [pc, #160]	; (8c0 <main+0xbc>)
     81e:	4798      	blx	r3

	LvPeripheralsInit();
     820:	4b28      	ldr	r3, [pc, #160]	; (8c4 <main+0xc0>)
     822:	4798      	blx	r3
	HvPeripheralsInit();
     824:	4b28      	ldr	r3, [pc, #160]	; (8c8 <main+0xc4>)
     826:	4798      	blx	r3
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
     828:	4a28      	ldr	r2, [pc, #160]	; (8cc <main+0xc8>)
     82a:	4b29      	ldr	r3, [pc, #164]	; (8d0 <main+0xcc>)
     82c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     82e:	4829      	ldr	r0, [pc, #164]	; (8d4 <main+0xd0>)
     830:	6a03      	ldr	r3, [r0, #32]
     832:	021b      	lsls	r3, r3, #8
     834:	0a1b      	lsrs	r3, r3, #8
     836:	21c0      	movs	r1, #192	; 0xc0
     838:	0609      	lsls	r1, r1, #24
     83a:	430b      	orrs	r3, r1
     83c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
     83e:	2300      	movs	r3, #0
     840:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
     842:	3307      	adds	r3, #7
     844:	6013      	str	r3, [r2, #0]
	//enable_pwr();
	//NeoPixel_init();

	SysTick_Config(4800ul);
	gpio_set_pin(GPIO(BUSY_LED), 0);
     846:	2200      	movs	r2, #0
     848:	2117      	movs	r1, #23
     84a:	2001      	movs	r0, #1
     84c:	47a0      	blx	r4
	
	calc_state.in_buffer.main.decimal = -1;
     84e:	21ff      	movs	r1, #255	; 0xff
     850:	2382      	movs	r3, #130	; 0x82
     852:	33ff      	adds	r3, #255	; 0xff
     854:	4a20      	ldr	r2, [pc, #128]	; (8d8 <main+0xd4>)
     856:	54d1      	strb	r1, [r2, r3]
     858:	e015      	b.n	886 <main+0x82>

	while (1) {
		// Clear modifier keys if needed
		if (sys_state.mods.shift == mod_held && !(io_devices.keypad.rawKeys & KEY_MOD_SHIFT_IDX)) {
     85a:	4b20      	ldr	r3, [pc, #128]	; (8dc <main+0xd8>)
     85c:	699a      	ldr	r2, [r3, #24]
     85e:	69db      	ldr	r3, [r3, #28]
     860:	2380      	movs	r3, #128	; 0x80
     862:	009b      	lsls	r3, r3, #2
     864:	4213      	tst	r3, r2
     866:	d112      	bne.n	88e <main+0x8a>
			 sys_state.mods.shift = mod_inactive;
     868:	2200      	movs	r2, #0
     86a:	4b1d      	ldr	r3, [pc, #116]	; (8e0 <main+0xdc>)
     86c:	725a      	strb	r2, [r3, #9]
     86e:	e00e      	b.n	88e <main+0x8a>
		}
		if (sys_state.mods.hyp == mod_held && !(io_devices.keypad.rawKeys & KEY_MOD_HYP_IDX)) {
     870:	4b1a      	ldr	r3, [pc, #104]	; (8dc <main+0xd8>)
     872:	699a      	ldr	r2, [r3, #24]
     874:	69db      	ldr	r3, [r3, #28]
     876:	071b      	lsls	r3, r3, #28
     878:	d40d      	bmi.n	896 <main+0x92>
			 sys_state.mods.hyp = mod_inactive;
     87a:	2200      	movs	r2, #0
     87c:	4b18      	ldr	r3, [pc, #96]	; (8e0 <main+0xdc>)
     87e:	729a      	strb	r2, [r3, #10]
     880:	e009      	b.n	896 <main+0x92>
			gpio_set_pin(GPIO(BUSY_LED), 1);
			exec_cmd(pressed_cmd);
			gpio_set_pin(GPIO(BUSY_LED), 0);
		}
		
		normal_keypad_lighting();
     882:	4b18      	ldr	r3, [pc, #96]	; (8e4 <main+0xe0>)
     884:	4798      	blx	r3
		if (sys_state.mods.shift == mod_held && !(io_devices.keypad.rawKeys & KEY_MOD_SHIFT_IDX)) {
     886:	4b16      	ldr	r3, [pc, #88]	; (8e0 <main+0xdc>)
     888:	7a5b      	ldrb	r3, [r3, #9]
     88a:	2b02      	cmp	r3, #2
     88c:	d0e5      	beq.n	85a <main+0x56>
		if (sys_state.mods.hyp == mod_held && !(io_devices.keypad.rawKeys & KEY_MOD_HYP_IDX)) {
     88e:	4b14      	ldr	r3, [pc, #80]	; (8e0 <main+0xdc>)
     890:	7a9b      	ldrb	r3, [r3, #10]
     892:	2b02      	cmp	r3, #2
     894:	d0ec      	beq.n	870 <main+0x6c>
		cmd_generic *pressed_cmd = process_keypress();
     896:	4b14      	ldr	r3, [pc, #80]	; (8e8 <main+0xe4>)
     898:	4798      	blx	r3
     89a:	1e04      	subs	r4, r0, #0
		if (pressed_cmd) {
     89c:	d0f1      	beq.n	882 <main+0x7e>
			gpio_set_pin(GPIO(BUSY_LED), 1);
     89e:	2201      	movs	r2, #1
     8a0:	2117      	movs	r1, #23
     8a2:	2001      	movs	r0, #1
     8a4:	4d05      	ldr	r5, [pc, #20]	; (8bc <main+0xb8>)
     8a6:	47a8      	blx	r5
			exec_cmd(pressed_cmd);
     8a8:	0020      	movs	r0, r4
     8aa:	4b10      	ldr	r3, [pc, #64]	; (8ec <main+0xe8>)
     8ac:	4798      	blx	r3
			gpio_set_pin(GPIO(BUSY_LED), 0);
     8ae:	2200      	movs	r2, #0
     8b0:	2117      	movs	r1, #23
     8b2:	2001      	movs	r0, #1
     8b4:	47a8      	blx	r5
     8b6:	e7e4      	b.n	882 <main+0x7e>
     8b8:	00000529 	.word	0x00000529
     8bc:	00000cfd 	.word	0x00000cfd
     8c0:	00000a81 	.word	0x00000a81
     8c4:	00000575 	.word	0x00000575
     8c8:	000005ad 	.word	0x000005ad
     8cc:	e000e010 	.word	0xe000e010
     8d0:	000012bf 	.word	0x000012bf
     8d4:	e000ed00 	.word	0xe000ed00
     8d8:	20000630 	.word	0x20000630
     8dc:	20000a68 	.word	0x20000a68
     8e0:	200001b0 	.word	0x200001b0
     8e4:	000005d1 	.word	0x000005d1
     8e8:	00000675 	.word	0x00000675
     8ec:	00000789 	.word	0x00000789

000008f0 <r_add>:

#include "mathcore.h"

#ifdef MATH_DOUBLE

int r_add(rnum_t *x, const rnum_t *a, const rnum_t *b) {
     8f0:	b570      	push	{r4, r5, r6, lr}
     8f2:	0004      	movs	r4, r0
	x->val = a->val + b->val;
     8f4:	6808      	ldr	r0, [r1, #0]
     8f6:	6849      	ldr	r1, [r1, #4]
     8f8:	6853      	ldr	r3, [r2, #4]
     8fa:	6812      	ldr	r2, [r2, #0]
     8fc:	4d02      	ldr	r5, [pc, #8]	; (908 <r_add+0x18>)
     8fe:	47a8      	blx	r5
     900:	6020      	str	r0, [r4, #0]
     902:	6061      	str	r1, [r4, #4]
	return 0;
}
     904:	2000      	movs	r0, #0
     906:	bd70      	pop	{r4, r5, r6, pc}
     908:	000022d5 	.word	0x000022d5

0000090c <r_sub>:
int r_sub(rnum_t *x, const rnum_t *a, const rnum_t *b) {
     90c:	b570      	push	{r4, r5, r6, lr}
     90e:	0004      	movs	r4, r0
	x->val = a->val - b->val;
     910:	6808      	ldr	r0, [r1, #0]
     912:	6849      	ldr	r1, [r1, #4]
     914:	6853      	ldr	r3, [r2, #4]
     916:	6812      	ldr	r2, [r2, #0]
     918:	4d02      	ldr	r5, [pc, #8]	; (924 <r_sub+0x18>)
     91a:	47a8      	blx	r5
     91c:	6020      	str	r0, [r4, #0]
     91e:	6061      	str	r1, [r4, #4]
	return 0;
}
     920:	2000      	movs	r0, #0
     922:	bd70      	pop	{r4, r5, r6, pc}
     924:	0000365d 	.word	0x0000365d

00000928 <r_mul>:
int r_mul(rnum_t *x, const rnum_t *a, const rnum_t *b) {
     928:	b570      	push	{r4, r5, r6, lr}
     92a:	0004      	movs	r4, r0
	x->val = a->val * b->val;
     92c:	6808      	ldr	r0, [r1, #0]
     92e:	6849      	ldr	r1, [r1, #4]
     930:	6853      	ldr	r3, [r2, #4]
     932:	6812      	ldr	r2, [r2, #0]
     934:	4d02      	ldr	r5, [pc, #8]	; (940 <r_mul+0x18>)
     936:	47a8      	blx	r5
     938:	6020      	str	r0, [r4, #0]
     93a:	6061      	str	r1, [r4, #4]
	return 0;
}
     93c:	2000      	movs	r0, #0
     93e:	bd70      	pop	{r4, r5, r6, pc}
     940:	0000315d 	.word	0x0000315d

00000944 <r_div>:
int r_div(rnum_t *x, const rnum_t *a, const rnum_t *b) {
     944:	b5f0      	push	{r4, r5, r6, r7, lr}
     946:	46c6      	mov	lr, r8
     948:	b500      	push	{lr}
     94a:	0007      	movs	r7, r0
     94c:	4688      	mov	r8, r1
	if (b->val == 0.0) {
     94e:	6814      	ldr	r4, [r2, #0]
     950:	6855      	ldr	r5, [r2, #4]
     952:	2200      	movs	r2, #0
     954:	2300      	movs	r3, #0
     956:	0020      	movs	r0, r4
     958:	0029      	movs	r1, r5
     95a:	4e0a      	ldr	r6, [pc, #40]	; (984 <r_div+0x40>)
     95c:	47b0      	blx	r6
     95e:	2800      	cmp	r0, #0
     960:	d10c      	bne.n	97c <r_div+0x38>
		return -1;
	}
	x->val = a->val / b->val;
     962:	4643      	mov	r3, r8
     964:	6818      	ldr	r0, [r3, #0]
     966:	6859      	ldr	r1, [r3, #4]
     968:	0022      	movs	r2, r4
     96a:	002b      	movs	r3, r5
     96c:	4c06      	ldr	r4, [pc, #24]	; (988 <r_div+0x44>)
     96e:	47a0      	blx	r4
     970:	6038      	str	r0, [r7, #0]
     972:	6079      	str	r1, [r7, #4]
	return 0;
     974:	2000      	movs	r0, #0
}
     976:	bc04      	pop	{r2}
     978:	4690      	mov	r8, r2
     97a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
     97c:	2001      	movs	r0, #1
     97e:	4240      	negs	r0, r0
     980:	e7f9      	b.n	976 <r_div+0x32>
     982:	46c0      	nop			; (mov r8, r8)
     984:	00002279 	.word	0x00002279
     988:	000028f5 	.word	0x000028f5

0000098c <buzzer_init>:
	uint8_t active;
} current_tone = { 0 };

void buzzer_init() {
	// Enable clock for TC6
	PM->APBCMASK.bit.TC6_ = 1;
     98c:	4b19      	ldr	r3, [pc, #100]	; (9f4 <buzzer_init+0x68>)
     98e:	6a18      	ldr	r0, [r3, #32]
     990:	2180      	movs	r1, #128	; 0x80
     992:	01c9      	lsls	r1, r1, #7
     994:	0002      	movs	r2, r0
     996:	430a      	orrs	r2, r1
     998:	621a      	str	r2, [r3, #32]
		
	GCLK->CLKCTRL.bit.ID = GCLK_CLKCTRL_ID_TC6_TC7_Val;
     99a:	4b17      	ldr	r3, [pc, #92]	; (9f8 <buzzer_init+0x6c>)
     99c:	885a      	ldrh	r2, [r3, #2]
     99e:	203f      	movs	r0, #63	; 0x3f
     9a0:	4382      	bics	r2, r0
     9a2:	201d      	movs	r0, #29
     9a4:	4302      	orrs	r2, r0
     9a6:	805a      	strh	r2, [r3, #2]
		
	GCLK->CLKCTRL.bit.GEN = GCLK_CLKCTRL_GEN_GCLK0_Val;
     9a8:	885a      	ldrh	r2, [r3, #2]
     9aa:	4814      	ldr	r0, [pc, #80]	; (9fc <buzzer_init+0x70>)
     9ac:	4002      	ands	r2, r0
     9ae:	805a      	strh	r2, [r3, #2]
	GCLK->CLKCTRL.bit.CLKEN = 1;
     9b0:	885a      	ldrh	r2, [r3, #2]
     9b2:	4311      	orrs	r1, r2
     9b4:	8059      	strh	r1, [r3, #2]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     9b6:	4a12      	ldr	r2, [pc, #72]	; (a00 <buzzer_init+0x74>)
     9b8:	805a      	strh	r2, [r3, #2]
						GCLK_CLKCTRL_GEN_GCLK0 |  // source is generic clock generator 0
						GCLK_CLKCTRL_ID_TC6_TC7;  // route to tc6&7
	
	// Setup timer
	TC6->COUNT16.CTRLA.reg |= TC_CTRLA_MODE_COUNT16; // 16 bit mode
     9ba:	4b12      	ldr	r3, [pc, #72]	; (a04 <buzzer_init+0x78>)
     9bc:	881a      	ldrh	r2, [r3, #0]
     9be:	b292      	uxth	r2, r2
     9c0:	801a      	strh	r2, [r3, #0]
	
	TC6->COUNT16.CTRLA.reg |= TC_CTRLA_WAVEGEN_MFRQ; // Match Frequency generation
     9c2:	881a      	ldrh	r2, [r3, #0]
     9c4:	2120      	movs	r1, #32
     9c6:	430a      	orrs	r2, r1
     9c8:	b292      	uxth	r2, r2
     9ca:	801a      	strh	r2, [r3, #0]
	// 48MHz / 512 = 46875 Hz tick
	TC6->COUNT16.CTRLA.reg |= TC_CTRLA_PRESCALER_DIV1024;
     9cc:	881a      	ldrh	r2, [r3, #0]
     9ce:	21e0      	movs	r1, #224	; 0xe0
     9d0:	00c9      	lsls	r1, r1, #3
     9d2:	430a      	orrs	r2, r1
     9d4:	801a      	strh	r2, [r3, #0]
	// CC0 will control the period
	
	// Set pin for TC6 output
	PORT->Group[BUZZER_PORT].PINCFG[BUZZER_PIN].bit.PMUXEN = 1;
     9d6:	4a0c      	ldr	r2, [pc, #48]	; (a08 <buzzer_init+0x7c>)
     9d8:	21d0      	movs	r1, #208	; 0xd0
     9da:	5c53      	ldrb	r3, [r2, r1]
     9dc:	2001      	movs	r0, #1
     9de:	4303      	orrs	r3, r0
     9e0:	5453      	strb	r3, [r2, r1]
	PORT->Group[BUZZER_PORT].PMUX[BUZZER_PIN/2].bit.PMUXE = BUZZER_PMUX;
     9e2:	3918      	subs	r1, #24
     9e4:	5c53      	ldrb	r3, [r2, r1]
     9e6:	200f      	movs	r0, #15
     9e8:	4383      	bics	r3, r0
     9ea:	2004      	movs	r0, #4
     9ec:	4303      	orrs	r3, r0
     9ee:	5453      	strb	r3, [r2, r1]
		
}
     9f0:	4770      	bx	lr
     9f2:	46c0      	nop			; (mov r8, r8)
     9f4:	40000400 	.word	0x40000400
     9f8:	40000c00 	.word	0x40000c00
     9fc:	fffff0ff 	.word	0xfffff0ff
     a00:	0000401d 	.word	0x0000401d
     a04:	42003800 	.word	0x42003800
     a08:	41004400 	.word	0x41004400

00000a0c <buzzer_tone_start>:

void buzzer_tone_start(uint16_t duration_ms, uint16_t freq_hz) {
     a0c:	b510      	push	{r4, lr}
	if (freq_hz == 0 || freq_hz > 23438 || duration_ms == 0) {
     a0e:	1e4b      	subs	r3, r1, #1
     a10:	b29b      	uxth	r3, r3
     a12:	4a0a      	ldr	r2, [pc, #40]	; (a3c <buzzer_tone_start+0x30>)
     a14:	4293      	cmp	r3, r2
     a16:	d810      	bhi.n	a3a <buzzer_tone_start+0x2e>
     a18:	2800      	cmp	r0, #0
     a1a:	d00e      	beq.n	a3a <buzzer_tone_start+0x2e>
		return;
	}
	current_tone.remaining_time_ms = duration_ms;
     a1c:	4b08      	ldr	r3, [pc, #32]	; (a40 <buzzer_tone_start+0x34>)
     a1e:	8018      	strh	r0, [r3, #0]
	current_tone.freq_hz = freq_hz;
     a20:	8059      	strh	r1, [r3, #2]
	current_tone.active = 1;
     a22:	2201      	movs	r2, #1
     a24:	711a      	strb	r2, [r3, #4]
	// Set timer for waveform generation
	TC6->COUNT16.CC[0].reg = (uint16_t)(23438 / freq_hz);
     a26:	4807      	ldr	r0, [pc, #28]	; (a44 <buzzer_tone_start+0x38>)
     a28:	4b07      	ldr	r3, [pc, #28]	; (a48 <buzzer_tone_start+0x3c>)
     a2a:	4798      	blx	r3
     a2c:	b280      	uxth	r0, r0
     a2e:	4b07      	ldr	r3, [pc, #28]	; (a4c <buzzer_tone_start+0x40>)
     a30:	8318      	strh	r0, [r3, #24]
	
	TC6->COUNT16.CTRLA.bit.ENABLE = 1;
     a32:	881a      	ldrh	r2, [r3, #0]
     a34:	2102      	movs	r1, #2
     a36:	430a      	orrs	r2, r1
     a38:	801a      	strh	r2, [r3, #0]
}
     a3a:	bd10      	pop	{r4, pc}
     a3c:	00005b8d 	.word	0x00005b8d
     a40:	200007c8 	.word	0x200007c8
     a44:	00005b8e 	.word	0x00005b8e
     a48:	00002081 	.word	0x00002081
     a4c:	42003800 	.word	0x42003800

00000a50 <buzzer_timer_tick>:

void buzzer_timer_tick() {
	if (current_tone.active && --current_tone.remaining_time_ms <= 0) {
     a50:	4b09      	ldr	r3, [pc, #36]	; (a78 <buzzer_timer_tick+0x28>)
     a52:	791b      	ldrb	r3, [r3, #4]
     a54:	2b00      	cmp	r3, #0
     a56:	d00e      	beq.n	a76 <buzzer_timer_tick+0x26>
     a58:	4a07      	ldr	r2, [pc, #28]	; (a78 <buzzer_timer_tick+0x28>)
     a5a:	8813      	ldrh	r3, [r2, #0]
     a5c:	3b01      	subs	r3, #1
     a5e:	b29b      	uxth	r3, r3
     a60:	8013      	strh	r3, [r2, #0]
     a62:	2b00      	cmp	r3, #0
     a64:	d107      	bne.n	a76 <buzzer_timer_tick+0x26>
		// TODO: Stop tone
		TC6->COUNT16.CTRLA.bit.ENABLE = 0;
     a66:	4a05      	ldr	r2, [pc, #20]	; (a7c <buzzer_timer_tick+0x2c>)
     a68:	8813      	ldrh	r3, [r2, #0]
     a6a:	2102      	movs	r1, #2
     a6c:	438b      	bics	r3, r1
     a6e:	8013      	strh	r3, [r2, #0]
		current_tone.active = 0;
     a70:	2200      	movs	r2, #0
     a72:	4b01      	ldr	r3, [pc, #4]	; (a78 <buzzer_timer_tick+0x28>)
     a74:	711a      	strb	r2, [r3, #4]
	}
     a76:	4770      	bx	lr
     a78:	200007c8 	.word	0x200007c8
     a7c:	42003800 	.word	0x42003800

00000a80 <ClocksInit>:
// Constants for Clock multiplexers
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void ClocksInit() {
	/* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
	NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     a80:	493a      	ldr	r1, [pc, #232]	; (b6c <ClocksInit+0xec>)
     a82:	684a      	ldr	r2, [r1, #4]
     a84:	231e      	movs	r3, #30
     a86:	439a      	bics	r2, r3
     a88:	3b1c      	subs	r3, #28
     a8a:	4313      	orrs	r3, r2
     a8c:	604b      	str	r3, [r1, #4]

	/* Turn on the digital interface clock */
	PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     a8e:	4a38      	ldr	r2, [pc, #224]	; (b70 <ClocksInit+0xf0>)
     a90:	6993      	ldr	r3, [r2, #24]
     a92:	2108      	movs	r1, #8
     a94:	430b      	orrs	r3, r1
     a96:	6193      	str	r3, [r2, #24]

	/* Enable XOSC32K clock (External on-board 32.768Hz oscillator) */
	SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     a98:	4b36      	ldr	r3, [pc, #216]	; (b74 <ClocksInit+0xf4>)
     a9a:	4a37      	ldr	r2, [pc, #220]	; (b78 <ClocksInit+0xf8>)
     a9c:	829a      	strh	r2, [r3, #20]
	SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
	SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
     a9e:	8a9a      	ldrh	r2, [r3, #20]
     aa0:	2102      	movs	r1, #2
     aa2:	430a      	orrs	r2, r1
     aa4:	829a      	strh	r2, [r3, #20]
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
     aa6:	4b33      	ldr	r3, [pc, #204]	; (b74 <ClocksInit+0xf4>)
     aa8:	68db      	ldr	r3, [r3, #12]
     aaa:	079b      	lsls	r3, r3, #30
     aac:	d5fb      	bpl.n	aa6 <ClocksInit+0x26>
	{
		/* Wait for oscillator stabilization */
	}

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
     aae:	2201      	movs	r2, #1
     ab0:	4b32      	ldr	r3, [pc, #200]	; (b7c <ClocksInit+0xfc>)
     ab2:	701a      	strb	r2, [r3, #0]
	while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     ab4:	4b31      	ldr	r3, [pc, #196]	; (b7c <ClocksInit+0xfc>)
     ab6:	781b      	ldrb	r3, [r3, #0]
     ab8:	07db      	lsls	r3, r3, #31
     aba:	d504      	bpl.n	ac6 <ClocksInit+0x46>
     abc:	4b2f      	ldr	r3, [pc, #188]	; (b7c <ClocksInit+0xfc>)
     abe:	785b      	ldrb	r3, [r3, #1]
     ac0:	b25b      	sxtb	r3, r3
     ac2:	2b00      	cmp	r3, #0
     ac4:	dbf6      	blt.n	ab4 <ClocksInit+0x34>
	{
		/* Wait for reset to complete */
	}

	/* Put XOSC32K as source of Generic Clock Generator 1 */
	GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
     ac6:	2201      	movs	r2, #1
     ac8:	4b2c      	ldr	r3, [pc, #176]	; (b7c <ClocksInit+0xfc>)
     aca:	609a      	str	r2, [r3, #8]
	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     acc:	4b2b      	ldr	r3, [pc, #172]	; (b7c <ClocksInit+0xfc>)
     ace:	785b      	ldrb	r3, [r3, #1]
     ad0:	b25b      	sxtb	r3, r3
     ad2:	2b00      	cmp	r3, #0
     ad4:	dbfa      	blt.n	acc <ClocksInit+0x4c>
	{
		/* Wait for synchronization */
	}

	/* Write Generic Clock Generator 1 configuration */
	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
     ad6:	4a2a      	ldr	r2, [pc, #168]	; (b80 <ClocksInit+0x100>)
     ad8:	4b28      	ldr	r3, [pc, #160]	; (b7c <ClocksInit+0xfc>)
     ada:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
	//                  GCLK_GENCTRL_OE | // Output clock to a pin for tests
	GCLK_GENCTRL_GENEN ;
	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     adc:	4b27      	ldr	r3, [pc, #156]	; (b7c <ClocksInit+0xfc>)
     ade:	785b      	ldrb	r3, [r3, #1]
     ae0:	b25b      	sxtb	r3, r3
     ae2:	2b00      	cmp	r3, #0
     ae4:	dbfa      	blt.n	adc <ClocksInit+0x5c>
	{
		/* Wait for synchronization */
	}

	/* Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference) */
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
     ae6:	2282      	movs	r2, #130	; 0x82
     ae8:	01d2      	lsls	r2, r2, #7
     aea:	4b24      	ldr	r3, [pc, #144]	; (b7c <ClocksInit+0xfc>)
     aec:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
	GCLK_CLKCTRL_CLKEN ;
	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     aee:	4b23      	ldr	r3, [pc, #140]	; (b7c <ClocksInit+0xfc>)
     af0:	785b      	ldrb	r3, [r3, #1]
     af2:	b25b      	sxtb	r3, r3
     af4:	2b00      	cmp	r3, #0
     af6:	dbfa      	blt.n	aee <ClocksInit+0x6e>
	{
		/* Wait for synchronization */
	}

	/* Enable DFLL48M clock */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     af8:	2202      	movs	r2, #2
     afa:	4b1e      	ldr	r3, [pc, #120]	; (b74 <ClocksInit+0xf4>)
     afc:	849a      	strh	r2, [r3, #36]	; 0x24
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     afe:	4b1d      	ldr	r3, [pc, #116]	; (b74 <ClocksInit+0xf4>)
     b00:	68db      	ldr	r3, [r3, #12]
     b02:	06db      	lsls	r3, r3, #27
     b04:	d5fb      	bpl.n	afe <ClocksInit+0x7e>
	{
		/* Wait for synchronization */
	}
	SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
     b06:	4a1f      	ldr	r2, [pc, #124]	; (b84 <ClocksInit+0x104>)
     b08:	4b1a      	ldr	r3, [pc, #104]	; (b74 <ClocksInit+0xf4>)
     b0a:	62da      	str	r2, [r3, #44]	; 0x2c
	SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
	SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     b0c:	4b19      	ldr	r3, [pc, #100]	; (b74 <ClocksInit+0xf4>)
     b0e:	68db      	ldr	r3, [r3, #12]
     b10:	06db      	lsls	r3, r3, #27
     b12:	d5fb      	bpl.n	b0c <ClocksInit+0x8c>
	{
		/* Wait for synchronization */
	}

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
     b14:	4a17      	ldr	r2, [pc, #92]	; (b74 <ClocksInit+0xf4>)
     b16:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     b18:	491b      	ldr	r1, [pc, #108]	; (b88 <ClocksInit+0x108>)
     b1a:	430b      	orrs	r3, r1
     b1c:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL_DFLLCTRL_WAITLOCK |
	SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     b1e:	4b15      	ldr	r3, [pc, #84]	; (b74 <ClocksInit+0xf4>)
     b20:	68db      	ldr	r3, [r3, #12]
     b22:	06db      	lsls	r3, r3, #27
     b24:	d5fb      	bpl.n	b1e <ClocksInit+0x9e>
	{
		/* Wait for synchronization */
	}

	/* Enable the DFLL */
	SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     b26:	4a13      	ldr	r2, [pc, #76]	; (b74 <ClocksInit+0xf4>)
     b28:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     b2a:	2102      	movs	r1, #2
     b2c:	430b      	orrs	r3, r1
     b2e:	b29b      	uxth	r3, r3
     b30:	8493      	strh	r3, [r2, #36]	; 0x24
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     b32:	4b10      	ldr	r3, [pc, #64]	; (b74 <ClocksInit+0xf4>)
     b34:	68db      	ldr	r3, [r3, #12]
     b36:	061b      	lsls	r3, r3, #24
     b38:	d5fb      	bpl.n	b32 <ClocksInit+0xb2>
	(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     b3a:	4b0e      	ldr	r3, [pc, #56]	; (b74 <ClocksInit+0xf4>)
     b3c:	68db      	ldr	r3, [r3, #12]
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     b3e:	065b      	lsls	r3, r3, #25
     b40:	d5f7      	bpl.n	b32 <ClocksInit+0xb2>
	{
		/* Wait for locks flags */
	}
	while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     b42:	4b0c      	ldr	r3, [pc, #48]	; (b74 <ClocksInit+0xf4>)
     b44:	68db      	ldr	r3, [r3, #12]
     b46:	06db      	lsls	r3, r3, #27
     b48:	d5fb      	bpl.n	b42 <ClocksInit+0xc2>
	{
		/* Wait for synchronization */
	}

	/* Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz. */
	GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
     b4a:	2200      	movs	r2, #0
     b4c:	4b0b      	ldr	r3, [pc, #44]	; (b7c <ClocksInit+0xfc>)
     b4e:	609a      	str	r2, [r3, #8]
	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     b50:	4b0a      	ldr	r3, [pc, #40]	; (b7c <ClocksInit+0xfc>)
     b52:	785b      	ldrb	r3, [r3, #1]
     b54:	b25b      	sxtb	r3, r3
     b56:	2b00      	cmp	r3, #0
     b58:	dbfa      	blt.n	b50 <ClocksInit+0xd0>
	{
		/* Wait for synchronization */
	}

	/* Write Generic Clock Generator 0 configuration */
	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
     b5a:	4a0c      	ldr	r2, [pc, #48]	; (b8c <ClocksInit+0x10c>)
     b5c:	4b07      	ldr	r3, [pc, #28]	; (b7c <ClocksInit+0xfc>)
     b5e:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
	//                  GCLK_GENCTRL_OE | // Output clock to a pin for tests
	GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
	GCLK_GENCTRL_GENEN ;
	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     b60:	4b06      	ldr	r3, [pc, #24]	; (b7c <ClocksInit+0xfc>)
     b62:	785b      	ldrb	r3, [r3, #1]
     b64:	b25b      	sxtb	r3, r3
     b66:	2b00      	cmp	r3, #0
     b68:	dbfa      	blt.n	b60 <ClocksInit+0xe0>
	{
		/* Wait for synchronization */
	}
}
     b6a:	4770      	bx	lr
     b6c:	41004000 	.word	0x41004000
     b70:	40000400 	.word	0x40000400
     b74:	40000800 	.word	0x40000800
     b78:	0000060c 	.word	0x0000060c
     b7c:	40000c00 	.word	0x40000c00
     b80:	00010501 	.word	0x00010501
     b84:	7dff05b9 	.word	0x7dff05b9
     b88:	00000a04 	.word	0x00000a04
     b8c:	00030700 	.word	0x00030700

00000b90 <DMA_init>:

void DMA_init(void)
{
	static int initialized = 0;
	
	if (!initialized)
     b90:	4b15      	ldr	r3, [pc, #84]	; (be8 <DMA_init+0x58>)
     b92:	681b      	ldr	r3, [r3, #0]
     b94:	2b00      	cmp	r3, #0
     b96:	d126      	bne.n	be6 <DMA_init+0x56>
	{
		/* enable peripheral clock */
		PM->APBBMASK.bit.DMAC_ = 1;
     b98:	4b14      	ldr	r3, [pc, #80]	; (bec <DMA_init+0x5c>)
     b9a:	69d9      	ldr	r1, [r3, #28]
     b9c:	2210      	movs	r2, #16
     b9e:	430a      	orrs	r2, r1
     ba0:	61da      	str	r2, [r3, #28]
		
		/* enable AHB master clock */
		PM->AHBMASK.bit.DMAC_ = 1;
     ba2:	6959      	ldr	r1, [r3, #20]
     ba4:	2220      	movs	r2, #32
     ba6:	430a      	orrs	r2, r1
     ba8:	615a      	str	r2, [r3, #20]

		/* configure DMA controller */
		DMAC->BASEADDR.reg = (uint32_t)descriptor_section;                    // descriptor memory section start
     baa:	4a0f      	ldr	r2, [pc, #60]	; (be8 <DMA_init+0x58>)
     bac:	0011      	movs	r1, r2
     bae:	3110      	adds	r1, #16
     bb0:	4b0f      	ldr	r3, [pc, #60]	; (bf0 <DMA_init+0x60>)
     bb2:	6359      	str	r1, [r3, #52]	; 0x34
		DMAC->WRBADDR.reg = (uint32_t)write_back_section;                     // descriptor write-back memory section start
     bb4:	0011      	movs	r1, r2
     bb6:	3130      	adds	r1, #48	; 0x30
     bb8:	6399      	str	r1, [r3, #56]	; 0x38
		DMAC->CTRL.bit.LVLEN0 = 1;                                            // enable level 0 priority
     bba:	8818      	ldrh	r0, [r3, #0]
     bbc:	2180      	movs	r1, #128	; 0x80
     bbe:	0049      	lsls	r1, r1, #1
     bc0:	4301      	orrs	r1, r0
     bc2:	8019      	strh	r1, [r3, #0]
		DMAC->CTRL.bit.LVLEN1 = 1;                                            // enable level 1 priority
     bc4:	8818      	ldrh	r0, [r3, #0]
     bc6:	2180      	movs	r1, #128	; 0x80
     bc8:	0089      	lsls	r1, r1, #2
     bca:	4301      	orrs	r1, r0
     bcc:	8019      	strh	r1, [r3, #0]
		DMAC->CTRL.bit.LVLEN2 = 1;                                            // enable level 2 priority
     bce:	8818      	ldrh	r0, [r3, #0]
     bd0:	2180      	movs	r1, #128	; 0x80
     bd2:	00c9      	lsls	r1, r1, #3
     bd4:	4301      	orrs	r1, r0
     bd6:	8019      	strh	r1, [r3, #0]
		DMAC->CTRL.bit.LVLEN3 = 1;                                            // enable level 3 priority
     bd8:	8818      	ldrh	r0, [r3, #0]
     bda:	2180      	movs	r1, #128	; 0x80
     bdc:	0109      	lsls	r1, r1, #4
     bde:	4301      	orrs	r1, r0
     be0:	8019      	strh	r1, [r3, #0]
		
		/* DMA is initialized */
		initialized = 1;
     be2:	2301      	movs	r3, #1
     be4:	6013      	str	r3, [r2, #0]
	}
}
     be6:	4770      	bx	lr
     be8:	200007d0 	.word	0x200007d0
     bec:	40000400 	.word	0x40000400
     bf0:	41004800 	.word	0x41004800

00000bf4 <DMA_add_channel>:

/* add the first least significant free channel with its descriptor (TODO: implement linked descriptors) */
void DMA_add_channel(int source, DmacDescriptor *descriptor)
{
     bf4:	b570      	push	{r4, r5, r6, lr}
     bf6:	0004      	movs	r4, r0
	/* disable DMA if enabled */
	if (DMAC->CTRL.bit.DMAENABLE)
     bf8:	4b1f      	ldr	r3, [pc, #124]	; (c78 <DMA_add_channel+0x84>)
     bfa:	881b      	ldrh	r3, [r3, #0]
     bfc:	079b      	lsls	r3, r3, #30
     bfe:	d504      	bpl.n	c0a <DMA_add_channel+0x16>
		DMAC->CTRL.bit.DMAENABLE = 0;
     c00:	4a1d      	ldr	r2, [pc, #116]	; (c78 <DMA_add_channel+0x84>)
     c02:	8813      	ldrh	r3, [r2, #0]
     c04:	2002      	movs	r0, #2
     c06:	4383      	bics	r3, r0
     c08:	8013      	strh	r3, [r2, #0]
	while (DMAC->CTRL.bit.DMAENABLE)
     c0a:	4b1b      	ldr	r3, [pc, #108]	; (c78 <DMA_add_channel+0x84>)
     c0c:	881b      	ldrh	r3, [r3, #0]
     c0e:	079b      	lsls	r3, r3, #30
     c10:	d4fb      	bmi.n	c0a <DMA_add_channel+0x16>
		;
		
	/* add transfer descriptor to transfer descriptor section (before enabling channel!) */
	memcpy(descriptor_section + used_channels * sizeof(DmacDescriptor), descriptor, sizeof(DmacDescriptor));
     c12:	4e1a      	ldr	r6, [pc, #104]	; (c7c <DMA_add_channel+0x88>)
     c14:	6d35      	ldr	r5, [r6, #80]	; 0x50
     c16:	0030      	movs	r0, r6
     c18:	3010      	adds	r0, #16
     c1a:	022b      	lsls	r3, r5, #8
     c1c:	18c0      	adds	r0, r0, r3
     c1e:	2210      	movs	r2, #16
     c20:	4b17      	ldr	r3, [pc, #92]	; (c80 <DMA_add_channel+0x8c>)
     c22:	4798      	blx	r3
		
	/* configure and enable first least significant free channel */
	DMAC->CHID.bit.ID = used_channels++;                                  // use first free channel 
     c24:	1c6b      	adds	r3, r5, #1
     c26:	6533      	str	r3, [r6, #80]	; 0x50
     c28:	4b13      	ldr	r3, [pc, #76]	; (c78 <DMA_add_channel+0x84>)
     c2a:	203f      	movs	r0, #63	; 0x3f
     c2c:	5c1a      	ldrb	r2, [r3, r0]
     c2e:	210f      	movs	r1, #15
     c30:	4029      	ands	r1, r5
     c32:	250f      	movs	r5, #15
     c34:	43aa      	bics	r2, r5
     c36:	430a      	orrs	r2, r1
     c38:	541a      	strb	r2, [r3, r0]
	DMAC->CHCTRLB.bit.LVL = 0x00;                                         // channel priority level 0
     c3a:	6c59      	ldr	r1, [r3, #68]	; 0x44
     c3c:	2260      	movs	r2, #96	; 0x60
     c3e:	4391      	bics	r1, r2
     c40:	6459      	str	r1, [r3, #68]	; 0x44
	DMAC->CHCTRLB.bit.TRIGACT = 0x02;                                     // one trigger each beat transfer
     c42:	6c59      	ldr	r1, [r3, #68]	; 0x44
     c44:	4a0f      	ldr	r2, [pc, #60]	; (c84 <DMA_add_channel+0x90>)
     c46:	4011      	ands	r1, r2
     c48:	2280      	movs	r2, #128	; 0x80
     c4a:	0412      	lsls	r2, r2, #16
     c4c:	430a      	orrs	r2, r1
     c4e:	645a      	str	r2, [r3, #68]	; 0x44
	DMAC->CHCTRLB.bit.TRIGSRC = source;                                   // select trigger source
     c50:	4020      	ands	r0, r4
     c52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     c54:	0200      	lsls	r0, r0, #8
     c56:	490c      	ldr	r1, [pc, #48]	; (c88 <DMA_add_channel+0x94>)
     c58:	400a      	ands	r2, r1
     c5a:	4310      	orrs	r0, r2
     c5c:	6458      	str	r0, [r3, #68]	; 0x44
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;                             // enable channel 
     c5e:	2140      	movs	r1, #64	; 0x40
     c60:	5c5a      	ldrb	r2, [r3, r1]
     c62:	2402      	movs	r4, #2
     c64:	4322      	orrs	r2, r4
     c66:	b2d2      	uxtb	r2, r2
     c68:	545a      	strb	r2, [r3, r1]
		
	/* enable DMA block transfer complete interrupt */
	DMAC->CHINTENSET.bit.TCMPL = 1;                                       // enable DMA block transfer complete interrupt
     c6a:	204d      	movs	r0, #77	; 0x4d
     c6c:	5c1a      	ldrb	r2, [r3, r0]
     c6e:	4322      	orrs	r2, r4
     c70:	541a      	strb	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c72:	4b06      	ldr	r3, [pc, #24]	; (c8c <DMA_add_channel+0x98>)
     c74:	6019      	str	r1, [r3, #0]
	NVIC_EnableIRQ(DMAC_IRQn);                                            // enable DMA interrupt in NVIC
}
     c76:	bd70      	pop	{r4, r5, r6, pc}
     c78:	41004800 	.word	0x41004800
     c7c:	200007d0 	.word	0x200007d0
     c80:	00003e21 	.word	0x00003e21
     c84:	ff3fffff 	.word	0xff3fffff
     c88:	ffffc0ff 	.word	0xffffc0ff
     c8c:	e000e100 	.word	0xe000e100

00000c90 <DMA_enable>:

void DMA_enable(void)
{
	/* enable DMA controller */
	DMAC->CTRL.bit.DMAENABLE = 1;
     c90:	4a02      	ldr	r2, [pc, #8]	; (c9c <DMA_enable+0xc>)
     c92:	8813      	ldrh	r3, [r2, #0]
     c94:	2102      	movs	r1, #2
     c96:	430b      	orrs	r3, r1
     c98:	8013      	strh	r3, [r2, #0]
}
     c9a:	4770      	bx	lr
     c9c:	41004800 	.word	0x41004800

00000ca0 <DMAC_Handler>:

void DMAC_Handler(void)
{
     ca0:	b530      	push	{r4, r5, lr}
	//static int count;
	for (int channel = 0 ; channel < used_channels ; channel++)  // check interrupt for every registered channel
     ca2:	2200      	movs	r2, #0
     ca4:	e000      	b.n	ca8 <DMAC_Handler+0x8>
     ca6:	3201      	adds	r2, #1
     ca8:	4b12      	ldr	r3, [pc, #72]	; (cf4 <DMAC_Handler+0x54>)
     caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
     cac:	429a      	cmp	r2, r3
     cae:	da1f      	bge.n	cf0 <DMAC_Handler+0x50>
	{
		DMAC->CHID.bit.ID = channel;      
     cb0:	4911      	ldr	r1, [pc, #68]	; (cf8 <DMAC_Handler+0x58>)
     cb2:	243f      	movs	r4, #63	; 0x3f
     cb4:	5d0b      	ldrb	r3, [r1, r4]
     cb6:	200f      	movs	r0, #15
     cb8:	4010      	ands	r0, r2
     cba:	250f      	movs	r5, #15
     cbc:	43ab      	bics	r3, r5
     cbe:	4303      	orrs	r3, r0
     cc0:	550b      	strb	r3, [r1, r4]
		if (DMAC->CHINTFLAG.bit.TCMPL && DMAC->CHINTENSET.bit.TCMPL)
     cc2:	234e      	movs	r3, #78	; 0x4e
     cc4:	5ccb      	ldrb	r3, [r1, r3]
     cc6:	079b      	lsls	r3, r3, #30
     cc8:	d5ed      	bpl.n	ca6 <DMAC_Handler+0x6>
     cca:	234d      	movs	r3, #77	; 0x4d
     ccc:	5ccb      	ldrb	r3, [r1, r3]
     cce:	079b      	lsls	r3, r3, #30
     cd0:	d5e9      	bpl.n	ca6 <DMAC_Handler+0x6>
		{
			if (DMAC->CHID.bit.ID == 0x00)   // handle SPI transfer complete interrupt
     cd2:	233f      	movs	r3, #63	; 0x3f
     cd4:	5ccb      	ldrb	r3, [r1, r3]
     cd6:	071b      	lsls	r3, r3, #28
     cd8:	d1e5      	bne.n	ca6 <DMAC_Handler+0x6>
			{
				DMAC->CHINTFLAG.bit.TCMPL = 1;                 // acknowledge interrupt
     cda:	334e      	adds	r3, #78	; 0x4e
     cdc:	5cc8      	ldrb	r0, [r1, r3]
     cde:	2402      	movs	r4, #2
     ce0:	4320      	orrs	r0, r4
     ce2:	54c8      	strb	r0, [r1, r3]
				DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;      // re-enable DMA channel
     ce4:	2040      	movs	r0, #64	; 0x40
     ce6:	5c0b      	ldrb	r3, [r1, r0]
     ce8:	4323      	orrs	r3, r4
     cea:	b2db      	uxtb	r3, r3
     cec:	540b      	strb	r3, [r1, r0]
     cee:	e7da      	b.n	ca6 <DMAC_Handler+0x6>
			}
		}
	}
}
     cf0:	bd30      	pop	{r4, r5, pc}
     cf2:	46c0      	nop			; (mov r8, r8)
     cf4:	200007d0 	.word	0x200007d0
     cf8:	41004800 	.word	0x41004800

00000cfc <gpio_set_pin>:
	} else if (port == PORTB) {
		REG_PORT_OUTTGL1 = 1 << pin;
	}
}
void gpio_set_pin(unsigned int port, unsigned long pin, int val) {
	if (port == PORTA) {
     cfc:	2800      	cmp	r0, #0
     cfe:	d10b      	bne.n	d18 <gpio_set_pin+0x1c>
		if (val)
     d00:	2a00      	cmp	r2, #0
     d02:	d004      	beq.n	d0e <gpio_set_pin+0x12>
			REG_PORT_OUTSET0 = 1 << pin;
     d04:	2301      	movs	r3, #1
     d06:	408b      	lsls	r3, r1
     d08:	4a0b      	ldr	r2, [pc, #44]	; (d38 <gpio_set_pin+0x3c>)
     d0a:	6013      	str	r3, [r2, #0]
     d0c:	e006      	b.n	d1c <gpio_set_pin+0x20>
		else
			REG_PORT_OUTCLR0 = 1 << pin;
     d0e:	2301      	movs	r3, #1
     d10:	408b      	lsls	r3, r1
     d12:	4a0a      	ldr	r2, [pc, #40]	; (d3c <gpio_set_pin+0x40>)
     d14:	6013      	str	r3, [r2, #0]
     d16:	e001      	b.n	d1c <gpio_set_pin+0x20>
	} else if (port == PORTB) {
     d18:	2801      	cmp	r0, #1
     d1a:	d000      	beq.n	d1e <gpio_set_pin+0x22>
		if (val)
			REG_PORT_OUTSET1 = 1 << pin;
		else
			REG_PORT_OUTCLR1 = 1 << pin;
	}
}
     d1c:	4770      	bx	lr
		if (val)
     d1e:	2a00      	cmp	r2, #0
     d20:	d104      	bne.n	d2c <gpio_set_pin+0x30>
			REG_PORT_OUTCLR1 = 1 << pin;
     d22:	2301      	movs	r3, #1
     d24:	408b      	lsls	r3, r1
     d26:	4a06      	ldr	r2, [pc, #24]	; (d40 <gpio_set_pin+0x44>)
     d28:	6013      	str	r3, [r2, #0]
}
     d2a:	e7f7      	b.n	d1c <gpio_set_pin+0x20>
			REG_PORT_OUTSET1 = 1 << pin;
     d2c:	2301      	movs	r3, #1
     d2e:	408b      	lsls	r3, r1
     d30:	4a04      	ldr	r2, [pc, #16]	; (d44 <gpio_set_pin+0x48>)
     d32:	6013      	str	r3, [r2, #0]
     d34:	e7f2      	b.n	d1c <gpio_set_pin+0x20>
     d36:	46c0      	nop			; (mov r8, r8)
     d38:	41004418 	.word	0x41004418
     d3c:	41004414 	.word	0x41004414
     d40:	41004494 	.word	0x41004494
     d44:	41004498 	.word	0x41004498

00000d48 <gpio_set_pin_dir>:

void gpio_set_pin_dir(unsigned int port, unsigned long pin, int val) {
	
	if (port == PORTA) {
     d48:	2800      	cmp	r0, #0
     d4a:	d11f      	bne.n	d8c <gpio_set_pin_dir+0x44>
		if (val == GPIO_DIR_OUT) {
     d4c:	2a01      	cmp	r2, #1
     d4e:	d00e      	beq.n	d6e <gpio_set_pin_dir+0x26>
			REG_PORT_DIRSET0 = 1 << pin;
			PORT->Group[port].PINCFG[pin].bit.INEN = 0;
		} else {
			REG_PORT_DIRCLR0 = 1 << pin;
     d50:	2301      	movs	r3, #1
     d52:	408b      	lsls	r3, r1
     d54:	4a1e      	ldr	r2, [pc, #120]	; (dd0 <gpio_set_pin_dir+0x88>)
     d56:	6013      	str	r3, [r2, #0]
			PORT->Group[port].PINCFG[pin].bit.INEN = 1;
     d58:	01c0      	lsls	r0, r0, #7
     d5a:	4b1e      	ldr	r3, [pc, #120]	; (dd4 <gpio_set_pin_dir+0x8c>)
     d5c:	469c      	mov	ip, r3
     d5e:	4460      	add	r0, ip
     d60:	1841      	adds	r1, r0, r1
     d62:	3140      	adds	r1, #64	; 0x40
     d64:	780b      	ldrb	r3, [r1, #0]
     d66:	2202      	movs	r2, #2
     d68:	4313      	orrs	r3, r2
     d6a:	700b      	strb	r3, [r1, #0]
			REG_PORT_DIRCLR1 = 1 << pin;
			PORT->Group[port].PINCFG[pin].bit.INEN = 1;
		}
	}

}
     d6c:	4770      	bx	lr
			REG_PORT_DIRSET0 = 1 << pin;
     d6e:	2301      	movs	r3, #1
     d70:	408b      	lsls	r3, r1
     d72:	4a19      	ldr	r2, [pc, #100]	; (dd8 <gpio_set_pin_dir+0x90>)
     d74:	6013      	str	r3, [r2, #0]
			PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     d76:	01c0      	lsls	r0, r0, #7
     d78:	4b16      	ldr	r3, [pc, #88]	; (dd4 <gpio_set_pin_dir+0x8c>)
     d7a:	469c      	mov	ip, r3
     d7c:	4460      	add	r0, ip
     d7e:	1841      	adds	r1, r0, r1
     d80:	3140      	adds	r1, #64	; 0x40
     d82:	780b      	ldrb	r3, [r1, #0]
     d84:	2202      	movs	r2, #2
     d86:	4393      	bics	r3, r2
     d88:	700b      	strb	r3, [r1, #0]
     d8a:	e7ef      	b.n	d6c <gpio_set_pin_dir+0x24>
	} else if (port == PORTB) {
     d8c:	2801      	cmp	r0, #1
     d8e:	d1ed      	bne.n	d6c <gpio_set_pin_dir+0x24>
		if (val == GPIO_DIR_OUT) {
     d90:	2a01      	cmp	r2, #1
     d92:	d00e      	beq.n	db2 <gpio_set_pin_dir+0x6a>
			REG_PORT_DIRCLR1 = 1 << pin;
     d94:	2301      	movs	r3, #1
     d96:	408b      	lsls	r3, r1
     d98:	4a10      	ldr	r2, [pc, #64]	; (ddc <gpio_set_pin_dir+0x94>)
     d9a:	6013      	str	r3, [r2, #0]
			PORT->Group[port].PINCFG[pin].bit.INEN = 1;
     d9c:	01c0      	lsls	r0, r0, #7
     d9e:	4b0d      	ldr	r3, [pc, #52]	; (dd4 <gpio_set_pin_dir+0x8c>)
     da0:	469c      	mov	ip, r3
     da2:	4460      	add	r0, ip
     da4:	1841      	adds	r1, r0, r1
     da6:	3140      	adds	r1, #64	; 0x40
     da8:	780b      	ldrb	r3, [r1, #0]
     daa:	2202      	movs	r2, #2
     dac:	4313      	orrs	r3, r2
     dae:	700b      	strb	r3, [r1, #0]
}
     db0:	e7dc      	b.n	d6c <gpio_set_pin_dir+0x24>
			REG_PORT_DIRSET1 = 1 << pin;
     db2:	2301      	movs	r3, #1
     db4:	408b      	lsls	r3, r1
     db6:	4a0a      	ldr	r2, [pc, #40]	; (de0 <gpio_set_pin_dir+0x98>)
     db8:	6013      	str	r3, [r2, #0]
			PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     dba:	01c0      	lsls	r0, r0, #7
     dbc:	4b05      	ldr	r3, [pc, #20]	; (dd4 <gpio_set_pin_dir+0x8c>)
     dbe:	469c      	mov	ip, r3
     dc0:	4460      	add	r0, ip
     dc2:	1841      	adds	r1, r0, r1
     dc4:	3140      	adds	r1, #64	; 0x40
     dc6:	780b      	ldrb	r3, [r1, #0]
     dc8:	2202      	movs	r2, #2
     dca:	4393      	bics	r3, r2
     dcc:	700b      	strb	r3, [r1, #0]
     dce:	e7cd      	b.n	d6c <gpio_set_pin_dir+0x24>
     dd0:	41004404 	.word	0x41004404
     dd4:	41004400 	.word	0x41004400
     dd8:	41004408 	.word	0x41004408
     ddc:	41004484 	.word	0x41004484
     de0:	41004488 	.word	0x41004488

00000de4 <gpio_set_pin_drvstr>:
void gpio_set_pin_drvstr(unsigned int port, unsigned long pin, int val) {
	if (port != PORTA && port != PORTB) {
     de4:	2801      	cmp	r0, #1
     de6:	d900      	bls.n	dea <gpio_set_pin_drvstr+0x6>
		return;
	}
	PORT->Group[port].PINCFG[pin].bit.DRVSTR = (val ? 1 : 0);
}
     de8:	4770      	bx	lr
	PORT->Group[port].PINCFG[pin].bit.DRVSTR = (val ? 1 : 0);
     dea:	1e53      	subs	r3, r2, #1
     dec:	419a      	sbcs	r2, r3
     dee:	01c0      	lsls	r0, r0, #7
     df0:	4b05      	ldr	r3, [pc, #20]	; (e08 <gpio_set_pin_drvstr+0x24>)
     df2:	469c      	mov	ip, r3
     df4:	4460      	add	r0, ip
     df6:	1841      	adds	r1, r0, r1
     df8:	3140      	adds	r1, #64	; 0x40
     dfa:	780b      	ldrb	r3, [r1, #0]
     dfc:	0192      	lsls	r2, r2, #6
     dfe:	2040      	movs	r0, #64	; 0x40
     e00:	4383      	bics	r3, r0
     e02:	431a      	orrs	r2, r3
     e04:	700a      	strb	r2, [r1, #0]
     e06:	e7ef      	b.n	de8 <gpio_set_pin_drvstr+0x4>
     e08:	41004400 	.word	0x41004400

00000e0c <gpio_set_pin_pull>:
void gpio_set_pin_pull(unsigned int port, unsigned long pin, int val) {
     e0c:	b510      	push	{r4, lr}
	if (port != PORTA && port != PORTB) {
     e0e:	2801      	cmp	r0, #1
     e10:	d900      	bls.n	e14 <gpio_set_pin_pull+0x8>
		PORT->Group[port].PINCFG[pin].bit.PULLEN = 1;
		PORT->Group[port].OUTSET.reg = 1 << pin;
	} else {
		PORT->Group[port].PINCFG[pin].bit.PULLEN = 0;
	}
}
     e12:	bd10      	pop	{r4, pc}
	if (val == GPIO_PULL_DOWN) {
     e14:	2a02      	cmp	r2, #2
     e16:	d00c      	beq.n	e32 <gpio_set_pin_pull+0x26>
	} else if (val == GPIO_PULL_UP) {
     e18:	2a01      	cmp	r2, #1
     e1a:	d018      	beq.n	e4e <gpio_set_pin_pull+0x42>
		PORT->Group[port].PINCFG[pin].bit.PULLEN = 0;
     e1c:	01c0      	lsls	r0, r0, #7
     e1e:	4b13      	ldr	r3, [pc, #76]	; (e6c <gpio_set_pin_pull+0x60>)
     e20:	469c      	mov	ip, r3
     e22:	4460      	add	r0, ip
     e24:	1841      	adds	r1, r0, r1
     e26:	3140      	adds	r1, #64	; 0x40
     e28:	780b      	ldrb	r3, [r1, #0]
     e2a:	2204      	movs	r2, #4
     e2c:	4393      	bics	r3, r2
     e2e:	700b      	strb	r3, [r1, #0]
     e30:	e7ef      	b.n	e12 <gpio_set_pin_pull+0x6>
		PORT->Group[port].PINCFG[pin].bit.PULLEN = 1;
     e32:	01c0      	lsls	r0, r0, #7
     e34:	4b0d      	ldr	r3, [pc, #52]	; (e6c <gpio_set_pin_pull+0x60>)
     e36:	469c      	mov	ip, r3
     e38:	4460      	add	r0, ip
     e3a:	1843      	adds	r3, r0, r1
     e3c:	3340      	adds	r3, #64	; 0x40
     e3e:	781a      	ldrb	r2, [r3, #0]
     e40:	2404      	movs	r4, #4
     e42:	4322      	orrs	r2, r4
     e44:	701a      	strb	r2, [r3, #0]
		PORT->Group[port].OUTCLR.reg = 1 << pin;
     e46:	2301      	movs	r3, #1
     e48:	408b      	lsls	r3, r1
     e4a:	6143      	str	r3, [r0, #20]
     e4c:	e7e1      	b.n	e12 <gpio_set_pin_pull+0x6>
		PORT->Group[port].PINCFG[pin].bit.PULLEN = 1;
     e4e:	01c0      	lsls	r0, r0, #7
     e50:	4b06      	ldr	r3, [pc, #24]	; (e6c <gpio_set_pin_pull+0x60>)
     e52:	469c      	mov	ip, r3
     e54:	4460      	add	r0, ip
     e56:	1843      	adds	r3, r0, r1
     e58:	3340      	adds	r3, #64	; 0x40
     e5a:	781a      	ldrb	r2, [r3, #0]
     e5c:	2404      	movs	r4, #4
     e5e:	4322      	orrs	r2, r4
     e60:	701a      	strb	r2, [r3, #0]
		PORT->Group[port].OUTSET.reg = 1 << pin;
     e62:	2301      	movs	r3, #1
     e64:	408b      	lsls	r3, r1
     e66:	6183      	str	r3, [r0, #24]
     e68:	e7d3      	b.n	e12 <gpio_set_pin_pull+0x6>
     e6a:	46c0      	nop			; (mov r8, r8)
     e6c:	41004400 	.word	0x41004400

00000e70 <gpio_read_pin>:


int gpio_read_pin(unsigned int port, unsigned long pin) {
	if (port == PORTA) {
     e70:	2800      	cmp	r0, #0
     e72:	d009      	beq.n	e88 <gpio_read_pin+0x18>
		return (PORT->Group[0].IN.reg & (1 << pin)) ? 1 : 0;
	} else if (port == PORTB) {
     e74:	2801      	cmp	r0, #1
     e76:	d10f      	bne.n	e98 <gpio_read_pin+0x28>
		return (PORT->Group[1].IN.reg & (1 << pin)) ? 1 : 0;
     e78:	23a0      	movs	r3, #160	; 0xa0
     e7a:	4a09      	ldr	r2, [pc, #36]	; (ea0 <gpio_read_pin+0x30>)
     e7c:	58d3      	ldr	r3, [r2, r3]
     e7e:	4088      	lsls	r0, r1
     e80:	4018      	ands	r0, r3
     e82:	1e43      	subs	r3, r0, #1
     e84:	4198      	sbcs	r0, r3
	}
	return -1;
}
     e86:	4770      	bx	lr
		return (PORT->Group[0].IN.reg & (1 << pin)) ? 1 : 0;
     e88:	4b05      	ldr	r3, [pc, #20]	; (ea0 <gpio_read_pin+0x30>)
     e8a:	6a1b      	ldr	r3, [r3, #32]
     e8c:	3001      	adds	r0, #1
     e8e:	4088      	lsls	r0, r1
     e90:	4018      	ands	r0, r3
     e92:	1e43      	subs	r3, r0, #1
     e94:	4198      	sbcs	r0, r3
     e96:	e7f6      	b.n	e86 <gpio_read_pin+0x16>
	return -1;
     e98:	2001      	movs	r0, #1
     e9a:	4240      	negs	r0, r0
     e9c:	e7f3      	b.n	e86 <gpio_read_pin+0x16>
     e9e:	46c0      	nop			; (mov r8, r8)
     ea0:	41004400 	.word	0x41004400

00000ea4 <fplights_init>:
#define L_CPX_RE	(1 << 3)
#define L_CPX_IM	(1 << 2)
#define L_CPX_R		(1 << 1)
#define L_CPX_THETA (1 << 0)

void fplights_init() {
     ea4:	b510      	push	{r4, lr}
	gpio_set_pin_dir(GPIO(FPLIGHT_MOSI), GPIO_DIR_OUT);
     ea6:	2201      	movs	r2, #1
     ea8:	210e      	movs	r1, #14
     eaa:	2001      	movs	r0, #1
     eac:	4c0f      	ldr	r4, [pc, #60]	; (eec <fplights_init+0x48>)
     eae:	47a0      	blx	r4
	gpio_set_pin_dir(GPIO(FPLIGHT_SCK), GPIO_DIR_OUT);
     eb0:	2201      	movs	r2, #1
     eb2:	210f      	movs	r1, #15
     eb4:	2001      	movs	r0, #1
     eb6:	47a0      	blx	r4
	gpio_set_pin_dir(GPIO(FPLIGHT_LATCH), GPIO_DIR_OUT);
     eb8:	2201      	movs	r2, #1
     eba:	211b      	movs	r1, #27
     ebc:	2000      	movs	r0, #0
     ebe:	47a0      	blx	r4
	gpio_set_pin_dir(GPIO(FPLIGHT_OE), GPIO_DIR_OUT);
     ec0:	2201      	movs	r2, #1
     ec2:	211c      	movs	r1, #28
     ec4:	2000      	movs	r0, #0
     ec6:	47a0      	blx	r4
	gpio_set_pin(GPIO(FPLIGHT_MOSI), 0);
     ec8:	2200      	movs	r2, #0
     eca:	210e      	movs	r1, #14
     ecc:	2001      	movs	r0, #1
     ece:	4c08      	ldr	r4, [pc, #32]	; (ef0 <fplights_init+0x4c>)
     ed0:	47a0      	blx	r4
	gpio_set_pin(GPIO(FPLIGHT_SCK), 0);
     ed2:	2200      	movs	r2, #0
     ed4:	210f      	movs	r1, #15
     ed6:	2001      	movs	r0, #1
     ed8:	47a0      	blx	r4
	gpio_set_pin(GPIO(FPLIGHT_LATCH), 0);
     eda:	2200      	movs	r2, #0
     edc:	211b      	movs	r1, #27
     ede:	2000      	movs	r0, #0
     ee0:	47a0      	blx	r4
	gpio_set_pin(GPIO(FPLIGHT_OE), 1);
     ee2:	2201      	movs	r2, #1
     ee4:	211c      	movs	r1, #28
     ee6:	2000      	movs	r0, #0
     ee8:	47a0      	blx	r4
}
     eea:	bd10      	pop	{r4, pc}
     eec:	00000d49 	.word	0x00000d49
     ef0:	00000cfd 	.word	0x00000cfd

00000ef4 <fplights_show>:

void fplights_show(const sys_state_t *sys_state) {
     ef4:	b570      	push	{r4, r5, r6, lr}
	uint8_t lights = 0;
	switch (sys_state->sys.angle_units) {
     ef6:	7883      	ldrb	r3, [r0, #2]
     ef8:	2b01      	cmp	r3, #1
     efa:	d01b      	beq.n	f34 <fplights_show+0x40>
     efc:	2b00      	cmp	r3, #0
     efe:	d01d      	beq.n	f3c <fplights_show+0x48>
     f00:	2b02      	cmp	r3, #2
     f02:	d019      	beq.n	f38 <fplights_show+0x44>
	uint8_t lights = 0;
     f04:	2500      	movs	r5, #0
		break;
		case au_grad:
		lights |= (L_GRAD);
		break;
	}
	lights |= sys_state->ui.view_is_real ? L_REAL : 0;
     f06:	68c1      	ldr	r1, [r0, #12]
     f08:	2900      	cmp	r1, #0
     f0a:	d019      	beq.n	f40 <fplights_show+0x4c>
     f0c:	2310      	movs	r3, #16
     f0e:	432b      	orrs	r3, r5
     f10:	b25b      	sxtb	r3, r3
     f12:	b2dd      	uxtb	r5, r3
	switch (sys_state->ui.cpx_view) {
     f14:	7a42      	ldrb	r2, [r0, #9]
     f16:	2a01      	cmp	r2, #1
     f18:	d01c      	beq.n	f54 <fplights_show+0x60>
     f1a:	2a00      	cmp	r2, #0
     f1c:	d012      	beq.n	f44 <fplights_show+0x50>
     f1e:	2a02      	cmp	r2, #2
     f20:	d01c      	beq.n	f5c <fplights_show+0x68>
     f22:	2a03      	cmp	r2, #3
     f24:	d01e      	beq.n	f64 <fplights_show+0x70>
		break;
		case cv_theta:
			lights |= L_CPX_THETA;
		break;
	}
	gpio_set_pin(GPIO(FPLIGHT_OE), 1);
     f26:	2201      	movs	r2, #1
     f28:	211c      	movs	r1, #28
     f2a:	2000      	movs	r0, #0
     f2c:	4b2b      	ldr	r3, [pc, #172]	; (fdc <fplights_show+0xe8>)
     f2e:	4798      	blx	r3

	for (int i = 0; i < 8; i++) {
     f30:	2600      	movs	r6, #0
     f32:	e035      	b.n	fa0 <fplights_show+0xac>
		lights |= (L_RAD);
     f34:	2540      	movs	r5, #64	; 0x40
		break;
     f36:	e7e6      	b.n	f06 <fplights_show+0x12>
		lights |= (L_GRAD);
     f38:	2520      	movs	r5, #32
		break;
     f3a:	e7e4      	b.n	f06 <fplights_show+0x12>
		lights |= (L_DEG);
     f3c:	2580      	movs	r5, #128	; 0x80
     f3e:	e7e2      	b.n	f06 <fplights_show+0x12>
	lights |= sys_state->ui.view_is_real ? L_REAL : 0;
     f40:	2300      	movs	r3, #0
     f42:	e7e4      	b.n	f0e <fplights_show+0x1a>
			lights |= sys_state->ui.view_is_real ? L_REAL : L_CPX_RE;
     f44:	2900      	cmp	r1, #0
     f46:	d003      	beq.n	f50 <fplights_show+0x5c>
     f48:	2510      	movs	r5, #16
     f4a:	431d      	orrs	r5, r3
     f4c:	b2ed      	uxtb	r5, r5
		break;
     f4e:	e7ea      	b.n	f26 <fplights_show+0x32>
			lights |= sys_state->ui.view_is_real ? L_REAL : L_CPX_RE;
     f50:	2508      	movs	r5, #8
     f52:	e7fa      	b.n	f4a <fplights_show+0x56>
			lights |= L_CPX_IM;
     f54:	2304      	movs	r3, #4
     f56:	431d      	orrs	r5, r3
     f58:	b2ed      	uxtb	r5, r5
		break;
     f5a:	e7e4      	b.n	f26 <fplights_show+0x32>
			lights |= L_CPX_R;
     f5c:	2302      	movs	r3, #2
     f5e:	431d      	orrs	r5, r3
     f60:	b2ed      	uxtb	r5, r5
		break;
     f62:	e7e0      	b.n	f26 <fplights_show+0x32>
			lights |= L_CPX_THETA;
     f64:	2301      	movs	r3, #1
     f66:	431d      	orrs	r5, r3
     f68:	b2ed      	uxtb	r5, r5
		break;
     f6a:	e7dc      	b.n	f26 <fplights_show+0x32>
		gpio_set_pin(GPIO(FPLIGHT_SCK), 0);
     f6c:	2200      	movs	r2, #0
     f6e:	210f      	movs	r1, #15
     f70:	2001      	movs	r0, #1
     f72:	4c1a      	ldr	r4, [pc, #104]	; (fdc <fplights_show+0xe8>)
     f74:	47a0      	blx	r4
		gpio_set_pin(GPIO(FPLIGHT_MOSI), lights & 1);
     f76:	2201      	movs	r2, #1
     f78:	402a      	ands	r2, r5
     f7a:	210e      	movs	r1, #14
     f7c:	2001      	movs	r0, #1
     f7e:	47a0      	blx	r4
		asm("nop\nnop\nnop\nnop\nnop");
     f80:	46c0      	nop			; (mov r8, r8)
     f82:	46c0      	nop			; (mov r8, r8)
     f84:	46c0      	nop			; (mov r8, r8)
     f86:	46c0      	nop			; (mov r8, r8)
     f88:	46c0      	nop			; (mov r8, r8)
		gpio_set_pin(GPIO(FPLIGHT_SCK), 1);
     f8a:	2201      	movs	r2, #1
     f8c:	210f      	movs	r1, #15
     f8e:	2001      	movs	r0, #1
     f90:	47a0      	blx	r4
		asm("nop\nnop\nnop\nnop\nnop");
     f92:	46c0      	nop			; (mov r8, r8)
     f94:	46c0      	nop			; (mov r8, r8)
     f96:	46c0      	nop			; (mov r8, r8)
     f98:	46c0      	nop			; (mov r8, r8)
     f9a:	46c0      	nop			; (mov r8, r8)
		lights >>= 1;
     f9c:	086d      	lsrs	r5, r5, #1
	for (int i = 0; i < 8; i++) {
     f9e:	3601      	adds	r6, #1
     fa0:	2e07      	cmp	r6, #7
     fa2:	dde3      	ble.n	f6c <fplights_show+0x78>
	}
	gpio_set_pin(GPIO(FPLIGHT_LATCH), 0);
     fa4:	2200      	movs	r2, #0
     fa6:	211b      	movs	r1, #27
     fa8:	2000      	movs	r0, #0
     faa:	4c0c      	ldr	r4, [pc, #48]	; (fdc <fplights_show+0xe8>)
     fac:	47a0      	blx	r4
	asm("nop\nnop\nnop\nnop\nnop");
     fae:	46c0      	nop			; (mov r8, r8)
     fb0:	46c0      	nop			; (mov r8, r8)
     fb2:	46c0      	nop			; (mov r8, r8)
     fb4:	46c0      	nop			; (mov r8, r8)
     fb6:	46c0      	nop			; (mov r8, r8)
	gpio_set_pin(GPIO(FPLIGHT_LATCH), 1);
     fb8:	2201      	movs	r2, #1
     fba:	211b      	movs	r1, #27
     fbc:	2000      	movs	r0, #0
     fbe:	47a0      	blx	r4
	asm("nop\nnop\nnop\nnop\nnop");
     fc0:	46c0      	nop			; (mov r8, r8)
     fc2:	46c0      	nop			; (mov r8, r8)
     fc4:	46c0      	nop			; (mov r8, r8)
     fc6:	46c0      	nop			; (mov r8, r8)
     fc8:	46c0      	nop			; (mov r8, r8)
	gpio_set_pin(GPIO(FPLIGHT_LATCH), 0);
     fca:	2200      	movs	r2, #0
     fcc:	211b      	movs	r1, #27
     fce:	2000      	movs	r0, #0
     fd0:	47a0      	blx	r4
	gpio_set_pin(GPIO(FPLIGHT_OE), 0);
     fd2:	2200      	movs	r2, #0
     fd4:	211c      	movs	r1, #28
     fd6:	2000      	movs	r0, #0
     fd8:	47a0      	blx	r4

}
     fda:	bd70      	pop	{r4, r5, r6, pc}
     fdc:	00000cfd 	.word	0x00000cfd

00000fe0 <re_im_key_color>:
	}
	return c;
}

// Determines the lighting of the re/im key based on the current view
static color_rgb re_im_key_color(const kp_key * currentkey, const calc_state_t * calc_state, const sys_state_t * sys_state) {
     fe0:	b500      	push	{lr}
     fe2:	b083      	sub	sp, #12
	switch (sys_state->ui.cpx_view) {
     fe4:	7a53      	ldrb	r3, [r2, #9]
     fe6:	2b01      	cmp	r3, #1
     fe8:	d02d      	beq.n	1046 <STACK_SIZE+0x46>
     fea:	2b00      	cmp	r3, #0
     fec:	d009      	beq.n	1002 <STACK_SIZE+0x2>
     fee:	2b02      	cmp	r3, #2
     ff0:	d02f      	beq.n	1052 <STACK_SIZE+0x52>
     ff2:	2b03      	cmp	r3, #3
     ff4:	d033      	beq.n	105e <STACK_SIZE+0x5e>
		case cv_r:
		return color_cplx_r;
		case cv_theta:
		return color_cplx_theta;
	}
	return color_off;
     ff6:	2203      	movs	r2, #3
     ff8:	491c      	ldr	r1, [pc, #112]	; (106c <STACK_SIZE+0x6c>)
     ffa:	4668      	mov	r0, sp
     ffc:	4b1c      	ldr	r3, [pc, #112]	; (1070 <STACK_SIZE+0x70>)
     ffe:	4798      	blx	r3
    1000:	e00d      	b.n	101e <STACK_SIZE+0x1e>
		return sys_state->ui.view_is_real ? color_normal : color_cplx_re;
    1002:	68d3      	ldr	r3, [r2, #12]
    1004:	2b00      	cmp	r3, #0
    1006:	d018      	beq.n	103a <STACK_SIZE+0x3a>
    1008:	2203      	movs	r2, #3
    100a:	491a      	ldr	r1, [pc, #104]	; (1074 <STACK_SIZE+0x74>)
    100c:	a801      	add	r0, sp, #4
    100e:	4b18      	ldr	r3, [pc, #96]	; (1070 <STACK_SIZE+0x70>)
    1010:	4798      	blx	r3
    1012:	ab01      	add	r3, sp, #4
    1014:	881a      	ldrh	r2, [r3, #0]
    1016:	4669      	mov	r1, sp
    1018:	800a      	strh	r2, [r1, #0]
    101a:	789b      	ldrb	r3, [r3, #2]
    101c:	708b      	strb	r3, [r1, #2]
    101e:	466b      	mov	r3, sp
    1020:	781b      	ldrb	r3, [r3, #0]
    1022:	466a      	mov	r2, sp
    1024:	7852      	ldrb	r2, [r2, #1]
    1026:	0212      	lsls	r2, r2, #8
    1028:	20ff      	movs	r0, #255	; 0xff
    102a:	4018      	ands	r0, r3
    102c:	466b      	mov	r3, sp
    102e:	789b      	ldrb	r3, [r3, #2]
    1030:	041b      	lsls	r3, r3, #16
    1032:	4310      	orrs	r0, r2
    1034:	4318      	orrs	r0, r3
}
    1036:	b003      	add	sp, #12
    1038:	bd00      	pop	{pc}
		return sys_state->ui.view_is_real ? color_normal : color_cplx_re;
    103a:	2203      	movs	r2, #3
    103c:	490e      	ldr	r1, [pc, #56]	; (1078 <STACK_SIZE+0x78>)
    103e:	a801      	add	r0, sp, #4
    1040:	4b0b      	ldr	r3, [pc, #44]	; (1070 <STACK_SIZE+0x70>)
    1042:	4798      	blx	r3
    1044:	e7e5      	b.n	1012 <STACK_SIZE+0x12>
		return color_cplx_im;
    1046:	2203      	movs	r2, #3
    1048:	490c      	ldr	r1, [pc, #48]	; (107c <STACK_SIZE+0x7c>)
    104a:	4668      	mov	r0, sp
    104c:	4b08      	ldr	r3, [pc, #32]	; (1070 <STACK_SIZE+0x70>)
    104e:	4798      	blx	r3
    1050:	e7e5      	b.n	101e <STACK_SIZE+0x1e>
		return color_cplx_r;
    1052:	2203      	movs	r2, #3
    1054:	490a      	ldr	r1, [pc, #40]	; (1080 <STACK_SIZE+0x80>)
    1056:	4668      	mov	r0, sp
    1058:	4b05      	ldr	r3, [pc, #20]	; (1070 <STACK_SIZE+0x70>)
    105a:	4798      	blx	r3
    105c:	e7df      	b.n	101e <STACK_SIZE+0x1e>
		return color_cplx_theta;
    105e:	2203      	movs	r2, #3
    1060:	4908      	ldr	r1, [pc, #32]	; (1084 <STACK_SIZE+0x84>)
    1062:	4668      	mov	r0, sp
    1064:	4b02      	ldr	r3, [pc, #8]	; (1070 <STACK_SIZE+0x70>)
    1066:	4798      	blx	r3
    1068:	e7d9      	b.n	101e <STACK_SIZE+0x1e>
    106a:	46c0      	nop			; (mov r8, r8)
    106c:	000040cc 	.word	0x000040cc
    1070:	00003e21 	.word	0x00003e21
    1074:	000040c8 	.word	0x000040c8
    1078:	000040a8 	.word	0x000040a8
    107c:	000040a4 	.word	0x000040a4
    1080:	000040a0 	.word	0x000040a0
    1084:	0000409c 	.word	0x0000409c

00001088 <drg_key_color>:

static color_rgb drg_key_color(const kp_key * currentkey, const calc_state_t * calc_state, const sys_state_t * sys_state) {
    1088:	b500      	push	{lr}
    108a:	b083      	sub	sp, #12
	switch (sys_state->sys.angle_units) {
    108c:	7893      	ldrb	r3, [r2, #2]
    108e:	2b01      	cmp	r3, #1
    1090:	d01a      	beq.n	10c8 <drg_key_color+0x40>
    1092:	2b00      	cmp	r3, #0
    1094:	d007      	beq.n	10a6 <drg_key_color+0x1e>
    1096:	2b02      	cmp	r3, #2
    1098:	d01c      	beq.n	10d4 <drg_key_color+0x4c>
		case au_rad:
		return color_drg_r;
		case au_grad:
		return color_drg_g;
	}
	return color_off;
    109a:	2203      	movs	r2, #3
    109c:	4910      	ldr	r1, [pc, #64]	; (10e0 <drg_key_color+0x58>)
    109e:	a801      	add	r0, sp, #4
    10a0:	4b10      	ldr	r3, [pc, #64]	; (10e4 <drg_key_color+0x5c>)
    10a2:	4798      	blx	r3
    10a4:	e004      	b.n	10b0 <drg_key_color+0x28>
		return color_drg_d;
    10a6:	2203      	movs	r2, #3
    10a8:	490f      	ldr	r1, [pc, #60]	; (10e8 <drg_key_color+0x60>)
    10aa:	a801      	add	r0, sp, #4
    10ac:	4b0d      	ldr	r3, [pc, #52]	; (10e4 <drg_key_color+0x5c>)
    10ae:	4798      	blx	r3
    10b0:	ab01      	add	r3, sp, #4
    10b2:	7819      	ldrb	r1, [r3, #0]
    10b4:	785a      	ldrb	r2, [r3, #1]
    10b6:	0212      	lsls	r2, r2, #8
    10b8:	20ff      	movs	r0, #255	; 0xff
    10ba:	4008      	ands	r0, r1
    10bc:	789b      	ldrb	r3, [r3, #2]
    10be:	041b      	lsls	r3, r3, #16
    10c0:	4310      	orrs	r0, r2
    10c2:	4318      	orrs	r0, r3
}
    10c4:	b003      	add	sp, #12
    10c6:	bd00      	pop	{pc}
		return color_drg_r;
    10c8:	2203      	movs	r2, #3
    10ca:	4908      	ldr	r1, [pc, #32]	; (10ec <drg_key_color+0x64>)
    10cc:	a801      	add	r0, sp, #4
    10ce:	4b05      	ldr	r3, [pc, #20]	; (10e4 <drg_key_color+0x5c>)
    10d0:	4798      	blx	r3
    10d2:	e7ed      	b.n	10b0 <drg_key_color+0x28>
		return color_drg_g;
    10d4:	2203      	movs	r2, #3
    10d6:	4906      	ldr	r1, [pc, #24]	; (10f0 <drg_key_color+0x68>)
    10d8:	a801      	add	r0, sp, #4
    10da:	4b02      	ldr	r3, [pc, #8]	; (10e4 <drg_key_color+0x5c>)
    10dc:	4798      	blx	r3
    10de:	e7e7      	b.n	10b0 <drg_key_color+0x28>
    10e0:	000040cc 	.word	0x000040cc
    10e4:	00003e21 	.word	0x00003e21
    10e8:	00004098 	.word	0x00004098
    10ec:	00004094 	.word	0x00004094
    10f0:	00004090 	.word	0x00004090

000010f4 <shift_key_color>:

static color_rgb shift_key_color(const kp_key * currentkey, const calc_state_t * calc_state, const sys_state_t * sys_state) {
    10f4:	b500      	push	{lr}
    10f6:	b083      	sub	sp, #12
	return sys_state->mods.shift ? (sys_state->mods.hyp ? color_shift_hyp : color_shift) : color_normal;
    10f8:	7953      	ldrb	r3, [r2, #5]
    10fa:	2b00      	cmp	r3, #0
    10fc:	d00e      	beq.n	111c <shift_key_color+0x28>
    10fe:	7993      	ldrb	r3, [r2, #6]
    1100:	2b00      	cmp	r3, #0
    1102:	d005      	beq.n	1110 <shift_key_color+0x1c>
    1104:	2203      	movs	r2, #3
    1106:	490f      	ldr	r1, [pc, #60]	; (1144 <shift_key_color+0x50>)
    1108:	a801      	add	r0, sp, #4
    110a:	4b0f      	ldr	r3, [pc, #60]	; (1148 <shift_key_color+0x54>)
    110c:	4798      	blx	r3
    110e:	e00a      	b.n	1126 <shift_key_color+0x32>
    1110:	2203      	movs	r2, #3
    1112:	490e      	ldr	r1, [pc, #56]	; (114c <shift_key_color+0x58>)
    1114:	a801      	add	r0, sp, #4
    1116:	4b0c      	ldr	r3, [pc, #48]	; (1148 <shift_key_color+0x54>)
    1118:	4798      	blx	r3
    111a:	e004      	b.n	1126 <shift_key_color+0x32>
    111c:	2203      	movs	r2, #3
    111e:	490c      	ldr	r1, [pc, #48]	; (1150 <shift_key_color+0x5c>)
    1120:	a801      	add	r0, sp, #4
    1122:	4b09      	ldr	r3, [pc, #36]	; (1148 <shift_key_color+0x54>)
    1124:	4798      	blx	r3
    1126:	a901      	add	r1, sp, #4
    1128:	880b      	ldrh	r3, [r1, #0]
    112a:	0a1a      	lsrs	r2, r3, #8
    112c:	0212      	lsls	r2, r2, #8
    112e:	20ff      	movs	r0, #255	; 0xff
    1130:	4018      	ands	r0, r3
    1132:	4310      	orrs	r0, r2
    1134:	788a      	ldrb	r2, [r1, #2]
    1136:	0412      	lsls	r2, r2, #16
    1138:	4b06      	ldr	r3, [pc, #24]	; (1154 <shift_key_color+0x60>)
    113a:	4018      	ands	r0, r3
    113c:	4310      	orrs	r0, r2
}
    113e:	b003      	add	sp, #12
    1140:	bd00      	pop	{pc}
    1142:	46c0      	nop			; (mov r8, r8)
    1144:	000040bc 	.word	0x000040bc
    1148:	00003e21 	.word	0x00003e21
    114c:	000040c4 	.word	0x000040c4
    1150:	000040c8 	.word	0x000040c8
    1154:	ff00ffff 	.word	0xff00ffff

00001158 <hyp_key_color>:
static color_rgb hyp_key_color(const kp_key * currentkey, const calc_state_t * calc_state, const sys_state_t * sys_state) {
    1158:	b500      	push	{lr}
    115a:	b083      	sub	sp, #12
	return sys_state->mods.hyp ? (sys_state->mods.shift ? color_shift_hyp : color_hyp) : color_normal;
    115c:	7993      	ldrb	r3, [r2, #6]
    115e:	2b00      	cmp	r3, #0
    1160:	d00e      	beq.n	1180 <hyp_key_color+0x28>
    1162:	7953      	ldrb	r3, [r2, #5]
    1164:	2b00      	cmp	r3, #0
    1166:	d005      	beq.n	1174 <hyp_key_color+0x1c>
    1168:	2203      	movs	r2, #3
    116a:	490f      	ldr	r1, [pc, #60]	; (11a8 <hyp_key_color+0x50>)
    116c:	a801      	add	r0, sp, #4
    116e:	4b0f      	ldr	r3, [pc, #60]	; (11ac <hyp_key_color+0x54>)
    1170:	4798      	blx	r3
    1172:	e00a      	b.n	118a <hyp_key_color+0x32>
    1174:	2203      	movs	r2, #3
    1176:	490e      	ldr	r1, [pc, #56]	; (11b0 <hyp_key_color+0x58>)
    1178:	a801      	add	r0, sp, #4
    117a:	4b0c      	ldr	r3, [pc, #48]	; (11ac <hyp_key_color+0x54>)
    117c:	4798      	blx	r3
    117e:	e004      	b.n	118a <hyp_key_color+0x32>
    1180:	2203      	movs	r2, #3
    1182:	490c      	ldr	r1, [pc, #48]	; (11b4 <hyp_key_color+0x5c>)
    1184:	a801      	add	r0, sp, #4
    1186:	4b09      	ldr	r3, [pc, #36]	; (11ac <hyp_key_color+0x54>)
    1188:	4798      	blx	r3
    118a:	a901      	add	r1, sp, #4
    118c:	880b      	ldrh	r3, [r1, #0]
    118e:	0a1a      	lsrs	r2, r3, #8
    1190:	0212      	lsls	r2, r2, #8
    1192:	20ff      	movs	r0, #255	; 0xff
    1194:	4018      	ands	r0, r3
    1196:	4310      	orrs	r0, r2
    1198:	788a      	ldrb	r2, [r1, #2]
    119a:	0412      	lsls	r2, r2, #16
    119c:	4b06      	ldr	r3, [pc, #24]	; (11b8 <hyp_key_color+0x60>)
    119e:	4018      	ands	r0, r3
    11a0:	4310      	orrs	r0, r2
}
    11a2:	b003      	add	sp, #12
    11a4:	bd00      	pop	{pc}
    11a6:	46c0      	nop			; (mov r8, r8)
    11a8:	000040bc 	.word	0x000040bc
    11ac:	00003e21 	.word	0x00003e21
    11b0:	000040c0 	.word	0x000040c0
    11b4:	000040c8 	.word	0x000040c8
    11b8:	ff00ffff 	.word	0xff00ffff

000011bc <standard_color>:
color_rgb standard_color(const kp_key * currentkey, const calc_state_t * calc_state, const sys_state_t * sys_state) {
    11bc:	b530      	push	{r4, r5, lr}
    11be:	b083      	sub	sp, #12
    11c0:	000c      	movs	r4, r1
	available = (currentkey->key_type & KEY_TYPE_MOD_MASK) ? 1 : 0;
    11c2:	7803      	ldrb	r3, [r0, #0]
    11c4:	210f      	movs	r1, #15
    11c6:	438b      	bics	r3, r1
    11c8:	1e59      	subs	r1, r3, #1
    11ca:	418b      	sbcs	r3, r1
    11cc:	b2db      	uxtb	r3, r3
	if (sys_state->mods.shift && sys_state->mods.hyp) {
    11ce:	7951      	ldrb	r1, [r2, #5]
    11d0:	2900      	cmp	r1, #0
    11d2:	d01a      	beq.n	120a <standard_color+0x4e>
    11d4:	7995      	ldrb	r5, [r2, #6]
    11d6:	2d00      	cmp	r5, #0
    11d8:	d017      	beq.n	120a <standard_color+0x4e>
		if (currentkey->shift_hyp_cmd && currentkey->shift_hyp_cmd->available != NULL) {
    11da:	6901      	ldr	r1, [r0, #16]
    11dc:	2900      	cmp	r1, #0
    11de:	d006      	beq.n	11ee <standard_color+0x32>
    11e0:	684d      	ldr	r5, [r1, #4]
    11e2:	2d00      	cmp	r5, #0
    11e4:	d003      	beq.n	11ee <standard_color+0x32>
			available = currentkey->shift_hyp_cmd->available(calc_state, sys_state);
    11e6:	0011      	movs	r1, r2
    11e8:	0020      	movs	r0, r4
    11ea:	47a8      	blx	r5
    11ec:	0003      	movs	r3, r0
		c = available ? color_shift_hyp : color_shift_hyp_unavail;
    11ee:	2b00      	cmp	r3, #0
    11f0:	d005      	beq.n	11fe <standard_color+0x42>
    11f2:	2203      	movs	r2, #3
    11f4:	4932      	ldr	r1, [pc, #200]	; (12c0 <standard_color+0x104>)
    11f6:	4668      	mov	r0, sp
    11f8:	4b32      	ldr	r3, [pc, #200]	; (12c4 <standard_color+0x108>)
    11fa:	4798      	blx	r3
    11fc:	e018      	b.n	1230 <standard_color+0x74>
    11fe:	2203      	movs	r2, #3
    1200:	4931      	ldr	r1, [pc, #196]	; (12c8 <standard_color+0x10c>)
    1202:	4668      	mov	r0, sp
    1204:	4b2f      	ldr	r3, [pc, #188]	; (12c4 <standard_color+0x108>)
    1206:	4798      	blx	r3
    1208:	e012      	b.n	1230 <standard_color+0x74>
	} else if (sys_state->mods.shift) {
    120a:	2900      	cmp	r1, #0
    120c:	d025      	beq.n	125a <standard_color+0x9e>
		if (currentkey->shift_cmd && currentkey->shift_cmd->available != NULL) {
    120e:	6881      	ldr	r1, [r0, #8]
    1210:	2900      	cmp	r1, #0
    1212:	d006      	beq.n	1222 <standard_color+0x66>
    1214:	684d      	ldr	r5, [r1, #4]
    1216:	2d00      	cmp	r5, #0
    1218:	d003      	beq.n	1222 <standard_color+0x66>
			available = currentkey->shift_cmd->available(calc_state, sys_state);
    121a:	0011      	movs	r1, r2
    121c:	0020      	movs	r0, r4
    121e:	47a8      	blx	r5
    1220:	0003      	movs	r3, r0
		c = available ? color_shift : color_shift_unavail;
    1222:	2b00      	cmp	r3, #0
    1224:	d013      	beq.n	124e <standard_color+0x92>
    1226:	2203      	movs	r2, #3
    1228:	4928      	ldr	r1, [pc, #160]	; (12cc <standard_color+0x110>)
    122a:	4668      	mov	r0, sp
    122c:	4b25      	ldr	r3, [pc, #148]	; (12c4 <standard_color+0x108>)
    122e:	4798      	blx	r3
	return c;
    1230:	466b      	mov	r3, sp
    1232:	881b      	ldrh	r3, [r3, #0]
    1234:	0a1a      	lsrs	r2, r3, #8
    1236:	0212      	lsls	r2, r2, #8
    1238:	20ff      	movs	r0, #255	; 0xff
    123a:	4018      	ands	r0, r3
    123c:	4310      	orrs	r0, r2
    123e:	466b      	mov	r3, sp
    1240:	789a      	ldrb	r2, [r3, #2]
    1242:	0412      	lsls	r2, r2, #16
    1244:	4b22      	ldr	r3, [pc, #136]	; (12d0 <standard_color+0x114>)
    1246:	4018      	ands	r0, r3
    1248:	4310      	orrs	r0, r2
}
    124a:	b003      	add	sp, #12
    124c:	bd30      	pop	{r4, r5, pc}
		c = available ? color_shift : color_shift_unavail;
    124e:	2203      	movs	r2, #3
    1250:	4920      	ldr	r1, [pc, #128]	; (12d4 <standard_color+0x118>)
    1252:	4668      	mov	r0, sp
    1254:	4b1b      	ldr	r3, [pc, #108]	; (12c4 <standard_color+0x108>)
    1256:	4798      	blx	r3
    1258:	e7ea      	b.n	1230 <standard_color+0x74>
	} else if (sys_state->mods.hyp) {
    125a:	7991      	ldrb	r1, [r2, #6]
    125c:	2900      	cmp	r1, #0
    125e:	d017      	beq.n	1290 <standard_color+0xd4>
		if (currentkey->hyp_cmd && currentkey->hyp_cmd->available != NULL) {
    1260:	68c1      	ldr	r1, [r0, #12]
    1262:	2900      	cmp	r1, #0
    1264:	d006      	beq.n	1274 <standard_color+0xb8>
    1266:	684d      	ldr	r5, [r1, #4]
    1268:	2d00      	cmp	r5, #0
    126a:	d003      	beq.n	1274 <standard_color+0xb8>
			available = currentkey->hyp_cmd->available(calc_state, sys_state);
    126c:	0011      	movs	r1, r2
    126e:	0020      	movs	r0, r4
    1270:	47a8      	blx	r5
    1272:	0003      	movs	r3, r0
		c = available ? color_hyp : color_hyp_unavail;
    1274:	2b00      	cmp	r3, #0
    1276:	d005      	beq.n	1284 <standard_color+0xc8>
    1278:	2203      	movs	r2, #3
    127a:	4917      	ldr	r1, [pc, #92]	; (12d8 <standard_color+0x11c>)
    127c:	4668      	mov	r0, sp
    127e:	4b11      	ldr	r3, [pc, #68]	; (12c4 <standard_color+0x108>)
    1280:	4798      	blx	r3
    1282:	e7d5      	b.n	1230 <standard_color+0x74>
    1284:	2203      	movs	r2, #3
    1286:	4915      	ldr	r1, [pc, #84]	; (12dc <standard_color+0x120>)
    1288:	4668      	mov	r0, sp
    128a:	4b0e      	ldr	r3, [pc, #56]	; (12c4 <standard_color+0x108>)
    128c:	4798      	blx	r3
    128e:	e7cf      	b.n	1230 <standard_color+0x74>
		if (currentkey->base_cmd && currentkey->base_cmd->available != NULL) {
    1290:	6841      	ldr	r1, [r0, #4]
    1292:	2900      	cmp	r1, #0
    1294:	d006      	beq.n	12a4 <standard_color+0xe8>
    1296:	684d      	ldr	r5, [r1, #4]
    1298:	2d00      	cmp	r5, #0
    129a:	d003      	beq.n	12a4 <standard_color+0xe8>
			available = currentkey->base_cmd->available(calc_state, sys_state);
    129c:	0011      	movs	r1, r2
    129e:	0020      	movs	r0, r4
    12a0:	47a8      	blx	r5
    12a2:	0003      	movs	r3, r0
		c = available ? color_normal : color_normal_unavail;
    12a4:	2b00      	cmp	r3, #0
    12a6:	d105      	bne.n	12b4 <standard_color+0xf8>
    12a8:	2203      	movs	r2, #3
    12aa:	490d      	ldr	r1, [pc, #52]	; (12e0 <standard_color+0x124>)
    12ac:	4668      	mov	r0, sp
    12ae:	4b05      	ldr	r3, [pc, #20]	; (12c4 <standard_color+0x108>)
    12b0:	4798      	blx	r3
    12b2:	e7bd      	b.n	1230 <standard_color+0x74>
    12b4:	2203      	movs	r2, #3
    12b6:	490b      	ldr	r1, [pc, #44]	; (12e4 <standard_color+0x128>)
    12b8:	4668      	mov	r0, sp
    12ba:	4b02      	ldr	r3, [pc, #8]	; (12c4 <standard_color+0x108>)
    12bc:	4798      	blx	r3
    12be:	e7b7      	b.n	1230 <standard_color+0x74>
    12c0:	000040bc 	.word	0x000040bc
    12c4:	00003e21 	.word	0x00003e21
    12c8:	000040ac 	.word	0x000040ac
    12cc:	000040c4 	.word	0x000040c4
    12d0:	ff00ffff 	.word	0xff00ffff
    12d4:	000040b4 	.word	0x000040b4
    12d8:	000040c0 	.word	0x000040c0
    12dc:	000040b0 	.word	0x000040b0
    12e0:	000040b8 	.word	0x000040b8
    12e4:	000040c8 	.word	0x000040c8

000012e8 <build_keymap>:



void build_keymap() {
    12e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    12ea:	46d6      	mov	lr, sl
    12ec:	464f      	mov	r7, r9
    12ee:	4646      	mov	r6, r8
    12f0:	b5c0      	push	{r6, r7, lr}
	keypad_map[0] = (kp_key){0};
    12f2:	4cfe      	ldr	r4, [pc, #1016]	; (16ec <build_keymap+0x404>)
    12f4:	221c      	movs	r2, #28
    12f6:	2100      	movs	r1, #0
    12f8:	0020      	movs	r0, r4
    12fa:	4bfd      	ldr	r3, [pc, #1012]	; (16f0 <build_keymap+0x408>)
    12fc:	4698      	mov	r8, r3
    12fe:	4798      	blx	r3
	keypad_map[1] = (kp_key){0};
    1300:	0020      	movs	r0, r4
    1302:	301c      	adds	r0, #28
    1304:	221c      	movs	r2, #28
    1306:	2100      	movs	r1, #0
    1308:	47c0      	blx	r8
	keypad_map[2] = (kp_key){ //menu/pwr key
    130a:	4bfa      	ldr	r3, [pc, #1000]	; (16f4 <build_keymap+0x40c>)
    130c:	469a      	mov	sl, r3
    130e:	0023      	movs	r3, r4
    1310:	3338      	adds	r3, #56	; 0x38
    1312:	4652      	mov	r2, sl
    1314:	ca23      	ldmia	r2!, {r0, r1, r5}
    1316:	c323      	stmia	r3!, {r0, r1, r5}
    1318:	ca23      	ldmia	r2!, {r0, r1, r5}
    131a:	c323      	stmia	r3!, {r0, r1, r5}
    131c:	6812      	ldr	r2, [r2, #0]
    131e:	601a      	str	r2, [r3, #0]
		.pixel_idx = 12,
		.special_color = NULL
	};
	keypad_map[3] = (kp_key){ //drg key
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_drg_reint, //TODO: reinterpret drg
    1320:	4bf5      	ldr	r3, [pc, #980]	; (16f8 <build_keymap+0x410>)
    1322:	681b      	ldr	r3, [r3, #0]
    1324:	65a3      	str	r3, [r4, #88]	; 0x58
	keypad_map[3] = (kp_key){ //drg key
    1326:	2601      	movs	r6, #1
    1328:	2354      	movs	r3, #84	; 0x54
    132a:	54e6      	strb	r6, [r4, r3]
    132c:	2500      	movs	r5, #0
    132e:	65e5      	str	r5, [r4, #92]	; 0x5c
    1330:	6625      	str	r5, [r4, #96]	; 0x60
    1332:	6665      	str	r5, [r4, #100]	; 0x64
    1334:	3b39      	subs	r3, #57	; 0x39
    1336:	66a3      	str	r3, [r4, #104]	; 0x68
    1338:	4bf0      	ldr	r3, [pc, #960]	; (16fc <build_keymap+0x414>)
    133a:	66e3      	str	r3, [r4, #108]	; 0x6c
		.pixel_idx = 27,
		.special_color = drg_key_color
	};
	keypad_map[4] = (kp_key){ //re/im key
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_re_im,
    133c:	4bf0      	ldr	r3, [pc, #960]	; (1700 <build_keymap+0x418>)
    133e:	681b      	ldr	r3, [r3, #0]
    1340:	6763      	str	r3, [r4, #116]	; 0x74
		.shift_cmd = (cmd_generic*)cmd_rec_pol,
    1342:	4bf0      	ldr	r3, [pc, #960]	; (1704 <build_keymap+0x41c>)
    1344:	681b      	ldr	r3, [r3, #0]
    1346:	67a3      	str	r3, [r4, #120]	; 0x78
	keypad_map[4] = (kp_key){ //re/im key
    1348:	2370      	movs	r3, #112	; 0x70
    134a:	54e6      	strb	r6, [r4, r3]
    134c:	67e5      	str	r5, [r4, #124]	; 0x7c
    134e:	3310      	adds	r3, #16
    1350:	50e5      	str	r5, [r4, r3]
    1352:	3304      	adds	r3, #4
    1354:	221c      	movs	r2, #28
    1356:	50e2      	str	r2, [r4, r3]
    1358:	4aeb      	ldr	r2, [pc, #940]	; (1708 <build_keymap+0x420>)
    135a:	3304      	adds	r3, #4
    135c:	50e2      	str	r2, [r4, r3]
		.pixel_idx = 28,
		.special_color = re_im_key_color
	};
		
	// COL 1 ////////////////////////////
	keypad_map[5] = (kp_key){0};
    135e:	0020      	movs	r0, r4
    1360:	308c      	adds	r0, #140	; 0x8c
    1362:	221c      	movs	r2, #28
    1364:	2100      	movs	r1, #0
    1366:	47c0      	blx	r8
	keypad_map[6] = (kp_key){0};
    1368:	0020      	movs	r0, r4
    136a:	30a8      	adds	r0, #168	; 0xa8
    136c:	221c      	movs	r2, #28
    136e:	2100      	movs	r1, #0
    1370:	47c0      	blx	r8
	keypad_map[7] = (kp_key){ // EEX
    1372:	0023      	movs	r3, r4
    1374:	33c4      	adds	r3, #196	; 0xc4
    1376:	4652      	mov	r2, sl
    1378:	321c      	adds	r2, #28
    137a:	ca83      	ldmia	r2!, {r0, r1, r7}
    137c:	c383      	stmia	r3!, {r0, r1, r7}
    137e:	ca83      	ldmia	r2!, {r0, r1, r7}
    1380:	c383      	stmia	r3!, {r0, r1, r7}
    1382:	6812      	ldr	r2, [r2, #0]
    1384:	601a      	str	r2, [r3, #0]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 13,
		.special_color = NULL
	};
	keypad_map[8] = (kp_key){ // roll up/down
    1386:	0023      	movs	r3, r4
    1388:	33e0      	adds	r3, #224	; 0xe0
    138a:	4652      	mov	r2, sl
    138c:	3238      	adds	r2, #56	; 0x38
    138e:	ca83      	ldmia	r2!, {r0, r1, r7}
    1390:	c383      	stmia	r3!, {r0, r1, r7}
    1392:	ca83      	ldmia	r2!, {r0, r1, r7}
    1394:	c383      	stmia	r3!, {r0, r1, r7}
    1396:	6812      	ldr	r2, [r2, #0]
    1398:	601a      	str	r2, [r3, #0]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 26,
		.special_color = NULL
	};
	keypad_map[9] = (kp_key){ // 2nd
    139a:	0023      	movs	r3, r4
    139c:	33fc      	adds	r3, #252	; 0xfc
    139e:	4652      	mov	r2, sl
    13a0:	3254      	adds	r2, #84	; 0x54
    13a2:	ca83      	ldmia	r2!, {r0, r1, r7}
    13a4:	c383      	stmia	r3!, {r0, r1, r7}
    13a6:	ca83      	ldmia	r2!, {r0, r1, r7}
    13a8:	c383      	stmia	r3!, {r0, r1, r7}
    13aa:	6812      	ldr	r2, [r2, #0]
    13ac:	601a      	str	r2, [r3, #0]
	};
		
	// COL 2 ////////////////////////////
	keypad_map[10] = (kp_key){ // C/AC
		.key_type = KEY_TYPE_STD | KEY_TYPE_CLR,
		.base_cmd = (cmd_generic*)cmd_clear, // TODO: C
    13ae:	4bd7      	ldr	r3, [pc, #860]	; (170c <build_keymap+0x424>)
    13b0:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_clearall, // TODO: AC
    13b2:	4bd7      	ldr	r3, [pc, #860]	; (1710 <build_keymap+0x428>)
    13b4:	681a      	ldr	r2, [r3, #0]
	keypad_map[10] = (kp_key){ // C/AC
    13b6:	2309      	movs	r3, #9
    13b8:	4699      	mov	r9, r3
    13ba:	3310      	adds	r3, #16
    13bc:	33ff      	adds	r3, #255	; 0xff
    13be:	4648      	mov	r0, r9
    13c0:	54e0      	strb	r0, [r4, r3]
    13c2:	3304      	adds	r3, #4
    13c4:	50e1      	str	r1, [r4, r3]
    13c6:	3304      	adds	r3, #4
    13c8:	50e2      	str	r2, [r4, r3]
    13ca:	3304      	adds	r3, #4
    13cc:	50e5      	str	r5, [r4, r3]
    13ce:	3304      	adds	r3, #4
    13d0:	50e5      	str	r5, [r4, r3]
    13d2:	3304      	adds	r3, #4
    13d4:	50e5      	str	r5, [r4, r3]
    13d6:	3304      	adds	r3, #4
    13d8:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 0,
		.special_color = NULL // TODO: clear colors?
	};
	keypad_map[11] = (kp_key){ // bksp
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_bksp, // TODO: bksp
    13da:	4bce      	ldr	r3, [pc, #824]	; (1714 <build_keymap+0x42c>)
    13dc:	681a      	ldr	r2, [r3, #0]
	keypad_map[11] = (kp_key){ // bksp
    13de:	239a      	movs	r3, #154	; 0x9a
    13e0:	005b      	lsls	r3, r3, #1
    13e2:	54e6      	strb	r6, [r4, r3]
    13e4:	3304      	adds	r3, #4
    13e6:	50e2      	str	r2, [r4, r3]
    13e8:	3304      	adds	r3, #4
    13ea:	50e5      	str	r5, [r4, r3]
    13ec:	3304      	adds	r3, #4
    13ee:	50e5      	str	r5, [r4, r3]
    13f0:	3304      	adds	r3, #4
    13f2:	50e5      	str	r5, [r4, r3]
    13f4:	220b      	movs	r2, #11
    13f6:	3304      	adds	r3, #4
    13f8:	50e2      	str	r2, [r4, r3]
    13fa:	3304      	adds	r3, #4
    13fc:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 11,
		.special_color = NULL
	};
	keypad_map[12] = (kp_key){ // +/-
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_chs, // TODO: +/-
    13fe:	4bc6      	ldr	r3, [pc, #792]	; (1718 <build_keymap+0x430>)
    1400:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_abs,
    1402:	4bc6      	ldr	r3, [pc, #792]	; (171c <build_keymap+0x434>)
    1404:	681a      	ldr	r2, [r3, #0]
	keypad_map[12] = (kp_key){ // +/-
    1406:	23a8      	movs	r3, #168	; 0xa8
    1408:	005b      	lsls	r3, r3, #1
    140a:	54e6      	strb	r6, [r4, r3]
    140c:	3304      	adds	r3, #4
    140e:	50e1      	str	r1, [r4, r3]
    1410:	3304      	adds	r3, #4
    1412:	50e2      	str	r2, [r4, r3]
    1414:	3304      	adds	r3, #4
    1416:	50e5      	str	r5, [r4, r3]
    1418:	3304      	adds	r3, #4
    141a:	50e5      	str	r5, [r4, r3]
    141c:	220e      	movs	r2, #14
    141e:	3304      	adds	r3, #4
    1420:	50e2      	str	r2, [r4, r3]
    1422:	3304      	adds	r3, #4
    1424:	50e5      	str	r5, [r4, r3]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 14,
		.special_color = NULL
	};
	keypad_map[13] = (kp_key){ // enter
    1426:	0022      	movs	r2, r4
    1428:	326d      	adds	r2, #109	; 0x6d
    142a:	32ff      	adds	r2, #255	; 0xff
    142c:	4657      	mov	r7, sl
    142e:	3770      	adds	r7, #112	; 0x70
    1430:	cf0b      	ldmia	r7!, {r0, r1, r3}
    1432:	c20b      	stmia	r2!, {r0, r1, r3}
    1434:	cf0b      	ldmia	r7!, {r0, r1, r3}
    1436:	c20b      	stmia	r2!, {r0, r1, r3}
    1438:	683b      	ldr	r3, [r7, #0]
    143a:	6013      	str	r3, [r2, #0]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 25,
		.special_color = NULL
	};
	keypad_map[14] = (kp_key){0};
    143c:	0020      	movs	r0, r4
    143e:	3089      	adds	r0, #137	; 0x89
    1440:	30ff      	adds	r0, #255	; 0xff
    1442:	221c      	movs	r2, #28
    1444:	2100      	movs	r1, #0
    1446:	47c0      	blx	r8
		
	// COL 3 ////////////////////////////
	keypad_map[15] = (kp_key){ // sin
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_sin,
    1448:	4bb5      	ldr	r3, [pc, #724]	; (1720 <build_keymap+0x438>)
    144a:	681f      	ldr	r7, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_asin,
    144c:	4bb5      	ldr	r3, [pc, #724]	; (1724 <build_keymap+0x43c>)
    144e:	6818      	ldr	r0, [r3, #0]
		.hyp_cmd = (cmd_generic*)cmd_sinh,
    1450:	4bb5      	ldr	r3, [pc, #724]	; (1728 <build_keymap+0x440>)
    1452:	6819      	ldr	r1, [r3, #0]
		.shift_hyp_cmd = (cmd_generic*)cmd_asinh,
    1454:	4bb5      	ldr	r3, [pc, #724]	; (172c <build_keymap+0x444>)
    1456:	681a      	ldr	r2, [r3, #0]
	keypad_map[15] = (kp_key){ // sin
    1458:	23d2      	movs	r3, #210	; 0xd2
    145a:	005b      	lsls	r3, r3, #1
    145c:	54e6      	strb	r6, [r4, r3]
    145e:	3304      	adds	r3, #4
    1460:	50e7      	str	r7, [r4, r3]
    1462:	3304      	adds	r3, #4
    1464:	50e0      	str	r0, [r4, r3]
    1466:	3304      	adds	r3, #4
    1468:	50e1      	str	r1, [r4, r3]
    146a:	3304      	adds	r3, #4
    146c:	50e2      	str	r2, [r4, r3]
    146e:	3304      	adds	r3, #4
    1470:	50e6      	str	r6, [r4, r3]
    1472:	3304      	adds	r3, #4
    1474:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 1,
		.special_color = NULL
	};
	keypad_map[16] = (kp_key){ // 7
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_7,
    1476:	4bae      	ldr	r3, [pc, #696]	; (1730 <build_keymap+0x448>)
    1478:	681a      	ldr	r2, [r3, #0]
	keypad_map[16] = (kp_key){ // 7
    147a:	23e0      	movs	r3, #224	; 0xe0
    147c:	005b      	lsls	r3, r3, #1
    147e:	54e6      	strb	r6, [r4, r3]
    1480:	3304      	adds	r3, #4
    1482:	50e2      	str	r2, [r4, r3]
    1484:	3304      	adds	r3, #4
    1486:	50e5      	str	r5, [r4, r3]
    1488:	3304      	adds	r3, #4
    148a:	50e5      	str	r5, [r4, r3]
    148c:	3304      	adds	r3, #4
    148e:	50e5      	str	r5, [r4, r3]
    1490:	220a      	movs	r2, #10
    1492:	3304      	adds	r3, #4
    1494:	50e2      	str	r2, [r4, r3]
    1496:	3304      	adds	r3, #4
    1498:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 10,
		.special_color = NULL
	};
	keypad_map[17] = (kp_key){ // 4
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_4,
    149a:	4ba6      	ldr	r3, [pc, #664]	; (1734 <build_keymap+0x44c>)
    149c:	681a      	ldr	r2, [r3, #0]
	keypad_map[17] = (kp_key){ // 4
    149e:	23ee      	movs	r3, #238	; 0xee
    14a0:	005b      	lsls	r3, r3, #1
    14a2:	54e6      	strb	r6, [r4, r3]
    14a4:	3304      	adds	r3, #4
    14a6:	50e2      	str	r2, [r4, r3]
    14a8:	3304      	adds	r3, #4
    14aa:	50e5      	str	r5, [r4, r3]
    14ac:	3304      	adds	r3, #4
    14ae:	50e5      	str	r5, [r4, r3]
    14b0:	3304      	adds	r3, #4
    14b2:	50e5      	str	r5, [r4, r3]
    14b4:	220f      	movs	r2, #15
    14b6:	3304      	adds	r3, #4
    14b8:	50e2      	str	r2, [r4, r3]
    14ba:	3304      	adds	r3, #4
    14bc:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 15,
		.special_color = NULL
	};
	keypad_map[18] = (kp_key){ // 1
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_1,
    14be:	4b9e      	ldr	r3, [pc, #632]	; (1738 <build_keymap+0x450>)
    14c0:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_i,
    14c2:	4b9e      	ldr	r3, [pc, #632]	; (173c <build_keymap+0x454>)
    14c4:	681a      	ldr	r2, [r3, #0]
	keypad_map[18] = (kp_key){ // 1
    14c6:	23fc      	movs	r3, #252	; 0xfc
    14c8:	005b      	lsls	r3, r3, #1
    14ca:	54e6      	strb	r6, [r4, r3]
    14cc:	3304      	adds	r3, #4
    14ce:	50e1      	str	r1, [r4, r3]
    14d0:	3304      	adds	r3, #4
    14d2:	50e2      	str	r2, [r4, r3]
    14d4:	3304      	adds	r3, #4
    14d6:	50e5      	str	r5, [r4, r3]
    14d8:	3304      	adds	r3, #4
    14da:	50e5      	str	r5, [r4, r3]
    14dc:	2218      	movs	r2, #24
    14de:	3304      	adds	r3, #4
    14e0:	50e2      	str	r2, [r4, r3]
    14e2:	3304      	adds	r3, #4
    14e4:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 24,
		.special_color = NULL
	};
	keypad_map[19] = (kp_key){ // 0
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_0,
    14e6:	4b96      	ldr	r3, [pc, #600]	; (1740 <build_keymap+0x458>)
    14e8:	681a      	ldr	r2, [r3, #0]
	keypad_map[19] = (kp_key){ // 0
    14ea:	2385      	movs	r3, #133	; 0x85
    14ec:	009b      	lsls	r3, r3, #2
    14ee:	54e6      	strb	r6, [r4, r3]
    14f0:	3304      	adds	r3, #4
    14f2:	50e2      	str	r2, [r4, r3]
    14f4:	3304      	adds	r3, #4
    14f6:	50e5      	str	r5, [r4, r3]
    14f8:	3304      	adds	r3, #4
    14fa:	50e5      	str	r5, [r4, r3]
    14fc:	3304      	adds	r3, #4
    14fe:	50e5      	str	r5, [r4, r3]
    1500:	221e      	movs	r2, #30
    1502:	3304      	adds	r3, #4
    1504:	50e2      	str	r2, [r4, r3]
    1506:	3304      	adds	r3, #4
    1508:	50e5      	str	r5, [r4, r3]
	};
		
	// COL 4 ////////////////////////////
	keypad_map[20] = (kp_key){ // cos
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_cos,
    150a:	4b8e      	ldr	r3, [pc, #568]	; (1744 <build_keymap+0x45c>)
    150c:	681f      	ldr	r7, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_acos,
    150e:	4b8e      	ldr	r3, [pc, #568]	; (1748 <build_keymap+0x460>)
    1510:	6818      	ldr	r0, [r3, #0]
		.hyp_cmd = (cmd_generic*)cmd_cosh,
    1512:	4b8e      	ldr	r3, [pc, #568]	; (174c <build_keymap+0x464>)
    1514:	6819      	ldr	r1, [r3, #0]
		.shift_hyp_cmd = (cmd_generic*)cmd_acosh,
    1516:	4b8e      	ldr	r3, [pc, #568]	; (1750 <build_keymap+0x468>)
    1518:	681a      	ldr	r2, [r3, #0]
	keypad_map[20] = (kp_key){ // cos
    151a:	238c      	movs	r3, #140	; 0x8c
    151c:	009b      	lsls	r3, r3, #2
    151e:	54e6      	strb	r6, [r4, r3]
    1520:	3304      	adds	r3, #4
    1522:	50e7      	str	r7, [r4, r3]
    1524:	3304      	adds	r3, #4
    1526:	50e0      	str	r0, [r4, r3]
    1528:	3304      	adds	r3, #4
    152a:	50e1      	str	r1, [r4, r3]
    152c:	3304      	adds	r3, #4
    152e:	50e2      	str	r2, [r4, r3]
    1530:	2202      	movs	r2, #2
    1532:	3304      	adds	r3, #4
    1534:	50e2      	str	r2, [r4, r3]
    1536:	3304      	adds	r3, #4
    1538:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 2,
		.special_color = NULL
	};
	keypad_map[21] = (kp_key){ // 8
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_8,
    153a:	4b86      	ldr	r3, [pc, #536]	; (1754 <build_keymap+0x46c>)
    153c:	681a      	ldr	r2, [r3, #0]
	keypad_map[21] = (kp_key){ // 8
    153e:	2393      	movs	r3, #147	; 0x93
    1540:	009b      	lsls	r3, r3, #2
    1542:	54e6      	strb	r6, [r4, r3]
    1544:	3304      	adds	r3, #4
    1546:	50e2      	str	r2, [r4, r3]
    1548:	3304      	adds	r3, #4
    154a:	50e5      	str	r5, [r4, r3]
    154c:	3304      	adds	r3, #4
    154e:	50e5      	str	r5, [r4, r3]
    1550:	3304      	adds	r3, #4
    1552:	50e5      	str	r5, [r4, r3]
    1554:	3304      	adds	r3, #4
    1556:	464a      	mov	r2, r9
    1558:	50e2      	str	r2, [r4, r3]
    155a:	3304      	adds	r3, #4
    155c:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 9,
		.special_color = NULL
	};
	keypad_map[22] = (kp_key){ // 5
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_5,
    155e:	4b7e      	ldr	r3, [pc, #504]	; (1758 <build_keymap+0x470>)
    1560:	681a      	ldr	r2, [r3, #0]
	keypad_map[22] = (kp_key){ // 5
    1562:	239a      	movs	r3, #154	; 0x9a
    1564:	009b      	lsls	r3, r3, #2
    1566:	54e6      	strb	r6, [r4, r3]
    1568:	3304      	adds	r3, #4
    156a:	50e2      	str	r2, [r4, r3]
    156c:	3304      	adds	r3, #4
    156e:	50e5      	str	r5, [r4, r3]
    1570:	3304      	adds	r3, #4
    1572:	50e5      	str	r5, [r4, r3]
    1574:	3304      	adds	r3, #4
    1576:	50e5      	str	r5, [r4, r3]
    1578:	2210      	movs	r2, #16
    157a:	3304      	adds	r3, #4
    157c:	50e2      	str	r2, [r4, r3]
    157e:	3304      	adds	r3, #4
    1580:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 16,
		.special_color = NULL
	};
	keypad_map[23] = (kp_key){ // 2
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_2,
    1582:	4b76      	ldr	r3, [pc, #472]	; (175c <build_keymap+0x474>)
    1584:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_e,
    1586:	4b76      	ldr	r3, [pc, #472]	; (1760 <build_keymap+0x478>)
    1588:	681a      	ldr	r2, [r3, #0]
	keypad_map[23] = (kp_key){ // 2
    158a:	23a1      	movs	r3, #161	; 0xa1
    158c:	009b      	lsls	r3, r3, #2
    158e:	54e6      	strb	r6, [r4, r3]
    1590:	3304      	adds	r3, #4
    1592:	50e1      	str	r1, [r4, r3]
    1594:	3304      	adds	r3, #4
    1596:	50e2      	str	r2, [r4, r3]
    1598:	3304      	adds	r3, #4
    159a:	50e5      	str	r5, [r4, r3]
    159c:	3304      	adds	r3, #4
    159e:	50e5      	str	r5, [r4, r3]
    15a0:	2217      	movs	r2, #23
    15a2:	3304      	adds	r3, #4
    15a4:	50e2      	str	r2, [r4, r3]
    15a6:	3304      	adds	r3, #4
    15a8:	50e5      	str	r5, [r4, r3]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 23,
		.special_color = NULL
	};
	keypad_map[24] = (kp_key){0};
    15aa:	3304      	adds	r3, #4
    15ac:	18e0      	adds	r0, r4, r3
    15ae:	3205      	adds	r2, #5
    15b0:	2100      	movs	r1, #0
    15b2:	47c0      	blx	r8

	// COL 5 ////////////////////////////
	keypad_map[25] = (kp_key){ // tan
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_tan,
    15b4:	4b6b      	ldr	r3, [pc, #428]	; (1764 <build_keymap+0x47c>)
    15b6:	681f      	ldr	r7, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_atan,
    15b8:	4b6b      	ldr	r3, [pc, #428]	; (1768 <build_keymap+0x480>)
    15ba:	6818      	ldr	r0, [r3, #0]
		.hyp_cmd = (cmd_generic*)cmd_tanh,
    15bc:	4b6b      	ldr	r3, [pc, #428]	; (176c <build_keymap+0x484>)
    15be:	6819      	ldr	r1, [r3, #0]
		.shift_hyp_cmd = (cmd_generic*)cmd_atanh,
    15c0:	4b6b      	ldr	r3, [pc, #428]	; (1770 <build_keymap+0x488>)
    15c2:	681a      	ldr	r2, [r3, #0]
	keypad_map[25] = (kp_key){ // tan
    15c4:	23af      	movs	r3, #175	; 0xaf
    15c6:	009b      	lsls	r3, r3, #2
    15c8:	54e6      	strb	r6, [r4, r3]
    15ca:	3304      	adds	r3, #4
    15cc:	50e7      	str	r7, [r4, r3]
    15ce:	3304      	adds	r3, #4
    15d0:	50e0      	str	r0, [r4, r3]
    15d2:	3304      	adds	r3, #4
    15d4:	50e1      	str	r1, [r4, r3]
    15d6:	3304      	adds	r3, #4
    15d8:	50e2      	str	r2, [r4, r3]
    15da:	2203      	movs	r2, #3
    15dc:	3304      	adds	r3, #4
    15de:	50e2      	str	r2, [r4, r3]
    15e0:	3304      	adds	r3, #4
    15e2:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 3,
		.special_color = NULL
	};
	keypad_map[26] = (kp_key){ // 9
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_9,
    15e4:	4b63      	ldr	r3, [pc, #396]	; (1774 <build_keymap+0x48c>)
    15e6:	681a      	ldr	r2, [r3, #0]
	keypad_map[26] = (kp_key){ // 9
    15e8:	23b6      	movs	r3, #182	; 0xb6
    15ea:	009b      	lsls	r3, r3, #2
    15ec:	54e6      	strb	r6, [r4, r3]
    15ee:	3304      	adds	r3, #4
    15f0:	50e2      	str	r2, [r4, r3]
    15f2:	3304      	adds	r3, #4
    15f4:	50e5      	str	r5, [r4, r3]
    15f6:	3304      	adds	r3, #4
    15f8:	50e5      	str	r5, [r4, r3]
    15fa:	3304      	adds	r3, #4
    15fc:	50e5      	str	r5, [r4, r3]
    15fe:	2208      	movs	r2, #8
    1600:	3304      	adds	r3, #4
    1602:	50e2      	str	r2, [r4, r3]
    1604:	3304      	adds	r3, #4
    1606:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 8,
		.special_color = NULL
	};
	keypad_map[27] = (kp_key){ // 6
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_6,
    1608:	4b5b      	ldr	r3, [pc, #364]	; (1778 <build_keymap+0x490>)
    160a:	681a      	ldr	r2, [r3, #0]
	keypad_map[27] = (kp_key){ // 6
    160c:	23bd      	movs	r3, #189	; 0xbd
    160e:	009b      	lsls	r3, r3, #2
    1610:	54e6      	strb	r6, [r4, r3]
    1612:	3304      	adds	r3, #4
    1614:	50e2      	str	r2, [r4, r3]
    1616:	3304      	adds	r3, #4
    1618:	50e5      	str	r5, [r4, r3]
    161a:	3304      	adds	r3, #4
    161c:	50e5      	str	r5, [r4, r3]
    161e:	3304      	adds	r3, #4
    1620:	50e5      	str	r5, [r4, r3]
    1622:	2211      	movs	r2, #17
    1624:	3304      	adds	r3, #4
    1626:	50e2      	str	r2, [r4, r3]
    1628:	3304      	adds	r3, #4
    162a:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 17,
		.special_color = NULL
	};
	keypad_map[28] = (kp_key){ // 3
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_3,
    162c:	4b53      	ldr	r3, [pc, #332]	; (177c <build_keymap+0x494>)
    162e:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_pi,
    1630:	4b53      	ldr	r3, [pc, #332]	; (1780 <build_keymap+0x498>)
    1632:	681a      	ldr	r2, [r3, #0]
	keypad_map[28] = (kp_key){ // 3
    1634:	23c4      	movs	r3, #196	; 0xc4
    1636:	009b      	lsls	r3, r3, #2
    1638:	54e6      	strb	r6, [r4, r3]
    163a:	3304      	adds	r3, #4
    163c:	50e1      	str	r1, [r4, r3]
    163e:	3304      	adds	r3, #4
    1640:	50e2      	str	r2, [r4, r3]
    1642:	3304      	adds	r3, #4
    1644:	50e5      	str	r5, [r4, r3]
    1646:	3304      	adds	r3, #4
    1648:	50e5      	str	r5, [r4, r3]
    164a:	2216      	movs	r2, #22
    164c:	3304      	adds	r3, #4
    164e:	50e2      	str	r2, [r4, r3]
    1650:	3304      	adds	r3, #4
    1652:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 22,
		.special_color = NULL
	};
	keypad_map[29] = (kp_key){ // .
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_decimal,
    1654:	4b4b      	ldr	r3, [pc, #300]	; (1784 <build_keymap+0x49c>)
    1656:	681a      	ldr	r2, [r3, #0]
	keypad_map[29] = (kp_key){ // .
    1658:	23cb      	movs	r3, #203	; 0xcb
    165a:	009b      	lsls	r3, r3, #2
    165c:	54e6      	strb	r6, [r4, r3]
    165e:	3304      	adds	r3, #4
    1660:	50e2      	str	r2, [r4, r3]
    1662:	3304      	adds	r3, #4
    1664:	50e5      	str	r5, [r4, r3]
    1666:	3304      	adds	r3, #4
    1668:	50e5      	str	r5, [r4, r3]
    166a:	3304      	adds	r3, #4
    166c:	50e5      	str	r5, [r4, r3]
    166e:	221f      	movs	r2, #31
    1670:	3304      	adds	r3, #4
    1672:	50e2      	str	r2, [r4, r3]
    1674:	3304      	adds	r3, #4
    1676:	50e5      	str	r5, [r4, r3]
	};
		
	// COL 6 ////////////////////////////
	keypad_map[30] = (kp_key){ // div
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_div,
    1678:	4b43      	ldr	r3, [pc, #268]	; (1788 <build_keymap+0x4a0>)
    167a:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_inv,
    167c:	4b43      	ldr	r3, [pc, #268]	; (178c <build_keymap+0x4a4>)
    167e:	681a      	ldr	r2, [r3, #0]
	keypad_map[30] = (kp_key){ // div
    1680:	23d2      	movs	r3, #210	; 0xd2
    1682:	009b      	lsls	r3, r3, #2
    1684:	54e6      	strb	r6, [r4, r3]
    1686:	3304      	adds	r3, #4
    1688:	50e1      	str	r1, [r4, r3]
    168a:	3304      	adds	r3, #4
    168c:	50e2      	str	r2, [r4, r3]
    168e:	3304      	adds	r3, #4
    1690:	50e5      	str	r5, [r4, r3]
    1692:	3304      	adds	r3, #4
    1694:	50e5      	str	r5, [r4, r3]
    1696:	2204      	movs	r2, #4
    1698:	3304      	adds	r3, #4
    169a:	50e2      	str	r2, [r4, r3]
    169c:	3304      	adds	r3, #4
    169e:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 4,
		.special_color = NULL
	};
	keypad_map[31] = (kp_key){ // mul
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_mul,
    16a0:	4b3b      	ldr	r3, [pc, #236]	; (1790 <build_keymap+0x4a8>)
    16a2:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_phasor,
    16a4:	4b3b      	ldr	r3, [pc, #236]	; (1794 <build_keymap+0x4ac>)
    16a6:	681a      	ldr	r2, [r3, #0]
	keypad_map[31] = (kp_key){ // mul
    16a8:	23d9      	movs	r3, #217	; 0xd9
    16aa:	009b      	lsls	r3, r3, #2
    16ac:	54e6      	strb	r6, [r4, r3]
    16ae:	3304      	adds	r3, #4
    16b0:	50e1      	str	r1, [r4, r3]
    16b2:	3304      	adds	r3, #4
    16b4:	50e2      	str	r2, [r4, r3]
    16b6:	3304      	adds	r3, #4
    16b8:	50e5      	str	r5, [r4, r3]
    16ba:	3304      	adds	r3, #4
    16bc:	50e5      	str	r5, [r4, r3]
    16be:	2207      	movs	r2, #7
    16c0:	3304      	adds	r3, #4
    16c2:	50e2      	str	r2, [r4, r3]
    16c4:	3304      	adds	r3, #4
    16c6:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 7,
		.special_color = NULL
	};
	keypad_map[32] = (kp_key){ // sub
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_sub,
    16c8:	4b33      	ldr	r3, [pc, #204]	; (1798 <build_keymap+0x4b0>)
    16ca:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_parallel,
    16cc:	4b33      	ldr	r3, [pc, #204]	; (179c <build_keymap+0x4b4>)
    16ce:	681a      	ldr	r2, [r3, #0]
	keypad_map[32] = (kp_key){ // sub
    16d0:	23e0      	movs	r3, #224	; 0xe0
    16d2:	009b      	lsls	r3, r3, #2
    16d4:	54e6      	strb	r6, [r4, r3]
    16d6:	3304      	adds	r3, #4
    16d8:	50e1      	str	r1, [r4, r3]
    16da:	3304      	adds	r3, #4
    16dc:	50e2      	str	r2, [r4, r3]
    16de:	3304      	adds	r3, #4
    16e0:	50e5      	str	r5, [r4, r3]
    16e2:	3304      	adds	r3, #4
    16e4:	50e5      	str	r5, [r4, r3]
    16e6:	2212      	movs	r2, #18
    16e8:	3304      	adds	r3, #4
    16ea:	e059      	b.n	17a0 <build_keymap+0x4b8>
    16ec:	20000aa0 	.word	0x20000aa0
    16f0:	00003ea5 	.word	0x00003ea5
    16f4:	0000413c 	.word	0x0000413c
    16f8:	00004130 	.word	0x00004130
    16fc:	00001089 	.word	0x00001089
    1700:	00004138 	.word	0x00004138
    1704:	00004134 	.word	0x00004134
    1708:	00000fe1 	.word	0x00000fe1
    170c:	00004128 	.word	0x00004128
    1710:	00004124 	.word	0x00004124
    1714:	00004120 	.word	0x00004120
    1718:	0000411c 	.word	0x0000411c
    171c:	20000f08 	.word	0x20000f08
    1720:	00004108 	.word	0x00004108
    1724:	00004100 	.word	0x00004100
    1728:	00004104 	.word	0x00004104
    172c:	000040fc 	.word	0x000040fc
    1730:	000040dc 	.word	0x000040dc
    1734:	000040e8 	.word	0x000040e8
    1738:	000040f4 	.word	0x000040f4
    173c:	20000a48 	.word	0x20000a48
    1740:	000040f8 	.word	0x000040f8
    1744:	20000a5c 	.word	0x20000a5c
    1748:	20000a54 	.word	0x20000a54
    174c:	20000a40 	.word	0x20000a40
    1750:	20000a60 	.word	0x20000a60
    1754:	000040d8 	.word	0x000040d8
    1758:	000040e4 	.word	0x000040e4
    175c:	000040f0 	.word	0x000040f0
    1760:	20000a4c 	.word	0x20000a4c
    1764:	20000f18 	.word	0x20000f18
    1768:	20000f0c 	.word	0x20000f0c
    176c:	20000f20 	.word	0x20000f20
    1770:	20000a98 	.word	0x20000a98
    1774:	000040d4 	.word	0x000040d4
    1778:	000040e0 	.word	0x000040e0
    177c:	000040ec 	.word	0x000040ec
    1780:	20000a38 	.word	0x20000a38
    1784:	000040d0 	.word	0x000040d0
    1788:	0000410c 	.word	0x0000410c
    178c:	20000f1c 	.word	0x20000f1c
    1790:	00004110 	.word	0x00004110
    1794:	20000f14 	.word	0x20000f14
    1798:	00004114 	.word	0x00004114
    179c:	20000f00 	.word	0x20000f00
    17a0:	50e2      	str	r2, [r4, r3]
    17a2:	3304      	adds	r3, #4
    17a4:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 18,
		.special_color = NULL
	};
	keypad_map[33] = (kp_key){ // add
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_add,
    17a6:	4b3a      	ldr	r3, [pc, #232]	; (1890 <build_keymap+0x5a8>)
    17a8:	681a      	ldr	r2, [r3, #0]
	keypad_map[33] = (kp_key){ // add
    17aa:	23e7      	movs	r3, #231	; 0xe7
    17ac:	009b      	lsls	r3, r3, #2
    17ae:	54e6      	strb	r6, [r4, r3]
    17b0:	3304      	adds	r3, #4
    17b2:	50e2      	str	r2, [r4, r3]
    17b4:	3304      	adds	r3, #4
    17b6:	50e5      	str	r5, [r4, r3]
    17b8:	3304      	adds	r3, #4
    17ba:	50e5      	str	r5, [r4, r3]
    17bc:	3304      	adds	r3, #4
    17be:	50e5      	str	r5, [r4, r3]
    17c0:	2215      	movs	r2, #21
    17c2:	3304      	adds	r3, #4
    17c4:	50e2      	str	r2, [r4, r3]
    17c6:	3304      	adds	r3, #4
    17c8:	50e5      	str	r5, [r4, r3]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 21,
		.special_color = NULL
	};
	keypad_map[34] = (kp_key){0};
    17ca:	3304      	adds	r3, #4
    17cc:	18e0      	adds	r0, r4, r3
    17ce:	3207      	adds	r2, #7
    17d0:	2100      	movs	r1, #0
    17d2:	47c0      	blx	r8
		
	// COL 7 ////////////////////////////
	keypad_map[35] = (kp_key){ // hyp
    17d4:	23f5      	movs	r3, #245	; 0xf5
    17d6:	009b      	lsls	r3, r3, #2
    17d8:	18e2      	adds	r2, r4, r3
    17da:	4b2e      	ldr	r3, [pc, #184]	; (1894 <build_keymap+0x5ac>)
    17dc:	330c      	adds	r3, #12
    17de:	cb83      	ldmia	r3!, {r0, r1, r7}
    17e0:	c283      	stmia	r2!, {r0, r1, r7}
    17e2:	cb83      	ldmia	r3!, {r0, r1, r7}
    17e4:	c283      	stmia	r2!, {r0, r1, r7}
    17e6:	681b      	ldr	r3, [r3, #0]
    17e8:	6013      	str	r3, [r2, #0]
		.pixel_idx = 5,
		.special_color = hyp_key_color
	};
	keypad_map[36] = (kp_key){ // pow
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_pow,
    17ea:	4b2b      	ldr	r3, [pc, #172]	; (1898 <build_keymap+0x5b0>)
    17ec:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_root,
    17ee:	4b2b      	ldr	r3, [pc, #172]	; (189c <build_keymap+0x5b4>)
    17f0:	681a      	ldr	r2, [r3, #0]
	keypad_map[36] = (kp_key){ // pow
    17f2:	23fc      	movs	r3, #252	; 0xfc
    17f4:	009b      	lsls	r3, r3, #2
    17f6:	54e6      	strb	r6, [r4, r3]
    17f8:	3304      	adds	r3, #4
    17fa:	50e1      	str	r1, [r4, r3]
    17fc:	3304      	adds	r3, #4
    17fe:	50e2      	str	r2, [r4, r3]
    1800:	3304      	adds	r3, #4
    1802:	50e5      	str	r5, [r4, r3]
    1804:	3304      	adds	r3, #4
    1806:	50e5      	str	r5, [r4, r3]
    1808:	2206      	movs	r2, #6
    180a:	4b25      	ldr	r3, [pc, #148]	; (18a0 <build_keymap+0x5b8>)
    180c:	50e2      	str	r2, [r4, r3]
    180e:	3304      	adds	r3, #4
    1810:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 6,
		.special_color = NULL
	};
	keypad_map[37] = (kp_key){ // sqr
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_sqr,
    1812:	4b24      	ldr	r3, [pc, #144]	; (18a4 <build_keymap+0x5bc>)
    1814:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_sqrt,
    1816:	4b24      	ldr	r3, [pc, #144]	; (18a8 <build_keymap+0x5c0>)
    1818:	681a      	ldr	r2, [r3, #0]
	keypad_map[37] = (kp_key){ // sqr
    181a:	4b24      	ldr	r3, [pc, #144]	; (18ac <build_keymap+0x5c4>)
    181c:	54e6      	strb	r6, [r4, r3]
    181e:	3304      	adds	r3, #4
    1820:	50e1      	str	r1, [r4, r3]
    1822:	4b23      	ldr	r3, [pc, #140]	; (18b0 <build_keymap+0x5c8>)
    1824:	50e2      	str	r2, [r4, r3]
    1826:	3304      	adds	r3, #4
    1828:	50e5      	str	r5, [r4, r3]
    182a:	4b22      	ldr	r3, [pc, #136]	; (18b4 <build_keymap+0x5cc>)
    182c:	50e5      	str	r5, [r4, r3]
    182e:	2213      	movs	r2, #19
    1830:	3304      	adds	r3, #4
    1832:	50e2      	str	r2, [r4, r3]
    1834:	4b20      	ldr	r3, [pc, #128]	; (18b8 <build_keymap+0x5d0>)
    1836:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 19,
		.special_color = NULL
	};
	keypad_map[38] = (kp_key){ // log
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_log,
    1838:	4b20      	ldr	r3, [pc, #128]	; (18bc <build_keymap+0x5d4>)
    183a:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_alog,
    183c:	4b20      	ldr	r3, [pc, #128]	; (18c0 <build_keymap+0x5d8>)
    183e:	681a      	ldr	r2, [r3, #0]
	keypad_map[38] = (kp_key){ // log
    1840:	2385      	movs	r3, #133	; 0x85
    1842:	00db      	lsls	r3, r3, #3
    1844:	54e6      	strb	r6, [r4, r3]
    1846:	4b1f      	ldr	r3, [pc, #124]	; (18c4 <build_keymap+0x5dc>)
    1848:	50e1      	str	r1, [r4, r3]
    184a:	3304      	adds	r3, #4
    184c:	50e2      	str	r2, [r4, r3]
    184e:	4b1e      	ldr	r3, [pc, #120]	; (18c8 <build_keymap+0x5e0>)
    1850:	50e5      	str	r5, [r4, r3]
    1852:	3304      	adds	r3, #4
    1854:	50e5      	str	r5, [r4, r3]
    1856:	2214      	movs	r2, #20
    1858:	4b1c      	ldr	r3, [pc, #112]	; (18cc <build_keymap+0x5e4>)
    185a:	50e2      	str	r2, [r4, r3]
    185c:	3304      	adds	r3, #4
    185e:	50e5      	str	r5, [r4, r3]
		.pixel_idx = 20,
		.special_color = NULL
	};
	keypad_map[39] = (kp_key){ // ln
		.key_type = KEY_TYPE_STD,
		.base_cmd = (cmd_generic*)cmd_ln,
    1860:	4b1b      	ldr	r3, [pc, #108]	; (18d0 <build_keymap+0x5e8>)
    1862:	6819      	ldr	r1, [r3, #0]
		.shift_cmd = (cmd_generic*)cmd_exp,
    1864:	4b1b      	ldr	r3, [pc, #108]	; (18d4 <build_keymap+0x5ec>)
    1866:	681a      	ldr	r2, [r3, #0]
	keypad_map[39] = (kp_key){ // ln
    1868:	4b1b      	ldr	r3, [pc, #108]	; (18d8 <build_keymap+0x5f0>)
    186a:	54e6      	strb	r6, [r4, r3]
    186c:	3304      	adds	r3, #4
    186e:	50e1      	str	r1, [r4, r3]
    1870:	4b1a      	ldr	r3, [pc, #104]	; (18dc <build_keymap+0x5f4>)
    1872:	50e2      	str	r2, [r4, r3]
    1874:	3304      	adds	r3, #4
    1876:	50e5      	str	r5, [r4, r3]
    1878:	4b19      	ldr	r3, [pc, #100]	; (18e0 <build_keymap+0x5f8>)
    187a:	50e5      	str	r5, [r4, r3]
    187c:	2220      	movs	r2, #32
    187e:	3304      	adds	r3, #4
    1880:	50e2      	str	r2, [r4, r3]
    1882:	4b18      	ldr	r3, [pc, #96]	; (18e4 <build_keymap+0x5fc>)
    1884:	50e5      	str	r5, [r4, r3]
		.hyp_cmd = NULL,
		.shift_hyp_cmd = NULL,
		.pixel_idx = 32,
		.special_color = NULL
	};
}
    1886:	bc1c      	pop	{r2, r3, r4}
    1888:	4690      	mov	r8, r2
    188a:	4699      	mov	r9, r3
    188c:	46a2      	mov	sl, r4
    188e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1890:	00004118 	.word	0x00004118
    1894:	000041bc 	.word	0x000041bc
    1898:	20000a9c 	.word	0x20000a9c
    189c:	20000a3c 	.word	0x20000a3c
    18a0:	00000404 	.word	0x00000404
    18a4:	20000f10 	.word	0x20000f10
    18a8:	20000f04 	.word	0x20000f04
    18ac:	0000040c 	.word	0x0000040c
    18b0:	00000414 	.word	0x00000414
    18b4:	0000041c 	.word	0x0000041c
    18b8:	00000424 	.word	0x00000424
    18bc:	20000a64 	.word	0x20000a64
    18c0:	20000a44 	.word	0x20000a44
    18c4:	0000042c 	.word	0x0000042c
    18c8:	00000434 	.word	0x00000434
    18cc:	0000043c 	.word	0x0000043c
    18d0:	20000a58 	.word	0x20000a58
    18d4:	20000a50 	.word	0x20000a50
    18d8:	00000444 	.word	0x00000444
    18dc:	0000044c 	.word	0x0000044c
    18e0:	00000454 	.word	0x00000454
    18e4:	0000045c 	.word	0x0000045c

000018e8 <keypad_scan_keys>:
	uint64_t newkeys = keypad_inst->rawKeys & (~previous_scan);
	previous_scan = keypad_inst->rawKeys;
	return newkeys;
}

void keypad_scan_keys() {
    18e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    18ea:	46d6      	mov	lr, sl
    18ec:	464f      	mov	r7, r9
    18ee:	4646      	mov	r6, r8
    18f0:	b5c0      	push	{r6, r7, lr}
    18f2:	b082      	sub	sp, #8
	keypad_inst->rawKeys = 0ULL;
    18f4:	4b3c      	ldr	r3, [pc, #240]	; (19e8 <keypad_scan_keys+0x100>)
    18f6:	681b      	ldr	r3, [r3, #0]
    18f8:	2000      	movs	r0, #0
    18fa:	2100      	movs	r1, #0
    18fc:	6098      	str	r0, [r3, #8]
    18fe:	60d9      	str	r1, [r3, #12]
	gpio_set_pin(colPorts[0], colPins[0], 0);
    1900:	2200      	movs	r2, #0
    1902:	2106      	movs	r1, #6
    1904:	3001      	adds	r0, #1
    1906:	4b39      	ldr	r3, [pc, #228]	; (19ec <keypad_scan_keys+0x104>)
    1908:	4798      	blx	r3
	for (int col = 0; col < KEYPAD_NUM_COLS; col++) {
    190a:	2300      	movs	r3, #0
    190c:	4698      	mov	r8, r3
    190e:	e03d      	b.n	198c <keypad_scan_keys+0xa4>
		gpio_set_pin(colPorts[col], colPins[col], 1);
		
		for (int row = 0; row < KEYPAD_NUM_ROWS; row++) {
			int key=gpio_read_pin(rowPorts[row], rowPins[row]);
			keypad_inst->rawKeys |= (key ? (1ULL << (row + col * 5)) : 0ULL);
    1910:	2320      	movs	r3, #32
    1912:	464e      	mov	r6, r9
    1914:	1b9b      	subs	r3, r3, r6
    1916:	469a      	mov	sl, r3
    1918:	2301      	movs	r3, #1
    191a:	4656      	mov	r6, sl
    191c:	40f3      	lsrs	r3, r6
    191e:	469c      	mov	ip, r3
    1920:	2601      	movs	r6, #1
    1922:	464b      	mov	r3, r9
    1924:	409e      	lsls	r6, r3
    1926:	0033      	movs	r3, r6
    1928:	430b      	orrs	r3, r1
    192a:	001c      	movs	r4, r3
    192c:	4663      	mov	r3, ip
    192e:	4313      	orrs	r3, r2
    1930:	001d      	movs	r5, r3
    1932:	6084      	str	r4, [r0, #8]
    1934:	60c5      	str	r5, [r0, #12]
		for (int row = 0; row < KEYPAD_NUM_ROWS; row++) {
    1936:	3701      	adds	r7, #1
    1938:	2f04      	cmp	r7, #4
    193a:	dc1f      	bgt.n	197c <keypad_scan_keys+0x94>
			int key=gpio_read_pin(rowPorts[row], rowPins[row]);
    193c:	00ba      	lsls	r2, r7, #2
    193e:	4b2c      	ldr	r3, [pc, #176]	; (19f0 <keypad_scan_keys+0x108>)
    1940:	189b      	adds	r3, r3, r2
    1942:	6c18      	ldr	r0, [r3, #64]	; 0x40
    1944:	6d59      	ldr	r1, [r3, #84]	; 0x54
    1946:	4b2b      	ldr	r3, [pc, #172]	; (19f4 <keypad_scan_keys+0x10c>)
    1948:	4798      	blx	r3
    194a:	0003      	movs	r3, r0
			keypad_inst->rawKeys |= (key ? (1ULL << (row + col * 5)) : 0ULL);
    194c:	4a26      	ldr	r2, [pc, #152]	; (19e8 <keypad_scan_keys+0x100>)
    194e:	6810      	ldr	r0, [r2, #0]
    1950:	6881      	ldr	r1, [r0, #8]
    1952:	68c2      	ldr	r2, [r0, #12]
    1954:	2b00      	cmp	r3, #0
    1956:	d00d      	beq.n	1974 <keypad_scan_keys+0x8c>
    1958:	4643      	mov	r3, r8
    195a:	009b      	lsls	r3, r3, #2
    195c:	4443      	add	r3, r8
    195e:	4699      	mov	r9, r3
    1960:	44b9      	add	r9, r7
    1962:	464e      	mov	r6, r9
    1964:	3e20      	subs	r6, #32
    1966:	46b2      	mov	sl, r6
    1968:	d4d2      	bmi.n	1910 <keypad_scan_keys+0x28>
    196a:	2601      	movs	r6, #1
    196c:	4653      	mov	r3, sl
    196e:	409e      	lsls	r6, r3
    1970:	46b4      	mov	ip, r6
    1972:	e7d5      	b.n	1920 <keypad_scan_keys+0x38>
    1974:	2300      	movs	r3, #0
    1976:	2600      	movs	r6, #0
    1978:	46b4      	mov	ip, r6
    197a:	e7d5      	b.n	1928 <keypad_scan_keys+0x40>
		}
		gpio_set_pin(colPorts[col], colPins[col], 0);
    197c:	2200      	movs	r2, #0
    197e:	9901      	ldr	r1, [sp, #4]
    1980:	9800      	ldr	r0, [sp, #0]
    1982:	4b1a      	ldr	r3, [pc, #104]	; (19ec <keypad_scan_keys+0x104>)
    1984:	4798      	blx	r3
	for (int col = 0; col < KEYPAD_NUM_COLS; col++) {
    1986:	2301      	movs	r3, #1
    1988:	469c      	mov	ip, r3
    198a:	44e0      	add	r8, ip
    198c:	4643      	mov	r3, r8
    198e:	2b07      	cmp	r3, #7
    1990:	dc0e      	bgt.n	19b0 <keypad_scan_keys+0xc8>
		gpio_set_pin(colPorts[col], colPins[col], 1);
    1992:	4b17      	ldr	r3, [pc, #92]	; (19f0 <keypad_scan_keys+0x108>)
    1994:	4642      	mov	r2, r8
    1996:	0092      	lsls	r2, r2, #2
    1998:	58d1      	ldr	r1, [r2, r3]
    199a:	0008      	movs	r0, r1
    199c:	9100      	str	r1, [sp, #0]
    199e:	189b      	adds	r3, r3, r2
    19a0:	6a1b      	ldr	r3, [r3, #32]
    19a2:	9301      	str	r3, [sp, #4]
    19a4:	2201      	movs	r2, #1
    19a6:	0019      	movs	r1, r3
    19a8:	4b10      	ldr	r3, [pc, #64]	; (19ec <keypad_scan_keys+0x104>)
    19aa:	4798      	blx	r3
		for (int row = 0; row < KEYPAD_NUM_ROWS; row++) {
    19ac:	2700      	movs	r7, #0
    19ae:	e7c3      	b.n	1938 <keypad_scan_keys+0x50>
	}
	keypad_inst->changed |= keypad_inst->rawKeys & (~keypad_inst->previous);
    19b0:	4b0d      	ldr	r3, [pc, #52]	; (19e8 <keypad_scan_keys+0x100>)
    19b2:	681b      	ldr	r3, [r3, #0]
    19b4:	6898      	ldr	r0, [r3, #8]
    19b6:	68d9      	ldr	r1, [r3, #12]
    19b8:	699c      	ldr	r4, [r3, #24]
    19ba:	69dd      	ldr	r5, [r3, #28]
    19bc:	0006      	movs	r6, r0
    19be:	43a6      	bics	r6, r4
    19c0:	000a      	movs	r2, r1
    19c2:	43aa      	bics	r2, r5
    19c4:	691c      	ldr	r4, [r3, #16]
    19c6:	695d      	ldr	r5, [r3, #20]
    19c8:	4326      	orrs	r6, r4
    19ca:	0030      	movs	r0, r6
    19cc:	432a      	orrs	r2, r5
    19ce:	0011      	movs	r1, r2
    19d0:	6118      	str	r0, [r3, #16]
    19d2:	6159      	str	r1, [r3, #20]
	keypad_inst->previous = keypad_inst->rawKeys;
    19d4:	6898      	ldr	r0, [r3, #8]
    19d6:	68d9      	ldr	r1, [r3, #12]
    19d8:	6198      	str	r0, [r3, #24]
    19da:	61d9      	str	r1, [r3, #28]
}
    19dc:	b002      	add	sp, #8
    19de:	bc1c      	pop	{r2, r3, r4}
    19e0:	4690      	mov	r8, r2
    19e2:	4699      	mov	r9, r3
    19e4:	46a2      	mov	sl, r4
    19e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19e8:	20000828 	.word	0x20000828
    19ec:	00000cfd 	.word	0x00000cfd
    19f0:	000041e4 	.word	0x000041e4
    19f4:	00000e71 	.word	0x00000e71

000019f8 <keypad_init>:

void keypad_init(keypad *status) {
    19f8:	b570      	push	{r4, r5, r6, lr}
	keypad_inst = status;
    19fa:	4b17      	ldr	r3, [pc, #92]	; (1a58 <keypad_init+0x60>)
    19fc:	6018      	str	r0, [r3, #0]
	for (int i = 0; i < KEYPAD_NUM_COLS; i++) {
    19fe:	2400      	movs	r4, #0
    1a00:	e008      	b.n	1a14 <keypad_init+0x1c>
		gpio_set_pin_dir(colPorts[i], colPins[i], GPIO_DIR_OUT);
    1a02:	4b16      	ldr	r3, [pc, #88]	; (1a5c <keypad_init+0x64>)
    1a04:	00a2      	lsls	r2, r4, #2
    1a06:	58d0      	ldr	r0, [r2, r3]
    1a08:	189b      	adds	r3, r3, r2
    1a0a:	6a19      	ldr	r1, [r3, #32]
    1a0c:	2201      	movs	r2, #1
    1a0e:	4b14      	ldr	r3, [pc, #80]	; (1a60 <keypad_init+0x68>)
    1a10:	4798      	blx	r3
	for (int i = 0; i < KEYPAD_NUM_COLS; i++) {
    1a12:	3401      	adds	r4, #1
    1a14:	2c07      	cmp	r4, #7
    1a16:	ddf4      	ble.n	1a02 <keypad_init+0xa>
    1a18:	2400      	movs	r4, #0
    1a1a:	e00f      	b.n	1a3c <keypad_init+0x44>
	}
	for (int i = 0; i < KEYPAD_NUM_ROWS; i++) {
		gpio_set_pin_dir(rowPorts[i], rowPins[i], GPIO_DIR_IN);
    1a1c:	00a2      	lsls	r2, r4, #2
    1a1e:	4b0f      	ldr	r3, [pc, #60]	; (1a5c <keypad_init+0x64>)
    1a20:	189b      	adds	r3, r3, r2
    1a22:	6c1d      	ldr	r5, [r3, #64]	; 0x40
    1a24:	6d5e      	ldr	r6, [r3, #84]	; 0x54
    1a26:	2200      	movs	r2, #0
    1a28:	0031      	movs	r1, r6
    1a2a:	0028      	movs	r0, r5
    1a2c:	4b0c      	ldr	r3, [pc, #48]	; (1a60 <keypad_init+0x68>)
    1a2e:	4798      	blx	r3
		gpio_set_pin_pull(rowPorts[i], rowPins[i], GPIO_PULL_DOWN);
    1a30:	2202      	movs	r2, #2
    1a32:	0031      	movs	r1, r6
    1a34:	0028      	movs	r0, r5
    1a36:	4b0b      	ldr	r3, [pc, #44]	; (1a64 <keypad_init+0x6c>)
    1a38:	4798      	blx	r3
	for (int i = 0; i < KEYPAD_NUM_ROWS; i++) {
    1a3a:	3401      	adds	r4, #1
    1a3c:	2c04      	cmp	r4, #4
    1a3e:	dded      	ble.n	1a1c <keypad_init+0x24>
	}
	keypad_inst->rawKeys = 0;
    1a40:	4b05      	ldr	r3, [pc, #20]	; (1a58 <keypad_init+0x60>)
    1a42:	681b      	ldr	r3, [r3, #0]
    1a44:	2000      	movs	r0, #0
    1a46:	2100      	movs	r1, #0
    1a48:	6098      	str	r0, [r3, #8]
    1a4a:	60d9      	str	r1, [r3, #12]
	keypad_inst->changed = 0;
    1a4c:	6118      	str	r0, [r3, #16]
    1a4e:	6159      	str	r1, [r3, #20]
	keypad_inst->previous = 0;
    1a50:	6198      	str	r0, [r3, #24]
    1a52:	61d9      	str	r1, [r3, #28]
} //Keypad
    1a54:	bd70      	pop	{r4, r5, r6, pc}
    1a56:	46c0      	nop			; (mov r8, r8)
    1a58:	20000828 	.word	0x20000828
    1a5c:	000041e4 	.word	0x000041e4
    1a60:	00000d49 	.word	0x00000d49
    1a64:	00000e0d 	.word	0x00000e0d

00001a68 <NeoPixel_set_pixel>:
	ws2812_SPI_init();
}

/* set pixel color (pixel are numbered from 0 to NUM_PIXELS - 1) */
void NeoPixel_set_pixel(int pixel, uint8_t red, uint8_t green, uint8_t blue)
{
    1a68:	b510      	push	{r4, lr}
	if (pixel < 0 || pixel >= NUM_PIXELS)
    1a6a:	2820      	cmp	r0, #32
    1a6c:	d807      	bhi.n	1a7e <NeoPixel_set_pixel+0x16>
		return;
	int n = pixel * 3;
    1a6e:	0044      	lsls	r4, r0, #1
    1a70:	1820      	adds	r0, r4, r0
	pixel_buffer[n] = green;
    1a72:	4c03      	ldr	r4, [pc, #12]	; (1a80 <NeoPixel_set_pixel+0x18>)
    1a74:	5422      	strb	r2, [r4, r0]
	pixel_buffer[n + 1] = red;
    1a76:	1c42      	adds	r2, r0, #1
    1a78:	54a1      	strb	r1, [r4, r2]
	pixel_buffer[n + 2] = blue; 
    1a7a:	3002      	adds	r0, #2
    1a7c:	5423      	strb	r3, [r4, r0]
}
    1a7e:	bd10      	pop	{r4, pc}
    1a80:	20000838 	.word	0x20000838

00001a84 <NeoPixel_clear_pixels>:

/* all pixels off */
void NeoPixel_clear_pixels(void)
{
	for (int i = 0 ; i < NUM_PIXELS * 3 ; i++)
    1a84:	2300      	movs	r3, #0
    1a86:	e003      	b.n	1a90 <NeoPixel_clear_pixels+0xc>
		pixel_buffer[i] = 0;
    1a88:	2100      	movs	r1, #0
    1a8a:	4a03      	ldr	r2, [pc, #12]	; (1a98 <NeoPixel_clear_pixels+0x14>)
    1a8c:	54d1      	strb	r1, [r2, r3]
	for (int i = 0 ; i < NUM_PIXELS * 3 ; i++)
    1a8e:	3301      	adds	r3, #1
    1a90:	2b62      	cmp	r3, #98	; 0x62
    1a92:	ddf9      	ble.n	1a88 <NeoPixel_clear_pixels+0x4>
}
    1a94:	4770      	bx	lr
    1a96:	46c0      	nop			; (mov r8, r8)
    1a98:	20000838 	.word	0x20000838

00001a9c <NeoPixel_init>:
{
    1a9c:	b500      	push	{lr}
    1a9e:	b085      	sub	sp, #20
	NeoPixel_clear_pixels();
    1aa0:	4b24      	ldr	r3, [pc, #144]	; (1b34 <NeoPixel_init+0x98>)
    1aa2:	4798      	blx	r3
	for (int i = 0 ; i < sizeof dma_buffer ; i++)
    1aa4:	2300      	movs	r3, #0
    1aa6:	e005      	b.n	1ab4 <NeoPixel_init+0x18>
		dma_buffer[i] = 0x00;
    1aa8:	4a23      	ldr	r2, [pc, #140]	; (1b38 <NeoPixel_init+0x9c>)
    1aaa:	18d2      	adds	r2, r2, r3
    1aac:	2000      	movs	r0, #0
    1aae:	2164      	movs	r1, #100	; 0x64
    1ab0:	5450      	strb	r0, [r2, r1]
	for (int i = 0 ; i < sizeof dma_buffer ; i++)
    1ab2:	3301      	adds	r3, #1
    1ab4:	22c1      	movs	r2, #193	; 0xc1
    1ab6:	0052      	lsls	r2, r2, #1
    1ab8:	4293      	cmp	r3, r2
    1aba:	d9f5      	bls.n	1aa8 <NeoPixel_init+0xc>
	descriptor.DSTADDR.reg = (uint32_t)&SERCOM2->SPI.DATA;                // destination address is SPI DATA register
    1abc:	4b1f      	ldr	r3, [pc, #124]	; (1b3c <NeoPixel_init+0xa0>)
    1abe:	9302      	str	r3, [sp, #8]
	descriptor.SRCADDR.reg = (uint32_t)(dma_buffer + sizeof dma_buffer);  // source address is the DMA buffer
    1ac0:	4b1d      	ldr	r3, [pc, #116]	; (1b38 <NeoPixel_init+0x9c>)
    1ac2:	33e8      	adds	r3, #232	; 0xe8
    1ac4:	33ff      	adds	r3, #255	; 0xff
    1ac6:	9301      	str	r3, [sp, #4]
	descriptor.DESCADDR.reg = 0;                                          // only one transfer descriptor
    1ac8:	2300      	movs	r3, #0
    1aca:	9303      	str	r3, [sp, #12]
	descriptor.BTCTRL.bit.BEATSIZE = DMAC_BTCTRL_BEATSIZE_BYTE_Val;       // beat size is one byte
    1acc:	466b      	mov	r3, sp
    1ace:	881b      	ldrh	r3, [r3, #0]
    1ad0:	4a1b      	ldr	r2, [pc, #108]	; (1b40 <NeoPixel_init+0xa4>)
    1ad2:	4013      	ands	r3, r2
    1ad4:	466a      	mov	r2, sp
    1ad6:	8013      	strh	r3, [r2, #0]
	descriptor.BTCTRL.bit.DSTINC = 0;                                     // destination address increment disabled
    1ad8:	8813      	ldrh	r3, [r2, #0]
    1ada:	4a1a      	ldr	r2, [pc, #104]	; (1b44 <NeoPixel_init+0xa8>)
    1adc:	4013      	ands	r3, r2
    1ade:	466a      	mov	r2, sp
    1ae0:	8013      	strh	r3, [r2, #0]
	descriptor.BTCTRL.bit.SRCINC = 1;                                     // source address increment enabled
    1ae2:	8812      	ldrh	r2, [r2, #0]
    1ae4:	2380      	movs	r3, #128	; 0x80
    1ae6:	00db      	lsls	r3, r3, #3
    1ae8:	4313      	orrs	r3, r2
    1aea:	466a      	mov	r2, sp
    1aec:	8013      	strh	r3, [r2, #0]
	descriptor.BTCTRL.bit.STEPSEL = DMAC_BTCTRL_STEPSEL_SRC_Val;          // flexible source address increment size
    1aee:	8812      	ldrh	r2, [r2, #0]
    1af0:	2380      	movs	r3, #128	; 0x80
    1af2:	015b      	lsls	r3, r3, #5
    1af4:	4313      	orrs	r3, r2
    1af6:	466a      	mov	r2, sp
    1af8:	8013      	strh	r3, [r2, #0]
	descriptor.BTCTRL.bit.STEPSIZE = DMAC_BTCTRL_STEPSIZE_X1_Val;         // source address increment is one byte
    1afa:	8813      	ldrh	r3, [r2, #0]
    1afc:	04db      	lsls	r3, r3, #19
    1afe:	0cdb      	lsrs	r3, r3, #19
    1b00:	8013      	strh	r3, [r2, #0]
	descriptor.BTCTRL.bit.BLOCKACT = DMAC_BTCTRL_BLOCKACT_NOACT_Val;      // request interrupt at end of block transfer
    1b02:	8813      	ldrh	r3, [r2, #0]
    1b04:	2218      	movs	r2, #24
    1b06:	4393      	bics	r3, r2
    1b08:	466a      	mov	r2, sp
    1b0a:	8013      	strh	r3, [r2, #0]
	descriptor.BTCNT.reg = sizeof dma_buffer;                             // beat count
    1b0c:	2384      	movs	r3, #132	; 0x84
    1b0e:	33ff      	adds	r3, #255	; 0xff
    1b10:	8053      	strh	r3, [r2, #2]
	descriptor.BTCTRL.bit.VALID = 1;                                      // descriptor is valid
    1b12:	8813      	ldrh	r3, [r2, #0]
    1b14:	2201      	movs	r2, #1
    1b16:	4313      	orrs	r3, r2
    1b18:	466a      	mov	r2, sp
    1b1a:	8013      	strh	r3, [r2, #0]
	DMA_init();
    1b1c:	4b0a      	ldr	r3, [pc, #40]	; (1b48 <NeoPixel_init+0xac>)
    1b1e:	4798      	blx	r3
	DMA_add_channel(DMA_SOURCE_SERCOM2, &descriptor);
    1b20:	4669      	mov	r1, sp
    1b22:	2006      	movs	r0, #6
    1b24:	4b09      	ldr	r3, [pc, #36]	; (1b4c <NeoPixel_init+0xb0>)
    1b26:	4798      	blx	r3
	DMA_enable();
    1b28:	4b09      	ldr	r3, [pc, #36]	; (1b50 <NeoPixel_init+0xb4>)
    1b2a:	4798      	blx	r3
	ws2812_SPI_init();
    1b2c:	4b09      	ldr	r3, [pc, #36]	; (1b54 <NeoPixel_init+0xb8>)
    1b2e:	4798      	blx	r3
}
    1b30:	b005      	add	sp, #20
    1b32:	bd00      	pop	{pc}
    1b34:	00001a85 	.word	0x00001a85
    1b38:	20000838 	.word	0x20000838
    1b3c:	42001028 	.word	0x42001028
    1b40:	fffffcff 	.word	0xfffffcff
    1b44:	fffff7ff 	.word	0xfffff7ff
    1b48:	00000b91 	.word	0x00000b91
    1b4c:	00000bf5 	.word	0x00000bf5
    1b50:	00000c91 	.word	0x00000c91
    1b54:	00001d09 	.word	0x00001d09

00001b58 <NeoPixel_update>:
#endif


/* update DMA buffer */
void NeoPixel_update(void)
{
    1b58:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0, j = 0 ; i < sizeof pixel_buffer ; i++, j += 3)
    1b5a:	2200      	movs	r2, #0
    1b5c:	2100      	movs	r1, #0
    1b5e:	e011      	b.n	1b84 <NeoPixel_update+0x2c>
	{
		#if USELUT
		uint32_t expanded = bit_expand[pixel_buffer[i]];
    1b60:	4b0a      	ldr	r3, [pc, #40]	; (1b8c <NeoPixel_update+0x34>)
    1b62:	5c58      	ldrb	r0, [r3, r1]
    1b64:	0080      	lsls	r0, r0, #2
    1b66:	4c0a      	ldr	r4, [pc, #40]	; (1b90 <NeoPixel_update+0x38>)
    1b68:	5904      	ldr	r4, [r0, r4]
		for (int bit = 1; bit < 8; bit++) {
			expanded |= (pixel_buffer[i] & (1 << bit)) << (2 * bit + 1);
		}
		#endif

		dma_buffer[j] = expanded >> 16;
    1b6a:	0c26      	lsrs	r6, r4, #16
    1b6c:	2064      	movs	r0, #100	; 0x64
    1b6e:	189d      	adds	r5, r3, r2
    1b70:	542e      	strb	r6, [r5, r0]
		dma_buffer[j + 1] = expanded >> 8;
    1b72:	1c55      	adds	r5, r2, #1
    1b74:	0a26      	lsrs	r6, r4, #8
    1b76:	195d      	adds	r5, r3, r5
    1b78:	542e      	strb	r6, [r5, r0]
		dma_buffer[j + 2] = expanded;
    1b7a:	1c95      	adds	r5, r2, #2
    1b7c:	195b      	adds	r3, r3, r5
    1b7e:	541c      	strb	r4, [r3, r0]
	for (int i = 0, j = 0 ; i < sizeof pixel_buffer ; i++, j += 3)
    1b80:	3101      	adds	r1, #1
    1b82:	3203      	adds	r2, #3
    1b84:	2962      	cmp	r1, #98	; 0x62
    1b86:	d9eb      	bls.n	1b60 <NeoPixel_update+0x8>
	}
}
    1b88:	bd70      	pop	{r4, r5, r6, pc}
    1b8a:	46c0      	nop			; (mov r8, r8)
    1b8c:	20000838 	.word	0x20000838
    1b90:	0000424c 	.word	0x0000424c

00001b94 <NXDisplay_loadData>:
static NXConfig *config;

static uint8_t dispdata[NX_SR_BYTES];


void NXDisplay_loadData(uint16_t buf[NX_NUM_TUBES]) {
    1b94:	b5f0      	push	{r4, r5, r6, r7, lr}
	//  Put array of 9 digits (12 bits each) into the byte aligned display data buffer
	for (int i = 0, j = 0; i < NX_NUM_TUBES - 1; i += 2, j +=3) {
    1b96:	2400      	movs	r4, #0
    1b98:	2100      	movs	r1, #0
    1b9a:	e016      	b.n	1bca <NXDisplay_loadData+0x36>
		dispdata[j] = buf[i] & 0xff;
    1b9c:	004b      	lsls	r3, r1, #1
    1b9e:	18c3      	adds	r3, r0, r3
    1ba0:	881a      	ldrh	r2, [r3, #0]
    1ba2:	4d0d      	ldr	r5, [pc, #52]	; (1bd8 <NXDisplay_loadData+0x44>)
    1ba4:	552a      	strb	r2, [r5, r4]
		dispdata[j+1] = ((buf[i] >> 8) & 0xf) | ((buf[i+1] & 0xf) << 4);
    1ba6:	1c67      	adds	r7, r4, #1
    1ba8:	881b      	ldrh	r3, [r3, #0]
    1baa:	0a1b      	lsrs	r3, r3, #8
    1bac:	220f      	movs	r2, #15
    1bae:	401a      	ands	r2, r3
    1bb0:	1c4b      	adds	r3, r1, #1
    1bb2:	005b      	lsls	r3, r3, #1
    1bb4:	18c3      	adds	r3, r0, r3
    1bb6:	881e      	ldrh	r6, [r3, #0]
    1bb8:	0136      	lsls	r6, r6, #4
    1bba:	4332      	orrs	r2, r6
    1bbc:	55ea      	strb	r2, [r5, r7]
		dispdata[j+2] = (buf[i+1] >> 4) & 0xff;
    1bbe:	1ca2      	adds	r2, r4, #2
    1bc0:	881b      	ldrh	r3, [r3, #0]
    1bc2:	091b      	lsrs	r3, r3, #4
    1bc4:	54ab      	strb	r3, [r5, r2]
	for (int i = 0, j = 0; i < NX_NUM_TUBES - 1; i += 2, j +=3) {
    1bc6:	3102      	adds	r1, #2
    1bc8:	3403      	adds	r4, #3
    1bca:	2907      	cmp	r1, #7
    1bcc:	dde6      	ble.n	1b9c <NXDisplay_loadData+0x8>
	}
	dispdata[NX_SR_BYTES - 1] = buf[NX_SIGNTUBE_IDX] & 0xff;
    1bce:	8a02      	ldrh	r2, [r0, #16]
    1bd0:	4b01      	ldr	r3, [pc, #4]	; (1bd8 <NXDisplay_loadData+0x44>)
    1bd2:	731a      	strb	r2, [r3, #12]
}
    1bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bd6:	46c0      	nop			; (mov r8, r8)
    1bd8:	20000a20 	.word	0x20000a20

00001bdc <NXDisplay_updateDisp>:

void NXDisplay_updateDisp() {
    1bdc:	b510      	push	{r4, lr}
		gpio_set_pin(NXD_SCK_PORT, NXD_SCK_PIN, 1);
	}
	asm("nop\nnop\nnop\nnop\nnop");				// delay at least 100 ns

	#else
	for (int i = 12; i >= 0; i--) {
    1bde:	210c      	movs	r1, #12
    1be0:	e010      	b.n	1c04 <NXDisplay_updateDisp+0x28>
		// Wait for data register to be ready
		SERCOM5->SPI.DATA.bit.DATA = dispdata[i];
    1be2:	4811      	ldr	r0, [pc, #68]	; (1c28 <NXDisplay_updateDisp+0x4c>)
    1be4:	6a83      	ldr	r3, [r0, #40]	; 0x28
    1be6:	4a11      	ldr	r2, [pc, #68]	; (1c2c <NXDisplay_updateDisp+0x50>)
    1be8:	5c52      	ldrb	r2, [r2, r1]
    1bea:	0a5b      	lsrs	r3, r3, #9
    1bec:	025b      	lsls	r3, r3, #9
    1bee:	431a      	orrs	r2, r3
    1bf0:	6282      	str	r2, [r0, #40]	; 0x28
		while (!SERCOM5->SPI.INTFLAG.bit.DRE || !SERCOM5->SPI.INTFLAG.bit.TXC);
    1bf2:	4b0d      	ldr	r3, [pc, #52]	; (1c28 <NXDisplay_updateDisp+0x4c>)
    1bf4:	7e1b      	ldrb	r3, [r3, #24]
    1bf6:	07db      	lsls	r3, r3, #31
    1bf8:	d5fb      	bpl.n	1bf2 <NXDisplay_updateDisp+0x16>
    1bfa:	4b0b      	ldr	r3, [pc, #44]	; (1c28 <NXDisplay_updateDisp+0x4c>)
    1bfc:	7e1b      	ldrb	r3, [r3, #24]
    1bfe:	079b      	lsls	r3, r3, #30
    1c00:	d5f7      	bpl.n	1bf2 <NXDisplay_updateDisp+0x16>
	for (int i = 12; i >= 0; i--) {
    1c02:	3901      	subs	r1, #1
    1c04:	2900      	cmp	r1, #0
    1c06:	daec      	bge.n	1be2 <NXDisplay_updateDisp+0x6>
	}
	// Wait for data register to be ready
	//while (!SERCOM5->SPI.INTFLAG.bit.DRE || !SERCOM5->SPI.INTFLAG.bit.TXC);
	#endif
	gpio_set_pin(NXD_STR_PORT, NXD_STR_PIN, 0); // latch data (active low)
    1c08:	2200      	movs	r2, #0
    1c0a:	2105      	movs	r1, #5
    1c0c:	2001      	movs	r0, #1
    1c0e:	4c08      	ldr	r4, [pc, #32]	; (1c30 <NXDisplay_updateDisp+0x54>)
    1c10:	47a0      	blx	r4
	asm("nop\nnop\nnop\nnop\nnop");				// delay at least 100 ns
    1c12:	46c0      	nop			; (mov r8, r8)
    1c14:	46c0      	nop			; (mov r8, r8)
    1c16:	46c0      	nop			; (mov r8, r8)
    1c18:	46c0      	nop			; (mov r8, r8)
    1c1a:	46c0      	nop			; (mov r8, r8)
	gpio_set_pin(NXD_STR_PORT, NXD_STR_PIN, 1);
    1c1c:	2201      	movs	r2, #1
    1c1e:	2105      	movs	r1, #5
    1c20:	2001      	movs	r0, #1
    1c22:	47a0      	blx	r4
}
    1c24:	bd10      	pop	{r4, pc}
    1c26:	46c0      	nop			; (mov r8, r8)
    1c28:	42001c00 	.word	0x42001c00
    1c2c:	20000a20 	.word	0x20000a20
    1c30:	00000cfd 	.word	0x00000cfd

00001c34 <NXDisplay_init>:

void NXDisplay_init(NXConfig *nxconfig) {
    1c34:	b510      	push	{r4, lr}
	config = nxconfig;
    1c36:	4c0b      	ldr	r4, [pc, #44]	; (1c64 <NXDisplay_init+0x30>)
    1c38:	6120      	str	r0, [r4, #16]
	gpio_set_pin_dir(NXD_STR_PORT, NXD_STR_PIN, GPIO_DIR_OUT);
    1c3a:	2201      	movs	r2, #1
    1c3c:	2105      	movs	r1, #5
    1c3e:	2001      	movs	r0, #1
    1c40:	4b09      	ldr	r3, [pc, #36]	; (1c68 <NXDisplay_init+0x34>)
    1c42:	4798      	blx	r3
	gpio_set_pin(NXD_STR_PORT, NXD_STR_PIN, 1);
    1c44:	2201      	movs	r2, #1
    1c46:	2105      	movs	r1, #5
    1c48:	2001      	movs	r0, #1
    1c4a:	4b08      	ldr	r3, [pc, #32]	; (1c6c <NXDisplay_init+0x38>)
    1c4c:	4798      	blx	r3
	gpio_set_pin_dir(NXD_MOSI_PORT, NXD_MOSI_PIN, GPIO_DIR_OUT);
	gpio_set_pin(NXD_MOSI_PORT, NXD_MOSI_PIN, 1);
	gpio_set_pin_dir(NXD_SCK_PORT, NXD_SCK_PIN, GPIO_DIR_OUT);
	gpio_set_pin(NXD_SCK_PORT, NXD_SCK_PIN, 1);
	#else
	nxdisp_SPI_init();
    1c4e:	4b08      	ldr	r3, [pc, #32]	; (1c70 <NXDisplay_init+0x3c>)
    1c50:	4798      	blx	r3
	#endif
	memset(dispdata, 0, sizeof(dispdata));
    1c52:	220d      	movs	r2, #13
    1c54:	2100      	movs	r1, #0
    1c56:	0020      	movs	r0, r4
    1c58:	4b06      	ldr	r3, [pc, #24]	; (1c74 <NXDisplay_init+0x40>)
    1c5a:	4798      	blx	r3
	NXDisplay_updateDisp();
    1c5c:	4b06      	ldr	r3, [pc, #24]	; (1c78 <NXDisplay_init+0x44>)
    1c5e:	4798      	blx	r3
}
    1c60:	bd10      	pop	{r4, pc}
    1c62:	46c0      	nop			; (mov r8, r8)
    1c64:	20000a20 	.word	0x20000a20
    1c68:	00000d49 	.word	0x00000d49
    1c6c:	00000cfd 	.word	0x00000cfd
    1c70:	00001db5 	.word	0x00001db5
    1c74:	00003ea5 	.word	0x00003ea5
    1c78:	00001bdd 	.word	0x00001bdd

00001c7c <NXDisplay_dispBuf>:

void NXDisplay_dispBuf(input_buffer_t *input, int lalign) {
    1c7c:	b530      	push	{r4, r5, lr}
    1c7e:	b087      	sub	sp, #28
    1c80:	0004      	movs	r4, r0
	uint16_t buf[NX_NUM_TUBES];
	memset(buf, 0, sizeof(buf));
    1c82:	2212      	movs	r2, #18
    1c84:	2100      	movs	r1, #0
    1c86:	a801      	add	r0, sp, #4
    1c88:	4b1c      	ldr	r3, [pc, #112]	; (1cfc <NXDisplay_dispBuf+0x80>)
    1c8a:	4798      	blx	r3
	if (input->main.sign < 0) {
    1c8c:	2300      	movs	r3, #0
    1c8e:	56e3      	ldrsb	r3, [r4, r3]
    1c90:	2b00      	cmp	r3, #0
    1c92:	db03      	blt.n	1c9c <NXDisplay_dispBuf+0x20>
		buf[NX_SIGNTUBE_IDX] =  NX_MINUS;
	}
	for (int dig = 0, i = input->main.length - 1; i >= 0 && dig < NX_NUM_TUBES; i--, dig++) {
    1c94:	78a3      	ldrb	r3, [r4, #2]
    1c96:	3b01      	subs	r3, #1
    1c98:	2200      	movs	r2, #0
    1c9a:	e00f      	b.n	1cbc <NXDisplay_dispBuf+0x40>
		buf[NX_SIGNTUBE_IDX] =  NX_MINUS;
    1c9c:	2202      	movs	r2, #2
    1c9e:	ab01      	add	r3, sp, #4
    1ca0:	821a      	strh	r2, [r3, #16]
    1ca2:	e7f7      	b.n	1c94 <NXDisplay_dispBuf+0x18>
		if (i == input->main.decimal) {
			buf[dig] = NX_DPR;
    1ca4:	0051      	lsls	r1, r2, #1
    1ca6:	2580      	movs	r5, #128	; 0x80
    1ca8:	012d      	lsls	r5, r5, #4
    1caa:	a801      	add	r0, sp, #4
    1cac:	520d      	strh	r5, [r1, r0]
    1cae:	e003      	b.n	1cb8 <NXDisplay_dispBuf+0x3c>
		} else {
			buf[dig] = NUM_TO_NX(input->main.nums[i]);
    1cb0:	2001      	movs	r0, #1
    1cb2:	0051      	lsls	r1, r2, #1
    1cb4:	ad01      	add	r5, sp, #4
    1cb6:	5348      	strh	r0, [r1, r5]
	for (int dig = 0, i = input->main.length - 1; i >= 0 && dig < NX_NUM_TUBES; i--, dig++) {
    1cb8:	3b01      	subs	r3, #1
    1cba:	3201      	adds	r2, #1
    1cbc:	2b00      	cmp	r3, #0
    1cbe:	db0f      	blt.n	1ce0 <NXDisplay_dispBuf+0x64>
    1cc0:	2a08      	cmp	r2, #8
    1cc2:	dc0d      	bgt.n	1ce0 <NXDisplay_dispBuf+0x64>
		if (i == input->main.decimal) {
    1cc4:	2101      	movs	r1, #1
    1cc6:	5661      	ldrsb	r1, [r4, r1]
    1cc8:	428b      	cmp	r3, r1
    1cca:	d0eb      	beq.n	1ca4 <NXDisplay_dispBuf+0x28>
			buf[dig] = NUM_TO_NX(input->main.nums[i]);
    1ccc:	18e1      	adds	r1, r4, r3
    1cce:	78c9      	ldrb	r1, [r1, #3]
    1cd0:	b249      	sxtb	r1, r1
    1cd2:	2900      	cmp	r1, #0
    1cd4:	d0ec      	beq.n	1cb0 <NXDisplay_dispBuf+0x34>
    1cd6:	2080      	movs	r0, #128	; 0x80
    1cd8:	00c0      	lsls	r0, r0, #3
    1cda:	4108      	asrs	r0, r1
    1cdc:	b280      	uxth	r0, r0
    1cde:	e7e8      	b.n	1cb2 <NXDisplay_dispBuf+0x36>
		}
	}
	if (input->main.length == 0) {
    1ce0:	78a3      	ldrb	r3, [r4, #2]
    1ce2:	2b00      	cmp	r3, #0
    1ce4:	d102      	bne.n	1cec <NXDisplay_dispBuf+0x70>
		buf[0] = NUM_TO_NX(0);
    1ce6:	2201      	movs	r2, #1
    1ce8:	ab01      	add	r3, sp, #4
    1cea:	801a      	strh	r2, [r3, #0]
	}
	NXDisplay_loadData(buf);
    1cec:	a801      	add	r0, sp, #4
    1cee:	4b04      	ldr	r3, [pc, #16]	; (1d00 <NXDisplay_dispBuf+0x84>)
    1cf0:	4798      	blx	r3
	NXDisplay_updateDisp();
    1cf2:	4b04      	ldr	r3, [pc, #16]	; (1d04 <NXDisplay_dispBuf+0x88>)
    1cf4:	4798      	blx	r3
}
    1cf6:	b007      	add	sp, #28
    1cf8:	bd30      	pop	{r4, r5, pc}
    1cfa:	46c0      	nop			; (mov r8, r8)
    1cfc:	00003ea5 	.word	0x00003ea5
    1d00:	00001b95 	.word	0x00001b95
    1d04:	00001bdd 	.word	0x00001bdd

00001d08 <ws2812_SPI_init>:
 * Based on code from Luca Davidian
 * http://www.lucadavidian.com/2018/03/08/wifi-controlled-neo-pixels-strips/
 */
void ws2812_SPI_init() {
	/* enable peripheral clock */
	PM->APBCMASK.bit.SERCOM2_ = 1;
    1d08:	4a21      	ldr	r2, [pc, #132]	; (1d90 <ws2812_SPI_init+0x88>)
    1d0a:	6a11      	ldr	r1, [r2, #32]
    1d0c:	2310      	movs	r3, #16
    1d0e:	430b      	orrs	r3, r1
    1d10:	6213      	str	r3, [r2, #32]
	
	/* enable generic clock */
	GCLK->CLKCTRL.bit.ID = GCLK_CLKCTRL_ID_SERCOM2_CORE_Val;     // configure generic clock for SERCOM2
    1d12:	4b20      	ldr	r3, [pc, #128]	; (1d94 <ws2812_SPI_init+0x8c>)
    1d14:	885a      	ldrh	r2, [r3, #2]
    1d16:	213f      	movs	r1, #63	; 0x3f
    1d18:	438a      	bics	r2, r1
    1d1a:	2116      	movs	r1, #22
    1d1c:	430a      	orrs	r2, r1
    1d1e:	805a      	strh	r2, [r3, #2]
	
	GCLK->CLKCTRL.bit.GEN = GCLK_CLKCTRL_GEN_GCLK0_Val;          // source is generic clock generator 0 
    1d20:	885a      	ldrh	r2, [r3, #2]
    1d22:	491d      	ldr	r1, [pc, #116]	; (1d98 <ws2812_SPI_init+0x90>)
    1d24:	400a      	ands	r2, r1
    1d26:	805a      	strh	r2, [r3, #2]
	GCLK->CLKCTRL.bit.CLKEN = 1;                                 // enable generic clock
    1d28:	8859      	ldrh	r1, [r3, #2]
    1d2a:	2280      	movs	r2, #128	; 0x80
    1d2c:	01d2      	lsls	r2, r2, #7
    1d2e:	430a      	orrs	r2, r1
    1d30:	805a      	strh	r2, [r3, #2]
	
	/* select GPIO pins alternative function */
	PORT->Group[BACKLIGHT_MOSI_PORT].PINCFG[BACKLIGHT_MOSI_PIN].bit.PMUXEN = 1;                // enable alternative function for pin
    1d32:	4a1a      	ldr	r2, [pc, #104]	; (1d9c <ws2812_SPI_init+0x94>)
    1d34:	214c      	movs	r1, #76	; 0x4c
    1d36:	5c53      	ldrb	r3, [r2, r1]
    1d38:	2001      	movs	r0, #1
    1d3a:	4303      	orrs	r3, r0
    1d3c:	5453      	strb	r3, [r2, r1]
	PORT->Group[BACKLIGHT_MOSI_PORT].PMUX[BACKLIGHT_MOSI_PIN/2].bit.PMUXE = BACKLIGHT_MOSI_PMUX; // PMUX->SERCOM2
    1d3e:	3916      	subs	r1, #22
    1d40:	5c53      	ldrb	r3, [r2, r1]
    1d42:	200f      	movs	r0, #15
    1d44:	4383      	bics	r3, r0
    1d46:	2002      	movs	r0, #2
    1d48:	4303      	orrs	r3, r0
    1d4a:	5453      	strb	r3, [r2, r1]
	
	/* configure peripheral */
	BACKLIGHT_SERCOM->SPI.CTRLA.bit.DOPO = BACKLIGHT_MOSI_PAD;            // MOSI on pad 0 (pin PA12)
    1d4c:	4b14      	ldr	r3, [pc, #80]	; (1da0 <ws2812_SPI_init+0x98>)
    1d4e:	6819      	ldr	r1, [r3, #0]
    1d50:	4a14      	ldr	r2, [pc, #80]	; (1da4 <ws2812_SPI_init+0x9c>)
    1d52:	400a      	ands	r2, r1
    1d54:	601a      	str	r2, [r3, #0]
	BACKLIGHT_SERCOM->SPI.CTRLA.bit.CPHA = 0x00;  
    1d56:	6819      	ldr	r1, [r3, #0]
    1d58:	4a13      	ldr	r2, [pc, #76]	; (1da8 <ws2812_SPI_init+0xa0>)
    1d5a:	400a      	ands	r2, r1
    1d5c:	601a      	str	r2, [r3, #0]
	BACKLIGHT_SERCOM->SPI.CTRLA.bit.CPOL = 0x00;                          // transfer mode 0
    1d5e:	6819      	ldr	r1, [r3, #0]
    1d60:	4a12      	ldr	r2, [pc, #72]	; (1dac <ws2812_SPI_init+0xa4>)
    1d62:	400a      	ands	r2, r1
    1d64:	601a      	str	r2, [r3, #0]
	BACKLIGHT_SERCOM->SPI.CTRLA.bit.DORD = 0x00;                          // MSB first
    1d66:	6819      	ldr	r1, [r3, #0]
    1d68:	4a11      	ldr	r2, [pc, #68]	; (1db0 <ws2812_SPI_init+0xa8>)
    1d6a:	400a      	ands	r2, r1
    1d6c:	601a      	str	r2, [r3, #0]
	BACKLIGHT_SERCOM->SPI.CTRLA.bit.MODE = 0x03;                          // SPI master operation
    1d6e:	6819      	ldr	r1, [r3, #0]
    1d70:	221c      	movs	r2, #28
    1d72:	4391      	bics	r1, r2
    1d74:	3a10      	subs	r2, #16
    1d76:	430a      	orrs	r2, r1
    1d78:	601a      	str	r2, [r3, #0]
	BACKLIGHT_SERCOM->SPI.CTRLB.bit.CHSIZE = 0x00;                        // 8 bit character size
    1d7a:	6859      	ldr	r1, [r3, #4]
    1d7c:	2207      	movs	r2, #7
    1d7e:	4391      	bics	r1, r2
    1d80:	6059      	str	r1, [r3, #4]
	BACKLIGHT_SERCOM->SPI.BAUD.reg = 9;                                   // SPI frequency 2.4 MHz (BAUD = gclk/(2*f_baud) - 1)
    1d82:	2209      	movs	r2, #9
    1d84:	731a      	strb	r2, [r3, #12]
	
	/* enable peripheral */
	SERCOM2->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1d86:	681a      	ldr	r2, [r3, #0]
    1d88:	2102      	movs	r1, #2
    1d8a:	430a      	orrs	r2, r1
    1d8c:	601a      	str	r2, [r3, #0]
}
    1d8e:	4770      	bx	lr
    1d90:	40000400 	.word	0x40000400
    1d94:	40000c00 	.word	0x40000c00
    1d98:	fffff0ff 	.word	0xfffff0ff
    1d9c:	41004400 	.word	0x41004400
    1da0:	42001000 	.word	0x42001000
    1da4:	fffcffff 	.word	0xfffcffff
    1da8:	efffffff 	.word	0xefffffff
    1dac:	dfffffff 	.word	0xdfffffff
    1db0:	bfffffff 	.word	0xbfffffff

00001db4 <nxdisp_SPI_init>:

/* Initialize nxdisplay SPI on sercom 5 */
void nxdisp_SPI_init() {
    1db4:	b510      	push	{r4, lr}
	/* enable peripheral clock */
	PM->APBCMASK.bit.SERCOM5_ = 1;
    1db6:	4a27      	ldr	r2, [pc, #156]	; (1e54 <nxdisp_SPI_init+0xa0>)
    1db8:	6a11      	ldr	r1, [r2, #32]
    1dba:	2380      	movs	r3, #128	; 0x80
    1dbc:	430b      	orrs	r3, r1
    1dbe:	6213      	str	r3, [r2, #32]
	
	GCLK->CLKCTRL.bit.ID = GCLK_CLKCTRL_ID_SERCOM5_CORE_Val;
    1dc0:	4b25      	ldr	r3, [pc, #148]	; (1e58 <nxdisp_SPI_init+0xa4>)
    1dc2:	885a      	ldrh	r2, [r3, #2]
    1dc4:	213f      	movs	r1, #63	; 0x3f
    1dc6:	438a      	bics	r2, r1
    1dc8:	2119      	movs	r1, #25
    1dca:	430a      	orrs	r2, r1
    1dcc:	805a      	strh	r2, [r3, #2]
	
	GCLK->CLKCTRL.bit.GEN = GCLK_CLKCTRL_GEN_GCLK0_Val;          // source is generic clock generator 0
    1dce:	885a      	ldrh	r2, [r3, #2]
    1dd0:	4922      	ldr	r1, [pc, #136]	; (1e5c <nxdisp_SPI_init+0xa8>)
    1dd2:	400a      	ands	r2, r1
    1dd4:	805a      	strh	r2, [r3, #2]
	GCLK->CLKCTRL.bit.CLKEN = 1;                                 // enable generic clock
    1dd6:	8859      	ldrh	r1, [r3, #2]
    1dd8:	2280      	movs	r2, #128	; 0x80
    1dda:	01d2      	lsls	r2, r2, #7
    1ddc:	430a      	orrs	r2, r1
    1dde:	805a      	strh	r2, [r3, #2]

	/* select GPIO pins alternative function */
	PORT->Group[NXD_MOSI_PORT].PINCFG[NXD_MOSI_PIN].bit.PMUXEN = 1;				// enable alternative function for pin
    1de0:	4b1f      	ldr	r3, [pc, #124]	; (1e60 <nxdisp_SPI_init+0xac>)
    1de2:	22de      	movs	r2, #222	; 0xde
    1de4:	5c99      	ldrb	r1, [r3, r2]
    1de6:	2401      	movs	r4, #1
    1de8:	4321      	orrs	r1, r4
    1dea:	5499      	strb	r1, [r3, r2]
	PORT->Group[NXD_MOSI_PORT].PMUX[NXD_MOSI_PIN/2].bit.PMUXE = NXD_MOSI_PMUX;	// PMUX->SERCOM5
    1dec:	21bf      	movs	r1, #191	; 0xbf
    1dee:	5c5a      	ldrb	r2, [r3, r1]
    1df0:	200f      	movs	r0, #15
    1df2:	4382      	bics	r2, r0
    1df4:	2003      	movs	r0, #3
    1df6:	4302      	orrs	r2, r0
    1df8:	545a      	strb	r2, [r3, r1]
	
	PORT->Group[NXD_SCK_PORT].PINCFG[NXD_SCK_PIN].bit.PMUXEN = 1;				// enable alternative function for pin
    1dfa:	20df      	movs	r0, #223	; 0xdf
    1dfc:	5c1a      	ldrb	r2, [r3, r0]
    1dfe:	4322      	orrs	r2, r4
    1e00:	541a      	strb	r2, [r3, r0]
	PORT->Group[NXD_SCK_PORT].PMUX[NXD_SCK_PIN/2].bit.PMUXO = NXD_SCK_PMUX;		// PMUX->SERCOM5
    1e02:	5c58      	ldrb	r0, [r3, r1]
    1e04:	220f      	movs	r2, #15
    1e06:	4002      	ands	r2, r0
    1e08:	2030      	movs	r0, #48	; 0x30
    1e0a:	4302      	orrs	r2, r0
    1e0c:	545a      	strb	r2, [r3, r1]

	SERCOM5->SPI.CTRLA.bit.DOPO = 0x0;		// DO = Pad0, SCK = Pad1
    1e0e:	4b15      	ldr	r3, [pc, #84]	; (1e64 <nxdisp_SPI_init+0xb0>)
    1e10:	6819      	ldr	r1, [r3, #0]
    1e12:	4a15      	ldr	r2, [pc, #84]	; (1e68 <nxdisp_SPI_init+0xb4>)
    1e14:	400a      	ands	r2, r1
    1e16:	601a      	str	r2, [r3, #0]
	SERCOM5->SPI.CTRLA.bit.CPOL = 0x00;		// Falling edge active (since clock is inverted)
    1e18:	6819      	ldr	r1, [r3, #0]
    1e1a:	4a14      	ldr	r2, [pc, #80]	; (1e6c <nxdisp_SPI_init+0xb8>)
    1e1c:	400a      	ands	r2, r1
    1e1e:	601a      	str	r2, [r3, #0]
	SERCOM5->SPI.CTRLA.bit.DORD = 0x00;		// MSB first
    1e20:	6819      	ldr	r1, [r3, #0]
    1e22:	4a13      	ldr	r2, [pc, #76]	; (1e70 <nxdisp_SPI_init+0xbc>)
    1e24:	400a      	ands	r2, r1
    1e26:	601a      	str	r2, [r3, #0]
	SERCOM5->SPI.CTRLA.bit.MODE = 0x03;		// SPI master operation
    1e28:	6819      	ldr	r1, [r3, #0]
    1e2a:	221c      	movs	r2, #28
    1e2c:	4391      	bics	r1, r2
    1e2e:	3a10      	subs	r2, #16
    1e30:	430a      	orrs	r2, r1
    1e32:	601a      	str	r2, [r3, #0]
	SERCOM5->SPI.CTRLB.bit.CHSIZE = 0x00;	// 8 bit character size
    1e34:	6859      	ldr	r1, [r3, #4]
    1e36:	2207      	movs	r2, #7
    1e38:	4391      	bics	r1, r2
    1e3a:	6059      	str	r1, [r3, #4]
	
	SERCOM5->SPI.BAUD.reg = 39;				// SPI frequency 600 kHz 48M/(2*600k) - 1
    1e3c:	2227      	movs	r2, #39	; 0x27
    1e3e:	731a      	strb	r2, [r3, #12]
	
	// Enable the peripheral
	SERCOM5->SPI.CTRLA.bit.ENABLE = 1;
    1e40:	6819      	ldr	r1, [r3, #0]
    1e42:	3a25      	subs	r2, #37	; 0x25
    1e44:	430a      	orrs	r2, r1
    1e46:	601a      	str	r2, [r3, #0]
	while (SERCOM5->SPI.SYNCBUSY.bit.ENABLE); // Wait for the operation to complete
    1e48:	4b06      	ldr	r3, [pc, #24]	; (1e64 <nxdisp_SPI_init+0xb0>)
    1e4a:	69db      	ldr	r3, [r3, #28]
    1e4c:	079b      	lsls	r3, r3, #30
    1e4e:	d4fb      	bmi.n	1e48 <nxdisp_SPI_init+0x94>
}
    1e50:	bd10      	pop	{r4, pc}
    1e52:	46c0      	nop			; (mov r8, r8)
    1e54:	40000400 	.word	0x40000400
    1e58:	40000c00 	.word	0x40000c00
    1e5c:	fffff0ff 	.word	0xfffff0ff
    1e60:	41004400 	.word	0x41004400
    1e64:	42001c00 	.word	0x42001c00
    1e68:	fffcffff 	.word	0xfffcffff
    1e6c:	dfffffff 	.word	0xdfffffff
    1e70:	bfffffff 	.word	0xbfffffff

00001e74 <SSD_updateDisp>:
			}
		}
	}
}

void SSD_updateDisp() {
    1e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	gpio_set_pin(SSD_DIG0_PORT, SSD_DIG0_PIN, 1); // Active low, clear display to prevent ghosting
    1e76:	2201      	movs	r2, #1
    1e78:	2103      	movs	r1, #3
    1e7a:	2001      	movs	r0, #1
    1e7c:	4c46      	ldr	r4, [pc, #280]	; (1f98 <SSD_updateDisp+0x124>)
    1e7e:	47a0      	blx	r4
	gpio_set_pin(SSD_DIG1_PORT, SSD_DIG1_PIN, 1);
    1e80:	2201      	movs	r2, #1
    1e82:	2102      	movs	r1, #2
    1e84:	2001      	movs	r0, #1
    1e86:	47a0      	blx	r4
	gpio_set_pin(SSD_DIG2_PORT, SSD_DIG2_PIN, 1);
    1e88:	2201      	movs	r2, #1
    1e8a:	2101      	movs	r1, #1
    1e8c:	2001      	movs	r0, #1
    1e8e:	47a0      	blx	r4
	gpio_set_pin(SSD_DIG3_PORT, SSD_DIG3_PIN, 1);
    1e90:	2201      	movs	r2, #1
    1e92:	2100      	movs	r1, #0
    1e94:	2001      	movs	r0, #1
    1e96:	47a0      	blx	r4

	gpio_set_pin(SSD_SEG_PORT, SSD_SEGA_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_A));
    1e98:	4d40      	ldr	r5, [pc, #256]	; (1f9c <SSD_updateDisp+0x128>)
    1e9a:	682b      	ldr	r3, [r5, #0]
    1e9c:	789a      	ldrb	r2, [r3, #2]
    1e9e:	189b      	adds	r3, r3, r2
    1ea0:	78da      	ldrb	r2, [r3, #3]
    1ea2:	2601      	movs	r6, #1
    1ea4:	2701      	movs	r7, #1
    1ea6:	407a      	eors	r2, r7
    1ea8:	4032      	ands	r2, r6
    1eaa:	2110      	movs	r1, #16
    1eac:	2000      	movs	r0, #0
    1eae:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGB_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_B));
    1eb0:	682b      	ldr	r3, [r5, #0]
    1eb2:	789a      	ldrb	r2, [r3, #2]
    1eb4:	189b      	adds	r3, r3, r2
    1eb6:	78da      	ldrb	r2, [r3, #3]
    1eb8:	0852      	lsrs	r2, r2, #1
    1eba:	407a      	eors	r2, r7
    1ebc:	4032      	ands	r2, r6
    1ebe:	2111      	movs	r1, #17
    1ec0:	2000      	movs	r0, #0
    1ec2:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGC_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_C));
    1ec4:	682b      	ldr	r3, [r5, #0]
    1ec6:	789a      	ldrb	r2, [r3, #2]
    1ec8:	189b      	adds	r3, r3, r2
    1eca:	78da      	ldrb	r2, [r3, #3]
    1ecc:	0892      	lsrs	r2, r2, #2
    1ece:	407a      	eors	r2, r7
    1ed0:	4032      	ands	r2, r6
    1ed2:	2112      	movs	r1, #18
    1ed4:	2000      	movs	r0, #0
    1ed6:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGD_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_D));
    1ed8:	682b      	ldr	r3, [r5, #0]
    1eda:	789a      	ldrb	r2, [r3, #2]
    1edc:	189b      	adds	r3, r3, r2
    1ede:	78da      	ldrb	r2, [r3, #3]
    1ee0:	08d2      	lsrs	r2, r2, #3
    1ee2:	407a      	eors	r2, r7
    1ee4:	4032      	ands	r2, r6
    1ee6:	2113      	movs	r1, #19
    1ee8:	2000      	movs	r0, #0
    1eea:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGE_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_E));
    1eec:	682b      	ldr	r3, [r5, #0]
    1eee:	789a      	ldrb	r2, [r3, #2]
    1ef0:	189b      	adds	r3, r3, r2
    1ef2:	78da      	ldrb	r2, [r3, #3]
    1ef4:	0912      	lsrs	r2, r2, #4
    1ef6:	407a      	eors	r2, r7
    1ef8:	4032      	ands	r2, r6
    1efa:	2115      	movs	r1, #21
    1efc:	2000      	movs	r0, #0
    1efe:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGF_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_F));
    1f00:	682b      	ldr	r3, [r5, #0]
    1f02:	789a      	ldrb	r2, [r3, #2]
    1f04:	189b      	adds	r3, r3, r2
    1f06:	78da      	ldrb	r2, [r3, #3]
    1f08:	0952      	lsrs	r2, r2, #5
    1f0a:	407a      	eors	r2, r7
    1f0c:	4032      	ands	r2, r6
    1f0e:	210f      	movs	r1, #15
    1f10:	2000      	movs	r0, #0
    1f12:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGG_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_G));
    1f14:	682b      	ldr	r3, [r5, #0]
    1f16:	789a      	ldrb	r2, [r3, #2]
    1f18:	189b      	adds	r3, r3, r2
    1f1a:	78da      	ldrb	r2, [r3, #3]
    1f1c:	0992      	lsrs	r2, r2, #6
    1f1e:	407a      	eors	r2, r7
    1f20:	4032      	ands	r2, r6
    1f22:	2116      	movs	r1, #22
    1f24:	2000      	movs	r0, #0
    1f26:	47a0      	blx	r4
	gpio_set_pin(SSD_SEG_PORT, SSD_SEGDP_PIN, !(ssd->currentData[ssd->currentDig] & SSD_SEG_DP));
    1f28:	682b      	ldr	r3, [r5, #0]
    1f2a:	789a      	ldrb	r2, [r3, #2]
    1f2c:	189b      	adds	r3, r3, r2
    1f2e:	78da      	ldrb	r2, [r3, #3]
    1f30:	b252      	sxtb	r2, r2
    1f32:	43d2      	mvns	r2, r2
    1f34:	0fd2      	lsrs	r2, r2, #31
    1f36:	2117      	movs	r1, #23
    1f38:	2000      	movs	r0, #0
    1f3a:	47a0      	blx	r4

	gpio_set_pin(SSD_DIG0_PORT, SSD_DIG0_PIN, ssd->currentDig != 0); // Active low
    1f3c:	682b      	ldr	r3, [r5, #0]
    1f3e:	789a      	ldrb	r2, [r3, #2]
    1f40:	1e53      	subs	r3, r2, #1
    1f42:	419a      	sbcs	r2, r3
    1f44:	2103      	movs	r1, #3
    1f46:	2001      	movs	r0, #1
    1f48:	47a0      	blx	r4
	gpio_set_pin(SSD_DIG1_PORT, SSD_DIG1_PIN, ssd->currentDig != 1);
    1f4a:	682b      	ldr	r3, [r5, #0]
    1f4c:	789a      	ldrb	r2, [r3, #2]
    1f4e:	3a01      	subs	r2, #1
    1f50:	1e53      	subs	r3, r2, #1
    1f52:	419a      	sbcs	r2, r3
    1f54:	2102      	movs	r1, #2
    1f56:	2001      	movs	r0, #1
    1f58:	47a0      	blx	r4
	gpio_set_pin(SSD_DIG2_PORT, SSD_DIG2_PIN, ssd->currentDig != 2);
    1f5a:	682b      	ldr	r3, [r5, #0]
    1f5c:	789a      	ldrb	r2, [r3, #2]
    1f5e:	3a02      	subs	r2, #2
    1f60:	1e53      	subs	r3, r2, #1
    1f62:	419a      	sbcs	r2, r3
    1f64:	2101      	movs	r1, #1
    1f66:	2001      	movs	r0, #1
    1f68:	47a0      	blx	r4
	gpio_set_pin(SSD_DIG3_PORT, SSD_DIG3_PIN, ssd->currentDig != 3);
    1f6a:	682b      	ldr	r3, [r5, #0]
    1f6c:	789a      	ldrb	r2, [r3, #2]
    1f6e:	3a03      	subs	r2, #3
    1f70:	1e53      	subs	r3, r2, #1
    1f72:	419a      	sbcs	r2, r3
    1f74:	2100      	movs	r1, #0
    1f76:	2001      	movs	r0, #1
    1f78:	47a0      	blx	r4
	ssd->currentDig++;
    1f7a:	682a      	ldr	r2, [r5, #0]
    1f7c:	7893      	ldrb	r3, [r2, #2]
    1f7e:	3301      	adds	r3, #1
    1f80:	b2db      	uxtb	r3, r3
    1f82:	7093      	strb	r3, [r2, #2]
	if (ssd->currentDig >= DISP_SIZE + ssd->blankInterval) {
    1f84:	7891      	ldrb	r1, [r2, #2]
    1f86:	b2c9      	uxtb	r1, r1
    1f88:	8913      	ldrh	r3, [r2, #8]
    1f8a:	3304      	adds	r3, #4
    1f8c:	4299      	cmp	r1, r3
    1f8e:	db01      	blt.n	1f94 <SSD_updateDisp+0x120>
		ssd->currentDig = 0;
    1f90:	2300      	movs	r3, #0
    1f92:	7093      	strb	r3, [r2, #2]
	}
}
    1f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f96:	46c0      	nop			; (mov r8, r8)
    1f98:	00000cfd 	.word	0x00000cfd
    1f9c:	20000a34 	.word	0x20000a34

00001fa0 <SSDgpioInit>:
void SSD_setBrightness(int brightness) {
	
}


void SSDgpioInit() {
    1fa0:	b570      	push	{r4, r5, r6, lr}
	gpio_set_pin_dir(SSD_DIG0_PORT, SSD_DIG0_PIN, GPIO_DIR_OUT); // Active low
    1fa2:	2201      	movs	r2, #1
    1fa4:	2103      	movs	r1, #3
    1fa6:	2001      	movs	r0, #1
    1fa8:	4c27      	ldr	r4, [pc, #156]	; (2048 <SSDgpioInit+0xa8>)
    1faa:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_DIG1_PORT, SSD_DIG1_PIN, GPIO_DIR_OUT);
    1fac:	2201      	movs	r2, #1
    1fae:	2102      	movs	r1, #2
    1fb0:	2001      	movs	r0, #1
    1fb2:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_DIG2_PORT, SSD_DIG2_PIN, GPIO_DIR_OUT);
    1fb4:	2201      	movs	r2, #1
    1fb6:	2101      	movs	r1, #1
    1fb8:	2001      	movs	r0, #1
    1fba:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_DIG3_PORT, SSD_DIG3_PIN, GPIO_DIR_OUT);
    1fbc:	2201      	movs	r2, #1
    1fbe:	2100      	movs	r1, #0
    1fc0:	2001      	movs	r0, #1
    1fc2:	47a0      	blx	r4
	
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGA_PIN, 1);
    1fc4:	2201      	movs	r2, #1
    1fc6:	2110      	movs	r1, #16
    1fc8:	2000      	movs	r0, #0
    1fca:	4d20      	ldr	r5, [pc, #128]	; (204c <SSDgpioInit+0xac>)
    1fcc:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGB_PIN, 1);
    1fce:	2201      	movs	r2, #1
    1fd0:	2111      	movs	r1, #17
    1fd2:	2000      	movs	r0, #0
    1fd4:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGC_PIN, 1);
    1fd6:	2201      	movs	r2, #1
    1fd8:	2112      	movs	r1, #18
    1fda:	2000      	movs	r0, #0
    1fdc:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGD_PIN, 1);
    1fde:	2201      	movs	r2, #1
    1fe0:	2113      	movs	r1, #19
    1fe2:	2000      	movs	r0, #0
    1fe4:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGE_PIN, 1);
    1fe6:	2201      	movs	r2, #1
    1fe8:	2115      	movs	r1, #21
    1fea:	2000      	movs	r0, #0
    1fec:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGF_PIN, 1);
    1fee:	2201      	movs	r2, #1
    1ff0:	210f      	movs	r1, #15
    1ff2:	2000      	movs	r0, #0
    1ff4:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGG_PIN, 1);
    1ff6:	2201      	movs	r2, #1
    1ff8:	2116      	movs	r1, #22
    1ffa:	2000      	movs	r0, #0
    1ffc:	47a8      	blx	r5
	gpio_set_pin_drvstr(SSD_SEG_PORT, SSD_SEGDP_PIN, 1);
    1ffe:	2201      	movs	r2, #1
    2000:	2117      	movs	r1, #23
    2002:	2000      	movs	r0, #0
    2004:	47a8      	blx	r5

	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGA_PIN, GPIO_DIR_OUT);
    2006:	2201      	movs	r2, #1
    2008:	2110      	movs	r1, #16
    200a:	2000      	movs	r0, #0
    200c:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGB_PIN, GPIO_DIR_OUT);
    200e:	2201      	movs	r2, #1
    2010:	2111      	movs	r1, #17
    2012:	2000      	movs	r0, #0
    2014:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGC_PIN, GPIO_DIR_OUT);
    2016:	2201      	movs	r2, #1
    2018:	2112      	movs	r1, #18
    201a:	2000      	movs	r0, #0
    201c:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGD_PIN, GPIO_DIR_OUT);
    201e:	2201      	movs	r2, #1
    2020:	2113      	movs	r1, #19
    2022:	2000      	movs	r0, #0
    2024:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGE_PIN, GPIO_DIR_OUT);
    2026:	2201      	movs	r2, #1
    2028:	2115      	movs	r1, #21
    202a:	2000      	movs	r0, #0
    202c:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGF_PIN, GPIO_DIR_OUT);
    202e:	2201      	movs	r2, #1
    2030:	210f      	movs	r1, #15
    2032:	2000      	movs	r0, #0
    2034:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGG_PIN, GPIO_DIR_OUT);
    2036:	2201      	movs	r2, #1
    2038:	2116      	movs	r1, #22
    203a:	2000      	movs	r0, #0
    203c:	47a0      	blx	r4
	gpio_set_pin_dir(SSD_SEG_PORT, SSD_SEGDP_PIN, GPIO_DIR_OUT);
    203e:	2201      	movs	r2, #1
    2040:	2117      	movs	r1, #23
    2042:	2000      	movs	r0, #0
    2044:	47a0      	blx	r4
}
    2046:	bd70      	pop	{r4, r5, r6, pc}
    2048:	00000d49 	.word	0x00000d49
    204c:	00000de5 	.word	0x00000de5

00002050 <SSD_init>:

void SSD_init(SSDisplay* disp_status) {
    2050:	b510      	push	{r4, lr}
	ssd = disp_status;
    2052:	4b09      	ldr	r3, [pc, #36]	; (2078 <SSD_init+0x28>)
    2054:	6018      	str	r0, [r3, #0]
	ssd->update_period_ticks = 16;
    2056:	2310      	movs	r3, #16
    2058:	8003      	strh	r3, [r0, #0]
	ssd->currentDig = 0;
    205a:	2300      	movs	r3, #0
    205c:	7083      	strb	r3, [r0, #2]
	for (int i = 0; i < DISP_SIZE; i++) {
    205e:	e003      	b.n	2068 <SSD_init+0x18>
		ssd->currentData[i] = 0;
    2060:	18c2      	adds	r2, r0, r3
    2062:	2100      	movs	r1, #0
    2064:	70d1      	strb	r1, [r2, #3]
	for (int i = 0; i < DISP_SIZE; i++) {
    2066:	3301      	adds	r3, #1
    2068:	2b03      	cmp	r3, #3
    206a:	ddf9      	ble.n	2060 <SSD_init+0x10>
	}
	ssd->blankInterval = 0;
    206c:	2300      	movs	r3, #0
    206e:	8103      	strh	r3, [r0, #8]
	SSDgpioInit();
    2070:	4b02      	ldr	r3, [pc, #8]	; (207c <SSD_init+0x2c>)
    2072:	4798      	blx	r3
}
    2074:	bd10      	pop	{r4, pc}
    2076:	46c0      	nop			; (mov r8, r8)
    2078:	20000a34 	.word	0x20000a34
    207c:	00001fa1 	.word	0x00001fa1

00002080 <__divsi3>:
    2080:	4603      	mov	r3, r0
    2082:	430b      	orrs	r3, r1
    2084:	d47f      	bmi.n	2186 <__divsi3+0x106>
    2086:	2200      	movs	r2, #0
    2088:	0843      	lsrs	r3, r0, #1
    208a:	428b      	cmp	r3, r1
    208c:	d374      	bcc.n	2178 <__divsi3+0xf8>
    208e:	0903      	lsrs	r3, r0, #4
    2090:	428b      	cmp	r3, r1
    2092:	d35f      	bcc.n	2154 <__divsi3+0xd4>
    2094:	0a03      	lsrs	r3, r0, #8
    2096:	428b      	cmp	r3, r1
    2098:	d344      	bcc.n	2124 <__divsi3+0xa4>
    209a:	0b03      	lsrs	r3, r0, #12
    209c:	428b      	cmp	r3, r1
    209e:	d328      	bcc.n	20f2 <__divsi3+0x72>
    20a0:	0c03      	lsrs	r3, r0, #16
    20a2:	428b      	cmp	r3, r1
    20a4:	d30d      	bcc.n	20c2 <__divsi3+0x42>
    20a6:	22ff      	movs	r2, #255	; 0xff
    20a8:	0209      	lsls	r1, r1, #8
    20aa:	ba12      	rev	r2, r2
    20ac:	0c03      	lsrs	r3, r0, #16
    20ae:	428b      	cmp	r3, r1
    20b0:	d302      	bcc.n	20b8 <__divsi3+0x38>
    20b2:	1212      	asrs	r2, r2, #8
    20b4:	0209      	lsls	r1, r1, #8
    20b6:	d065      	beq.n	2184 <__divsi3+0x104>
    20b8:	0b03      	lsrs	r3, r0, #12
    20ba:	428b      	cmp	r3, r1
    20bc:	d319      	bcc.n	20f2 <__divsi3+0x72>
    20be:	e000      	b.n	20c2 <__divsi3+0x42>
    20c0:	0a09      	lsrs	r1, r1, #8
    20c2:	0bc3      	lsrs	r3, r0, #15
    20c4:	428b      	cmp	r3, r1
    20c6:	d301      	bcc.n	20cc <__divsi3+0x4c>
    20c8:	03cb      	lsls	r3, r1, #15
    20ca:	1ac0      	subs	r0, r0, r3
    20cc:	4152      	adcs	r2, r2
    20ce:	0b83      	lsrs	r3, r0, #14
    20d0:	428b      	cmp	r3, r1
    20d2:	d301      	bcc.n	20d8 <__divsi3+0x58>
    20d4:	038b      	lsls	r3, r1, #14
    20d6:	1ac0      	subs	r0, r0, r3
    20d8:	4152      	adcs	r2, r2
    20da:	0b43      	lsrs	r3, r0, #13
    20dc:	428b      	cmp	r3, r1
    20de:	d301      	bcc.n	20e4 <__divsi3+0x64>
    20e0:	034b      	lsls	r3, r1, #13
    20e2:	1ac0      	subs	r0, r0, r3
    20e4:	4152      	adcs	r2, r2
    20e6:	0b03      	lsrs	r3, r0, #12
    20e8:	428b      	cmp	r3, r1
    20ea:	d301      	bcc.n	20f0 <__divsi3+0x70>
    20ec:	030b      	lsls	r3, r1, #12
    20ee:	1ac0      	subs	r0, r0, r3
    20f0:	4152      	adcs	r2, r2
    20f2:	0ac3      	lsrs	r3, r0, #11
    20f4:	428b      	cmp	r3, r1
    20f6:	d301      	bcc.n	20fc <__divsi3+0x7c>
    20f8:	02cb      	lsls	r3, r1, #11
    20fa:	1ac0      	subs	r0, r0, r3
    20fc:	4152      	adcs	r2, r2
    20fe:	0a83      	lsrs	r3, r0, #10
    2100:	428b      	cmp	r3, r1
    2102:	d301      	bcc.n	2108 <__divsi3+0x88>
    2104:	028b      	lsls	r3, r1, #10
    2106:	1ac0      	subs	r0, r0, r3
    2108:	4152      	adcs	r2, r2
    210a:	0a43      	lsrs	r3, r0, #9
    210c:	428b      	cmp	r3, r1
    210e:	d301      	bcc.n	2114 <__divsi3+0x94>
    2110:	024b      	lsls	r3, r1, #9
    2112:	1ac0      	subs	r0, r0, r3
    2114:	4152      	adcs	r2, r2
    2116:	0a03      	lsrs	r3, r0, #8
    2118:	428b      	cmp	r3, r1
    211a:	d301      	bcc.n	2120 <__divsi3+0xa0>
    211c:	020b      	lsls	r3, r1, #8
    211e:	1ac0      	subs	r0, r0, r3
    2120:	4152      	adcs	r2, r2
    2122:	d2cd      	bcs.n	20c0 <__divsi3+0x40>
    2124:	09c3      	lsrs	r3, r0, #7
    2126:	428b      	cmp	r3, r1
    2128:	d301      	bcc.n	212e <__divsi3+0xae>
    212a:	01cb      	lsls	r3, r1, #7
    212c:	1ac0      	subs	r0, r0, r3
    212e:	4152      	adcs	r2, r2
    2130:	0983      	lsrs	r3, r0, #6
    2132:	428b      	cmp	r3, r1
    2134:	d301      	bcc.n	213a <__divsi3+0xba>
    2136:	018b      	lsls	r3, r1, #6
    2138:	1ac0      	subs	r0, r0, r3
    213a:	4152      	adcs	r2, r2
    213c:	0943      	lsrs	r3, r0, #5
    213e:	428b      	cmp	r3, r1
    2140:	d301      	bcc.n	2146 <__divsi3+0xc6>
    2142:	014b      	lsls	r3, r1, #5
    2144:	1ac0      	subs	r0, r0, r3
    2146:	4152      	adcs	r2, r2
    2148:	0903      	lsrs	r3, r0, #4
    214a:	428b      	cmp	r3, r1
    214c:	d301      	bcc.n	2152 <__divsi3+0xd2>
    214e:	010b      	lsls	r3, r1, #4
    2150:	1ac0      	subs	r0, r0, r3
    2152:	4152      	adcs	r2, r2
    2154:	08c3      	lsrs	r3, r0, #3
    2156:	428b      	cmp	r3, r1
    2158:	d301      	bcc.n	215e <__divsi3+0xde>
    215a:	00cb      	lsls	r3, r1, #3
    215c:	1ac0      	subs	r0, r0, r3
    215e:	4152      	adcs	r2, r2
    2160:	0883      	lsrs	r3, r0, #2
    2162:	428b      	cmp	r3, r1
    2164:	d301      	bcc.n	216a <__divsi3+0xea>
    2166:	008b      	lsls	r3, r1, #2
    2168:	1ac0      	subs	r0, r0, r3
    216a:	4152      	adcs	r2, r2
    216c:	0843      	lsrs	r3, r0, #1
    216e:	428b      	cmp	r3, r1
    2170:	d301      	bcc.n	2176 <__divsi3+0xf6>
    2172:	004b      	lsls	r3, r1, #1
    2174:	1ac0      	subs	r0, r0, r3
    2176:	4152      	adcs	r2, r2
    2178:	1a41      	subs	r1, r0, r1
    217a:	d200      	bcs.n	217e <__divsi3+0xfe>
    217c:	4601      	mov	r1, r0
    217e:	4152      	adcs	r2, r2
    2180:	4610      	mov	r0, r2
    2182:	4770      	bx	lr
    2184:	e05d      	b.n	2242 <__divsi3+0x1c2>
    2186:	0fca      	lsrs	r2, r1, #31
    2188:	d000      	beq.n	218c <__divsi3+0x10c>
    218a:	4249      	negs	r1, r1
    218c:	1003      	asrs	r3, r0, #32
    218e:	d300      	bcc.n	2192 <__divsi3+0x112>
    2190:	4240      	negs	r0, r0
    2192:	4053      	eors	r3, r2
    2194:	2200      	movs	r2, #0
    2196:	469c      	mov	ip, r3
    2198:	0903      	lsrs	r3, r0, #4
    219a:	428b      	cmp	r3, r1
    219c:	d32d      	bcc.n	21fa <__divsi3+0x17a>
    219e:	0a03      	lsrs	r3, r0, #8
    21a0:	428b      	cmp	r3, r1
    21a2:	d312      	bcc.n	21ca <__divsi3+0x14a>
    21a4:	22fc      	movs	r2, #252	; 0xfc
    21a6:	0189      	lsls	r1, r1, #6
    21a8:	ba12      	rev	r2, r2
    21aa:	0a03      	lsrs	r3, r0, #8
    21ac:	428b      	cmp	r3, r1
    21ae:	d30c      	bcc.n	21ca <__divsi3+0x14a>
    21b0:	0189      	lsls	r1, r1, #6
    21b2:	1192      	asrs	r2, r2, #6
    21b4:	428b      	cmp	r3, r1
    21b6:	d308      	bcc.n	21ca <__divsi3+0x14a>
    21b8:	0189      	lsls	r1, r1, #6
    21ba:	1192      	asrs	r2, r2, #6
    21bc:	428b      	cmp	r3, r1
    21be:	d304      	bcc.n	21ca <__divsi3+0x14a>
    21c0:	0189      	lsls	r1, r1, #6
    21c2:	d03a      	beq.n	223a <__divsi3+0x1ba>
    21c4:	1192      	asrs	r2, r2, #6
    21c6:	e000      	b.n	21ca <__divsi3+0x14a>
    21c8:	0989      	lsrs	r1, r1, #6
    21ca:	09c3      	lsrs	r3, r0, #7
    21cc:	428b      	cmp	r3, r1
    21ce:	d301      	bcc.n	21d4 <__divsi3+0x154>
    21d0:	01cb      	lsls	r3, r1, #7
    21d2:	1ac0      	subs	r0, r0, r3
    21d4:	4152      	adcs	r2, r2
    21d6:	0983      	lsrs	r3, r0, #6
    21d8:	428b      	cmp	r3, r1
    21da:	d301      	bcc.n	21e0 <__divsi3+0x160>
    21dc:	018b      	lsls	r3, r1, #6
    21de:	1ac0      	subs	r0, r0, r3
    21e0:	4152      	adcs	r2, r2
    21e2:	0943      	lsrs	r3, r0, #5
    21e4:	428b      	cmp	r3, r1
    21e6:	d301      	bcc.n	21ec <__divsi3+0x16c>
    21e8:	014b      	lsls	r3, r1, #5
    21ea:	1ac0      	subs	r0, r0, r3
    21ec:	4152      	adcs	r2, r2
    21ee:	0903      	lsrs	r3, r0, #4
    21f0:	428b      	cmp	r3, r1
    21f2:	d301      	bcc.n	21f8 <__divsi3+0x178>
    21f4:	010b      	lsls	r3, r1, #4
    21f6:	1ac0      	subs	r0, r0, r3
    21f8:	4152      	adcs	r2, r2
    21fa:	08c3      	lsrs	r3, r0, #3
    21fc:	428b      	cmp	r3, r1
    21fe:	d301      	bcc.n	2204 <__divsi3+0x184>
    2200:	00cb      	lsls	r3, r1, #3
    2202:	1ac0      	subs	r0, r0, r3
    2204:	4152      	adcs	r2, r2
    2206:	0883      	lsrs	r3, r0, #2
    2208:	428b      	cmp	r3, r1
    220a:	d301      	bcc.n	2210 <__divsi3+0x190>
    220c:	008b      	lsls	r3, r1, #2
    220e:	1ac0      	subs	r0, r0, r3
    2210:	4152      	adcs	r2, r2
    2212:	d2d9      	bcs.n	21c8 <__divsi3+0x148>
    2214:	0843      	lsrs	r3, r0, #1
    2216:	428b      	cmp	r3, r1
    2218:	d301      	bcc.n	221e <__divsi3+0x19e>
    221a:	004b      	lsls	r3, r1, #1
    221c:	1ac0      	subs	r0, r0, r3
    221e:	4152      	adcs	r2, r2
    2220:	1a41      	subs	r1, r0, r1
    2222:	d200      	bcs.n	2226 <__divsi3+0x1a6>
    2224:	4601      	mov	r1, r0
    2226:	4663      	mov	r3, ip
    2228:	4152      	adcs	r2, r2
    222a:	105b      	asrs	r3, r3, #1
    222c:	4610      	mov	r0, r2
    222e:	d301      	bcc.n	2234 <__divsi3+0x1b4>
    2230:	4240      	negs	r0, r0
    2232:	2b00      	cmp	r3, #0
    2234:	d500      	bpl.n	2238 <__divsi3+0x1b8>
    2236:	4249      	negs	r1, r1
    2238:	4770      	bx	lr
    223a:	4663      	mov	r3, ip
    223c:	105b      	asrs	r3, r3, #1
    223e:	d300      	bcc.n	2242 <__divsi3+0x1c2>
    2240:	4240      	negs	r0, r0
    2242:	b501      	push	{r0, lr}
    2244:	2000      	movs	r0, #0
    2246:	f000 f805 	bl	2254 <__aeabi_idiv0>
    224a:	bd02      	pop	{r1, pc}

0000224c <__aeabi_idivmod>:
    224c:	2900      	cmp	r1, #0
    224e:	d0f8      	beq.n	2242 <__divsi3+0x1c2>
    2250:	e716      	b.n	2080 <__divsi3>
    2252:	4770      	bx	lr

00002254 <__aeabi_idiv0>:
    2254:	4770      	bx	lr
    2256:	46c0      	nop			; (mov r8, r8)

00002258 <__aeabi_cdrcmple>:
    2258:	4684      	mov	ip, r0
    225a:	1c10      	adds	r0, r2, #0
    225c:	4662      	mov	r2, ip
    225e:	468c      	mov	ip, r1
    2260:	1c19      	adds	r1, r3, #0
    2262:	4663      	mov	r3, ip
    2264:	e000      	b.n	2268 <__aeabi_cdcmpeq>
    2266:	46c0      	nop			; (mov r8, r8)

00002268 <__aeabi_cdcmpeq>:
    2268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    226a:	f000 ff15 	bl	3098 <__ledf2>
    226e:	2800      	cmp	r0, #0
    2270:	d401      	bmi.n	2276 <__aeabi_cdcmpeq+0xe>
    2272:	2100      	movs	r1, #0
    2274:	42c8      	cmn	r0, r1
    2276:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00002278 <__aeabi_dcmpeq>:
    2278:	b510      	push	{r4, lr}
    227a:	f000 fe6f 	bl	2f5c <__eqdf2>
    227e:	4240      	negs	r0, r0
    2280:	3001      	adds	r0, #1
    2282:	bd10      	pop	{r4, pc}

00002284 <__aeabi_dcmplt>:
    2284:	b510      	push	{r4, lr}
    2286:	f000 ff07 	bl	3098 <__ledf2>
    228a:	2800      	cmp	r0, #0
    228c:	db01      	blt.n	2292 <__aeabi_dcmplt+0xe>
    228e:	2000      	movs	r0, #0
    2290:	bd10      	pop	{r4, pc}
    2292:	2001      	movs	r0, #1
    2294:	bd10      	pop	{r4, pc}
    2296:	46c0      	nop			; (mov r8, r8)

00002298 <__aeabi_dcmple>:
    2298:	b510      	push	{r4, lr}
    229a:	f000 fefd 	bl	3098 <__ledf2>
    229e:	2800      	cmp	r0, #0
    22a0:	dd01      	ble.n	22a6 <__aeabi_dcmple+0xe>
    22a2:	2000      	movs	r0, #0
    22a4:	bd10      	pop	{r4, pc}
    22a6:	2001      	movs	r0, #1
    22a8:	bd10      	pop	{r4, pc}
    22aa:	46c0      	nop			; (mov r8, r8)

000022ac <__aeabi_dcmpgt>:
    22ac:	b510      	push	{r4, lr}
    22ae:	f000 fe8f 	bl	2fd0 <__gedf2>
    22b2:	2800      	cmp	r0, #0
    22b4:	dc01      	bgt.n	22ba <__aeabi_dcmpgt+0xe>
    22b6:	2000      	movs	r0, #0
    22b8:	bd10      	pop	{r4, pc}
    22ba:	2001      	movs	r0, #1
    22bc:	bd10      	pop	{r4, pc}
    22be:	46c0      	nop			; (mov r8, r8)

000022c0 <__aeabi_dcmpge>:
    22c0:	b510      	push	{r4, lr}
    22c2:	f000 fe85 	bl	2fd0 <__gedf2>
    22c6:	2800      	cmp	r0, #0
    22c8:	da01      	bge.n	22ce <__aeabi_dcmpge+0xe>
    22ca:	2000      	movs	r0, #0
    22cc:	bd10      	pop	{r4, pc}
    22ce:	2001      	movs	r0, #1
    22d0:	bd10      	pop	{r4, pc}
    22d2:	46c0      	nop			; (mov r8, r8)

000022d4 <__aeabi_dadd>:
    22d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22d6:	4645      	mov	r5, r8
    22d8:	46de      	mov	lr, fp
    22da:	4657      	mov	r7, sl
    22dc:	464e      	mov	r6, r9
    22de:	030c      	lsls	r4, r1, #12
    22e0:	b5e0      	push	{r5, r6, r7, lr}
    22e2:	004e      	lsls	r6, r1, #1
    22e4:	0fc9      	lsrs	r1, r1, #31
    22e6:	4688      	mov	r8, r1
    22e8:	000d      	movs	r5, r1
    22ea:	0a61      	lsrs	r1, r4, #9
    22ec:	0f44      	lsrs	r4, r0, #29
    22ee:	430c      	orrs	r4, r1
    22f0:	00c7      	lsls	r7, r0, #3
    22f2:	0319      	lsls	r1, r3, #12
    22f4:	0058      	lsls	r0, r3, #1
    22f6:	0fdb      	lsrs	r3, r3, #31
    22f8:	469b      	mov	fp, r3
    22fa:	0a4b      	lsrs	r3, r1, #9
    22fc:	0f51      	lsrs	r1, r2, #29
    22fe:	430b      	orrs	r3, r1
    2300:	0d76      	lsrs	r6, r6, #21
    2302:	0d40      	lsrs	r0, r0, #21
    2304:	0019      	movs	r1, r3
    2306:	00d2      	lsls	r2, r2, #3
    2308:	45d8      	cmp	r8, fp
    230a:	d100      	bne.n	230e <__aeabi_dadd+0x3a>
    230c:	e0ae      	b.n	246c <__aeabi_dadd+0x198>
    230e:	1a35      	subs	r5, r6, r0
    2310:	2d00      	cmp	r5, #0
    2312:	dc00      	bgt.n	2316 <__aeabi_dadd+0x42>
    2314:	e0f6      	b.n	2504 <__aeabi_dadd+0x230>
    2316:	2800      	cmp	r0, #0
    2318:	d10f      	bne.n	233a <__aeabi_dadd+0x66>
    231a:	4313      	orrs	r3, r2
    231c:	d100      	bne.n	2320 <__aeabi_dadd+0x4c>
    231e:	e0db      	b.n	24d8 <__aeabi_dadd+0x204>
    2320:	1e6b      	subs	r3, r5, #1
    2322:	2b00      	cmp	r3, #0
    2324:	d000      	beq.n	2328 <__aeabi_dadd+0x54>
    2326:	e137      	b.n	2598 <__aeabi_dadd+0x2c4>
    2328:	1aba      	subs	r2, r7, r2
    232a:	4297      	cmp	r7, r2
    232c:	41bf      	sbcs	r7, r7
    232e:	1a64      	subs	r4, r4, r1
    2330:	427f      	negs	r7, r7
    2332:	1be4      	subs	r4, r4, r7
    2334:	2601      	movs	r6, #1
    2336:	0017      	movs	r7, r2
    2338:	e024      	b.n	2384 <__aeabi_dadd+0xb0>
    233a:	4bc6      	ldr	r3, [pc, #792]	; (2654 <__aeabi_dadd+0x380>)
    233c:	429e      	cmp	r6, r3
    233e:	d04d      	beq.n	23dc <__aeabi_dadd+0x108>
    2340:	2380      	movs	r3, #128	; 0x80
    2342:	041b      	lsls	r3, r3, #16
    2344:	4319      	orrs	r1, r3
    2346:	2d38      	cmp	r5, #56	; 0x38
    2348:	dd00      	ble.n	234c <__aeabi_dadd+0x78>
    234a:	e107      	b.n	255c <__aeabi_dadd+0x288>
    234c:	2d1f      	cmp	r5, #31
    234e:	dd00      	ble.n	2352 <__aeabi_dadd+0x7e>
    2350:	e138      	b.n	25c4 <__aeabi_dadd+0x2f0>
    2352:	2020      	movs	r0, #32
    2354:	1b43      	subs	r3, r0, r5
    2356:	469a      	mov	sl, r3
    2358:	000b      	movs	r3, r1
    235a:	4650      	mov	r0, sl
    235c:	4083      	lsls	r3, r0
    235e:	4699      	mov	r9, r3
    2360:	0013      	movs	r3, r2
    2362:	4648      	mov	r0, r9
    2364:	40eb      	lsrs	r3, r5
    2366:	4318      	orrs	r0, r3
    2368:	0003      	movs	r3, r0
    236a:	4650      	mov	r0, sl
    236c:	4082      	lsls	r2, r0
    236e:	1e50      	subs	r0, r2, #1
    2370:	4182      	sbcs	r2, r0
    2372:	40e9      	lsrs	r1, r5
    2374:	431a      	orrs	r2, r3
    2376:	1aba      	subs	r2, r7, r2
    2378:	1a61      	subs	r1, r4, r1
    237a:	4297      	cmp	r7, r2
    237c:	41a4      	sbcs	r4, r4
    237e:	0017      	movs	r7, r2
    2380:	4264      	negs	r4, r4
    2382:	1b0c      	subs	r4, r1, r4
    2384:	0223      	lsls	r3, r4, #8
    2386:	d562      	bpl.n	244e <__aeabi_dadd+0x17a>
    2388:	0264      	lsls	r4, r4, #9
    238a:	0a65      	lsrs	r5, r4, #9
    238c:	2d00      	cmp	r5, #0
    238e:	d100      	bne.n	2392 <__aeabi_dadd+0xbe>
    2390:	e0df      	b.n	2552 <__aeabi_dadd+0x27e>
    2392:	0028      	movs	r0, r5
    2394:	f001 fd02 	bl	3d9c <__clzsi2>
    2398:	0003      	movs	r3, r0
    239a:	3b08      	subs	r3, #8
    239c:	2b1f      	cmp	r3, #31
    239e:	dd00      	ble.n	23a2 <__aeabi_dadd+0xce>
    23a0:	e0d2      	b.n	2548 <__aeabi_dadd+0x274>
    23a2:	2220      	movs	r2, #32
    23a4:	003c      	movs	r4, r7
    23a6:	1ad2      	subs	r2, r2, r3
    23a8:	409d      	lsls	r5, r3
    23aa:	40d4      	lsrs	r4, r2
    23ac:	409f      	lsls	r7, r3
    23ae:	4325      	orrs	r5, r4
    23b0:	429e      	cmp	r6, r3
    23b2:	dd00      	ble.n	23b6 <__aeabi_dadd+0xe2>
    23b4:	e0c4      	b.n	2540 <__aeabi_dadd+0x26c>
    23b6:	1b9e      	subs	r6, r3, r6
    23b8:	1c73      	adds	r3, r6, #1
    23ba:	2b1f      	cmp	r3, #31
    23bc:	dd00      	ble.n	23c0 <__aeabi_dadd+0xec>
    23be:	e0f1      	b.n	25a4 <__aeabi_dadd+0x2d0>
    23c0:	2220      	movs	r2, #32
    23c2:	0038      	movs	r0, r7
    23c4:	0029      	movs	r1, r5
    23c6:	1ad2      	subs	r2, r2, r3
    23c8:	40d8      	lsrs	r0, r3
    23ca:	4091      	lsls	r1, r2
    23cc:	4097      	lsls	r7, r2
    23ce:	002c      	movs	r4, r5
    23d0:	4301      	orrs	r1, r0
    23d2:	1e78      	subs	r0, r7, #1
    23d4:	4187      	sbcs	r7, r0
    23d6:	40dc      	lsrs	r4, r3
    23d8:	2600      	movs	r6, #0
    23da:	430f      	orrs	r7, r1
    23dc:	077b      	lsls	r3, r7, #29
    23de:	d009      	beq.n	23f4 <__aeabi_dadd+0x120>
    23e0:	230f      	movs	r3, #15
    23e2:	403b      	ands	r3, r7
    23e4:	2b04      	cmp	r3, #4
    23e6:	d005      	beq.n	23f4 <__aeabi_dadd+0x120>
    23e8:	1d3b      	adds	r3, r7, #4
    23ea:	42bb      	cmp	r3, r7
    23ec:	41bf      	sbcs	r7, r7
    23ee:	427f      	negs	r7, r7
    23f0:	19e4      	adds	r4, r4, r7
    23f2:	001f      	movs	r7, r3
    23f4:	0223      	lsls	r3, r4, #8
    23f6:	d52c      	bpl.n	2452 <__aeabi_dadd+0x17e>
    23f8:	4b96      	ldr	r3, [pc, #600]	; (2654 <__aeabi_dadd+0x380>)
    23fa:	3601      	adds	r6, #1
    23fc:	429e      	cmp	r6, r3
    23fe:	d100      	bne.n	2402 <__aeabi_dadd+0x12e>
    2400:	e09a      	b.n	2538 <__aeabi_dadd+0x264>
    2402:	4645      	mov	r5, r8
    2404:	4b94      	ldr	r3, [pc, #592]	; (2658 <__aeabi_dadd+0x384>)
    2406:	08ff      	lsrs	r7, r7, #3
    2408:	401c      	ands	r4, r3
    240a:	0760      	lsls	r0, r4, #29
    240c:	0576      	lsls	r6, r6, #21
    240e:	0264      	lsls	r4, r4, #9
    2410:	4307      	orrs	r7, r0
    2412:	0b24      	lsrs	r4, r4, #12
    2414:	0d76      	lsrs	r6, r6, #21
    2416:	2100      	movs	r1, #0
    2418:	0324      	lsls	r4, r4, #12
    241a:	0b23      	lsrs	r3, r4, #12
    241c:	0d0c      	lsrs	r4, r1, #20
    241e:	4a8f      	ldr	r2, [pc, #572]	; (265c <__aeabi_dadd+0x388>)
    2420:	0524      	lsls	r4, r4, #20
    2422:	431c      	orrs	r4, r3
    2424:	4014      	ands	r4, r2
    2426:	0533      	lsls	r3, r6, #20
    2428:	4323      	orrs	r3, r4
    242a:	005b      	lsls	r3, r3, #1
    242c:	07ed      	lsls	r5, r5, #31
    242e:	085b      	lsrs	r3, r3, #1
    2430:	432b      	orrs	r3, r5
    2432:	0038      	movs	r0, r7
    2434:	0019      	movs	r1, r3
    2436:	bc3c      	pop	{r2, r3, r4, r5}
    2438:	4690      	mov	r8, r2
    243a:	4699      	mov	r9, r3
    243c:	46a2      	mov	sl, r4
    243e:	46ab      	mov	fp, r5
    2440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2442:	4664      	mov	r4, ip
    2444:	4304      	orrs	r4, r0
    2446:	d100      	bne.n	244a <__aeabi_dadd+0x176>
    2448:	e211      	b.n	286e <__aeabi_dadd+0x59a>
    244a:	0004      	movs	r4, r0
    244c:	4667      	mov	r7, ip
    244e:	077b      	lsls	r3, r7, #29
    2450:	d1c6      	bne.n	23e0 <__aeabi_dadd+0x10c>
    2452:	4645      	mov	r5, r8
    2454:	0760      	lsls	r0, r4, #29
    2456:	08ff      	lsrs	r7, r7, #3
    2458:	4307      	orrs	r7, r0
    245a:	08e4      	lsrs	r4, r4, #3
    245c:	4b7d      	ldr	r3, [pc, #500]	; (2654 <__aeabi_dadd+0x380>)
    245e:	429e      	cmp	r6, r3
    2460:	d030      	beq.n	24c4 <__aeabi_dadd+0x1f0>
    2462:	0324      	lsls	r4, r4, #12
    2464:	0576      	lsls	r6, r6, #21
    2466:	0b24      	lsrs	r4, r4, #12
    2468:	0d76      	lsrs	r6, r6, #21
    246a:	e7d4      	b.n	2416 <__aeabi_dadd+0x142>
    246c:	1a33      	subs	r3, r6, r0
    246e:	469a      	mov	sl, r3
    2470:	2b00      	cmp	r3, #0
    2472:	dd78      	ble.n	2566 <__aeabi_dadd+0x292>
    2474:	2800      	cmp	r0, #0
    2476:	d031      	beq.n	24dc <__aeabi_dadd+0x208>
    2478:	4876      	ldr	r0, [pc, #472]	; (2654 <__aeabi_dadd+0x380>)
    247a:	4286      	cmp	r6, r0
    247c:	d0ae      	beq.n	23dc <__aeabi_dadd+0x108>
    247e:	2080      	movs	r0, #128	; 0x80
    2480:	0400      	lsls	r0, r0, #16
    2482:	4301      	orrs	r1, r0
    2484:	4653      	mov	r3, sl
    2486:	2b38      	cmp	r3, #56	; 0x38
    2488:	dc00      	bgt.n	248c <__aeabi_dadd+0x1b8>
    248a:	e0e9      	b.n	2660 <__aeabi_dadd+0x38c>
    248c:	430a      	orrs	r2, r1
    248e:	1e51      	subs	r1, r2, #1
    2490:	418a      	sbcs	r2, r1
    2492:	2100      	movs	r1, #0
    2494:	19d2      	adds	r2, r2, r7
    2496:	42ba      	cmp	r2, r7
    2498:	41bf      	sbcs	r7, r7
    249a:	1909      	adds	r1, r1, r4
    249c:	427c      	negs	r4, r7
    249e:	0017      	movs	r7, r2
    24a0:	190c      	adds	r4, r1, r4
    24a2:	0223      	lsls	r3, r4, #8
    24a4:	d5d3      	bpl.n	244e <__aeabi_dadd+0x17a>
    24a6:	4b6b      	ldr	r3, [pc, #428]	; (2654 <__aeabi_dadd+0x380>)
    24a8:	3601      	adds	r6, #1
    24aa:	429e      	cmp	r6, r3
    24ac:	d100      	bne.n	24b0 <__aeabi_dadd+0x1dc>
    24ae:	e13a      	b.n	2726 <__aeabi_dadd+0x452>
    24b0:	2001      	movs	r0, #1
    24b2:	4b69      	ldr	r3, [pc, #420]	; (2658 <__aeabi_dadd+0x384>)
    24b4:	401c      	ands	r4, r3
    24b6:	087b      	lsrs	r3, r7, #1
    24b8:	4007      	ands	r7, r0
    24ba:	431f      	orrs	r7, r3
    24bc:	07e0      	lsls	r0, r4, #31
    24be:	4307      	orrs	r7, r0
    24c0:	0864      	lsrs	r4, r4, #1
    24c2:	e78b      	b.n	23dc <__aeabi_dadd+0x108>
    24c4:	0023      	movs	r3, r4
    24c6:	433b      	orrs	r3, r7
    24c8:	d100      	bne.n	24cc <__aeabi_dadd+0x1f8>
    24ca:	e1cb      	b.n	2864 <__aeabi_dadd+0x590>
    24cc:	2280      	movs	r2, #128	; 0x80
    24ce:	0312      	lsls	r2, r2, #12
    24d0:	4314      	orrs	r4, r2
    24d2:	0324      	lsls	r4, r4, #12
    24d4:	0b24      	lsrs	r4, r4, #12
    24d6:	e79e      	b.n	2416 <__aeabi_dadd+0x142>
    24d8:	002e      	movs	r6, r5
    24da:	e77f      	b.n	23dc <__aeabi_dadd+0x108>
    24dc:	0008      	movs	r0, r1
    24de:	4310      	orrs	r0, r2
    24e0:	d100      	bne.n	24e4 <__aeabi_dadd+0x210>
    24e2:	e0b4      	b.n	264e <__aeabi_dadd+0x37a>
    24e4:	1e58      	subs	r0, r3, #1
    24e6:	2800      	cmp	r0, #0
    24e8:	d000      	beq.n	24ec <__aeabi_dadd+0x218>
    24ea:	e0de      	b.n	26aa <__aeabi_dadd+0x3d6>
    24ec:	18ba      	adds	r2, r7, r2
    24ee:	42ba      	cmp	r2, r7
    24f0:	419b      	sbcs	r3, r3
    24f2:	1864      	adds	r4, r4, r1
    24f4:	425b      	negs	r3, r3
    24f6:	18e4      	adds	r4, r4, r3
    24f8:	0017      	movs	r7, r2
    24fa:	2601      	movs	r6, #1
    24fc:	0223      	lsls	r3, r4, #8
    24fe:	d5a6      	bpl.n	244e <__aeabi_dadd+0x17a>
    2500:	2602      	movs	r6, #2
    2502:	e7d5      	b.n	24b0 <__aeabi_dadd+0x1dc>
    2504:	2d00      	cmp	r5, #0
    2506:	d16e      	bne.n	25e6 <__aeabi_dadd+0x312>
    2508:	1c70      	adds	r0, r6, #1
    250a:	0540      	lsls	r0, r0, #21
    250c:	0d40      	lsrs	r0, r0, #21
    250e:	2801      	cmp	r0, #1
    2510:	dc00      	bgt.n	2514 <__aeabi_dadd+0x240>
    2512:	e0f9      	b.n	2708 <__aeabi_dadd+0x434>
    2514:	1ab8      	subs	r0, r7, r2
    2516:	4684      	mov	ip, r0
    2518:	4287      	cmp	r7, r0
    251a:	4180      	sbcs	r0, r0
    251c:	1ae5      	subs	r5, r4, r3
    251e:	4240      	negs	r0, r0
    2520:	1a2d      	subs	r5, r5, r0
    2522:	0228      	lsls	r0, r5, #8
    2524:	d400      	bmi.n	2528 <__aeabi_dadd+0x254>
    2526:	e089      	b.n	263c <__aeabi_dadd+0x368>
    2528:	1bd7      	subs	r7, r2, r7
    252a:	42ba      	cmp	r2, r7
    252c:	4192      	sbcs	r2, r2
    252e:	1b1c      	subs	r4, r3, r4
    2530:	4252      	negs	r2, r2
    2532:	1aa5      	subs	r5, r4, r2
    2534:	46d8      	mov	r8, fp
    2536:	e729      	b.n	238c <__aeabi_dadd+0xb8>
    2538:	4645      	mov	r5, r8
    253a:	2400      	movs	r4, #0
    253c:	2700      	movs	r7, #0
    253e:	e76a      	b.n	2416 <__aeabi_dadd+0x142>
    2540:	4c45      	ldr	r4, [pc, #276]	; (2658 <__aeabi_dadd+0x384>)
    2542:	1af6      	subs	r6, r6, r3
    2544:	402c      	ands	r4, r5
    2546:	e749      	b.n	23dc <__aeabi_dadd+0x108>
    2548:	003d      	movs	r5, r7
    254a:	3828      	subs	r0, #40	; 0x28
    254c:	4085      	lsls	r5, r0
    254e:	2700      	movs	r7, #0
    2550:	e72e      	b.n	23b0 <__aeabi_dadd+0xdc>
    2552:	0038      	movs	r0, r7
    2554:	f001 fc22 	bl	3d9c <__clzsi2>
    2558:	3020      	adds	r0, #32
    255a:	e71d      	b.n	2398 <__aeabi_dadd+0xc4>
    255c:	430a      	orrs	r2, r1
    255e:	1e51      	subs	r1, r2, #1
    2560:	418a      	sbcs	r2, r1
    2562:	2100      	movs	r1, #0
    2564:	e707      	b.n	2376 <__aeabi_dadd+0xa2>
    2566:	2b00      	cmp	r3, #0
    2568:	d000      	beq.n	256c <__aeabi_dadd+0x298>
    256a:	e0f3      	b.n	2754 <__aeabi_dadd+0x480>
    256c:	1c70      	adds	r0, r6, #1
    256e:	0543      	lsls	r3, r0, #21
    2570:	0d5b      	lsrs	r3, r3, #21
    2572:	2b01      	cmp	r3, #1
    2574:	dc00      	bgt.n	2578 <__aeabi_dadd+0x2a4>
    2576:	e0ad      	b.n	26d4 <__aeabi_dadd+0x400>
    2578:	4b36      	ldr	r3, [pc, #216]	; (2654 <__aeabi_dadd+0x380>)
    257a:	4298      	cmp	r0, r3
    257c:	d100      	bne.n	2580 <__aeabi_dadd+0x2ac>
    257e:	e0d1      	b.n	2724 <__aeabi_dadd+0x450>
    2580:	18ba      	adds	r2, r7, r2
    2582:	42ba      	cmp	r2, r7
    2584:	41bf      	sbcs	r7, r7
    2586:	1864      	adds	r4, r4, r1
    2588:	427f      	negs	r7, r7
    258a:	19e4      	adds	r4, r4, r7
    258c:	07e7      	lsls	r7, r4, #31
    258e:	0852      	lsrs	r2, r2, #1
    2590:	4317      	orrs	r7, r2
    2592:	0864      	lsrs	r4, r4, #1
    2594:	0006      	movs	r6, r0
    2596:	e721      	b.n	23dc <__aeabi_dadd+0x108>
    2598:	482e      	ldr	r0, [pc, #184]	; (2654 <__aeabi_dadd+0x380>)
    259a:	4285      	cmp	r5, r0
    259c:	d100      	bne.n	25a0 <__aeabi_dadd+0x2cc>
    259e:	e093      	b.n	26c8 <__aeabi_dadd+0x3f4>
    25a0:	001d      	movs	r5, r3
    25a2:	e6d0      	b.n	2346 <__aeabi_dadd+0x72>
    25a4:	0029      	movs	r1, r5
    25a6:	3e1f      	subs	r6, #31
    25a8:	40f1      	lsrs	r1, r6
    25aa:	2b20      	cmp	r3, #32
    25ac:	d100      	bne.n	25b0 <__aeabi_dadd+0x2dc>
    25ae:	e08d      	b.n	26cc <__aeabi_dadd+0x3f8>
    25b0:	2240      	movs	r2, #64	; 0x40
    25b2:	1ad3      	subs	r3, r2, r3
    25b4:	409d      	lsls	r5, r3
    25b6:	432f      	orrs	r7, r5
    25b8:	1e7d      	subs	r5, r7, #1
    25ba:	41af      	sbcs	r7, r5
    25bc:	2400      	movs	r4, #0
    25be:	430f      	orrs	r7, r1
    25c0:	2600      	movs	r6, #0
    25c2:	e744      	b.n	244e <__aeabi_dadd+0x17a>
    25c4:	002b      	movs	r3, r5
    25c6:	0008      	movs	r0, r1
    25c8:	3b20      	subs	r3, #32
    25ca:	40d8      	lsrs	r0, r3
    25cc:	0003      	movs	r3, r0
    25ce:	2d20      	cmp	r5, #32
    25d0:	d100      	bne.n	25d4 <__aeabi_dadd+0x300>
    25d2:	e07d      	b.n	26d0 <__aeabi_dadd+0x3fc>
    25d4:	2040      	movs	r0, #64	; 0x40
    25d6:	1b45      	subs	r5, r0, r5
    25d8:	40a9      	lsls	r1, r5
    25da:	430a      	orrs	r2, r1
    25dc:	1e51      	subs	r1, r2, #1
    25de:	418a      	sbcs	r2, r1
    25e0:	2100      	movs	r1, #0
    25e2:	431a      	orrs	r2, r3
    25e4:	e6c7      	b.n	2376 <__aeabi_dadd+0xa2>
    25e6:	2e00      	cmp	r6, #0
    25e8:	d050      	beq.n	268c <__aeabi_dadd+0x3b8>
    25ea:	4e1a      	ldr	r6, [pc, #104]	; (2654 <__aeabi_dadd+0x380>)
    25ec:	42b0      	cmp	r0, r6
    25ee:	d057      	beq.n	26a0 <__aeabi_dadd+0x3cc>
    25f0:	2680      	movs	r6, #128	; 0x80
    25f2:	426b      	negs	r3, r5
    25f4:	4699      	mov	r9, r3
    25f6:	0436      	lsls	r6, r6, #16
    25f8:	4334      	orrs	r4, r6
    25fa:	464b      	mov	r3, r9
    25fc:	2b38      	cmp	r3, #56	; 0x38
    25fe:	dd00      	ble.n	2602 <__aeabi_dadd+0x32e>
    2600:	e0d6      	b.n	27b0 <__aeabi_dadd+0x4dc>
    2602:	2b1f      	cmp	r3, #31
    2604:	dd00      	ble.n	2608 <__aeabi_dadd+0x334>
    2606:	e135      	b.n	2874 <__aeabi_dadd+0x5a0>
    2608:	2620      	movs	r6, #32
    260a:	1af5      	subs	r5, r6, r3
    260c:	0026      	movs	r6, r4
    260e:	40ae      	lsls	r6, r5
    2610:	46b2      	mov	sl, r6
    2612:	003e      	movs	r6, r7
    2614:	40de      	lsrs	r6, r3
    2616:	46ac      	mov	ip, r5
    2618:	0035      	movs	r5, r6
    261a:	4656      	mov	r6, sl
    261c:	432e      	orrs	r6, r5
    261e:	4665      	mov	r5, ip
    2620:	40af      	lsls	r7, r5
    2622:	1e7d      	subs	r5, r7, #1
    2624:	41af      	sbcs	r7, r5
    2626:	40dc      	lsrs	r4, r3
    2628:	4337      	orrs	r7, r6
    262a:	1bd7      	subs	r7, r2, r7
    262c:	42ba      	cmp	r2, r7
    262e:	4192      	sbcs	r2, r2
    2630:	1b0c      	subs	r4, r1, r4
    2632:	4252      	negs	r2, r2
    2634:	1aa4      	subs	r4, r4, r2
    2636:	0006      	movs	r6, r0
    2638:	46d8      	mov	r8, fp
    263a:	e6a3      	b.n	2384 <__aeabi_dadd+0xb0>
    263c:	4664      	mov	r4, ip
    263e:	4667      	mov	r7, ip
    2640:	432c      	orrs	r4, r5
    2642:	d000      	beq.n	2646 <__aeabi_dadd+0x372>
    2644:	e6a2      	b.n	238c <__aeabi_dadd+0xb8>
    2646:	2500      	movs	r5, #0
    2648:	2600      	movs	r6, #0
    264a:	2700      	movs	r7, #0
    264c:	e706      	b.n	245c <__aeabi_dadd+0x188>
    264e:	001e      	movs	r6, r3
    2650:	e6c4      	b.n	23dc <__aeabi_dadd+0x108>
    2652:	46c0      	nop			; (mov r8, r8)
    2654:	000007ff 	.word	0x000007ff
    2658:	ff7fffff 	.word	0xff7fffff
    265c:	800fffff 	.word	0x800fffff
    2660:	2b1f      	cmp	r3, #31
    2662:	dc63      	bgt.n	272c <__aeabi_dadd+0x458>
    2664:	2020      	movs	r0, #32
    2666:	1ac3      	subs	r3, r0, r3
    2668:	0008      	movs	r0, r1
    266a:	4098      	lsls	r0, r3
    266c:	469c      	mov	ip, r3
    266e:	4683      	mov	fp, r0
    2670:	4653      	mov	r3, sl
    2672:	0010      	movs	r0, r2
    2674:	40d8      	lsrs	r0, r3
    2676:	0003      	movs	r3, r0
    2678:	4658      	mov	r0, fp
    267a:	4318      	orrs	r0, r3
    267c:	4663      	mov	r3, ip
    267e:	409a      	lsls	r2, r3
    2680:	1e53      	subs	r3, r2, #1
    2682:	419a      	sbcs	r2, r3
    2684:	4653      	mov	r3, sl
    2686:	4302      	orrs	r2, r0
    2688:	40d9      	lsrs	r1, r3
    268a:	e703      	b.n	2494 <__aeabi_dadd+0x1c0>
    268c:	0026      	movs	r6, r4
    268e:	433e      	orrs	r6, r7
    2690:	d006      	beq.n	26a0 <__aeabi_dadd+0x3cc>
    2692:	43eb      	mvns	r3, r5
    2694:	4699      	mov	r9, r3
    2696:	2b00      	cmp	r3, #0
    2698:	d0c7      	beq.n	262a <__aeabi_dadd+0x356>
    269a:	4e94      	ldr	r6, [pc, #592]	; (28ec <__aeabi_dadd+0x618>)
    269c:	42b0      	cmp	r0, r6
    269e:	d1ac      	bne.n	25fa <__aeabi_dadd+0x326>
    26a0:	000c      	movs	r4, r1
    26a2:	0017      	movs	r7, r2
    26a4:	0006      	movs	r6, r0
    26a6:	46d8      	mov	r8, fp
    26a8:	e698      	b.n	23dc <__aeabi_dadd+0x108>
    26aa:	4b90      	ldr	r3, [pc, #576]	; (28ec <__aeabi_dadd+0x618>)
    26ac:	459a      	cmp	sl, r3
    26ae:	d00b      	beq.n	26c8 <__aeabi_dadd+0x3f4>
    26b0:	4682      	mov	sl, r0
    26b2:	e6e7      	b.n	2484 <__aeabi_dadd+0x1b0>
    26b4:	2800      	cmp	r0, #0
    26b6:	d000      	beq.n	26ba <__aeabi_dadd+0x3e6>
    26b8:	e09e      	b.n	27f8 <__aeabi_dadd+0x524>
    26ba:	0018      	movs	r0, r3
    26bc:	4310      	orrs	r0, r2
    26be:	d100      	bne.n	26c2 <__aeabi_dadd+0x3ee>
    26c0:	e0e9      	b.n	2896 <__aeabi_dadd+0x5c2>
    26c2:	001c      	movs	r4, r3
    26c4:	0017      	movs	r7, r2
    26c6:	46d8      	mov	r8, fp
    26c8:	4e88      	ldr	r6, [pc, #544]	; (28ec <__aeabi_dadd+0x618>)
    26ca:	e687      	b.n	23dc <__aeabi_dadd+0x108>
    26cc:	2500      	movs	r5, #0
    26ce:	e772      	b.n	25b6 <__aeabi_dadd+0x2e2>
    26d0:	2100      	movs	r1, #0
    26d2:	e782      	b.n	25da <__aeabi_dadd+0x306>
    26d4:	0023      	movs	r3, r4
    26d6:	433b      	orrs	r3, r7
    26d8:	2e00      	cmp	r6, #0
    26da:	d000      	beq.n	26de <__aeabi_dadd+0x40a>
    26dc:	e0ab      	b.n	2836 <__aeabi_dadd+0x562>
    26de:	2b00      	cmp	r3, #0
    26e0:	d100      	bne.n	26e4 <__aeabi_dadd+0x410>
    26e2:	e0e7      	b.n	28b4 <__aeabi_dadd+0x5e0>
    26e4:	000b      	movs	r3, r1
    26e6:	4313      	orrs	r3, r2
    26e8:	d100      	bne.n	26ec <__aeabi_dadd+0x418>
    26ea:	e677      	b.n	23dc <__aeabi_dadd+0x108>
    26ec:	18ba      	adds	r2, r7, r2
    26ee:	42ba      	cmp	r2, r7
    26f0:	41bf      	sbcs	r7, r7
    26f2:	1864      	adds	r4, r4, r1
    26f4:	427f      	negs	r7, r7
    26f6:	19e4      	adds	r4, r4, r7
    26f8:	0223      	lsls	r3, r4, #8
    26fa:	d400      	bmi.n	26fe <__aeabi_dadd+0x42a>
    26fc:	e0f2      	b.n	28e4 <__aeabi_dadd+0x610>
    26fe:	4b7c      	ldr	r3, [pc, #496]	; (28f0 <__aeabi_dadd+0x61c>)
    2700:	0017      	movs	r7, r2
    2702:	401c      	ands	r4, r3
    2704:	0006      	movs	r6, r0
    2706:	e669      	b.n	23dc <__aeabi_dadd+0x108>
    2708:	0020      	movs	r0, r4
    270a:	4338      	orrs	r0, r7
    270c:	2e00      	cmp	r6, #0
    270e:	d1d1      	bne.n	26b4 <__aeabi_dadd+0x3e0>
    2710:	2800      	cmp	r0, #0
    2712:	d15b      	bne.n	27cc <__aeabi_dadd+0x4f8>
    2714:	001c      	movs	r4, r3
    2716:	4314      	orrs	r4, r2
    2718:	d100      	bne.n	271c <__aeabi_dadd+0x448>
    271a:	e0a8      	b.n	286e <__aeabi_dadd+0x59a>
    271c:	001c      	movs	r4, r3
    271e:	0017      	movs	r7, r2
    2720:	46d8      	mov	r8, fp
    2722:	e65b      	b.n	23dc <__aeabi_dadd+0x108>
    2724:	0006      	movs	r6, r0
    2726:	2400      	movs	r4, #0
    2728:	2700      	movs	r7, #0
    272a:	e697      	b.n	245c <__aeabi_dadd+0x188>
    272c:	4650      	mov	r0, sl
    272e:	000b      	movs	r3, r1
    2730:	3820      	subs	r0, #32
    2732:	40c3      	lsrs	r3, r0
    2734:	4699      	mov	r9, r3
    2736:	4653      	mov	r3, sl
    2738:	2b20      	cmp	r3, #32
    273a:	d100      	bne.n	273e <__aeabi_dadd+0x46a>
    273c:	e095      	b.n	286a <__aeabi_dadd+0x596>
    273e:	2340      	movs	r3, #64	; 0x40
    2740:	4650      	mov	r0, sl
    2742:	1a1b      	subs	r3, r3, r0
    2744:	4099      	lsls	r1, r3
    2746:	430a      	orrs	r2, r1
    2748:	1e51      	subs	r1, r2, #1
    274a:	418a      	sbcs	r2, r1
    274c:	464b      	mov	r3, r9
    274e:	2100      	movs	r1, #0
    2750:	431a      	orrs	r2, r3
    2752:	e69f      	b.n	2494 <__aeabi_dadd+0x1c0>
    2754:	2e00      	cmp	r6, #0
    2756:	d130      	bne.n	27ba <__aeabi_dadd+0x4e6>
    2758:	0026      	movs	r6, r4
    275a:	433e      	orrs	r6, r7
    275c:	d067      	beq.n	282e <__aeabi_dadd+0x55a>
    275e:	43db      	mvns	r3, r3
    2760:	469a      	mov	sl, r3
    2762:	2b00      	cmp	r3, #0
    2764:	d01c      	beq.n	27a0 <__aeabi_dadd+0x4cc>
    2766:	4e61      	ldr	r6, [pc, #388]	; (28ec <__aeabi_dadd+0x618>)
    2768:	42b0      	cmp	r0, r6
    276a:	d060      	beq.n	282e <__aeabi_dadd+0x55a>
    276c:	4653      	mov	r3, sl
    276e:	2b38      	cmp	r3, #56	; 0x38
    2770:	dd00      	ble.n	2774 <__aeabi_dadd+0x4a0>
    2772:	e096      	b.n	28a2 <__aeabi_dadd+0x5ce>
    2774:	2b1f      	cmp	r3, #31
    2776:	dd00      	ble.n	277a <__aeabi_dadd+0x4a6>
    2778:	e09f      	b.n	28ba <__aeabi_dadd+0x5e6>
    277a:	2620      	movs	r6, #32
    277c:	1af3      	subs	r3, r6, r3
    277e:	0026      	movs	r6, r4
    2780:	409e      	lsls	r6, r3
    2782:	469c      	mov	ip, r3
    2784:	46b3      	mov	fp, r6
    2786:	4653      	mov	r3, sl
    2788:	003e      	movs	r6, r7
    278a:	40de      	lsrs	r6, r3
    278c:	0033      	movs	r3, r6
    278e:	465e      	mov	r6, fp
    2790:	431e      	orrs	r6, r3
    2792:	4663      	mov	r3, ip
    2794:	409f      	lsls	r7, r3
    2796:	1e7b      	subs	r3, r7, #1
    2798:	419f      	sbcs	r7, r3
    279a:	4653      	mov	r3, sl
    279c:	40dc      	lsrs	r4, r3
    279e:	4337      	orrs	r7, r6
    27a0:	18bf      	adds	r7, r7, r2
    27a2:	4297      	cmp	r7, r2
    27a4:	4192      	sbcs	r2, r2
    27a6:	1864      	adds	r4, r4, r1
    27a8:	4252      	negs	r2, r2
    27aa:	18a4      	adds	r4, r4, r2
    27ac:	0006      	movs	r6, r0
    27ae:	e678      	b.n	24a2 <__aeabi_dadd+0x1ce>
    27b0:	4327      	orrs	r7, r4
    27b2:	1e7c      	subs	r4, r7, #1
    27b4:	41a7      	sbcs	r7, r4
    27b6:	2400      	movs	r4, #0
    27b8:	e737      	b.n	262a <__aeabi_dadd+0x356>
    27ba:	4e4c      	ldr	r6, [pc, #304]	; (28ec <__aeabi_dadd+0x618>)
    27bc:	42b0      	cmp	r0, r6
    27be:	d036      	beq.n	282e <__aeabi_dadd+0x55a>
    27c0:	2680      	movs	r6, #128	; 0x80
    27c2:	425b      	negs	r3, r3
    27c4:	0436      	lsls	r6, r6, #16
    27c6:	469a      	mov	sl, r3
    27c8:	4334      	orrs	r4, r6
    27ca:	e7cf      	b.n	276c <__aeabi_dadd+0x498>
    27cc:	0018      	movs	r0, r3
    27ce:	4310      	orrs	r0, r2
    27d0:	d100      	bne.n	27d4 <__aeabi_dadd+0x500>
    27d2:	e603      	b.n	23dc <__aeabi_dadd+0x108>
    27d4:	1ab8      	subs	r0, r7, r2
    27d6:	4684      	mov	ip, r0
    27d8:	4567      	cmp	r7, ip
    27da:	41ad      	sbcs	r5, r5
    27dc:	1ae0      	subs	r0, r4, r3
    27de:	426d      	negs	r5, r5
    27e0:	1b40      	subs	r0, r0, r5
    27e2:	0205      	lsls	r5, r0, #8
    27e4:	d400      	bmi.n	27e8 <__aeabi_dadd+0x514>
    27e6:	e62c      	b.n	2442 <__aeabi_dadd+0x16e>
    27e8:	1bd7      	subs	r7, r2, r7
    27ea:	42ba      	cmp	r2, r7
    27ec:	4192      	sbcs	r2, r2
    27ee:	1b1c      	subs	r4, r3, r4
    27f0:	4252      	negs	r2, r2
    27f2:	1aa4      	subs	r4, r4, r2
    27f4:	46d8      	mov	r8, fp
    27f6:	e5f1      	b.n	23dc <__aeabi_dadd+0x108>
    27f8:	0018      	movs	r0, r3
    27fa:	4310      	orrs	r0, r2
    27fc:	d100      	bne.n	2800 <__aeabi_dadd+0x52c>
    27fe:	e763      	b.n	26c8 <__aeabi_dadd+0x3f4>
    2800:	08f8      	lsrs	r0, r7, #3
    2802:	0767      	lsls	r7, r4, #29
    2804:	4307      	orrs	r7, r0
    2806:	2080      	movs	r0, #128	; 0x80
    2808:	08e4      	lsrs	r4, r4, #3
    280a:	0300      	lsls	r0, r0, #12
    280c:	4204      	tst	r4, r0
    280e:	d008      	beq.n	2822 <__aeabi_dadd+0x54e>
    2810:	08dd      	lsrs	r5, r3, #3
    2812:	4205      	tst	r5, r0
    2814:	d105      	bne.n	2822 <__aeabi_dadd+0x54e>
    2816:	08d2      	lsrs	r2, r2, #3
    2818:	0759      	lsls	r1, r3, #29
    281a:	4311      	orrs	r1, r2
    281c:	000f      	movs	r7, r1
    281e:	002c      	movs	r4, r5
    2820:	46d8      	mov	r8, fp
    2822:	0f7b      	lsrs	r3, r7, #29
    2824:	00e4      	lsls	r4, r4, #3
    2826:	431c      	orrs	r4, r3
    2828:	00ff      	lsls	r7, r7, #3
    282a:	4e30      	ldr	r6, [pc, #192]	; (28ec <__aeabi_dadd+0x618>)
    282c:	e5d6      	b.n	23dc <__aeabi_dadd+0x108>
    282e:	000c      	movs	r4, r1
    2830:	0017      	movs	r7, r2
    2832:	0006      	movs	r6, r0
    2834:	e5d2      	b.n	23dc <__aeabi_dadd+0x108>
    2836:	2b00      	cmp	r3, #0
    2838:	d038      	beq.n	28ac <__aeabi_dadd+0x5d8>
    283a:	000b      	movs	r3, r1
    283c:	4313      	orrs	r3, r2
    283e:	d100      	bne.n	2842 <__aeabi_dadd+0x56e>
    2840:	e742      	b.n	26c8 <__aeabi_dadd+0x3f4>
    2842:	08f8      	lsrs	r0, r7, #3
    2844:	0767      	lsls	r7, r4, #29
    2846:	4307      	orrs	r7, r0
    2848:	2080      	movs	r0, #128	; 0x80
    284a:	08e4      	lsrs	r4, r4, #3
    284c:	0300      	lsls	r0, r0, #12
    284e:	4204      	tst	r4, r0
    2850:	d0e7      	beq.n	2822 <__aeabi_dadd+0x54e>
    2852:	08cb      	lsrs	r3, r1, #3
    2854:	4203      	tst	r3, r0
    2856:	d1e4      	bne.n	2822 <__aeabi_dadd+0x54e>
    2858:	08d2      	lsrs	r2, r2, #3
    285a:	0749      	lsls	r1, r1, #29
    285c:	4311      	orrs	r1, r2
    285e:	000f      	movs	r7, r1
    2860:	001c      	movs	r4, r3
    2862:	e7de      	b.n	2822 <__aeabi_dadd+0x54e>
    2864:	2700      	movs	r7, #0
    2866:	2400      	movs	r4, #0
    2868:	e5d5      	b.n	2416 <__aeabi_dadd+0x142>
    286a:	2100      	movs	r1, #0
    286c:	e76b      	b.n	2746 <__aeabi_dadd+0x472>
    286e:	2500      	movs	r5, #0
    2870:	2700      	movs	r7, #0
    2872:	e5f3      	b.n	245c <__aeabi_dadd+0x188>
    2874:	464e      	mov	r6, r9
    2876:	0025      	movs	r5, r4
    2878:	3e20      	subs	r6, #32
    287a:	40f5      	lsrs	r5, r6
    287c:	464b      	mov	r3, r9
    287e:	002e      	movs	r6, r5
    2880:	2b20      	cmp	r3, #32
    2882:	d02d      	beq.n	28e0 <__aeabi_dadd+0x60c>
    2884:	2540      	movs	r5, #64	; 0x40
    2886:	1aed      	subs	r5, r5, r3
    2888:	40ac      	lsls	r4, r5
    288a:	4327      	orrs	r7, r4
    288c:	1e7c      	subs	r4, r7, #1
    288e:	41a7      	sbcs	r7, r4
    2890:	2400      	movs	r4, #0
    2892:	4337      	orrs	r7, r6
    2894:	e6c9      	b.n	262a <__aeabi_dadd+0x356>
    2896:	2480      	movs	r4, #128	; 0x80
    2898:	2500      	movs	r5, #0
    289a:	0324      	lsls	r4, r4, #12
    289c:	4e13      	ldr	r6, [pc, #76]	; (28ec <__aeabi_dadd+0x618>)
    289e:	2700      	movs	r7, #0
    28a0:	e5dc      	b.n	245c <__aeabi_dadd+0x188>
    28a2:	4327      	orrs	r7, r4
    28a4:	1e7c      	subs	r4, r7, #1
    28a6:	41a7      	sbcs	r7, r4
    28a8:	2400      	movs	r4, #0
    28aa:	e779      	b.n	27a0 <__aeabi_dadd+0x4cc>
    28ac:	000c      	movs	r4, r1
    28ae:	0017      	movs	r7, r2
    28b0:	4e0e      	ldr	r6, [pc, #56]	; (28ec <__aeabi_dadd+0x618>)
    28b2:	e593      	b.n	23dc <__aeabi_dadd+0x108>
    28b4:	000c      	movs	r4, r1
    28b6:	0017      	movs	r7, r2
    28b8:	e590      	b.n	23dc <__aeabi_dadd+0x108>
    28ba:	4656      	mov	r6, sl
    28bc:	0023      	movs	r3, r4
    28be:	3e20      	subs	r6, #32
    28c0:	40f3      	lsrs	r3, r6
    28c2:	4699      	mov	r9, r3
    28c4:	4653      	mov	r3, sl
    28c6:	2b20      	cmp	r3, #32
    28c8:	d00e      	beq.n	28e8 <__aeabi_dadd+0x614>
    28ca:	2340      	movs	r3, #64	; 0x40
    28cc:	4656      	mov	r6, sl
    28ce:	1b9b      	subs	r3, r3, r6
    28d0:	409c      	lsls	r4, r3
    28d2:	4327      	orrs	r7, r4
    28d4:	1e7c      	subs	r4, r7, #1
    28d6:	41a7      	sbcs	r7, r4
    28d8:	464b      	mov	r3, r9
    28da:	2400      	movs	r4, #0
    28dc:	431f      	orrs	r7, r3
    28de:	e75f      	b.n	27a0 <__aeabi_dadd+0x4cc>
    28e0:	2400      	movs	r4, #0
    28e2:	e7d2      	b.n	288a <__aeabi_dadd+0x5b6>
    28e4:	0017      	movs	r7, r2
    28e6:	e5b2      	b.n	244e <__aeabi_dadd+0x17a>
    28e8:	2400      	movs	r4, #0
    28ea:	e7f2      	b.n	28d2 <__aeabi_dadd+0x5fe>
    28ec:	000007ff 	.word	0x000007ff
    28f0:	ff7fffff 	.word	0xff7fffff

000028f4 <__aeabi_ddiv>:
    28f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    28f6:	4657      	mov	r7, sl
    28f8:	4645      	mov	r5, r8
    28fa:	46de      	mov	lr, fp
    28fc:	464e      	mov	r6, r9
    28fe:	b5e0      	push	{r5, r6, r7, lr}
    2900:	004c      	lsls	r4, r1, #1
    2902:	030e      	lsls	r6, r1, #12
    2904:	b087      	sub	sp, #28
    2906:	4683      	mov	fp, r0
    2908:	4692      	mov	sl, r2
    290a:	001d      	movs	r5, r3
    290c:	4680      	mov	r8, r0
    290e:	0b36      	lsrs	r6, r6, #12
    2910:	0d64      	lsrs	r4, r4, #21
    2912:	0fcf      	lsrs	r7, r1, #31
    2914:	2c00      	cmp	r4, #0
    2916:	d04f      	beq.n	29b8 <__aeabi_ddiv+0xc4>
    2918:	4b6f      	ldr	r3, [pc, #444]	; (2ad8 <__aeabi_ddiv+0x1e4>)
    291a:	429c      	cmp	r4, r3
    291c:	d035      	beq.n	298a <__aeabi_ddiv+0x96>
    291e:	2380      	movs	r3, #128	; 0x80
    2920:	0f42      	lsrs	r2, r0, #29
    2922:	041b      	lsls	r3, r3, #16
    2924:	00f6      	lsls	r6, r6, #3
    2926:	4313      	orrs	r3, r2
    2928:	4333      	orrs	r3, r6
    292a:	4699      	mov	r9, r3
    292c:	00c3      	lsls	r3, r0, #3
    292e:	4698      	mov	r8, r3
    2930:	4b6a      	ldr	r3, [pc, #424]	; (2adc <__aeabi_ddiv+0x1e8>)
    2932:	2600      	movs	r6, #0
    2934:	469c      	mov	ip, r3
    2936:	2300      	movs	r3, #0
    2938:	4464      	add	r4, ip
    293a:	9303      	str	r3, [sp, #12]
    293c:	032b      	lsls	r3, r5, #12
    293e:	0b1b      	lsrs	r3, r3, #12
    2940:	469b      	mov	fp, r3
    2942:	006b      	lsls	r3, r5, #1
    2944:	0fed      	lsrs	r5, r5, #31
    2946:	4650      	mov	r0, sl
    2948:	0d5b      	lsrs	r3, r3, #21
    294a:	9501      	str	r5, [sp, #4]
    294c:	d05e      	beq.n	2a0c <__aeabi_ddiv+0x118>
    294e:	4a62      	ldr	r2, [pc, #392]	; (2ad8 <__aeabi_ddiv+0x1e4>)
    2950:	4293      	cmp	r3, r2
    2952:	d053      	beq.n	29fc <__aeabi_ddiv+0x108>
    2954:	465a      	mov	r2, fp
    2956:	00d1      	lsls	r1, r2, #3
    2958:	2280      	movs	r2, #128	; 0x80
    295a:	0f40      	lsrs	r0, r0, #29
    295c:	0412      	lsls	r2, r2, #16
    295e:	4302      	orrs	r2, r0
    2960:	430a      	orrs	r2, r1
    2962:	4693      	mov	fp, r2
    2964:	4652      	mov	r2, sl
    2966:	00d1      	lsls	r1, r2, #3
    2968:	4a5c      	ldr	r2, [pc, #368]	; (2adc <__aeabi_ddiv+0x1e8>)
    296a:	4694      	mov	ip, r2
    296c:	2200      	movs	r2, #0
    296e:	4463      	add	r3, ip
    2970:	0038      	movs	r0, r7
    2972:	4068      	eors	r0, r5
    2974:	4684      	mov	ip, r0
    2976:	9002      	str	r0, [sp, #8]
    2978:	1ae4      	subs	r4, r4, r3
    297a:	4316      	orrs	r6, r2
    297c:	2e0f      	cmp	r6, #15
    297e:	d900      	bls.n	2982 <__aeabi_ddiv+0x8e>
    2980:	e0b4      	b.n	2aec <__aeabi_ddiv+0x1f8>
    2982:	4b57      	ldr	r3, [pc, #348]	; (2ae0 <__aeabi_ddiv+0x1ec>)
    2984:	00b6      	lsls	r6, r6, #2
    2986:	599b      	ldr	r3, [r3, r6]
    2988:	469f      	mov	pc, r3
    298a:	0003      	movs	r3, r0
    298c:	4333      	orrs	r3, r6
    298e:	4699      	mov	r9, r3
    2990:	d16c      	bne.n	2a6c <__aeabi_ddiv+0x178>
    2992:	2300      	movs	r3, #0
    2994:	4698      	mov	r8, r3
    2996:	3302      	adds	r3, #2
    2998:	2608      	movs	r6, #8
    299a:	9303      	str	r3, [sp, #12]
    299c:	e7ce      	b.n	293c <__aeabi_ddiv+0x48>
    299e:	46cb      	mov	fp, r9
    29a0:	4641      	mov	r1, r8
    29a2:	9a03      	ldr	r2, [sp, #12]
    29a4:	9701      	str	r7, [sp, #4]
    29a6:	2a02      	cmp	r2, #2
    29a8:	d165      	bne.n	2a76 <__aeabi_ddiv+0x182>
    29aa:	9b01      	ldr	r3, [sp, #4]
    29ac:	4c4a      	ldr	r4, [pc, #296]	; (2ad8 <__aeabi_ddiv+0x1e4>)
    29ae:	469c      	mov	ip, r3
    29b0:	2300      	movs	r3, #0
    29b2:	2200      	movs	r2, #0
    29b4:	4698      	mov	r8, r3
    29b6:	e06b      	b.n	2a90 <__aeabi_ddiv+0x19c>
    29b8:	0003      	movs	r3, r0
    29ba:	4333      	orrs	r3, r6
    29bc:	4699      	mov	r9, r3
    29be:	d04e      	beq.n	2a5e <__aeabi_ddiv+0x16a>
    29c0:	2e00      	cmp	r6, #0
    29c2:	d100      	bne.n	29c6 <__aeabi_ddiv+0xd2>
    29c4:	e1bc      	b.n	2d40 <__aeabi_ddiv+0x44c>
    29c6:	0030      	movs	r0, r6
    29c8:	f001 f9e8 	bl	3d9c <__clzsi2>
    29cc:	0003      	movs	r3, r0
    29ce:	3b0b      	subs	r3, #11
    29d0:	2b1c      	cmp	r3, #28
    29d2:	dd00      	ble.n	29d6 <__aeabi_ddiv+0xe2>
    29d4:	e1ac      	b.n	2d30 <__aeabi_ddiv+0x43c>
    29d6:	221d      	movs	r2, #29
    29d8:	1ad3      	subs	r3, r2, r3
    29da:	465a      	mov	r2, fp
    29dc:	0001      	movs	r1, r0
    29de:	40da      	lsrs	r2, r3
    29e0:	3908      	subs	r1, #8
    29e2:	408e      	lsls	r6, r1
    29e4:	0013      	movs	r3, r2
    29e6:	4333      	orrs	r3, r6
    29e8:	4699      	mov	r9, r3
    29ea:	465b      	mov	r3, fp
    29ec:	408b      	lsls	r3, r1
    29ee:	4698      	mov	r8, r3
    29f0:	2300      	movs	r3, #0
    29f2:	4c3c      	ldr	r4, [pc, #240]	; (2ae4 <__aeabi_ddiv+0x1f0>)
    29f4:	2600      	movs	r6, #0
    29f6:	1a24      	subs	r4, r4, r0
    29f8:	9303      	str	r3, [sp, #12]
    29fa:	e79f      	b.n	293c <__aeabi_ddiv+0x48>
    29fc:	4651      	mov	r1, sl
    29fe:	465a      	mov	r2, fp
    2a00:	4311      	orrs	r1, r2
    2a02:	d129      	bne.n	2a58 <__aeabi_ddiv+0x164>
    2a04:	2200      	movs	r2, #0
    2a06:	4693      	mov	fp, r2
    2a08:	3202      	adds	r2, #2
    2a0a:	e7b1      	b.n	2970 <__aeabi_ddiv+0x7c>
    2a0c:	4659      	mov	r1, fp
    2a0e:	4301      	orrs	r1, r0
    2a10:	d01e      	beq.n	2a50 <__aeabi_ddiv+0x15c>
    2a12:	465b      	mov	r3, fp
    2a14:	2b00      	cmp	r3, #0
    2a16:	d100      	bne.n	2a1a <__aeabi_ddiv+0x126>
    2a18:	e19e      	b.n	2d58 <__aeabi_ddiv+0x464>
    2a1a:	4658      	mov	r0, fp
    2a1c:	f001 f9be 	bl	3d9c <__clzsi2>
    2a20:	0003      	movs	r3, r0
    2a22:	3b0b      	subs	r3, #11
    2a24:	2b1c      	cmp	r3, #28
    2a26:	dd00      	ble.n	2a2a <__aeabi_ddiv+0x136>
    2a28:	e18f      	b.n	2d4a <__aeabi_ddiv+0x456>
    2a2a:	0002      	movs	r2, r0
    2a2c:	4659      	mov	r1, fp
    2a2e:	3a08      	subs	r2, #8
    2a30:	4091      	lsls	r1, r2
    2a32:	468b      	mov	fp, r1
    2a34:	211d      	movs	r1, #29
    2a36:	1acb      	subs	r3, r1, r3
    2a38:	4651      	mov	r1, sl
    2a3a:	40d9      	lsrs	r1, r3
    2a3c:	000b      	movs	r3, r1
    2a3e:	4659      	mov	r1, fp
    2a40:	430b      	orrs	r3, r1
    2a42:	4651      	mov	r1, sl
    2a44:	469b      	mov	fp, r3
    2a46:	4091      	lsls	r1, r2
    2a48:	4b26      	ldr	r3, [pc, #152]	; (2ae4 <__aeabi_ddiv+0x1f0>)
    2a4a:	2200      	movs	r2, #0
    2a4c:	1a1b      	subs	r3, r3, r0
    2a4e:	e78f      	b.n	2970 <__aeabi_ddiv+0x7c>
    2a50:	2300      	movs	r3, #0
    2a52:	2201      	movs	r2, #1
    2a54:	469b      	mov	fp, r3
    2a56:	e78b      	b.n	2970 <__aeabi_ddiv+0x7c>
    2a58:	4651      	mov	r1, sl
    2a5a:	2203      	movs	r2, #3
    2a5c:	e788      	b.n	2970 <__aeabi_ddiv+0x7c>
    2a5e:	2300      	movs	r3, #0
    2a60:	4698      	mov	r8, r3
    2a62:	3301      	adds	r3, #1
    2a64:	2604      	movs	r6, #4
    2a66:	2400      	movs	r4, #0
    2a68:	9303      	str	r3, [sp, #12]
    2a6a:	e767      	b.n	293c <__aeabi_ddiv+0x48>
    2a6c:	2303      	movs	r3, #3
    2a6e:	46b1      	mov	r9, r6
    2a70:	9303      	str	r3, [sp, #12]
    2a72:	260c      	movs	r6, #12
    2a74:	e762      	b.n	293c <__aeabi_ddiv+0x48>
    2a76:	2a03      	cmp	r2, #3
    2a78:	d100      	bne.n	2a7c <__aeabi_ddiv+0x188>
    2a7a:	e25c      	b.n	2f36 <__aeabi_ddiv+0x642>
    2a7c:	9b01      	ldr	r3, [sp, #4]
    2a7e:	2a01      	cmp	r2, #1
    2a80:	d000      	beq.n	2a84 <__aeabi_ddiv+0x190>
    2a82:	e1e4      	b.n	2e4e <__aeabi_ddiv+0x55a>
    2a84:	4013      	ands	r3, r2
    2a86:	469c      	mov	ip, r3
    2a88:	2300      	movs	r3, #0
    2a8a:	2400      	movs	r4, #0
    2a8c:	2200      	movs	r2, #0
    2a8e:	4698      	mov	r8, r3
    2a90:	2100      	movs	r1, #0
    2a92:	0312      	lsls	r2, r2, #12
    2a94:	0b13      	lsrs	r3, r2, #12
    2a96:	0d0a      	lsrs	r2, r1, #20
    2a98:	0512      	lsls	r2, r2, #20
    2a9a:	431a      	orrs	r2, r3
    2a9c:	0523      	lsls	r3, r4, #20
    2a9e:	4c12      	ldr	r4, [pc, #72]	; (2ae8 <__aeabi_ddiv+0x1f4>)
    2aa0:	4640      	mov	r0, r8
    2aa2:	4022      	ands	r2, r4
    2aa4:	4313      	orrs	r3, r2
    2aa6:	4662      	mov	r2, ip
    2aa8:	005b      	lsls	r3, r3, #1
    2aaa:	07d2      	lsls	r2, r2, #31
    2aac:	085b      	lsrs	r3, r3, #1
    2aae:	4313      	orrs	r3, r2
    2ab0:	0019      	movs	r1, r3
    2ab2:	b007      	add	sp, #28
    2ab4:	bc3c      	pop	{r2, r3, r4, r5}
    2ab6:	4690      	mov	r8, r2
    2ab8:	4699      	mov	r9, r3
    2aba:	46a2      	mov	sl, r4
    2abc:	46ab      	mov	fp, r5
    2abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ac0:	2300      	movs	r3, #0
    2ac2:	2280      	movs	r2, #128	; 0x80
    2ac4:	469c      	mov	ip, r3
    2ac6:	0312      	lsls	r2, r2, #12
    2ac8:	4698      	mov	r8, r3
    2aca:	4c03      	ldr	r4, [pc, #12]	; (2ad8 <__aeabi_ddiv+0x1e4>)
    2acc:	e7e0      	b.n	2a90 <__aeabi_ddiv+0x19c>
    2ace:	2300      	movs	r3, #0
    2ad0:	4c01      	ldr	r4, [pc, #4]	; (2ad8 <__aeabi_ddiv+0x1e4>)
    2ad2:	2200      	movs	r2, #0
    2ad4:	4698      	mov	r8, r3
    2ad6:	e7db      	b.n	2a90 <__aeabi_ddiv+0x19c>
    2ad8:	000007ff 	.word	0x000007ff
    2adc:	fffffc01 	.word	0xfffffc01
    2ae0:	0000464c 	.word	0x0000464c
    2ae4:	fffffc0d 	.word	0xfffffc0d
    2ae8:	800fffff 	.word	0x800fffff
    2aec:	45d9      	cmp	r9, fp
    2aee:	d900      	bls.n	2af2 <__aeabi_ddiv+0x1fe>
    2af0:	e139      	b.n	2d66 <__aeabi_ddiv+0x472>
    2af2:	d100      	bne.n	2af6 <__aeabi_ddiv+0x202>
    2af4:	e134      	b.n	2d60 <__aeabi_ddiv+0x46c>
    2af6:	2300      	movs	r3, #0
    2af8:	4646      	mov	r6, r8
    2afa:	464d      	mov	r5, r9
    2afc:	469a      	mov	sl, r3
    2afe:	3c01      	subs	r4, #1
    2b00:	465b      	mov	r3, fp
    2b02:	0e0a      	lsrs	r2, r1, #24
    2b04:	021b      	lsls	r3, r3, #8
    2b06:	431a      	orrs	r2, r3
    2b08:	020b      	lsls	r3, r1, #8
    2b0a:	0c17      	lsrs	r7, r2, #16
    2b0c:	9303      	str	r3, [sp, #12]
    2b0e:	0413      	lsls	r3, r2, #16
    2b10:	0c1b      	lsrs	r3, r3, #16
    2b12:	0039      	movs	r1, r7
    2b14:	0028      	movs	r0, r5
    2b16:	4690      	mov	r8, r2
    2b18:	9301      	str	r3, [sp, #4]
    2b1a:	f001 f8b5 	bl	3c88 <__udivsi3>
    2b1e:	0002      	movs	r2, r0
    2b20:	9b01      	ldr	r3, [sp, #4]
    2b22:	4683      	mov	fp, r0
    2b24:	435a      	muls	r2, r3
    2b26:	0028      	movs	r0, r5
    2b28:	0039      	movs	r1, r7
    2b2a:	4691      	mov	r9, r2
    2b2c:	f001 f932 	bl	3d94 <__aeabi_uidivmod>
    2b30:	0c35      	lsrs	r5, r6, #16
    2b32:	0409      	lsls	r1, r1, #16
    2b34:	430d      	orrs	r5, r1
    2b36:	45a9      	cmp	r9, r5
    2b38:	d90d      	bls.n	2b56 <__aeabi_ddiv+0x262>
    2b3a:	465b      	mov	r3, fp
    2b3c:	4445      	add	r5, r8
    2b3e:	3b01      	subs	r3, #1
    2b40:	45a8      	cmp	r8, r5
    2b42:	d900      	bls.n	2b46 <__aeabi_ddiv+0x252>
    2b44:	e13a      	b.n	2dbc <__aeabi_ddiv+0x4c8>
    2b46:	45a9      	cmp	r9, r5
    2b48:	d800      	bhi.n	2b4c <__aeabi_ddiv+0x258>
    2b4a:	e137      	b.n	2dbc <__aeabi_ddiv+0x4c8>
    2b4c:	2302      	movs	r3, #2
    2b4e:	425b      	negs	r3, r3
    2b50:	469c      	mov	ip, r3
    2b52:	4445      	add	r5, r8
    2b54:	44e3      	add	fp, ip
    2b56:	464b      	mov	r3, r9
    2b58:	1aeb      	subs	r3, r5, r3
    2b5a:	0039      	movs	r1, r7
    2b5c:	0018      	movs	r0, r3
    2b5e:	9304      	str	r3, [sp, #16]
    2b60:	f001 f892 	bl	3c88 <__udivsi3>
    2b64:	9b01      	ldr	r3, [sp, #4]
    2b66:	0005      	movs	r5, r0
    2b68:	4343      	muls	r3, r0
    2b6a:	0039      	movs	r1, r7
    2b6c:	9804      	ldr	r0, [sp, #16]
    2b6e:	4699      	mov	r9, r3
    2b70:	f001 f910 	bl	3d94 <__aeabi_uidivmod>
    2b74:	0433      	lsls	r3, r6, #16
    2b76:	0409      	lsls	r1, r1, #16
    2b78:	0c1b      	lsrs	r3, r3, #16
    2b7a:	430b      	orrs	r3, r1
    2b7c:	4599      	cmp	r9, r3
    2b7e:	d909      	bls.n	2b94 <__aeabi_ddiv+0x2a0>
    2b80:	4443      	add	r3, r8
    2b82:	1e6a      	subs	r2, r5, #1
    2b84:	4598      	cmp	r8, r3
    2b86:	d900      	bls.n	2b8a <__aeabi_ddiv+0x296>
    2b88:	e11a      	b.n	2dc0 <__aeabi_ddiv+0x4cc>
    2b8a:	4599      	cmp	r9, r3
    2b8c:	d800      	bhi.n	2b90 <__aeabi_ddiv+0x29c>
    2b8e:	e117      	b.n	2dc0 <__aeabi_ddiv+0x4cc>
    2b90:	3d02      	subs	r5, #2
    2b92:	4443      	add	r3, r8
    2b94:	464a      	mov	r2, r9
    2b96:	1a9b      	subs	r3, r3, r2
    2b98:	465a      	mov	r2, fp
    2b9a:	0412      	lsls	r2, r2, #16
    2b9c:	432a      	orrs	r2, r5
    2b9e:	9903      	ldr	r1, [sp, #12]
    2ba0:	4693      	mov	fp, r2
    2ba2:	0c10      	lsrs	r0, r2, #16
    2ba4:	0c0a      	lsrs	r2, r1, #16
    2ba6:	4691      	mov	r9, r2
    2ba8:	0409      	lsls	r1, r1, #16
    2baa:	465a      	mov	r2, fp
    2bac:	0c09      	lsrs	r1, r1, #16
    2bae:	464e      	mov	r6, r9
    2bb0:	000d      	movs	r5, r1
    2bb2:	0412      	lsls	r2, r2, #16
    2bb4:	0c12      	lsrs	r2, r2, #16
    2bb6:	4345      	muls	r5, r0
    2bb8:	9105      	str	r1, [sp, #20]
    2bba:	4351      	muls	r1, r2
    2bbc:	4372      	muls	r2, r6
    2bbe:	4370      	muls	r0, r6
    2bc0:	1952      	adds	r2, r2, r5
    2bc2:	0c0e      	lsrs	r6, r1, #16
    2bc4:	18b2      	adds	r2, r6, r2
    2bc6:	4295      	cmp	r5, r2
    2bc8:	d903      	bls.n	2bd2 <__aeabi_ddiv+0x2de>
    2bca:	2580      	movs	r5, #128	; 0x80
    2bcc:	026d      	lsls	r5, r5, #9
    2bce:	46ac      	mov	ip, r5
    2bd0:	4460      	add	r0, ip
    2bd2:	0c15      	lsrs	r5, r2, #16
    2bd4:	0409      	lsls	r1, r1, #16
    2bd6:	0412      	lsls	r2, r2, #16
    2bd8:	0c09      	lsrs	r1, r1, #16
    2bda:	1828      	adds	r0, r5, r0
    2bdc:	1852      	adds	r2, r2, r1
    2bde:	4283      	cmp	r3, r0
    2be0:	d200      	bcs.n	2be4 <__aeabi_ddiv+0x2f0>
    2be2:	e0ce      	b.n	2d82 <__aeabi_ddiv+0x48e>
    2be4:	d100      	bne.n	2be8 <__aeabi_ddiv+0x2f4>
    2be6:	e0c8      	b.n	2d7a <__aeabi_ddiv+0x486>
    2be8:	1a1d      	subs	r5, r3, r0
    2bea:	4653      	mov	r3, sl
    2bec:	1a9e      	subs	r6, r3, r2
    2bee:	45b2      	cmp	sl, r6
    2bf0:	4192      	sbcs	r2, r2
    2bf2:	4252      	negs	r2, r2
    2bf4:	1aab      	subs	r3, r5, r2
    2bf6:	469a      	mov	sl, r3
    2bf8:	4598      	cmp	r8, r3
    2bfa:	d100      	bne.n	2bfe <__aeabi_ddiv+0x30a>
    2bfc:	e117      	b.n	2e2e <__aeabi_ddiv+0x53a>
    2bfe:	0039      	movs	r1, r7
    2c00:	0018      	movs	r0, r3
    2c02:	f001 f841 	bl	3c88 <__udivsi3>
    2c06:	9b01      	ldr	r3, [sp, #4]
    2c08:	0005      	movs	r5, r0
    2c0a:	4343      	muls	r3, r0
    2c0c:	0039      	movs	r1, r7
    2c0e:	4650      	mov	r0, sl
    2c10:	9304      	str	r3, [sp, #16]
    2c12:	f001 f8bf 	bl	3d94 <__aeabi_uidivmod>
    2c16:	9804      	ldr	r0, [sp, #16]
    2c18:	040b      	lsls	r3, r1, #16
    2c1a:	0c31      	lsrs	r1, r6, #16
    2c1c:	4319      	orrs	r1, r3
    2c1e:	4288      	cmp	r0, r1
    2c20:	d909      	bls.n	2c36 <__aeabi_ddiv+0x342>
    2c22:	4441      	add	r1, r8
    2c24:	1e6b      	subs	r3, r5, #1
    2c26:	4588      	cmp	r8, r1
    2c28:	d900      	bls.n	2c2c <__aeabi_ddiv+0x338>
    2c2a:	e107      	b.n	2e3c <__aeabi_ddiv+0x548>
    2c2c:	4288      	cmp	r0, r1
    2c2e:	d800      	bhi.n	2c32 <__aeabi_ddiv+0x33e>
    2c30:	e104      	b.n	2e3c <__aeabi_ddiv+0x548>
    2c32:	3d02      	subs	r5, #2
    2c34:	4441      	add	r1, r8
    2c36:	9b04      	ldr	r3, [sp, #16]
    2c38:	1acb      	subs	r3, r1, r3
    2c3a:	0018      	movs	r0, r3
    2c3c:	0039      	movs	r1, r7
    2c3e:	9304      	str	r3, [sp, #16]
    2c40:	f001 f822 	bl	3c88 <__udivsi3>
    2c44:	9b01      	ldr	r3, [sp, #4]
    2c46:	4682      	mov	sl, r0
    2c48:	4343      	muls	r3, r0
    2c4a:	0039      	movs	r1, r7
    2c4c:	9804      	ldr	r0, [sp, #16]
    2c4e:	9301      	str	r3, [sp, #4]
    2c50:	f001 f8a0 	bl	3d94 <__aeabi_uidivmod>
    2c54:	9801      	ldr	r0, [sp, #4]
    2c56:	040b      	lsls	r3, r1, #16
    2c58:	0431      	lsls	r1, r6, #16
    2c5a:	0c09      	lsrs	r1, r1, #16
    2c5c:	4319      	orrs	r1, r3
    2c5e:	4288      	cmp	r0, r1
    2c60:	d90d      	bls.n	2c7e <__aeabi_ddiv+0x38a>
    2c62:	4653      	mov	r3, sl
    2c64:	4441      	add	r1, r8
    2c66:	3b01      	subs	r3, #1
    2c68:	4588      	cmp	r8, r1
    2c6a:	d900      	bls.n	2c6e <__aeabi_ddiv+0x37a>
    2c6c:	e0e8      	b.n	2e40 <__aeabi_ddiv+0x54c>
    2c6e:	4288      	cmp	r0, r1
    2c70:	d800      	bhi.n	2c74 <__aeabi_ddiv+0x380>
    2c72:	e0e5      	b.n	2e40 <__aeabi_ddiv+0x54c>
    2c74:	2302      	movs	r3, #2
    2c76:	425b      	negs	r3, r3
    2c78:	469c      	mov	ip, r3
    2c7a:	4441      	add	r1, r8
    2c7c:	44e2      	add	sl, ip
    2c7e:	9b01      	ldr	r3, [sp, #4]
    2c80:	042d      	lsls	r5, r5, #16
    2c82:	1ace      	subs	r6, r1, r3
    2c84:	4651      	mov	r1, sl
    2c86:	4329      	orrs	r1, r5
    2c88:	9d05      	ldr	r5, [sp, #20]
    2c8a:	464f      	mov	r7, r9
    2c8c:	002a      	movs	r2, r5
    2c8e:	040b      	lsls	r3, r1, #16
    2c90:	0c08      	lsrs	r0, r1, #16
    2c92:	0c1b      	lsrs	r3, r3, #16
    2c94:	435a      	muls	r2, r3
    2c96:	4345      	muls	r5, r0
    2c98:	437b      	muls	r3, r7
    2c9a:	4378      	muls	r0, r7
    2c9c:	195b      	adds	r3, r3, r5
    2c9e:	0c17      	lsrs	r7, r2, #16
    2ca0:	18fb      	adds	r3, r7, r3
    2ca2:	429d      	cmp	r5, r3
    2ca4:	d903      	bls.n	2cae <__aeabi_ddiv+0x3ba>
    2ca6:	2580      	movs	r5, #128	; 0x80
    2ca8:	026d      	lsls	r5, r5, #9
    2caa:	46ac      	mov	ip, r5
    2cac:	4460      	add	r0, ip
    2cae:	0c1d      	lsrs	r5, r3, #16
    2cb0:	0412      	lsls	r2, r2, #16
    2cb2:	041b      	lsls	r3, r3, #16
    2cb4:	0c12      	lsrs	r2, r2, #16
    2cb6:	1828      	adds	r0, r5, r0
    2cb8:	189b      	adds	r3, r3, r2
    2cba:	4286      	cmp	r6, r0
    2cbc:	d200      	bcs.n	2cc0 <__aeabi_ddiv+0x3cc>
    2cbe:	e093      	b.n	2de8 <__aeabi_ddiv+0x4f4>
    2cc0:	d100      	bne.n	2cc4 <__aeabi_ddiv+0x3d0>
    2cc2:	e08e      	b.n	2de2 <__aeabi_ddiv+0x4ee>
    2cc4:	2301      	movs	r3, #1
    2cc6:	4319      	orrs	r1, r3
    2cc8:	4ba0      	ldr	r3, [pc, #640]	; (2f4c <__aeabi_ddiv+0x658>)
    2cca:	18e3      	adds	r3, r4, r3
    2ccc:	2b00      	cmp	r3, #0
    2cce:	dc00      	bgt.n	2cd2 <__aeabi_ddiv+0x3de>
    2cd0:	e099      	b.n	2e06 <__aeabi_ddiv+0x512>
    2cd2:	074a      	lsls	r2, r1, #29
    2cd4:	d000      	beq.n	2cd8 <__aeabi_ddiv+0x3e4>
    2cd6:	e09e      	b.n	2e16 <__aeabi_ddiv+0x522>
    2cd8:	465a      	mov	r2, fp
    2cda:	01d2      	lsls	r2, r2, #7
    2cdc:	d506      	bpl.n	2cec <__aeabi_ddiv+0x3f8>
    2cde:	465a      	mov	r2, fp
    2ce0:	4b9b      	ldr	r3, [pc, #620]	; (2f50 <__aeabi_ddiv+0x65c>)
    2ce2:	401a      	ands	r2, r3
    2ce4:	2380      	movs	r3, #128	; 0x80
    2ce6:	4693      	mov	fp, r2
    2ce8:	00db      	lsls	r3, r3, #3
    2cea:	18e3      	adds	r3, r4, r3
    2cec:	4a99      	ldr	r2, [pc, #612]	; (2f54 <__aeabi_ddiv+0x660>)
    2cee:	4293      	cmp	r3, r2
    2cf0:	dd68      	ble.n	2dc4 <__aeabi_ddiv+0x4d0>
    2cf2:	2301      	movs	r3, #1
    2cf4:	9a02      	ldr	r2, [sp, #8]
    2cf6:	4c98      	ldr	r4, [pc, #608]	; (2f58 <__aeabi_ddiv+0x664>)
    2cf8:	401a      	ands	r2, r3
    2cfa:	2300      	movs	r3, #0
    2cfc:	4694      	mov	ip, r2
    2cfe:	4698      	mov	r8, r3
    2d00:	2200      	movs	r2, #0
    2d02:	e6c5      	b.n	2a90 <__aeabi_ddiv+0x19c>
    2d04:	2280      	movs	r2, #128	; 0x80
    2d06:	464b      	mov	r3, r9
    2d08:	0312      	lsls	r2, r2, #12
    2d0a:	4213      	tst	r3, r2
    2d0c:	d00a      	beq.n	2d24 <__aeabi_ddiv+0x430>
    2d0e:	465b      	mov	r3, fp
    2d10:	4213      	tst	r3, r2
    2d12:	d106      	bne.n	2d22 <__aeabi_ddiv+0x42e>
    2d14:	431a      	orrs	r2, r3
    2d16:	0312      	lsls	r2, r2, #12
    2d18:	0b12      	lsrs	r2, r2, #12
    2d1a:	46ac      	mov	ip, r5
    2d1c:	4688      	mov	r8, r1
    2d1e:	4c8e      	ldr	r4, [pc, #568]	; (2f58 <__aeabi_ddiv+0x664>)
    2d20:	e6b6      	b.n	2a90 <__aeabi_ddiv+0x19c>
    2d22:	464b      	mov	r3, r9
    2d24:	431a      	orrs	r2, r3
    2d26:	0312      	lsls	r2, r2, #12
    2d28:	0b12      	lsrs	r2, r2, #12
    2d2a:	46bc      	mov	ip, r7
    2d2c:	4c8a      	ldr	r4, [pc, #552]	; (2f58 <__aeabi_ddiv+0x664>)
    2d2e:	e6af      	b.n	2a90 <__aeabi_ddiv+0x19c>
    2d30:	0003      	movs	r3, r0
    2d32:	465a      	mov	r2, fp
    2d34:	3b28      	subs	r3, #40	; 0x28
    2d36:	409a      	lsls	r2, r3
    2d38:	2300      	movs	r3, #0
    2d3a:	4691      	mov	r9, r2
    2d3c:	4698      	mov	r8, r3
    2d3e:	e657      	b.n	29f0 <__aeabi_ddiv+0xfc>
    2d40:	4658      	mov	r0, fp
    2d42:	f001 f82b 	bl	3d9c <__clzsi2>
    2d46:	3020      	adds	r0, #32
    2d48:	e640      	b.n	29cc <__aeabi_ddiv+0xd8>
    2d4a:	0003      	movs	r3, r0
    2d4c:	4652      	mov	r2, sl
    2d4e:	3b28      	subs	r3, #40	; 0x28
    2d50:	409a      	lsls	r2, r3
    2d52:	2100      	movs	r1, #0
    2d54:	4693      	mov	fp, r2
    2d56:	e677      	b.n	2a48 <__aeabi_ddiv+0x154>
    2d58:	f001 f820 	bl	3d9c <__clzsi2>
    2d5c:	3020      	adds	r0, #32
    2d5e:	e65f      	b.n	2a20 <__aeabi_ddiv+0x12c>
    2d60:	4588      	cmp	r8, r1
    2d62:	d200      	bcs.n	2d66 <__aeabi_ddiv+0x472>
    2d64:	e6c7      	b.n	2af6 <__aeabi_ddiv+0x202>
    2d66:	464b      	mov	r3, r9
    2d68:	07de      	lsls	r6, r3, #31
    2d6a:	085d      	lsrs	r5, r3, #1
    2d6c:	4643      	mov	r3, r8
    2d6e:	085b      	lsrs	r3, r3, #1
    2d70:	431e      	orrs	r6, r3
    2d72:	4643      	mov	r3, r8
    2d74:	07db      	lsls	r3, r3, #31
    2d76:	469a      	mov	sl, r3
    2d78:	e6c2      	b.n	2b00 <__aeabi_ddiv+0x20c>
    2d7a:	2500      	movs	r5, #0
    2d7c:	4592      	cmp	sl, r2
    2d7e:	d300      	bcc.n	2d82 <__aeabi_ddiv+0x48e>
    2d80:	e733      	b.n	2bea <__aeabi_ddiv+0x2f6>
    2d82:	9e03      	ldr	r6, [sp, #12]
    2d84:	4659      	mov	r1, fp
    2d86:	46b4      	mov	ip, r6
    2d88:	44e2      	add	sl, ip
    2d8a:	45b2      	cmp	sl, r6
    2d8c:	41ad      	sbcs	r5, r5
    2d8e:	426d      	negs	r5, r5
    2d90:	4445      	add	r5, r8
    2d92:	18eb      	adds	r3, r5, r3
    2d94:	3901      	subs	r1, #1
    2d96:	4598      	cmp	r8, r3
    2d98:	d207      	bcs.n	2daa <__aeabi_ddiv+0x4b6>
    2d9a:	4298      	cmp	r0, r3
    2d9c:	d900      	bls.n	2da0 <__aeabi_ddiv+0x4ac>
    2d9e:	e07f      	b.n	2ea0 <__aeabi_ddiv+0x5ac>
    2da0:	d100      	bne.n	2da4 <__aeabi_ddiv+0x4b0>
    2da2:	e0bc      	b.n	2f1e <__aeabi_ddiv+0x62a>
    2da4:	1a1d      	subs	r5, r3, r0
    2da6:	468b      	mov	fp, r1
    2da8:	e71f      	b.n	2bea <__aeabi_ddiv+0x2f6>
    2daa:	4598      	cmp	r8, r3
    2dac:	d1fa      	bne.n	2da4 <__aeabi_ddiv+0x4b0>
    2dae:	9d03      	ldr	r5, [sp, #12]
    2db0:	4555      	cmp	r5, sl
    2db2:	d9f2      	bls.n	2d9a <__aeabi_ddiv+0x4a6>
    2db4:	4643      	mov	r3, r8
    2db6:	468b      	mov	fp, r1
    2db8:	1a1d      	subs	r5, r3, r0
    2dba:	e716      	b.n	2bea <__aeabi_ddiv+0x2f6>
    2dbc:	469b      	mov	fp, r3
    2dbe:	e6ca      	b.n	2b56 <__aeabi_ddiv+0x262>
    2dc0:	0015      	movs	r5, r2
    2dc2:	e6e7      	b.n	2b94 <__aeabi_ddiv+0x2a0>
    2dc4:	465a      	mov	r2, fp
    2dc6:	08c9      	lsrs	r1, r1, #3
    2dc8:	0752      	lsls	r2, r2, #29
    2dca:	430a      	orrs	r2, r1
    2dcc:	055b      	lsls	r3, r3, #21
    2dce:	4690      	mov	r8, r2
    2dd0:	0d5c      	lsrs	r4, r3, #21
    2dd2:	465a      	mov	r2, fp
    2dd4:	2301      	movs	r3, #1
    2dd6:	9902      	ldr	r1, [sp, #8]
    2dd8:	0252      	lsls	r2, r2, #9
    2dda:	4019      	ands	r1, r3
    2ddc:	0b12      	lsrs	r2, r2, #12
    2dde:	468c      	mov	ip, r1
    2de0:	e656      	b.n	2a90 <__aeabi_ddiv+0x19c>
    2de2:	2b00      	cmp	r3, #0
    2de4:	d100      	bne.n	2de8 <__aeabi_ddiv+0x4f4>
    2de6:	e76f      	b.n	2cc8 <__aeabi_ddiv+0x3d4>
    2de8:	4446      	add	r6, r8
    2dea:	1e4a      	subs	r2, r1, #1
    2dec:	45b0      	cmp	r8, r6
    2dee:	d929      	bls.n	2e44 <__aeabi_ddiv+0x550>
    2df0:	0011      	movs	r1, r2
    2df2:	4286      	cmp	r6, r0
    2df4:	d000      	beq.n	2df8 <__aeabi_ddiv+0x504>
    2df6:	e765      	b.n	2cc4 <__aeabi_ddiv+0x3d0>
    2df8:	9a03      	ldr	r2, [sp, #12]
    2dfa:	4293      	cmp	r3, r2
    2dfc:	d000      	beq.n	2e00 <__aeabi_ddiv+0x50c>
    2dfe:	e761      	b.n	2cc4 <__aeabi_ddiv+0x3d0>
    2e00:	e762      	b.n	2cc8 <__aeabi_ddiv+0x3d4>
    2e02:	2101      	movs	r1, #1
    2e04:	4249      	negs	r1, r1
    2e06:	2001      	movs	r0, #1
    2e08:	1ac2      	subs	r2, r0, r3
    2e0a:	2a38      	cmp	r2, #56	; 0x38
    2e0c:	dd21      	ble.n	2e52 <__aeabi_ddiv+0x55e>
    2e0e:	9b02      	ldr	r3, [sp, #8]
    2e10:	4003      	ands	r3, r0
    2e12:	469c      	mov	ip, r3
    2e14:	e638      	b.n	2a88 <__aeabi_ddiv+0x194>
    2e16:	220f      	movs	r2, #15
    2e18:	400a      	ands	r2, r1
    2e1a:	2a04      	cmp	r2, #4
    2e1c:	d100      	bne.n	2e20 <__aeabi_ddiv+0x52c>
    2e1e:	e75b      	b.n	2cd8 <__aeabi_ddiv+0x3e4>
    2e20:	000a      	movs	r2, r1
    2e22:	1d11      	adds	r1, r2, #4
    2e24:	4291      	cmp	r1, r2
    2e26:	4192      	sbcs	r2, r2
    2e28:	4252      	negs	r2, r2
    2e2a:	4493      	add	fp, r2
    2e2c:	e754      	b.n	2cd8 <__aeabi_ddiv+0x3e4>
    2e2e:	4b47      	ldr	r3, [pc, #284]	; (2f4c <__aeabi_ddiv+0x658>)
    2e30:	18e3      	adds	r3, r4, r3
    2e32:	2b00      	cmp	r3, #0
    2e34:	dde5      	ble.n	2e02 <__aeabi_ddiv+0x50e>
    2e36:	2201      	movs	r2, #1
    2e38:	4252      	negs	r2, r2
    2e3a:	e7f2      	b.n	2e22 <__aeabi_ddiv+0x52e>
    2e3c:	001d      	movs	r5, r3
    2e3e:	e6fa      	b.n	2c36 <__aeabi_ddiv+0x342>
    2e40:	469a      	mov	sl, r3
    2e42:	e71c      	b.n	2c7e <__aeabi_ddiv+0x38a>
    2e44:	42b0      	cmp	r0, r6
    2e46:	d839      	bhi.n	2ebc <__aeabi_ddiv+0x5c8>
    2e48:	d06e      	beq.n	2f28 <__aeabi_ddiv+0x634>
    2e4a:	0011      	movs	r1, r2
    2e4c:	e73a      	b.n	2cc4 <__aeabi_ddiv+0x3d0>
    2e4e:	9302      	str	r3, [sp, #8]
    2e50:	e73a      	b.n	2cc8 <__aeabi_ddiv+0x3d4>
    2e52:	2a1f      	cmp	r2, #31
    2e54:	dc3c      	bgt.n	2ed0 <__aeabi_ddiv+0x5dc>
    2e56:	2320      	movs	r3, #32
    2e58:	1a9b      	subs	r3, r3, r2
    2e5a:	000c      	movs	r4, r1
    2e5c:	4658      	mov	r0, fp
    2e5e:	4099      	lsls	r1, r3
    2e60:	4098      	lsls	r0, r3
    2e62:	1e4b      	subs	r3, r1, #1
    2e64:	4199      	sbcs	r1, r3
    2e66:	465b      	mov	r3, fp
    2e68:	40d4      	lsrs	r4, r2
    2e6a:	40d3      	lsrs	r3, r2
    2e6c:	4320      	orrs	r0, r4
    2e6e:	4308      	orrs	r0, r1
    2e70:	001a      	movs	r2, r3
    2e72:	0743      	lsls	r3, r0, #29
    2e74:	d009      	beq.n	2e8a <__aeabi_ddiv+0x596>
    2e76:	230f      	movs	r3, #15
    2e78:	4003      	ands	r3, r0
    2e7a:	2b04      	cmp	r3, #4
    2e7c:	d005      	beq.n	2e8a <__aeabi_ddiv+0x596>
    2e7e:	0001      	movs	r1, r0
    2e80:	1d08      	adds	r0, r1, #4
    2e82:	4288      	cmp	r0, r1
    2e84:	419b      	sbcs	r3, r3
    2e86:	425b      	negs	r3, r3
    2e88:	18d2      	adds	r2, r2, r3
    2e8a:	0213      	lsls	r3, r2, #8
    2e8c:	d53a      	bpl.n	2f04 <__aeabi_ddiv+0x610>
    2e8e:	2301      	movs	r3, #1
    2e90:	9a02      	ldr	r2, [sp, #8]
    2e92:	2401      	movs	r4, #1
    2e94:	401a      	ands	r2, r3
    2e96:	2300      	movs	r3, #0
    2e98:	4694      	mov	ip, r2
    2e9a:	4698      	mov	r8, r3
    2e9c:	2200      	movs	r2, #0
    2e9e:	e5f7      	b.n	2a90 <__aeabi_ddiv+0x19c>
    2ea0:	2102      	movs	r1, #2
    2ea2:	4249      	negs	r1, r1
    2ea4:	468c      	mov	ip, r1
    2ea6:	9d03      	ldr	r5, [sp, #12]
    2ea8:	44e3      	add	fp, ip
    2eaa:	46ac      	mov	ip, r5
    2eac:	44e2      	add	sl, ip
    2eae:	45aa      	cmp	sl, r5
    2eb0:	41ad      	sbcs	r5, r5
    2eb2:	426d      	negs	r5, r5
    2eb4:	4445      	add	r5, r8
    2eb6:	18ed      	adds	r5, r5, r3
    2eb8:	1a2d      	subs	r5, r5, r0
    2eba:	e696      	b.n	2bea <__aeabi_ddiv+0x2f6>
    2ebc:	1e8a      	subs	r2, r1, #2
    2ebe:	9903      	ldr	r1, [sp, #12]
    2ec0:	004d      	lsls	r5, r1, #1
    2ec2:	428d      	cmp	r5, r1
    2ec4:	4189      	sbcs	r1, r1
    2ec6:	4249      	negs	r1, r1
    2ec8:	4441      	add	r1, r8
    2eca:	1876      	adds	r6, r6, r1
    2ecc:	9503      	str	r5, [sp, #12]
    2ece:	e78f      	b.n	2df0 <__aeabi_ddiv+0x4fc>
    2ed0:	201f      	movs	r0, #31
    2ed2:	4240      	negs	r0, r0
    2ed4:	1ac3      	subs	r3, r0, r3
    2ed6:	4658      	mov	r0, fp
    2ed8:	40d8      	lsrs	r0, r3
    2eda:	0003      	movs	r3, r0
    2edc:	2a20      	cmp	r2, #32
    2ede:	d028      	beq.n	2f32 <__aeabi_ddiv+0x63e>
    2ee0:	2040      	movs	r0, #64	; 0x40
    2ee2:	465d      	mov	r5, fp
    2ee4:	1a82      	subs	r2, r0, r2
    2ee6:	4095      	lsls	r5, r2
    2ee8:	4329      	orrs	r1, r5
    2eea:	1e4a      	subs	r2, r1, #1
    2eec:	4191      	sbcs	r1, r2
    2eee:	4319      	orrs	r1, r3
    2ef0:	2307      	movs	r3, #7
    2ef2:	2200      	movs	r2, #0
    2ef4:	400b      	ands	r3, r1
    2ef6:	d009      	beq.n	2f0c <__aeabi_ddiv+0x618>
    2ef8:	230f      	movs	r3, #15
    2efa:	2200      	movs	r2, #0
    2efc:	400b      	ands	r3, r1
    2efe:	0008      	movs	r0, r1
    2f00:	2b04      	cmp	r3, #4
    2f02:	d1bd      	bne.n	2e80 <__aeabi_ddiv+0x58c>
    2f04:	0001      	movs	r1, r0
    2f06:	0753      	lsls	r3, r2, #29
    2f08:	0252      	lsls	r2, r2, #9
    2f0a:	0b12      	lsrs	r2, r2, #12
    2f0c:	08c9      	lsrs	r1, r1, #3
    2f0e:	4319      	orrs	r1, r3
    2f10:	2301      	movs	r3, #1
    2f12:	4688      	mov	r8, r1
    2f14:	9902      	ldr	r1, [sp, #8]
    2f16:	2400      	movs	r4, #0
    2f18:	4019      	ands	r1, r3
    2f1a:	468c      	mov	ip, r1
    2f1c:	e5b8      	b.n	2a90 <__aeabi_ddiv+0x19c>
    2f1e:	4552      	cmp	r2, sl
    2f20:	d8be      	bhi.n	2ea0 <__aeabi_ddiv+0x5ac>
    2f22:	468b      	mov	fp, r1
    2f24:	2500      	movs	r5, #0
    2f26:	e660      	b.n	2bea <__aeabi_ddiv+0x2f6>
    2f28:	9d03      	ldr	r5, [sp, #12]
    2f2a:	429d      	cmp	r5, r3
    2f2c:	d3c6      	bcc.n	2ebc <__aeabi_ddiv+0x5c8>
    2f2e:	0011      	movs	r1, r2
    2f30:	e762      	b.n	2df8 <__aeabi_ddiv+0x504>
    2f32:	2500      	movs	r5, #0
    2f34:	e7d8      	b.n	2ee8 <__aeabi_ddiv+0x5f4>
    2f36:	2280      	movs	r2, #128	; 0x80
    2f38:	465b      	mov	r3, fp
    2f3a:	0312      	lsls	r2, r2, #12
    2f3c:	431a      	orrs	r2, r3
    2f3e:	9b01      	ldr	r3, [sp, #4]
    2f40:	0312      	lsls	r2, r2, #12
    2f42:	0b12      	lsrs	r2, r2, #12
    2f44:	469c      	mov	ip, r3
    2f46:	4688      	mov	r8, r1
    2f48:	4c03      	ldr	r4, [pc, #12]	; (2f58 <__aeabi_ddiv+0x664>)
    2f4a:	e5a1      	b.n	2a90 <__aeabi_ddiv+0x19c>
    2f4c:	000003ff 	.word	0x000003ff
    2f50:	feffffff 	.word	0xfeffffff
    2f54:	000007fe 	.word	0x000007fe
    2f58:	000007ff 	.word	0x000007ff

00002f5c <__eqdf2>:
    2f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f5e:	464f      	mov	r7, r9
    2f60:	4646      	mov	r6, r8
    2f62:	46d6      	mov	lr, sl
    2f64:	005c      	lsls	r4, r3, #1
    2f66:	b5c0      	push	{r6, r7, lr}
    2f68:	031f      	lsls	r7, r3, #12
    2f6a:	0fdb      	lsrs	r3, r3, #31
    2f6c:	469a      	mov	sl, r3
    2f6e:	4b17      	ldr	r3, [pc, #92]	; (2fcc <__eqdf2+0x70>)
    2f70:	030e      	lsls	r6, r1, #12
    2f72:	004d      	lsls	r5, r1, #1
    2f74:	4684      	mov	ip, r0
    2f76:	4680      	mov	r8, r0
    2f78:	0b36      	lsrs	r6, r6, #12
    2f7a:	0d6d      	lsrs	r5, r5, #21
    2f7c:	0fc9      	lsrs	r1, r1, #31
    2f7e:	4691      	mov	r9, r2
    2f80:	0b3f      	lsrs	r7, r7, #12
    2f82:	0d64      	lsrs	r4, r4, #21
    2f84:	2001      	movs	r0, #1
    2f86:	429d      	cmp	r5, r3
    2f88:	d008      	beq.n	2f9c <__eqdf2+0x40>
    2f8a:	429c      	cmp	r4, r3
    2f8c:	d001      	beq.n	2f92 <__eqdf2+0x36>
    2f8e:	42a5      	cmp	r5, r4
    2f90:	d00b      	beq.n	2faa <__eqdf2+0x4e>
    2f92:	bc1c      	pop	{r2, r3, r4}
    2f94:	4690      	mov	r8, r2
    2f96:	4699      	mov	r9, r3
    2f98:	46a2      	mov	sl, r4
    2f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f9c:	4663      	mov	r3, ip
    2f9e:	4333      	orrs	r3, r6
    2fa0:	d1f7      	bne.n	2f92 <__eqdf2+0x36>
    2fa2:	42ac      	cmp	r4, r5
    2fa4:	d1f5      	bne.n	2f92 <__eqdf2+0x36>
    2fa6:	433a      	orrs	r2, r7
    2fa8:	d1f3      	bne.n	2f92 <__eqdf2+0x36>
    2faa:	2001      	movs	r0, #1
    2fac:	42be      	cmp	r6, r7
    2fae:	d1f0      	bne.n	2f92 <__eqdf2+0x36>
    2fb0:	45c8      	cmp	r8, r9
    2fb2:	d1ee      	bne.n	2f92 <__eqdf2+0x36>
    2fb4:	4551      	cmp	r1, sl
    2fb6:	d007      	beq.n	2fc8 <__eqdf2+0x6c>
    2fb8:	2d00      	cmp	r5, #0
    2fba:	d1ea      	bne.n	2f92 <__eqdf2+0x36>
    2fbc:	4663      	mov	r3, ip
    2fbe:	431e      	orrs	r6, r3
    2fc0:	0030      	movs	r0, r6
    2fc2:	1e46      	subs	r6, r0, #1
    2fc4:	41b0      	sbcs	r0, r6
    2fc6:	e7e4      	b.n	2f92 <__eqdf2+0x36>
    2fc8:	2000      	movs	r0, #0
    2fca:	e7e2      	b.n	2f92 <__eqdf2+0x36>
    2fcc:	000007ff 	.word	0x000007ff

00002fd0 <__gedf2>:
    2fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fd2:	4645      	mov	r5, r8
    2fd4:	46de      	mov	lr, fp
    2fd6:	4657      	mov	r7, sl
    2fd8:	464e      	mov	r6, r9
    2fda:	b5e0      	push	{r5, r6, r7, lr}
    2fdc:	031f      	lsls	r7, r3, #12
    2fde:	0b3d      	lsrs	r5, r7, #12
    2fe0:	4f2c      	ldr	r7, [pc, #176]	; (3094 <__gedf2+0xc4>)
    2fe2:	030e      	lsls	r6, r1, #12
    2fe4:	004c      	lsls	r4, r1, #1
    2fe6:	46ab      	mov	fp, r5
    2fe8:	005d      	lsls	r5, r3, #1
    2fea:	4684      	mov	ip, r0
    2fec:	0b36      	lsrs	r6, r6, #12
    2fee:	0d64      	lsrs	r4, r4, #21
    2ff0:	0fc9      	lsrs	r1, r1, #31
    2ff2:	4690      	mov	r8, r2
    2ff4:	0d6d      	lsrs	r5, r5, #21
    2ff6:	0fdb      	lsrs	r3, r3, #31
    2ff8:	42bc      	cmp	r4, r7
    2ffa:	d02a      	beq.n	3052 <__gedf2+0x82>
    2ffc:	4f25      	ldr	r7, [pc, #148]	; (3094 <__gedf2+0xc4>)
    2ffe:	42bd      	cmp	r5, r7
    3000:	d02d      	beq.n	305e <__gedf2+0x8e>
    3002:	2c00      	cmp	r4, #0
    3004:	d10f      	bne.n	3026 <__gedf2+0x56>
    3006:	4330      	orrs	r0, r6
    3008:	0007      	movs	r7, r0
    300a:	4681      	mov	r9, r0
    300c:	4278      	negs	r0, r7
    300e:	4178      	adcs	r0, r7
    3010:	b2c0      	uxtb	r0, r0
    3012:	2d00      	cmp	r5, #0
    3014:	d117      	bne.n	3046 <__gedf2+0x76>
    3016:	465f      	mov	r7, fp
    3018:	433a      	orrs	r2, r7
    301a:	d114      	bne.n	3046 <__gedf2+0x76>
    301c:	464b      	mov	r3, r9
    301e:	2000      	movs	r0, #0
    3020:	2b00      	cmp	r3, #0
    3022:	d00a      	beq.n	303a <__gedf2+0x6a>
    3024:	e006      	b.n	3034 <__gedf2+0x64>
    3026:	2d00      	cmp	r5, #0
    3028:	d102      	bne.n	3030 <__gedf2+0x60>
    302a:	4658      	mov	r0, fp
    302c:	4302      	orrs	r2, r0
    302e:	d001      	beq.n	3034 <__gedf2+0x64>
    3030:	4299      	cmp	r1, r3
    3032:	d018      	beq.n	3066 <__gedf2+0x96>
    3034:	4248      	negs	r0, r1
    3036:	2101      	movs	r1, #1
    3038:	4308      	orrs	r0, r1
    303a:	bc3c      	pop	{r2, r3, r4, r5}
    303c:	4690      	mov	r8, r2
    303e:	4699      	mov	r9, r3
    3040:	46a2      	mov	sl, r4
    3042:	46ab      	mov	fp, r5
    3044:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3046:	2800      	cmp	r0, #0
    3048:	d0f2      	beq.n	3030 <__gedf2+0x60>
    304a:	2001      	movs	r0, #1
    304c:	3b01      	subs	r3, #1
    304e:	4318      	orrs	r0, r3
    3050:	e7f3      	b.n	303a <__gedf2+0x6a>
    3052:	0037      	movs	r7, r6
    3054:	4307      	orrs	r7, r0
    3056:	d0d1      	beq.n	2ffc <__gedf2+0x2c>
    3058:	2002      	movs	r0, #2
    305a:	4240      	negs	r0, r0
    305c:	e7ed      	b.n	303a <__gedf2+0x6a>
    305e:	465f      	mov	r7, fp
    3060:	4317      	orrs	r7, r2
    3062:	d0ce      	beq.n	3002 <__gedf2+0x32>
    3064:	e7f8      	b.n	3058 <__gedf2+0x88>
    3066:	42ac      	cmp	r4, r5
    3068:	dce4      	bgt.n	3034 <__gedf2+0x64>
    306a:	da03      	bge.n	3074 <__gedf2+0xa4>
    306c:	1e48      	subs	r0, r1, #1
    306e:	2101      	movs	r1, #1
    3070:	4308      	orrs	r0, r1
    3072:	e7e2      	b.n	303a <__gedf2+0x6a>
    3074:	455e      	cmp	r6, fp
    3076:	d8dd      	bhi.n	3034 <__gedf2+0x64>
    3078:	d006      	beq.n	3088 <__gedf2+0xb8>
    307a:	2000      	movs	r0, #0
    307c:	455e      	cmp	r6, fp
    307e:	d2dc      	bcs.n	303a <__gedf2+0x6a>
    3080:	2301      	movs	r3, #1
    3082:	1e48      	subs	r0, r1, #1
    3084:	4318      	orrs	r0, r3
    3086:	e7d8      	b.n	303a <__gedf2+0x6a>
    3088:	45c4      	cmp	ip, r8
    308a:	d8d3      	bhi.n	3034 <__gedf2+0x64>
    308c:	2000      	movs	r0, #0
    308e:	45c4      	cmp	ip, r8
    3090:	d3f6      	bcc.n	3080 <__gedf2+0xb0>
    3092:	e7d2      	b.n	303a <__gedf2+0x6a>
    3094:	000007ff 	.word	0x000007ff

00003098 <__ledf2>:
    3098:	b5f0      	push	{r4, r5, r6, r7, lr}
    309a:	464e      	mov	r6, r9
    309c:	4645      	mov	r5, r8
    309e:	46de      	mov	lr, fp
    30a0:	4657      	mov	r7, sl
    30a2:	005c      	lsls	r4, r3, #1
    30a4:	b5e0      	push	{r5, r6, r7, lr}
    30a6:	031f      	lsls	r7, r3, #12
    30a8:	0fdb      	lsrs	r3, r3, #31
    30aa:	4699      	mov	r9, r3
    30ac:	4b2a      	ldr	r3, [pc, #168]	; (3158 <__ledf2+0xc0>)
    30ae:	030e      	lsls	r6, r1, #12
    30b0:	004d      	lsls	r5, r1, #1
    30b2:	0fc9      	lsrs	r1, r1, #31
    30b4:	4684      	mov	ip, r0
    30b6:	0b36      	lsrs	r6, r6, #12
    30b8:	0d6d      	lsrs	r5, r5, #21
    30ba:	468b      	mov	fp, r1
    30bc:	4690      	mov	r8, r2
    30be:	0b3f      	lsrs	r7, r7, #12
    30c0:	0d64      	lsrs	r4, r4, #21
    30c2:	429d      	cmp	r5, r3
    30c4:	d020      	beq.n	3108 <__ledf2+0x70>
    30c6:	4b24      	ldr	r3, [pc, #144]	; (3158 <__ledf2+0xc0>)
    30c8:	429c      	cmp	r4, r3
    30ca:	d022      	beq.n	3112 <__ledf2+0x7a>
    30cc:	2d00      	cmp	r5, #0
    30ce:	d112      	bne.n	30f6 <__ledf2+0x5e>
    30d0:	4330      	orrs	r0, r6
    30d2:	4243      	negs	r3, r0
    30d4:	4143      	adcs	r3, r0
    30d6:	b2db      	uxtb	r3, r3
    30d8:	2c00      	cmp	r4, #0
    30da:	d01f      	beq.n	311c <__ledf2+0x84>
    30dc:	2b00      	cmp	r3, #0
    30de:	d00c      	beq.n	30fa <__ledf2+0x62>
    30e0:	464b      	mov	r3, r9
    30e2:	2001      	movs	r0, #1
    30e4:	3b01      	subs	r3, #1
    30e6:	4303      	orrs	r3, r0
    30e8:	0018      	movs	r0, r3
    30ea:	bc3c      	pop	{r2, r3, r4, r5}
    30ec:	4690      	mov	r8, r2
    30ee:	4699      	mov	r9, r3
    30f0:	46a2      	mov	sl, r4
    30f2:	46ab      	mov	fp, r5
    30f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30f6:	2c00      	cmp	r4, #0
    30f8:	d016      	beq.n	3128 <__ledf2+0x90>
    30fa:	45cb      	cmp	fp, r9
    30fc:	d017      	beq.n	312e <__ledf2+0x96>
    30fe:	465b      	mov	r3, fp
    3100:	4259      	negs	r1, r3
    3102:	2301      	movs	r3, #1
    3104:	430b      	orrs	r3, r1
    3106:	e7ef      	b.n	30e8 <__ledf2+0x50>
    3108:	0031      	movs	r1, r6
    310a:	2302      	movs	r3, #2
    310c:	4301      	orrs	r1, r0
    310e:	d1eb      	bne.n	30e8 <__ledf2+0x50>
    3110:	e7d9      	b.n	30c6 <__ledf2+0x2e>
    3112:	0039      	movs	r1, r7
    3114:	2302      	movs	r3, #2
    3116:	4311      	orrs	r1, r2
    3118:	d1e6      	bne.n	30e8 <__ledf2+0x50>
    311a:	e7d7      	b.n	30cc <__ledf2+0x34>
    311c:	433a      	orrs	r2, r7
    311e:	d1dd      	bne.n	30dc <__ledf2+0x44>
    3120:	2300      	movs	r3, #0
    3122:	2800      	cmp	r0, #0
    3124:	d0e0      	beq.n	30e8 <__ledf2+0x50>
    3126:	e7ea      	b.n	30fe <__ledf2+0x66>
    3128:	433a      	orrs	r2, r7
    312a:	d1e6      	bne.n	30fa <__ledf2+0x62>
    312c:	e7e7      	b.n	30fe <__ledf2+0x66>
    312e:	42a5      	cmp	r5, r4
    3130:	dce5      	bgt.n	30fe <__ledf2+0x66>
    3132:	db05      	blt.n	3140 <__ledf2+0xa8>
    3134:	42be      	cmp	r6, r7
    3136:	d8e2      	bhi.n	30fe <__ledf2+0x66>
    3138:	d007      	beq.n	314a <__ledf2+0xb2>
    313a:	2300      	movs	r3, #0
    313c:	42be      	cmp	r6, r7
    313e:	d2d3      	bcs.n	30e8 <__ledf2+0x50>
    3140:	4659      	mov	r1, fp
    3142:	2301      	movs	r3, #1
    3144:	3901      	subs	r1, #1
    3146:	430b      	orrs	r3, r1
    3148:	e7ce      	b.n	30e8 <__ledf2+0x50>
    314a:	45c4      	cmp	ip, r8
    314c:	d8d7      	bhi.n	30fe <__ledf2+0x66>
    314e:	2300      	movs	r3, #0
    3150:	45c4      	cmp	ip, r8
    3152:	d3f5      	bcc.n	3140 <__ledf2+0xa8>
    3154:	e7c8      	b.n	30e8 <__ledf2+0x50>
    3156:	46c0      	nop			; (mov r8, r8)
    3158:	000007ff 	.word	0x000007ff

0000315c <__aeabi_dmul>:
    315c:	b5f0      	push	{r4, r5, r6, r7, lr}
    315e:	4657      	mov	r7, sl
    3160:	4645      	mov	r5, r8
    3162:	46de      	mov	lr, fp
    3164:	464e      	mov	r6, r9
    3166:	b5e0      	push	{r5, r6, r7, lr}
    3168:	030c      	lsls	r4, r1, #12
    316a:	4698      	mov	r8, r3
    316c:	004e      	lsls	r6, r1, #1
    316e:	0b23      	lsrs	r3, r4, #12
    3170:	b087      	sub	sp, #28
    3172:	0007      	movs	r7, r0
    3174:	4692      	mov	sl, r2
    3176:	469b      	mov	fp, r3
    3178:	0d76      	lsrs	r6, r6, #21
    317a:	0fcd      	lsrs	r5, r1, #31
    317c:	2e00      	cmp	r6, #0
    317e:	d06b      	beq.n	3258 <__aeabi_dmul+0xfc>
    3180:	4b6d      	ldr	r3, [pc, #436]	; (3338 <__aeabi_dmul+0x1dc>)
    3182:	429e      	cmp	r6, r3
    3184:	d035      	beq.n	31f2 <__aeabi_dmul+0x96>
    3186:	2480      	movs	r4, #128	; 0x80
    3188:	465b      	mov	r3, fp
    318a:	0f42      	lsrs	r2, r0, #29
    318c:	0424      	lsls	r4, r4, #16
    318e:	00db      	lsls	r3, r3, #3
    3190:	4314      	orrs	r4, r2
    3192:	431c      	orrs	r4, r3
    3194:	00c3      	lsls	r3, r0, #3
    3196:	4699      	mov	r9, r3
    3198:	4b68      	ldr	r3, [pc, #416]	; (333c <__aeabi_dmul+0x1e0>)
    319a:	46a3      	mov	fp, r4
    319c:	469c      	mov	ip, r3
    319e:	2300      	movs	r3, #0
    31a0:	2700      	movs	r7, #0
    31a2:	4466      	add	r6, ip
    31a4:	9302      	str	r3, [sp, #8]
    31a6:	4643      	mov	r3, r8
    31a8:	031c      	lsls	r4, r3, #12
    31aa:	005a      	lsls	r2, r3, #1
    31ac:	0fdb      	lsrs	r3, r3, #31
    31ae:	4650      	mov	r0, sl
    31b0:	0b24      	lsrs	r4, r4, #12
    31b2:	0d52      	lsrs	r2, r2, #21
    31b4:	4698      	mov	r8, r3
    31b6:	d100      	bne.n	31ba <__aeabi_dmul+0x5e>
    31b8:	e076      	b.n	32a8 <__aeabi_dmul+0x14c>
    31ba:	4b5f      	ldr	r3, [pc, #380]	; (3338 <__aeabi_dmul+0x1dc>)
    31bc:	429a      	cmp	r2, r3
    31be:	d06d      	beq.n	329c <__aeabi_dmul+0x140>
    31c0:	2380      	movs	r3, #128	; 0x80
    31c2:	0f41      	lsrs	r1, r0, #29
    31c4:	041b      	lsls	r3, r3, #16
    31c6:	430b      	orrs	r3, r1
    31c8:	495c      	ldr	r1, [pc, #368]	; (333c <__aeabi_dmul+0x1e0>)
    31ca:	00e4      	lsls	r4, r4, #3
    31cc:	468c      	mov	ip, r1
    31ce:	431c      	orrs	r4, r3
    31d0:	00c3      	lsls	r3, r0, #3
    31d2:	2000      	movs	r0, #0
    31d4:	4462      	add	r2, ip
    31d6:	4641      	mov	r1, r8
    31d8:	18b6      	adds	r6, r6, r2
    31da:	4069      	eors	r1, r5
    31dc:	1c72      	adds	r2, r6, #1
    31de:	9101      	str	r1, [sp, #4]
    31e0:	4694      	mov	ip, r2
    31e2:	4307      	orrs	r7, r0
    31e4:	2f0f      	cmp	r7, #15
    31e6:	d900      	bls.n	31ea <__aeabi_dmul+0x8e>
    31e8:	e0b0      	b.n	334c <__aeabi_dmul+0x1f0>
    31ea:	4a55      	ldr	r2, [pc, #340]	; (3340 <__aeabi_dmul+0x1e4>)
    31ec:	00bf      	lsls	r7, r7, #2
    31ee:	59d2      	ldr	r2, [r2, r7]
    31f0:	4697      	mov	pc, r2
    31f2:	465b      	mov	r3, fp
    31f4:	4303      	orrs	r3, r0
    31f6:	4699      	mov	r9, r3
    31f8:	d000      	beq.n	31fc <__aeabi_dmul+0xa0>
    31fa:	e087      	b.n	330c <__aeabi_dmul+0x1b0>
    31fc:	2300      	movs	r3, #0
    31fe:	469b      	mov	fp, r3
    3200:	3302      	adds	r3, #2
    3202:	2708      	movs	r7, #8
    3204:	9302      	str	r3, [sp, #8]
    3206:	e7ce      	b.n	31a6 <__aeabi_dmul+0x4a>
    3208:	4642      	mov	r2, r8
    320a:	9201      	str	r2, [sp, #4]
    320c:	2802      	cmp	r0, #2
    320e:	d067      	beq.n	32e0 <__aeabi_dmul+0x184>
    3210:	2803      	cmp	r0, #3
    3212:	d100      	bne.n	3216 <__aeabi_dmul+0xba>
    3214:	e20e      	b.n	3634 <__aeabi_dmul+0x4d8>
    3216:	2801      	cmp	r0, #1
    3218:	d000      	beq.n	321c <__aeabi_dmul+0xc0>
    321a:	e162      	b.n	34e2 <__aeabi_dmul+0x386>
    321c:	2300      	movs	r3, #0
    321e:	2400      	movs	r4, #0
    3220:	2200      	movs	r2, #0
    3222:	4699      	mov	r9, r3
    3224:	9901      	ldr	r1, [sp, #4]
    3226:	4001      	ands	r1, r0
    3228:	b2cd      	uxtb	r5, r1
    322a:	2100      	movs	r1, #0
    322c:	0312      	lsls	r2, r2, #12
    322e:	0d0b      	lsrs	r3, r1, #20
    3230:	0b12      	lsrs	r2, r2, #12
    3232:	051b      	lsls	r3, r3, #20
    3234:	4313      	orrs	r3, r2
    3236:	4a43      	ldr	r2, [pc, #268]	; (3344 <__aeabi_dmul+0x1e8>)
    3238:	0524      	lsls	r4, r4, #20
    323a:	4013      	ands	r3, r2
    323c:	431c      	orrs	r4, r3
    323e:	0064      	lsls	r4, r4, #1
    3240:	07ed      	lsls	r5, r5, #31
    3242:	0864      	lsrs	r4, r4, #1
    3244:	432c      	orrs	r4, r5
    3246:	4648      	mov	r0, r9
    3248:	0021      	movs	r1, r4
    324a:	b007      	add	sp, #28
    324c:	bc3c      	pop	{r2, r3, r4, r5}
    324e:	4690      	mov	r8, r2
    3250:	4699      	mov	r9, r3
    3252:	46a2      	mov	sl, r4
    3254:	46ab      	mov	fp, r5
    3256:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3258:	4303      	orrs	r3, r0
    325a:	4699      	mov	r9, r3
    325c:	d04f      	beq.n	32fe <__aeabi_dmul+0x1a2>
    325e:	465b      	mov	r3, fp
    3260:	2b00      	cmp	r3, #0
    3262:	d100      	bne.n	3266 <__aeabi_dmul+0x10a>
    3264:	e189      	b.n	357a <__aeabi_dmul+0x41e>
    3266:	4658      	mov	r0, fp
    3268:	f000 fd98 	bl	3d9c <__clzsi2>
    326c:	0003      	movs	r3, r0
    326e:	3b0b      	subs	r3, #11
    3270:	2b1c      	cmp	r3, #28
    3272:	dd00      	ble.n	3276 <__aeabi_dmul+0x11a>
    3274:	e17a      	b.n	356c <__aeabi_dmul+0x410>
    3276:	221d      	movs	r2, #29
    3278:	1ad3      	subs	r3, r2, r3
    327a:	003a      	movs	r2, r7
    327c:	0001      	movs	r1, r0
    327e:	465c      	mov	r4, fp
    3280:	40da      	lsrs	r2, r3
    3282:	3908      	subs	r1, #8
    3284:	408c      	lsls	r4, r1
    3286:	0013      	movs	r3, r2
    3288:	408f      	lsls	r7, r1
    328a:	4323      	orrs	r3, r4
    328c:	469b      	mov	fp, r3
    328e:	46b9      	mov	r9, r7
    3290:	2300      	movs	r3, #0
    3292:	4e2d      	ldr	r6, [pc, #180]	; (3348 <__aeabi_dmul+0x1ec>)
    3294:	2700      	movs	r7, #0
    3296:	1a36      	subs	r6, r6, r0
    3298:	9302      	str	r3, [sp, #8]
    329a:	e784      	b.n	31a6 <__aeabi_dmul+0x4a>
    329c:	4653      	mov	r3, sl
    329e:	4323      	orrs	r3, r4
    32a0:	d12a      	bne.n	32f8 <__aeabi_dmul+0x19c>
    32a2:	2400      	movs	r4, #0
    32a4:	2002      	movs	r0, #2
    32a6:	e796      	b.n	31d6 <__aeabi_dmul+0x7a>
    32a8:	4653      	mov	r3, sl
    32aa:	4323      	orrs	r3, r4
    32ac:	d020      	beq.n	32f0 <__aeabi_dmul+0x194>
    32ae:	2c00      	cmp	r4, #0
    32b0:	d100      	bne.n	32b4 <__aeabi_dmul+0x158>
    32b2:	e157      	b.n	3564 <__aeabi_dmul+0x408>
    32b4:	0020      	movs	r0, r4
    32b6:	f000 fd71 	bl	3d9c <__clzsi2>
    32ba:	0003      	movs	r3, r0
    32bc:	3b0b      	subs	r3, #11
    32be:	2b1c      	cmp	r3, #28
    32c0:	dd00      	ble.n	32c4 <__aeabi_dmul+0x168>
    32c2:	e149      	b.n	3558 <__aeabi_dmul+0x3fc>
    32c4:	211d      	movs	r1, #29
    32c6:	1acb      	subs	r3, r1, r3
    32c8:	4651      	mov	r1, sl
    32ca:	0002      	movs	r2, r0
    32cc:	40d9      	lsrs	r1, r3
    32ce:	4653      	mov	r3, sl
    32d0:	3a08      	subs	r2, #8
    32d2:	4094      	lsls	r4, r2
    32d4:	4093      	lsls	r3, r2
    32d6:	430c      	orrs	r4, r1
    32d8:	4a1b      	ldr	r2, [pc, #108]	; (3348 <__aeabi_dmul+0x1ec>)
    32da:	1a12      	subs	r2, r2, r0
    32dc:	2000      	movs	r0, #0
    32de:	e77a      	b.n	31d6 <__aeabi_dmul+0x7a>
    32e0:	2501      	movs	r5, #1
    32e2:	9b01      	ldr	r3, [sp, #4]
    32e4:	4c14      	ldr	r4, [pc, #80]	; (3338 <__aeabi_dmul+0x1dc>)
    32e6:	401d      	ands	r5, r3
    32e8:	2300      	movs	r3, #0
    32ea:	2200      	movs	r2, #0
    32ec:	4699      	mov	r9, r3
    32ee:	e79c      	b.n	322a <__aeabi_dmul+0xce>
    32f0:	2400      	movs	r4, #0
    32f2:	2200      	movs	r2, #0
    32f4:	2001      	movs	r0, #1
    32f6:	e76e      	b.n	31d6 <__aeabi_dmul+0x7a>
    32f8:	4653      	mov	r3, sl
    32fa:	2003      	movs	r0, #3
    32fc:	e76b      	b.n	31d6 <__aeabi_dmul+0x7a>
    32fe:	2300      	movs	r3, #0
    3300:	469b      	mov	fp, r3
    3302:	3301      	adds	r3, #1
    3304:	2704      	movs	r7, #4
    3306:	2600      	movs	r6, #0
    3308:	9302      	str	r3, [sp, #8]
    330a:	e74c      	b.n	31a6 <__aeabi_dmul+0x4a>
    330c:	2303      	movs	r3, #3
    330e:	4681      	mov	r9, r0
    3310:	270c      	movs	r7, #12
    3312:	9302      	str	r3, [sp, #8]
    3314:	e747      	b.n	31a6 <__aeabi_dmul+0x4a>
    3316:	2280      	movs	r2, #128	; 0x80
    3318:	2300      	movs	r3, #0
    331a:	2500      	movs	r5, #0
    331c:	0312      	lsls	r2, r2, #12
    331e:	4699      	mov	r9, r3
    3320:	4c05      	ldr	r4, [pc, #20]	; (3338 <__aeabi_dmul+0x1dc>)
    3322:	e782      	b.n	322a <__aeabi_dmul+0xce>
    3324:	465c      	mov	r4, fp
    3326:	464b      	mov	r3, r9
    3328:	9802      	ldr	r0, [sp, #8]
    332a:	e76f      	b.n	320c <__aeabi_dmul+0xb0>
    332c:	465c      	mov	r4, fp
    332e:	464b      	mov	r3, r9
    3330:	9501      	str	r5, [sp, #4]
    3332:	9802      	ldr	r0, [sp, #8]
    3334:	e76a      	b.n	320c <__aeabi_dmul+0xb0>
    3336:	46c0      	nop			; (mov r8, r8)
    3338:	000007ff 	.word	0x000007ff
    333c:	fffffc01 	.word	0xfffffc01
    3340:	0000468c 	.word	0x0000468c
    3344:	800fffff 	.word	0x800fffff
    3348:	fffffc0d 	.word	0xfffffc0d
    334c:	464a      	mov	r2, r9
    334e:	4649      	mov	r1, r9
    3350:	0c17      	lsrs	r7, r2, #16
    3352:	0c1a      	lsrs	r2, r3, #16
    3354:	041b      	lsls	r3, r3, #16
    3356:	0c1b      	lsrs	r3, r3, #16
    3358:	0408      	lsls	r0, r1, #16
    335a:	0019      	movs	r1, r3
    335c:	0c00      	lsrs	r0, r0, #16
    335e:	4341      	muls	r1, r0
    3360:	0015      	movs	r5, r2
    3362:	4688      	mov	r8, r1
    3364:	0019      	movs	r1, r3
    3366:	437d      	muls	r5, r7
    3368:	4379      	muls	r1, r7
    336a:	9503      	str	r5, [sp, #12]
    336c:	4689      	mov	r9, r1
    336e:	0029      	movs	r1, r5
    3370:	0015      	movs	r5, r2
    3372:	4345      	muls	r5, r0
    3374:	444d      	add	r5, r9
    3376:	9502      	str	r5, [sp, #8]
    3378:	4645      	mov	r5, r8
    337a:	0c2d      	lsrs	r5, r5, #16
    337c:	46aa      	mov	sl, r5
    337e:	9d02      	ldr	r5, [sp, #8]
    3380:	4455      	add	r5, sl
    3382:	45a9      	cmp	r9, r5
    3384:	d906      	bls.n	3394 <__aeabi_dmul+0x238>
    3386:	468a      	mov	sl, r1
    3388:	2180      	movs	r1, #128	; 0x80
    338a:	0249      	lsls	r1, r1, #9
    338c:	4689      	mov	r9, r1
    338e:	44ca      	add	sl, r9
    3390:	4651      	mov	r1, sl
    3392:	9103      	str	r1, [sp, #12]
    3394:	0c29      	lsrs	r1, r5, #16
    3396:	9104      	str	r1, [sp, #16]
    3398:	4641      	mov	r1, r8
    339a:	0409      	lsls	r1, r1, #16
    339c:	042d      	lsls	r5, r5, #16
    339e:	0c09      	lsrs	r1, r1, #16
    33a0:	4688      	mov	r8, r1
    33a2:	0029      	movs	r1, r5
    33a4:	0c25      	lsrs	r5, r4, #16
    33a6:	0424      	lsls	r4, r4, #16
    33a8:	4441      	add	r1, r8
    33aa:	0c24      	lsrs	r4, r4, #16
    33ac:	9105      	str	r1, [sp, #20]
    33ae:	0021      	movs	r1, r4
    33b0:	4341      	muls	r1, r0
    33b2:	4688      	mov	r8, r1
    33b4:	0021      	movs	r1, r4
    33b6:	4379      	muls	r1, r7
    33b8:	468a      	mov	sl, r1
    33ba:	4368      	muls	r0, r5
    33bc:	4641      	mov	r1, r8
    33be:	4450      	add	r0, sl
    33c0:	4681      	mov	r9, r0
    33c2:	0c08      	lsrs	r0, r1, #16
    33c4:	4448      	add	r0, r9
    33c6:	436f      	muls	r7, r5
    33c8:	4582      	cmp	sl, r0
    33ca:	d903      	bls.n	33d4 <__aeabi_dmul+0x278>
    33cc:	2180      	movs	r1, #128	; 0x80
    33ce:	0249      	lsls	r1, r1, #9
    33d0:	4689      	mov	r9, r1
    33d2:	444f      	add	r7, r9
    33d4:	0c01      	lsrs	r1, r0, #16
    33d6:	4689      	mov	r9, r1
    33d8:	0039      	movs	r1, r7
    33da:	4449      	add	r1, r9
    33dc:	9102      	str	r1, [sp, #8]
    33de:	4641      	mov	r1, r8
    33e0:	040f      	lsls	r7, r1, #16
    33e2:	9904      	ldr	r1, [sp, #16]
    33e4:	0c3f      	lsrs	r7, r7, #16
    33e6:	4688      	mov	r8, r1
    33e8:	0400      	lsls	r0, r0, #16
    33ea:	19c0      	adds	r0, r0, r7
    33ec:	4480      	add	r8, r0
    33ee:	4641      	mov	r1, r8
    33f0:	9104      	str	r1, [sp, #16]
    33f2:	4659      	mov	r1, fp
    33f4:	0c0f      	lsrs	r7, r1, #16
    33f6:	0409      	lsls	r1, r1, #16
    33f8:	0c09      	lsrs	r1, r1, #16
    33fa:	4688      	mov	r8, r1
    33fc:	4359      	muls	r1, r3
    33fe:	468a      	mov	sl, r1
    3400:	0039      	movs	r1, r7
    3402:	4351      	muls	r1, r2
    3404:	4689      	mov	r9, r1
    3406:	4641      	mov	r1, r8
    3408:	434a      	muls	r2, r1
    340a:	4651      	mov	r1, sl
    340c:	0c09      	lsrs	r1, r1, #16
    340e:	468b      	mov	fp, r1
    3410:	437b      	muls	r3, r7
    3412:	18d2      	adds	r2, r2, r3
    3414:	445a      	add	r2, fp
    3416:	4293      	cmp	r3, r2
    3418:	d903      	bls.n	3422 <__aeabi_dmul+0x2c6>
    341a:	2380      	movs	r3, #128	; 0x80
    341c:	025b      	lsls	r3, r3, #9
    341e:	469b      	mov	fp, r3
    3420:	44d9      	add	r9, fp
    3422:	4651      	mov	r1, sl
    3424:	0409      	lsls	r1, r1, #16
    3426:	0c09      	lsrs	r1, r1, #16
    3428:	468a      	mov	sl, r1
    342a:	4641      	mov	r1, r8
    342c:	4361      	muls	r1, r4
    342e:	437c      	muls	r4, r7
    3430:	0c13      	lsrs	r3, r2, #16
    3432:	0412      	lsls	r2, r2, #16
    3434:	444b      	add	r3, r9
    3436:	4452      	add	r2, sl
    3438:	46a1      	mov	r9, r4
    343a:	468a      	mov	sl, r1
    343c:	003c      	movs	r4, r7
    343e:	4641      	mov	r1, r8
    3440:	436c      	muls	r4, r5
    3442:	434d      	muls	r5, r1
    3444:	4651      	mov	r1, sl
    3446:	444d      	add	r5, r9
    3448:	0c0f      	lsrs	r7, r1, #16
    344a:	197d      	adds	r5, r7, r5
    344c:	45a9      	cmp	r9, r5
    344e:	d903      	bls.n	3458 <__aeabi_dmul+0x2fc>
    3450:	2180      	movs	r1, #128	; 0x80
    3452:	0249      	lsls	r1, r1, #9
    3454:	4688      	mov	r8, r1
    3456:	4444      	add	r4, r8
    3458:	9f04      	ldr	r7, [sp, #16]
    345a:	9903      	ldr	r1, [sp, #12]
    345c:	46b8      	mov	r8, r7
    345e:	4441      	add	r1, r8
    3460:	468b      	mov	fp, r1
    3462:	4583      	cmp	fp, r0
    3464:	4180      	sbcs	r0, r0
    3466:	4241      	negs	r1, r0
    3468:	4688      	mov	r8, r1
    346a:	4651      	mov	r1, sl
    346c:	0408      	lsls	r0, r1, #16
    346e:	042f      	lsls	r7, r5, #16
    3470:	0c00      	lsrs	r0, r0, #16
    3472:	183f      	adds	r7, r7, r0
    3474:	4658      	mov	r0, fp
    3476:	9902      	ldr	r1, [sp, #8]
    3478:	1810      	adds	r0, r2, r0
    347a:	4689      	mov	r9, r1
    347c:	4290      	cmp	r0, r2
    347e:	4192      	sbcs	r2, r2
    3480:	444f      	add	r7, r9
    3482:	46ba      	mov	sl, r7
    3484:	4252      	negs	r2, r2
    3486:	4699      	mov	r9, r3
    3488:	4693      	mov	fp, r2
    348a:	44c2      	add	sl, r8
    348c:	44d1      	add	r9, sl
    348e:	44cb      	add	fp, r9
    3490:	428f      	cmp	r7, r1
    3492:	41bf      	sbcs	r7, r7
    3494:	45c2      	cmp	sl, r8
    3496:	4189      	sbcs	r1, r1
    3498:	4599      	cmp	r9, r3
    349a:	419b      	sbcs	r3, r3
    349c:	4593      	cmp	fp, r2
    349e:	4192      	sbcs	r2, r2
    34a0:	427f      	negs	r7, r7
    34a2:	4249      	negs	r1, r1
    34a4:	0c2d      	lsrs	r5, r5, #16
    34a6:	4252      	negs	r2, r2
    34a8:	430f      	orrs	r7, r1
    34aa:	425b      	negs	r3, r3
    34ac:	4313      	orrs	r3, r2
    34ae:	197f      	adds	r7, r7, r5
    34b0:	18ff      	adds	r7, r7, r3
    34b2:	465b      	mov	r3, fp
    34b4:	193c      	adds	r4, r7, r4
    34b6:	0ddb      	lsrs	r3, r3, #23
    34b8:	9a05      	ldr	r2, [sp, #20]
    34ba:	0264      	lsls	r4, r4, #9
    34bc:	431c      	orrs	r4, r3
    34be:	0243      	lsls	r3, r0, #9
    34c0:	4313      	orrs	r3, r2
    34c2:	1e5d      	subs	r5, r3, #1
    34c4:	41ab      	sbcs	r3, r5
    34c6:	465a      	mov	r2, fp
    34c8:	0dc0      	lsrs	r0, r0, #23
    34ca:	4303      	orrs	r3, r0
    34cc:	0252      	lsls	r2, r2, #9
    34ce:	4313      	orrs	r3, r2
    34d0:	01e2      	lsls	r2, r4, #7
    34d2:	d556      	bpl.n	3582 <__aeabi_dmul+0x426>
    34d4:	2001      	movs	r0, #1
    34d6:	085a      	lsrs	r2, r3, #1
    34d8:	4003      	ands	r3, r0
    34da:	4313      	orrs	r3, r2
    34dc:	07e2      	lsls	r2, r4, #31
    34de:	4313      	orrs	r3, r2
    34e0:	0864      	lsrs	r4, r4, #1
    34e2:	485a      	ldr	r0, [pc, #360]	; (364c <__aeabi_dmul+0x4f0>)
    34e4:	4460      	add	r0, ip
    34e6:	2800      	cmp	r0, #0
    34e8:	dd4d      	ble.n	3586 <__aeabi_dmul+0x42a>
    34ea:	075a      	lsls	r2, r3, #29
    34ec:	d009      	beq.n	3502 <__aeabi_dmul+0x3a6>
    34ee:	220f      	movs	r2, #15
    34f0:	401a      	ands	r2, r3
    34f2:	2a04      	cmp	r2, #4
    34f4:	d005      	beq.n	3502 <__aeabi_dmul+0x3a6>
    34f6:	1d1a      	adds	r2, r3, #4
    34f8:	429a      	cmp	r2, r3
    34fa:	419b      	sbcs	r3, r3
    34fc:	425b      	negs	r3, r3
    34fe:	18e4      	adds	r4, r4, r3
    3500:	0013      	movs	r3, r2
    3502:	01e2      	lsls	r2, r4, #7
    3504:	d504      	bpl.n	3510 <__aeabi_dmul+0x3b4>
    3506:	2080      	movs	r0, #128	; 0x80
    3508:	4a51      	ldr	r2, [pc, #324]	; (3650 <__aeabi_dmul+0x4f4>)
    350a:	00c0      	lsls	r0, r0, #3
    350c:	4014      	ands	r4, r2
    350e:	4460      	add	r0, ip
    3510:	4a50      	ldr	r2, [pc, #320]	; (3654 <__aeabi_dmul+0x4f8>)
    3512:	4290      	cmp	r0, r2
    3514:	dd00      	ble.n	3518 <__aeabi_dmul+0x3bc>
    3516:	e6e3      	b.n	32e0 <__aeabi_dmul+0x184>
    3518:	2501      	movs	r5, #1
    351a:	08db      	lsrs	r3, r3, #3
    351c:	0762      	lsls	r2, r4, #29
    351e:	431a      	orrs	r2, r3
    3520:	0264      	lsls	r4, r4, #9
    3522:	9b01      	ldr	r3, [sp, #4]
    3524:	4691      	mov	r9, r2
    3526:	0b22      	lsrs	r2, r4, #12
    3528:	0544      	lsls	r4, r0, #21
    352a:	0d64      	lsrs	r4, r4, #21
    352c:	401d      	ands	r5, r3
    352e:	e67c      	b.n	322a <__aeabi_dmul+0xce>
    3530:	2280      	movs	r2, #128	; 0x80
    3532:	4659      	mov	r1, fp
    3534:	0312      	lsls	r2, r2, #12
    3536:	4211      	tst	r1, r2
    3538:	d008      	beq.n	354c <__aeabi_dmul+0x3f0>
    353a:	4214      	tst	r4, r2
    353c:	d106      	bne.n	354c <__aeabi_dmul+0x3f0>
    353e:	4322      	orrs	r2, r4
    3540:	0312      	lsls	r2, r2, #12
    3542:	0b12      	lsrs	r2, r2, #12
    3544:	4645      	mov	r5, r8
    3546:	4699      	mov	r9, r3
    3548:	4c43      	ldr	r4, [pc, #268]	; (3658 <__aeabi_dmul+0x4fc>)
    354a:	e66e      	b.n	322a <__aeabi_dmul+0xce>
    354c:	465b      	mov	r3, fp
    354e:	431a      	orrs	r2, r3
    3550:	0312      	lsls	r2, r2, #12
    3552:	0b12      	lsrs	r2, r2, #12
    3554:	4c40      	ldr	r4, [pc, #256]	; (3658 <__aeabi_dmul+0x4fc>)
    3556:	e668      	b.n	322a <__aeabi_dmul+0xce>
    3558:	0003      	movs	r3, r0
    355a:	4654      	mov	r4, sl
    355c:	3b28      	subs	r3, #40	; 0x28
    355e:	409c      	lsls	r4, r3
    3560:	2300      	movs	r3, #0
    3562:	e6b9      	b.n	32d8 <__aeabi_dmul+0x17c>
    3564:	f000 fc1a 	bl	3d9c <__clzsi2>
    3568:	3020      	adds	r0, #32
    356a:	e6a6      	b.n	32ba <__aeabi_dmul+0x15e>
    356c:	0003      	movs	r3, r0
    356e:	3b28      	subs	r3, #40	; 0x28
    3570:	409f      	lsls	r7, r3
    3572:	2300      	movs	r3, #0
    3574:	46bb      	mov	fp, r7
    3576:	4699      	mov	r9, r3
    3578:	e68a      	b.n	3290 <__aeabi_dmul+0x134>
    357a:	f000 fc0f 	bl	3d9c <__clzsi2>
    357e:	3020      	adds	r0, #32
    3580:	e674      	b.n	326c <__aeabi_dmul+0x110>
    3582:	46b4      	mov	ip, r6
    3584:	e7ad      	b.n	34e2 <__aeabi_dmul+0x386>
    3586:	2501      	movs	r5, #1
    3588:	1a2a      	subs	r2, r5, r0
    358a:	2a38      	cmp	r2, #56	; 0x38
    358c:	dd06      	ble.n	359c <__aeabi_dmul+0x440>
    358e:	9b01      	ldr	r3, [sp, #4]
    3590:	2400      	movs	r4, #0
    3592:	401d      	ands	r5, r3
    3594:	2300      	movs	r3, #0
    3596:	2200      	movs	r2, #0
    3598:	4699      	mov	r9, r3
    359a:	e646      	b.n	322a <__aeabi_dmul+0xce>
    359c:	2a1f      	cmp	r2, #31
    359e:	dc21      	bgt.n	35e4 <__aeabi_dmul+0x488>
    35a0:	2520      	movs	r5, #32
    35a2:	0020      	movs	r0, r4
    35a4:	1aad      	subs	r5, r5, r2
    35a6:	001e      	movs	r6, r3
    35a8:	40ab      	lsls	r3, r5
    35aa:	40a8      	lsls	r0, r5
    35ac:	40d6      	lsrs	r6, r2
    35ae:	1e5d      	subs	r5, r3, #1
    35b0:	41ab      	sbcs	r3, r5
    35b2:	4330      	orrs	r0, r6
    35b4:	4318      	orrs	r0, r3
    35b6:	40d4      	lsrs	r4, r2
    35b8:	0743      	lsls	r3, r0, #29
    35ba:	d009      	beq.n	35d0 <__aeabi_dmul+0x474>
    35bc:	230f      	movs	r3, #15
    35be:	4003      	ands	r3, r0
    35c0:	2b04      	cmp	r3, #4
    35c2:	d005      	beq.n	35d0 <__aeabi_dmul+0x474>
    35c4:	0003      	movs	r3, r0
    35c6:	1d18      	adds	r0, r3, #4
    35c8:	4298      	cmp	r0, r3
    35ca:	419b      	sbcs	r3, r3
    35cc:	425b      	negs	r3, r3
    35ce:	18e4      	adds	r4, r4, r3
    35d0:	0223      	lsls	r3, r4, #8
    35d2:	d521      	bpl.n	3618 <__aeabi_dmul+0x4bc>
    35d4:	2501      	movs	r5, #1
    35d6:	9b01      	ldr	r3, [sp, #4]
    35d8:	2401      	movs	r4, #1
    35da:	401d      	ands	r5, r3
    35dc:	2300      	movs	r3, #0
    35de:	2200      	movs	r2, #0
    35e0:	4699      	mov	r9, r3
    35e2:	e622      	b.n	322a <__aeabi_dmul+0xce>
    35e4:	251f      	movs	r5, #31
    35e6:	0021      	movs	r1, r4
    35e8:	426d      	negs	r5, r5
    35ea:	1a28      	subs	r0, r5, r0
    35ec:	40c1      	lsrs	r1, r0
    35ee:	0008      	movs	r0, r1
    35f0:	2a20      	cmp	r2, #32
    35f2:	d01d      	beq.n	3630 <__aeabi_dmul+0x4d4>
    35f4:	355f      	adds	r5, #95	; 0x5f
    35f6:	1aaa      	subs	r2, r5, r2
    35f8:	4094      	lsls	r4, r2
    35fa:	4323      	orrs	r3, r4
    35fc:	1e5c      	subs	r4, r3, #1
    35fe:	41a3      	sbcs	r3, r4
    3600:	2507      	movs	r5, #7
    3602:	4303      	orrs	r3, r0
    3604:	401d      	ands	r5, r3
    3606:	2200      	movs	r2, #0
    3608:	2d00      	cmp	r5, #0
    360a:	d009      	beq.n	3620 <__aeabi_dmul+0x4c4>
    360c:	220f      	movs	r2, #15
    360e:	2400      	movs	r4, #0
    3610:	401a      	ands	r2, r3
    3612:	0018      	movs	r0, r3
    3614:	2a04      	cmp	r2, #4
    3616:	d1d6      	bne.n	35c6 <__aeabi_dmul+0x46a>
    3618:	0003      	movs	r3, r0
    361a:	0765      	lsls	r5, r4, #29
    361c:	0264      	lsls	r4, r4, #9
    361e:	0b22      	lsrs	r2, r4, #12
    3620:	08db      	lsrs	r3, r3, #3
    3622:	432b      	orrs	r3, r5
    3624:	2501      	movs	r5, #1
    3626:	4699      	mov	r9, r3
    3628:	9b01      	ldr	r3, [sp, #4]
    362a:	2400      	movs	r4, #0
    362c:	401d      	ands	r5, r3
    362e:	e5fc      	b.n	322a <__aeabi_dmul+0xce>
    3630:	2400      	movs	r4, #0
    3632:	e7e2      	b.n	35fa <__aeabi_dmul+0x49e>
    3634:	2280      	movs	r2, #128	; 0x80
    3636:	2501      	movs	r5, #1
    3638:	0312      	lsls	r2, r2, #12
    363a:	4322      	orrs	r2, r4
    363c:	9901      	ldr	r1, [sp, #4]
    363e:	0312      	lsls	r2, r2, #12
    3640:	0b12      	lsrs	r2, r2, #12
    3642:	400d      	ands	r5, r1
    3644:	4699      	mov	r9, r3
    3646:	4c04      	ldr	r4, [pc, #16]	; (3658 <__aeabi_dmul+0x4fc>)
    3648:	e5ef      	b.n	322a <__aeabi_dmul+0xce>
    364a:	46c0      	nop			; (mov r8, r8)
    364c:	000003ff 	.word	0x000003ff
    3650:	feffffff 	.word	0xfeffffff
    3654:	000007fe 	.word	0x000007fe
    3658:	000007ff 	.word	0x000007ff

0000365c <__aeabi_dsub>:
    365c:	b5f0      	push	{r4, r5, r6, r7, lr}
    365e:	4646      	mov	r6, r8
    3660:	46d6      	mov	lr, sl
    3662:	464f      	mov	r7, r9
    3664:	030c      	lsls	r4, r1, #12
    3666:	b5c0      	push	{r6, r7, lr}
    3668:	0fcd      	lsrs	r5, r1, #31
    366a:	004e      	lsls	r6, r1, #1
    366c:	0a61      	lsrs	r1, r4, #9
    366e:	0f44      	lsrs	r4, r0, #29
    3670:	430c      	orrs	r4, r1
    3672:	00c1      	lsls	r1, r0, #3
    3674:	0058      	lsls	r0, r3, #1
    3676:	0d40      	lsrs	r0, r0, #21
    3678:	4684      	mov	ip, r0
    367a:	468a      	mov	sl, r1
    367c:	000f      	movs	r7, r1
    367e:	0319      	lsls	r1, r3, #12
    3680:	0f50      	lsrs	r0, r2, #29
    3682:	0a49      	lsrs	r1, r1, #9
    3684:	4301      	orrs	r1, r0
    3686:	48c6      	ldr	r0, [pc, #792]	; (39a0 <__aeabi_dsub+0x344>)
    3688:	0d76      	lsrs	r6, r6, #21
    368a:	46a8      	mov	r8, r5
    368c:	0fdb      	lsrs	r3, r3, #31
    368e:	00d2      	lsls	r2, r2, #3
    3690:	4584      	cmp	ip, r0
    3692:	d100      	bne.n	3696 <__aeabi_dsub+0x3a>
    3694:	e0d8      	b.n	3848 <__aeabi_dsub+0x1ec>
    3696:	2001      	movs	r0, #1
    3698:	4043      	eors	r3, r0
    369a:	42ab      	cmp	r3, r5
    369c:	d100      	bne.n	36a0 <__aeabi_dsub+0x44>
    369e:	e0a6      	b.n	37ee <__aeabi_dsub+0x192>
    36a0:	4660      	mov	r0, ip
    36a2:	1a35      	subs	r5, r6, r0
    36a4:	2d00      	cmp	r5, #0
    36a6:	dc00      	bgt.n	36aa <__aeabi_dsub+0x4e>
    36a8:	e105      	b.n	38b6 <__aeabi_dsub+0x25a>
    36aa:	2800      	cmp	r0, #0
    36ac:	d110      	bne.n	36d0 <__aeabi_dsub+0x74>
    36ae:	000b      	movs	r3, r1
    36b0:	4313      	orrs	r3, r2
    36b2:	d100      	bne.n	36b6 <__aeabi_dsub+0x5a>
    36b4:	e0d7      	b.n	3866 <__aeabi_dsub+0x20a>
    36b6:	1e6b      	subs	r3, r5, #1
    36b8:	2b00      	cmp	r3, #0
    36ba:	d000      	beq.n	36be <__aeabi_dsub+0x62>
    36bc:	e14b      	b.n	3956 <__aeabi_dsub+0x2fa>
    36be:	4653      	mov	r3, sl
    36c0:	1a9f      	subs	r7, r3, r2
    36c2:	45ba      	cmp	sl, r7
    36c4:	4180      	sbcs	r0, r0
    36c6:	1a64      	subs	r4, r4, r1
    36c8:	4240      	negs	r0, r0
    36ca:	1a24      	subs	r4, r4, r0
    36cc:	2601      	movs	r6, #1
    36ce:	e01e      	b.n	370e <__aeabi_dsub+0xb2>
    36d0:	4bb3      	ldr	r3, [pc, #716]	; (39a0 <__aeabi_dsub+0x344>)
    36d2:	429e      	cmp	r6, r3
    36d4:	d048      	beq.n	3768 <__aeabi_dsub+0x10c>
    36d6:	2380      	movs	r3, #128	; 0x80
    36d8:	041b      	lsls	r3, r3, #16
    36da:	4319      	orrs	r1, r3
    36dc:	2d38      	cmp	r5, #56	; 0x38
    36de:	dd00      	ble.n	36e2 <__aeabi_dsub+0x86>
    36e0:	e119      	b.n	3916 <__aeabi_dsub+0x2ba>
    36e2:	2d1f      	cmp	r5, #31
    36e4:	dd00      	ble.n	36e8 <__aeabi_dsub+0x8c>
    36e6:	e14c      	b.n	3982 <__aeabi_dsub+0x326>
    36e8:	2320      	movs	r3, #32
    36ea:	000f      	movs	r7, r1
    36ec:	1b5b      	subs	r3, r3, r5
    36ee:	0010      	movs	r0, r2
    36f0:	409a      	lsls	r2, r3
    36f2:	409f      	lsls	r7, r3
    36f4:	40e8      	lsrs	r0, r5
    36f6:	1e53      	subs	r3, r2, #1
    36f8:	419a      	sbcs	r2, r3
    36fa:	40e9      	lsrs	r1, r5
    36fc:	4307      	orrs	r7, r0
    36fe:	4317      	orrs	r7, r2
    3700:	4653      	mov	r3, sl
    3702:	1bdf      	subs	r7, r3, r7
    3704:	1a61      	subs	r1, r4, r1
    3706:	45ba      	cmp	sl, r7
    3708:	41a4      	sbcs	r4, r4
    370a:	4264      	negs	r4, r4
    370c:	1b0c      	subs	r4, r1, r4
    370e:	0223      	lsls	r3, r4, #8
    3710:	d400      	bmi.n	3714 <__aeabi_dsub+0xb8>
    3712:	e0c5      	b.n	38a0 <__aeabi_dsub+0x244>
    3714:	0264      	lsls	r4, r4, #9
    3716:	0a65      	lsrs	r5, r4, #9
    3718:	2d00      	cmp	r5, #0
    371a:	d100      	bne.n	371e <__aeabi_dsub+0xc2>
    371c:	e0f6      	b.n	390c <__aeabi_dsub+0x2b0>
    371e:	0028      	movs	r0, r5
    3720:	f000 fb3c 	bl	3d9c <__clzsi2>
    3724:	0003      	movs	r3, r0
    3726:	3b08      	subs	r3, #8
    3728:	2b1f      	cmp	r3, #31
    372a:	dd00      	ble.n	372e <__aeabi_dsub+0xd2>
    372c:	e0e9      	b.n	3902 <__aeabi_dsub+0x2a6>
    372e:	2220      	movs	r2, #32
    3730:	003c      	movs	r4, r7
    3732:	1ad2      	subs	r2, r2, r3
    3734:	409d      	lsls	r5, r3
    3736:	40d4      	lsrs	r4, r2
    3738:	409f      	lsls	r7, r3
    373a:	4325      	orrs	r5, r4
    373c:	429e      	cmp	r6, r3
    373e:	dd00      	ble.n	3742 <__aeabi_dsub+0xe6>
    3740:	e0db      	b.n	38fa <__aeabi_dsub+0x29e>
    3742:	1b9e      	subs	r6, r3, r6
    3744:	1c73      	adds	r3, r6, #1
    3746:	2b1f      	cmp	r3, #31
    3748:	dd00      	ble.n	374c <__aeabi_dsub+0xf0>
    374a:	e10a      	b.n	3962 <__aeabi_dsub+0x306>
    374c:	2220      	movs	r2, #32
    374e:	0038      	movs	r0, r7
    3750:	1ad2      	subs	r2, r2, r3
    3752:	0029      	movs	r1, r5
    3754:	4097      	lsls	r7, r2
    3756:	002c      	movs	r4, r5
    3758:	4091      	lsls	r1, r2
    375a:	40d8      	lsrs	r0, r3
    375c:	1e7a      	subs	r2, r7, #1
    375e:	4197      	sbcs	r7, r2
    3760:	40dc      	lsrs	r4, r3
    3762:	2600      	movs	r6, #0
    3764:	4301      	orrs	r1, r0
    3766:	430f      	orrs	r7, r1
    3768:	077b      	lsls	r3, r7, #29
    376a:	d009      	beq.n	3780 <__aeabi_dsub+0x124>
    376c:	230f      	movs	r3, #15
    376e:	403b      	ands	r3, r7
    3770:	2b04      	cmp	r3, #4
    3772:	d005      	beq.n	3780 <__aeabi_dsub+0x124>
    3774:	1d3b      	adds	r3, r7, #4
    3776:	42bb      	cmp	r3, r7
    3778:	41bf      	sbcs	r7, r7
    377a:	427f      	negs	r7, r7
    377c:	19e4      	adds	r4, r4, r7
    377e:	001f      	movs	r7, r3
    3780:	0223      	lsls	r3, r4, #8
    3782:	d525      	bpl.n	37d0 <__aeabi_dsub+0x174>
    3784:	4b86      	ldr	r3, [pc, #536]	; (39a0 <__aeabi_dsub+0x344>)
    3786:	3601      	adds	r6, #1
    3788:	429e      	cmp	r6, r3
    378a:	d100      	bne.n	378e <__aeabi_dsub+0x132>
    378c:	e0af      	b.n	38ee <__aeabi_dsub+0x292>
    378e:	4b85      	ldr	r3, [pc, #532]	; (39a4 <__aeabi_dsub+0x348>)
    3790:	2501      	movs	r5, #1
    3792:	401c      	ands	r4, r3
    3794:	4643      	mov	r3, r8
    3796:	0762      	lsls	r2, r4, #29
    3798:	08ff      	lsrs	r7, r7, #3
    379a:	0264      	lsls	r4, r4, #9
    379c:	0576      	lsls	r6, r6, #21
    379e:	4317      	orrs	r7, r2
    37a0:	0b24      	lsrs	r4, r4, #12
    37a2:	0d76      	lsrs	r6, r6, #21
    37a4:	401d      	ands	r5, r3
    37a6:	2100      	movs	r1, #0
    37a8:	0324      	lsls	r4, r4, #12
    37aa:	0b23      	lsrs	r3, r4, #12
    37ac:	0d0c      	lsrs	r4, r1, #20
    37ae:	4a7e      	ldr	r2, [pc, #504]	; (39a8 <__aeabi_dsub+0x34c>)
    37b0:	0524      	lsls	r4, r4, #20
    37b2:	431c      	orrs	r4, r3
    37b4:	4014      	ands	r4, r2
    37b6:	0533      	lsls	r3, r6, #20
    37b8:	4323      	orrs	r3, r4
    37ba:	005b      	lsls	r3, r3, #1
    37bc:	07ed      	lsls	r5, r5, #31
    37be:	085b      	lsrs	r3, r3, #1
    37c0:	432b      	orrs	r3, r5
    37c2:	0038      	movs	r0, r7
    37c4:	0019      	movs	r1, r3
    37c6:	bc1c      	pop	{r2, r3, r4}
    37c8:	4690      	mov	r8, r2
    37ca:	4699      	mov	r9, r3
    37cc:	46a2      	mov	sl, r4
    37ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37d0:	2501      	movs	r5, #1
    37d2:	4643      	mov	r3, r8
    37d4:	0762      	lsls	r2, r4, #29
    37d6:	08ff      	lsrs	r7, r7, #3
    37d8:	4317      	orrs	r7, r2
    37da:	08e4      	lsrs	r4, r4, #3
    37dc:	401d      	ands	r5, r3
    37de:	4b70      	ldr	r3, [pc, #448]	; (39a0 <__aeabi_dsub+0x344>)
    37e0:	429e      	cmp	r6, r3
    37e2:	d036      	beq.n	3852 <__aeabi_dsub+0x1f6>
    37e4:	0324      	lsls	r4, r4, #12
    37e6:	0576      	lsls	r6, r6, #21
    37e8:	0b24      	lsrs	r4, r4, #12
    37ea:	0d76      	lsrs	r6, r6, #21
    37ec:	e7db      	b.n	37a6 <__aeabi_dsub+0x14a>
    37ee:	4663      	mov	r3, ip
    37f0:	1af3      	subs	r3, r6, r3
    37f2:	2b00      	cmp	r3, #0
    37f4:	dc00      	bgt.n	37f8 <__aeabi_dsub+0x19c>
    37f6:	e094      	b.n	3922 <__aeabi_dsub+0x2c6>
    37f8:	4660      	mov	r0, ip
    37fa:	2800      	cmp	r0, #0
    37fc:	d035      	beq.n	386a <__aeabi_dsub+0x20e>
    37fe:	4868      	ldr	r0, [pc, #416]	; (39a0 <__aeabi_dsub+0x344>)
    3800:	4286      	cmp	r6, r0
    3802:	d0b1      	beq.n	3768 <__aeabi_dsub+0x10c>
    3804:	2780      	movs	r7, #128	; 0x80
    3806:	043f      	lsls	r7, r7, #16
    3808:	4339      	orrs	r1, r7
    380a:	2b38      	cmp	r3, #56	; 0x38
    380c:	dc00      	bgt.n	3810 <__aeabi_dsub+0x1b4>
    380e:	e0fd      	b.n	3a0c <__aeabi_dsub+0x3b0>
    3810:	430a      	orrs	r2, r1
    3812:	0017      	movs	r7, r2
    3814:	2100      	movs	r1, #0
    3816:	1e7a      	subs	r2, r7, #1
    3818:	4197      	sbcs	r7, r2
    381a:	4457      	add	r7, sl
    381c:	4557      	cmp	r7, sl
    381e:	4180      	sbcs	r0, r0
    3820:	1909      	adds	r1, r1, r4
    3822:	4244      	negs	r4, r0
    3824:	190c      	adds	r4, r1, r4
    3826:	0223      	lsls	r3, r4, #8
    3828:	d53a      	bpl.n	38a0 <__aeabi_dsub+0x244>
    382a:	4b5d      	ldr	r3, [pc, #372]	; (39a0 <__aeabi_dsub+0x344>)
    382c:	3601      	adds	r6, #1
    382e:	429e      	cmp	r6, r3
    3830:	d100      	bne.n	3834 <__aeabi_dsub+0x1d8>
    3832:	e14b      	b.n	3acc <__aeabi_dsub+0x470>
    3834:	2201      	movs	r2, #1
    3836:	4b5b      	ldr	r3, [pc, #364]	; (39a4 <__aeabi_dsub+0x348>)
    3838:	401c      	ands	r4, r3
    383a:	087b      	lsrs	r3, r7, #1
    383c:	4017      	ands	r7, r2
    383e:	431f      	orrs	r7, r3
    3840:	07e2      	lsls	r2, r4, #31
    3842:	4317      	orrs	r7, r2
    3844:	0864      	lsrs	r4, r4, #1
    3846:	e78f      	b.n	3768 <__aeabi_dsub+0x10c>
    3848:	0008      	movs	r0, r1
    384a:	4310      	orrs	r0, r2
    384c:	d000      	beq.n	3850 <__aeabi_dsub+0x1f4>
    384e:	e724      	b.n	369a <__aeabi_dsub+0x3e>
    3850:	e721      	b.n	3696 <__aeabi_dsub+0x3a>
    3852:	0023      	movs	r3, r4
    3854:	433b      	orrs	r3, r7
    3856:	d100      	bne.n	385a <__aeabi_dsub+0x1fe>
    3858:	e1b9      	b.n	3bce <__aeabi_dsub+0x572>
    385a:	2280      	movs	r2, #128	; 0x80
    385c:	0312      	lsls	r2, r2, #12
    385e:	4314      	orrs	r4, r2
    3860:	0324      	lsls	r4, r4, #12
    3862:	0b24      	lsrs	r4, r4, #12
    3864:	e79f      	b.n	37a6 <__aeabi_dsub+0x14a>
    3866:	002e      	movs	r6, r5
    3868:	e77e      	b.n	3768 <__aeabi_dsub+0x10c>
    386a:	0008      	movs	r0, r1
    386c:	4310      	orrs	r0, r2
    386e:	d100      	bne.n	3872 <__aeabi_dsub+0x216>
    3870:	e0ca      	b.n	3a08 <__aeabi_dsub+0x3ac>
    3872:	1e58      	subs	r0, r3, #1
    3874:	4684      	mov	ip, r0
    3876:	2800      	cmp	r0, #0
    3878:	d000      	beq.n	387c <__aeabi_dsub+0x220>
    387a:	e0e7      	b.n	3a4c <__aeabi_dsub+0x3f0>
    387c:	4452      	add	r2, sl
    387e:	4552      	cmp	r2, sl
    3880:	4180      	sbcs	r0, r0
    3882:	1864      	adds	r4, r4, r1
    3884:	4240      	negs	r0, r0
    3886:	1824      	adds	r4, r4, r0
    3888:	0017      	movs	r7, r2
    388a:	2601      	movs	r6, #1
    388c:	0223      	lsls	r3, r4, #8
    388e:	d507      	bpl.n	38a0 <__aeabi_dsub+0x244>
    3890:	2602      	movs	r6, #2
    3892:	e7cf      	b.n	3834 <__aeabi_dsub+0x1d8>
    3894:	4664      	mov	r4, ip
    3896:	432c      	orrs	r4, r5
    3898:	d100      	bne.n	389c <__aeabi_dsub+0x240>
    389a:	e1b3      	b.n	3c04 <__aeabi_dsub+0x5a8>
    389c:	002c      	movs	r4, r5
    389e:	4667      	mov	r7, ip
    38a0:	077b      	lsls	r3, r7, #29
    38a2:	d000      	beq.n	38a6 <__aeabi_dsub+0x24a>
    38a4:	e762      	b.n	376c <__aeabi_dsub+0x110>
    38a6:	0763      	lsls	r3, r4, #29
    38a8:	08ff      	lsrs	r7, r7, #3
    38aa:	431f      	orrs	r7, r3
    38ac:	2501      	movs	r5, #1
    38ae:	4643      	mov	r3, r8
    38b0:	08e4      	lsrs	r4, r4, #3
    38b2:	401d      	ands	r5, r3
    38b4:	e793      	b.n	37de <__aeabi_dsub+0x182>
    38b6:	2d00      	cmp	r5, #0
    38b8:	d178      	bne.n	39ac <__aeabi_dsub+0x350>
    38ba:	1c75      	adds	r5, r6, #1
    38bc:	056d      	lsls	r5, r5, #21
    38be:	0d6d      	lsrs	r5, r5, #21
    38c0:	2d01      	cmp	r5, #1
    38c2:	dc00      	bgt.n	38c6 <__aeabi_dsub+0x26a>
    38c4:	e0f2      	b.n	3aac <__aeabi_dsub+0x450>
    38c6:	4650      	mov	r0, sl
    38c8:	1a80      	subs	r0, r0, r2
    38ca:	4582      	cmp	sl, r0
    38cc:	41bf      	sbcs	r7, r7
    38ce:	1a65      	subs	r5, r4, r1
    38d0:	427f      	negs	r7, r7
    38d2:	1bed      	subs	r5, r5, r7
    38d4:	4684      	mov	ip, r0
    38d6:	0228      	lsls	r0, r5, #8
    38d8:	d400      	bmi.n	38dc <__aeabi_dsub+0x280>
    38da:	e08c      	b.n	39f6 <__aeabi_dsub+0x39a>
    38dc:	4650      	mov	r0, sl
    38de:	1a17      	subs	r7, r2, r0
    38e0:	42ba      	cmp	r2, r7
    38e2:	4192      	sbcs	r2, r2
    38e4:	1b0c      	subs	r4, r1, r4
    38e6:	4255      	negs	r5, r2
    38e8:	1b65      	subs	r5, r4, r5
    38ea:	4698      	mov	r8, r3
    38ec:	e714      	b.n	3718 <__aeabi_dsub+0xbc>
    38ee:	2501      	movs	r5, #1
    38f0:	4643      	mov	r3, r8
    38f2:	2400      	movs	r4, #0
    38f4:	401d      	ands	r5, r3
    38f6:	2700      	movs	r7, #0
    38f8:	e755      	b.n	37a6 <__aeabi_dsub+0x14a>
    38fa:	4c2a      	ldr	r4, [pc, #168]	; (39a4 <__aeabi_dsub+0x348>)
    38fc:	1af6      	subs	r6, r6, r3
    38fe:	402c      	ands	r4, r5
    3900:	e732      	b.n	3768 <__aeabi_dsub+0x10c>
    3902:	003d      	movs	r5, r7
    3904:	3828      	subs	r0, #40	; 0x28
    3906:	4085      	lsls	r5, r0
    3908:	2700      	movs	r7, #0
    390a:	e717      	b.n	373c <__aeabi_dsub+0xe0>
    390c:	0038      	movs	r0, r7
    390e:	f000 fa45 	bl	3d9c <__clzsi2>
    3912:	3020      	adds	r0, #32
    3914:	e706      	b.n	3724 <__aeabi_dsub+0xc8>
    3916:	430a      	orrs	r2, r1
    3918:	0017      	movs	r7, r2
    391a:	2100      	movs	r1, #0
    391c:	1e7a      	subs	r2, r7, #1
    391e:	4197      	sbcs	r7, r2
    3920:	e6ee      	b.n	3700 <__aeabi_dsub+0xa4>
    3922:	2b00      	cmp	r3, #0
    3924:	d000      	beq.n	3928 <__aeabi_dsub+0x2cc>
    3926:	e0e5      	b.n	3af4 <__aeabi_dsub+0x498>
    3928:	1c73      	adds	r3, r6, #1
    392a:	469c      	mov	ip, r3
    392c:	055b      	lsls	r3, r3, #21
    392e:	0d5b      	lsrs	r3, r3, #21
    3930:	2b01      	cmp	r3, #1
    3932:	dc00      	bgt.n	3936 <__aeabi_dsub+0x2da>
    3934:	e09f      	b.n	3a76 <__aeabi_dsub+0x41a>
    3936:	4b1a      	ldr	r3, [pc, #104]	; (39a0 <__aeabi_dsub+0x344>)
    3938:	459c      	cmp	ip, r3
    393a:	d100      	bne.n	393e <__aeabi_dsub+0x2e2>
    393c:	e0c5      	b.n	3aca <__aeabi_dsub+0x46e>
    393e:	4452      	add	r2, sl
    3940:	4552      	cmp	r2, sl
    3942:	4180      	sbcs	r0, r0
    3944:	1864      	adds	r4, r4, r1
    3946:	4240      	negs	r0, r0
    3948:	1824      	adds	r4, r4, r0
    394a:	07e7      	lsls	r7, r4, #31
    394c:	0852      	lsrs	r2, r2, #1
    394e:	4317      	orrs	r7, r2
    3950:	0864      	lsrs	r4, r4, #1
    3952:	4666      	mov	r6, ip
    3954:	e708      	b.n	3768 <__aeabi_dsub+0x10c>
    3956:	4812      	ldr	r0, [pc, #72]	; (39a0 <__aeabi_dsub+0x344>)
    3958:	4285      	cmp	r5, r0
    395a:	d100      	bne.n	395e <__aeabi_dsub+0x302>
    395c:	e085      	b.n	3a6a <__aeabi_dsub+0x40e>
    395e:	001d      	movs	r5, r3
    3960:	e6bc      	b.n	36dc <__aeabi_dsub+0x80>
    3962:	0029      	movs	r1, r5
    3964:	3e1f      	subs	r6, #31
    3966:	40f1      	lsrs	r1, r6
    3968:	2b20      	cmp	r3, #32
    396a:	d100      	bne.n	396e <__aeabi_dsub+0x312>
    396c:	e07f      	b.n	3a6e <__aeabi_dsub+0x412>
    396e:	2240      	movs	r2, #64	; 0x40
    3970:	1ad3      	subs	r3, r2, r3
    3972:	409d      	lsls	r5, r3
    3974:	432f      	orrs	r7, r5
    3976:	1e7d      	subs	r5, r7, #1
    3978:	41af      	sbcs	r7, r5
    397a:	2400      	movs	r4, #0
    397c:	430f      	orrs	r7, r1
    397e:	2600      	movs	r6, #0
    3980:	e78e      	b.n	38a0 <__aeabi_dsub+0x244>
    3982:	002b      	movs	r3, r5
    3984:	000f      	movs	r7, r1
    3986:	3b20      	subs	r3, #32
    3988:	40df      	lsrs	r7, r3
    398a:	2d20      	cmp	r5, #32
    398c:	d071      	beq.n	3a72 <__aeabi_dsub+0x416>
    398e:	2340      	movs	r3, #64	; 0x40
    3990:	1b5d      	subs	r5, r3, r5
    3992:	40a9      	lsls	r1, r5
    3994:	430a      	orrs	r2, r1
    3996:	1e51      	subs	r1, r2, #1
    3998:	418a      	sbcs	r2, r1
    399a:	2100      	movs	r1, #0
    399c:	4317      	orrs	r7, r2
    399e:	e6af      	b.n	3700 <__aeabi_dsub+0xa4>
    39a0:	000007ff 	.word	0x000007ff
    39a4:	ff7fffff 	.word	0xff7fffff
    39a8:	800fffff 	.word	0x800fffff
    39ac:	2e00      	cmp	r6, #0
    39ae:	d03e      	beq.n	3a2e <__aeabi_dsub+0x3d2>
    39b0:	4eb3      	ldr	r6, [pc, #716]	; (3c80 <__aeabi_dsub+0x624>)
    39b2:	45b4      	cmp	ip, r6
    39b4:	d045      	beq.n	3a42 <__aeabi_dsub+0x3e6>
    39b6:	2680      	movs	r6, #128	; 0x80
    39b8:	0436      	lsls	r6, r6, #16
    39ba:	426d      	negs	r5, r5
    39bc:	4334      	orrs	r4, r6
    39be:	2d38      	cmp	r5, #56	; 0x38
    39c0:	dd00      	ble.n	39c4 <__aeabi_dsub+0x368>
    39c2:	e0a8      	b.n	3b16 <__aeabi_dsub+0x4ba>
    39c4:	2d1f      	cmp	r5, #31
    39c6:	dd00      	ble.n	39ca <__aeabi_dsub+0x36e>
    39c8:	e11f      	b.n	3c0a <__aeabi_dsub+0x5ae>
    39ca:	2620      	movs	r6, #32
    39cc:	0027      	movs	r7, r4
    39ce:	4650      	mov	r0, sl
    39d0:	1b76      	subs	r6, r6, r5
    39d2:	40b7      	lsls	r7, r6
    39d4:	40e8      	lsrs	r0, r5
    39d6:	4307      	orrs	r7, r0
    39d8:	4650      	mov	r0, sl
    39da:	40b0      	lsls	r0, r6
    39dc:	1e46      	subs	r6, r0, #1
    39de:	41b0      	sbcs	r0, r6
    39e0:	40ec      	lsrs	r4, r5
    39e2:	4338      	orrs	r0, r7
    39e4:	1a17      	subs	r7, r2, r0
    39e6:	42ba      	cmp	r2, r7
    39e8:	4192      	sbcs	r2, r2
    39ea:	1b0c      	subs	r4, r1, r4
    39ec:	4252      	negs	r2, r2
    39ee:	1aa4      	subs	r4, r4, r2
    39f0:	4666      	mov	r6, ip
    39f2:	4698      	mov	r8, r3
    39f4:	e68b      	b.n	370e <__aeabi_dsub+0xb2>
    39f6:	4664      	mov	r4, ip
    39f8:	4667      	mov	r7, ip
    39fa:	432c      	orrs	r4, r5
    39fc:	d000      	beq.n	3a00 <__aeabi_dsub+0x3a4>
    39fe:	e68b      	b.n	3718 <__aeabi_dsub+0xbc>
    3a00:	2500      	movs	r5, #0
    3a02:	2600      	movs	r6, #0
    3a04:	2700      	movs	r7, #0
    3a06:	e6ea      	b.n	37de <__aeabi_dsub+0x182>
    3a08:	001e      	movs	r6, r3
    3a0a:	e6ad      	b.n	3768 <__aeabi_dsub+0x10c>
    3a0c:	2b1f      	cmp	r3, #31
    3a0e:	dc60      	bgt.n	3ad2 <__aeabi_dsub+0x476>
    3a10:	2720      	movs	r7, #32
    3a12:	1af8      	subs	r0, r7, r3
    3a14:	000f      	movs	r7, r1
    3a16:	4684      	mov	ip, r0
    3a18:	4087      	lsls	r7, r0
    3a1a:	0010      	movs	r0, r2
    3a1c:	40d8      	lsrs	r0, r3
    3a1e:	4307      	orrs	r7, r0
    3a20:	4660      	mov	r0, ip
    3a22:	4082      	lsls	r2, r0
    3a24:	1e50      	subs	r0, r2, #1
    3a26:	4182      	sbcs	r2, r0
    3a28:	40d9      	lsrs	r1, r3
    3a2a:	4317      	orrs	r7, r2
    3a2c:	e6f5      	b.n	381a <__aeabi_dsub+0x1be>
    3a2e:	0026      	movs	r6, r4
    3a30:	4650      	mov	r0, sl
    3a32:	4306      	orrs	r6, r0
    3a34:	d005      	beq.n	3a42 <__aeabi_dsub+0x3e6>
    3a36:	43ed      	mvns	r5, r5
    3a38:	2d00      	cmp	r5, #0
    3a3a:	d0d3      	beq.n	39e4 <__aeabi_dsub+0x388>
    3a3c:	4e90      	ldr	r6, [pc, #576]	; (3c80 <__aeabi_dsub+0x624>)
    3a3e:	45b4      	cmp	ip, r6
    3a40:	d1bd      	bne.n	39be <__aeabi_dsub+0x362>
    3a42:	000c      	movs	r4, r1
    3a44:	0017      	movs	r7, r2
    3a46:	4666      	mov	r6, ip
    3a48:	4698      	mov	r8, r3
    3a4a:	e68d      	b.n	3768 <__aeabi_dsub+0x10c>
    3a4c:	488c      	ldr	r0, [pc, #560]	; (3c80 <__aeabi_dsub+0x624>)
    3a4e:	4283      	cmp	r3, r0
    3a50:	d00b      	beq.n	3a6a <__aeabi_dsub+0x40e>
    3a52:	4663      	mov	r3, ip
    3a54:	e6d9      	b.n	380a <__aeabi_dsub+0x1ae>
    3a56:	2d00      	cmp	r5, #0
    3a58:	d000      	beq.n	3a5c <__aeabi_dsub+0x400>
    3a5a:	e096      	b.n	3b8a <__aeabi_dsub+0x52e>
    3a5c:	0008      	movs	r0, r1
    3a5e:	4310      	orrs	r0, r2
    3a60:	d100      	bne.n	3a64 <__aeabi_dsub+0x408>
    3a62:	e0e2      	b.n	3c2a <__aeabi_dsub+0x5ce>
    3a64:	000c      	movs	r4, r1
    3a66:	0017      	movs	r7, r2
    3a68:	4698      	mov	r8, r3
    3a6a:	4e85      	ldr	r6, [pc, #532]	; (3c80 <__aeabi_dsub+0x624>)
    3a6c:	e67c      	b.n	3768 <__aeabi_dsub+0x10c>
    3a6e:	2500      	movs	r5, #0
    3a70:	e780      	b.n	3974 <__aeabi_dsub+0x318>
    3a72:	2100      	movs	r1, #0
    3a74:	e78e      	b.n	3994 <__aeabi_dsub+0x338>
    3a76:	0023      	movs	r3, r4
    3a78:	4650      	mov	r0, sl
    3a7a:	4303      	orrs	r3, r0
    3a7c:	2e00      	cmp	r6, #0
    3a7e:	d000      	beq.n	3a82 <__aeabi_dsub+0x426>
    3a80:	e0a8      	b.n	3bd4 <__aeabi_dsub+0x578>
    3a82:	2b00      	cmp	r3, #0
    3a84:	d100      	bne.n	3a88 <__aeabi_dsub+0x42c>
    3a86:	e0de      	b.n	3c46 <__aeabi_dsub+0x5ea>
    3a88:	000b      	movs	r3, r1
    3a8a:	4313      	orrs	r3, r2
    3a8c:	d100      	bne.n	3a90 <__aeabi_dsub+0x434>
    3a8e:	e66b      	b.n	3768 <__aeabi_dsub+0x10c>
    3a90:	4452      	add	r2, sl
    3a92:	4552      	cmp	r2, sl
    3a94:	4180      	sbcs	r0, r0
    3a96:	1864      	adds	r4, r4, r1
    3a98:	4240      	negs	r0, r0
    3a9a:	1824      	adds	r4, r4, r0
    3a9c:	0017      	movs	r7, r2
    3a9e:	0223      	lsls	r3, r4, #8
    3aa0:	d400      	bmi.n	3aa4 <__aeabi_dsub+0x448>
    3aa2:	e6fd      	b.n	38a0 <__aeabi_dsub+0x244>
    3aa4:	4b77      	ldr	r3, [pc, #476]	; (3c84 <__aeabi_dsub+0x628>)
    3aa6:	4666      	mov	r6, ip
    3aa8:	401c      	ands	r4, r3
    3aaa:	e65d      	b.n	3768 <__aeabi_dsub+0x10c>
    3aac:	0025      	movs	r5, r4
    3aae:	4650      	mov	r0, sl
    3ab0:	4305      	orrs	r5, r0
    3ab2:	2e00      	cmp	r6, #0
    3ab4:	d1cf      	bne.n	3a56 <__aeabi_dsub+0x3fa>
    3ab6:	2d00      	cmp	r5, #0
    3ab8:	d14f      	bne.n	3b5a <__aeabi_dsub+0x4fe>
    3aba:	000c      	movs	r4, r1
    3abc:	4314      	orrs	r4, r2
    3abe:	d100      	bne.n	3ac2 <__aeabi_dsub+0x466>
    3ac0:	e0a0      	b.n	3c04 <__aeabi_dsub+0x5a8>
    3ac2:	000c      	movs	r4, r1
    3ac4:	0017      	movs	r7, r2
    3ac6:	4698      	mov	r8, r3
    3ac8:	e64e      	b.n	3768 <__aeabi_dsub+0x10c>
    3aca:	4666      	mov	r6, ip
    3acc:	2400      	movs	r4, #0
    3ace:	2700      	movs	r7, #0
    3ad0:	e685      	b.n	37de <__aeabi_dsub+0x182>
    3ad2:	001f      	movs	r7, r3
    3ad4:	0008      	movs	r0, r1
    3ad6:	3f20      	subs	r7, #32
    3ad8:	40f8      	lsrs	r0, r7
    3ada:	0007      	movs	r7, r0
    3adc:	2b20      	cmp	r3, #32
    3ade:	d100      	bne.n	3ae2 <__aeabi_dsub+0x486>
    3ae0:	e08e      	b.n	3c00 <__aeabi_dsub+0x5a4>
    3ae2:	2040      	movs	r0, #64	; 0x40
    3ae4:	1ac3      	subs	r3, r0, r3
    3ae6:	4099      	lsls	r1, r3
    3ae8:	430a      	orrs	r2, r1
    3aea:	1e51      	subs	r1, r2, #1
    3aec:	418a      	sbcs	r2, r1
    3aee:	2100      	movs	r1, #0
    3af0:	4317      	orrs	r7, r2
    3af2:	e692      	b.n	381a <__aeabi_dsub+0x1be>
    3af4:	2e00      	cmp	r6, #0
    3af6:	d114      	bne.n	3b22 <__aeabi_dsub+0x4c6>
    3af8:	0026      	movs	r6, r4
    3afa:	4650      	mov	r0, sl
    3afc:	4306      	orrs	r6, r0
    3afe:	d062      	beq.n	3bc6 <__aeabi_dsub+0x56a>
    3b00:	43db      	mvns	r3, r3
    3b02:	2b00      	cmp	r3, #0
    3b04:	d15c      	bne.n	3bc0 <__aeabi_dsub+0x564>
    3b06:	1887      	adds	r7, r0, r2
    3b08:	4297      	cmp	r7, r2
    3b0a:	4192      	sbcs	r2, r2
    3b0c:	1864      	adds	r4, r4, r1
    3b0e:	4252      	negs	r2, r2
    3b10:	18a4      	adds	r4, r4, r2
    3b12:	4666      	mov	r6, ip
    3b14:	e687      	b.n	3826 <__aeabi_dsub+0x1ca>
    3b16:	4650      	mov	r0, sl
    3b18:	4320      	orrs	r0, r4
    3b1a:	1e44      	subs	r4, r0, #1
    3b1c:	41a0      	sbcs	r0, r4
    3b1e:	2400      	movs	r4, #0
    3b20:	e760      	b.n	39e4 <__aeabi_dsub+0x388>
    3b22:	4e57      	ldr	r6, [pc, #348]	; (3c80 <__aeabi_dsub+0x624>)
    3b24:	45b4      	cmp	ip, r6
    3b26:	d04e      	beq.n	3bc6 <__aeabi_dsub+0x56a>
    3b28:	2680      	movs	r6, #128	; 0x80
    3b2a:	0436      	lsls	r6, r6, #16
    3b2c:	425b      	negs	r3, r3
    3b2e:	4334      	orrs	r4, r6
    3b30:	2b38      	cmp	r3, #56	; 0x38
    3b32:	dd00      	ble.n	3b36 <__aeabi_dsub+0x4da>
    3b34:	e07f      	b.n	3c36 <__aeabi_dsub+0x5da>
    3b36:	2b1f      	cmp	r3, #31
    3b38:	dd00      	ble.n	3b3c <__aeabi_dsub+0x4e0>
    3b3a:	e08b      	b.n	3c54 <__aeabi_dsub+0x5f8>
    3b3c:	2620      	movs	r6, #32
    3b3e:	0027      	movs	r7, r4
    3b40:	4650      	mov	r0, sl
    3b42:	1af6      	subs	r6, r6, r3
    3b44:	40b7      	lsls	r7, r6
    3b46:	40d8      	lsrs	r0, r3
    3b48:	4307      	orrs	r7, r0
    3b4a:	4650      	mov	r0, sl
    3b4c:	40b0      	lsls	r0, r6
    3b4e:	1e46      	subs	r6, r0, #1
    3b50:	41b0      	sbcs	r0, r6
    3b52:	4307      	orrs	r7, r0
    3b54:	40dc      	lsrs	r4, r3
    3b56:	18bf      	adds	r7, r7, r2
    3b58:	e7d6      	b.n	3b08 <__aeabi_dsub+0x4ac>
    3b5a:	000d      	movs	r5, r1
    3b5c:	4315      	orrs	r5, r2
    3b5e:	d100      	bne.n	3b62 <__aeabi_dsub+0x506>
    3b60:	e602      	b.n	3768 <__aeabi_dsub+0x10c>
    3b62:	4650      	mov	r0, sl
    3b64:	1a80      	subs	r0, r0, r2
    3b66:	4582      	cmp	sl, r0
    3b68:	41bf      	sbcs	r7, r7
    3b6a:	1a65      	subs	r5, r4, r1
    3b6c:	427f      	negs	r7, r7
    3b6e:	1bed      	subs	r5, r5, r7
    3b70:	4684      	mov	ip, r0
    3b72:	0228      	lsls	r0, r5, #8
    3b74:	d400      	bmi.n	3b78 <__aeabi_dsub+0x51c>
    3b76:	e68d      	b.n	3894 <__aeabi_dsub+0x238>
    3b78:	4650      	mov	r0, sl
    3b7a:	1a17      	subs	r7, r2, r0
    3b7c:	42ba      	cmp	r2, r7
    3b7e:	4192      	sbcs	r2, r2
    3b80:	1b0c      	subs	r4, r1, r4
    3b82:	4252      	negs	r2, r2
    3b84:	1aa4      	subs	r4, r4, r2
    3b86:	4698      	mov	r8, r3
    3b88:	e5ee      	b.n	3768 <__aeabi_dsub+0x10c>
    3b8a:	000d      	movs	r5, r1
    3b8c:	4315      	orrs	r5, r2
    3b8e:	d100      	bne.n	3b92 <__aeabi_dsub+0x536>
    3b90:	e76b      	b.n	3a6a <__aeabi_dsub+0x40e>
    3b92:	4650      	mov	r0, sl
    3b94:	0767      	lsls	r7, r4, #29
    3b96:	08c0      	lsrs	r0, r0, #3
    3b98:	4307      	orrs	r7, r0
    3b9a:	2080      	movs	r0, #128	; 0x80
    3b9c:	08e4      	lsrs	r4, r4, #3
    3b9e:	0300      	lsls	r0, r0, #12
    3ba0:	4204      	tst	r4, r0
    3ba2:	d007      	beq.n	3bb4 <__aeabi_dsub+0x558>
    3ba4:	08cd      	lsrs	r5, r1, #3
    3ba6:	4205      	tst	r5, r0
    3ba8:	d104      	bne.n	3bb4 <__aeabi_dsub+0x558>
    3baa:	002c      	movs	r4, r5
    3bac:	4698      	mov	r8, r3
    3bae:	08d7      	lsrs	r7, r2, #3
    3bb0:	0749      	lsls	r1, r1, #29
    3bb2:	430f      	orrs	r7, r1
    3bb4:	0f7b      	lsrs	r3, r7, #29
    3bb6:	00e4      	lsls	r4, r4, #3
    3bb8:	431c      	orrs	r4, r3
    3bba:	00ff      	lsls	r7, r7, #3
    3bbc:	4e30      	ldr	r6, [pc, #192]	; (3c80 <__aeabi_dsub+0x624>)
    3bbe:	e5d3      	b.n	3768 <__aeabi_dsub+0x10c>
    3bc0:	4e2f      	ldr	r6, [pc, #188]	; (3c80 <__aeabi_dsub+0x624>)
    3bc2:	45b4      	cmp	ip, r6
    3bc4:	d1b4      	bne.n	3b30 <__aeabi_dsub+0x4d4>
    3bc6:	000c      	movs	r4, r1
    3bc8:	0017      	movs	r7, r2
    3bca:	4666      	mov	r6, ip
    3bcc:	e5cc      	b.n	3768 <__aeabi_dsub+0x10c>
    3bce:	2700      	movs	r7, #0
    3bd0:	2400      	movs	r4, #0
    3bd2:	e5e8      	b.n	37a6 <__aeabi_dsub+0x14a>
    3bd4:	2b00      	cmp	r3, #0
    3bd6:	d039      	beq.n	3c4c <__aeabi_dsub+0x5f0>
    3bd8:	000b      	movs	r3, r1
    3bda:	4313      	orrs	r3, r2
    3bdc:	d100      	bne.n	3be0 <__aeabi_dsub+0x584>
    3bde:	e744      	b.n	3a6a <__aeabi_dsub+0x40e>
    3be0:	08c0      	lsrs	r0, r0, #3
    3be2:	0767      	lsls	r7, r4, #29
    3be4:	4307      	orrs	r7, r0
    3be6:	2080      	movs	r0, #128	; 0x80
    3be8:	08e4      	lsrs	r4, r4, #3
    3bea:	0300      	lsls	r0, r0, #12
    3bec:	4204      	tst	r4, r0
    3bee:	d0e1      	beq.n	3bb4 <__aeabi_dsub+0x558>
    3bf0:	08cb      	lsrs	r3, r1, #3
    3bf2:	4203      	tst	r3, r0
    3bf4:	d1de      	bne.n	3bb4 <__aeabi_dsub+0x558>
    3bf6:	08d7      	lsrs	r7, r2, #3
    3bf8:	0749      	lsls	r1, r1, #29
    3bfa:	430f      	orrs	r7, r1
    3bfc:	001c      	movs	r4, r3
    3bfe:	e7d9      	b.n	3bb4 <__aeabi_dsub+0x558>
    3c00:	2100      	movs	r1, #0
    3c02:	e771      	b.n	3ae8 <__aeabi_dsub+0x48c>
    3c04:	2500      	movs	r5, #0
    3c06:	2700      	movs	r7, #0
    3c08:	e5e9      	b.n	37de <__aeabi_dsub+0x182>
    3c0a:	002e      	movs	r6, r5
    3c0c:	0027      	movs	r7, r4
    3c0e:	3e20      	subs	r6, #32
    3c10:	40f7      	lsrs	r7, r6
    3c12:	2d20      	cmp	r5, #32
    3c14:	d02f      	beq.n	3c76 <__aeabi_dsub+0x61a>
    3c16:	2640      	movs	r6, #64	; 0x40
    3c18:	1b75      	subs	r5, r6, r5
    3c1a:	40ac      	lsls	r4, r5
    3c1c:	4650      	mov	r0, sl
    3c1e:	4320      	orrs	r0, r4
    3c20:	1e44      	subs	r4, r0, #1
    3c22:	41a0      	sbcs	r0, r4
    3c24:	2400      	movs	r4, #0
    3c26:	4338      	orrs	r0, r7
    3c28:	e6dc      	b.n	39e4 <__aeabi_dsub+0x388>
    3c2a:	2480      	movs	r4, #128	; 0x80
    3c2c:	2500      	movs	r5, #0
    3c2e:	0324      	lsls	r4, r4, #12
    3c30:	4e13      	ldr	r6, [pc, #76]	; (3c80 <__aeabi_dsub+0x624>)
    3c32:	2700      	movs	r7, #0
    3c34:	e5d3      	b.n	37de <__aeabi_dsub+0x182>
    3c36:	4650      	mov	r0, sl
    3c38:	4320      	orrs	r0, r4
    3c3a:	0007      	movs	r7, r0
    3c3c:	1e78      	subs	r0, r7, #1
    3c3e:	4187      	sbcs	r7, r0
    3c40:	2400      	movs	r4, #0
    3c42:	18bf      	adds	r7, r7, r2
    3c44:	e760      	b.n	3b08 <__aeabi_dsub+0x4ac>
    3c46:	000c      	movs	r4, r1
    3c48:	0017      	movs	r7, r2
    3c4a:	e58d      	b.n	3768 <__aeabi_dsub+0x10c>
    3c4c:	000c      	movs	r4, r1
    3c4e:	0017      	movs	r7, r2
    3c50:	4e0b      	ldr	r6, [pc, #44]	; (3c80 <__aeabi_dsub+0x624>)
    3c52:	e589      	b.n	3768 <__aeabi_dsub+0x10c>
    3c54:	001e      	movs	r6, r3
    3c56:	0027      	movs	r7, r4
    3c58:	3e20      	subs	r6, #32
    3c5a:	40f7      	lsrs	r7, r6
    3c5c:	2b20      	cmp	r3, #32
    3c5e:	d00c      	beq.n	3c7a <__aeabi_dsub+0x61e>
    3c60:	2640      	movs	r6, #64	; 0x40
    3c62:	1af3      	subs	r3, r6, r3
    3c64:	409c      	lsls	r4, r3
    3c66:	4650      	mov	r0, sl
    3c68:	4320      	orrs	r0, r4
    3c6a:	1e44      	subs	r4, r0, #1
    3c6c:	41a0      	sbcs	r0, r4
    3c6e:	4307      	orrs	r7, r0
    3c70:	2400      	movs	r4, #0
    3c72:	18bf      	adds	r7, r7, r2
    3c74:	e748      	b.n	3b08 <__aeabi_dsub+0x4ac>
    3c76:	2400      	movs	r4, #0
    3c78:	e7d0      	b.n	3c1c <__aeabi_dsub+0x5c0>
    3c7a:	2400      	movs	r4, #0
    3c7c:	e7f3      	b.n	3c66 <__aeabi_dsub+0x60a>
    3c7e:	46c0      	nop			; (mov r8, r8)
    3c80:	000007ff 	.word	0x000007ff
    3c84:	ff7fffff 	.word	0xff7fffff

00003c88 <__udivsi3>:
    3c88:	2200      	movs	r2, #0
    3c8a:	0843      	lsrs	r3, r0, #1
    3c8c:	428b      	cmp	r3, r1
    3c8e:	d374      	bcc.n	3d7a <__udivsi3+0xf2>
    3c90:	0903      	lsrs	r3, r0, #4
    3c92:	428b      	cmp	r3, r1
    3c94:	d35f      	bcc.n	3d56 <__udivsi3+0xce>
    3c96:	0a03      	lsrs	r3, r0, #8
    3c98:	428b      	cmp	r3, r1
    3c9a:	d344      	bcc.n	3d26 <__udivsi3+0x9e>
    3c9c:	0b03      	lsrs	r3, r0, #12
    3c9e:	428b      	cmp	r3, r1
    3ca0:	d328      	bcc.n	3cf4 <__udivsi3+0x6c>
    3ca2:	0c03      	lsrs	r3, r0, #16
    3ca4:	428b      	cmp	r3, r1
    3ca6:	d30d      	bcc.n	3cc4 <__udivsi3+0x3c>
    3ca8:	22ff      	movs	r2, #255	; 0xff
    3caa:	0209      	lsls	r1, r1, #8
    3cac:	ba12      	rev	r2, r2
    3cae:	0c03      	lsrs	r3, r0, #16
    3cb0:	428b      	cmp	r3, r1
    3cb2:	d302      	bcc.n	3cba <__udivsi3+0x32>
    3cb4:	1212      	asrs	r2, r2, #8
    3cb6:	0209      	lsls	r1, r1, #8
    3cb8:	d065      	beq.n	3d86 <__udivsi3+0xfe>
    3cba:	0b03      	lsrs	r3, r0, #12
    3cbc:	428b      	cmp	r3, r1
    3cbe:	d319      	bcc.n	3cf4 <__udivsi3+0x6c>
    3cc0:	e000      	b.n	3cc4 <__udivsi3+0x3c>
    3cc2:	0a09      	lsrs	r1, r1, #8
    3cc4:	0bc3      	lsrs	r3, r0, #15
    3cc6:	428b      	cmp	r3, r1
    3cc8:	d301      	bcc.n	3cce <__udivsi3+0x46>
    3cca:	03cb      	lsls	r3, r1, #15
    3ccc:	1ac0      	subs	r0, r0, r3
    3cce:	4152      	adcs	r2, r2
    3cd0:	0b83      	lsrs	r3, r0, #14
    3cd2:	428b      	cmp	r3, r1
    3cd4:	d301      	bcc.n	3cda <__udivsi3+0x52>
    3cd6:	038b      	lsls	r3, r1, #14
    3cd8:	1ac0      	subs	r0, r0, r3
    3cda:	4152      	adcs	r2, r2
    3cdc:	0b43      	lsrs	r3, r0, #13
    3cde:	428b      	cmp	r3, r1
    3ce0:	d301      	bcc.n	3ce6 <__udivsi3+0x5e>
    3ce2:	034b      	lsls	r3, r1, #13
    3ce4:	1ac0      	subs	r0, r0, r3
    3ce6:	4152      	adcs	r2, r2
    3ce8:	0b03      	lsrs	r3, r0, #12
    3cea:	428b      	cmp	r3, r1
    3cec:	d301      	bcc.n	3cf2 <__udivsi3+0x6a>
    3cee:	030b      	lsls	r3, r1, #12
    3cf0:	1ac0      	subs	r0, r0, r3
    3cf2:	4152      	adcs	r2, r2
    3cf4:	0ac3      	lsrs	r3, r0, #11
    3cf6:	428b      	cmp	r3, r1
    3cf8:	d301      	bcc.n	3cfe <__udivsi3+0x76>
    3cfa:	02cb      	lsls	r3, r1, #11
    3cfc:	1ac0      	subs	r0, r0, r3
    3cfe:	4152      	adcs	r2, r2
    3d00:	0a83      	lsrs	r3, r0, #10
    3d02:	428b      	cmp	r3, r1
    3d04:	d301      	bcc.n	3d0a <__udivsi3+0x82>
    3d06:	028b      	lsls	r3, r1, #10
    3d08:	1ac0      	subs	r0, r0, r3
    3d0a:	4152      	adcs	r2, r2
    3d0c:	0a43      	lsrs	r3, r0, #9
    3d0e:	428b      	cmp	r3, r1
    3d10:	d301      	bcc.n	3d16 <__udivsi3+0x8e>
    3d12:	024b      	lsls	r3, r1, #9
    3d14:	1ac0      	subs	r0, r0, r3
    3d16:	4152      	adcs	r2, r2
    3d18:	0a03      	lsrs	r3, r0, #8
    3d1a:	428b      	cmp	r3, r1
    3d1c:	d301      	bcc.n	3d22 <__udivsi3+0x9a>
    3d1e:	020b      	lsls	r3, r1, #8
    3d20:	1ac0      	subs	r0, r0, r3
    3d22:	4152      	adcs	r2, r2
    3d24:	d2cd      	bcs.n	3cc2 <__udivsi3+0x3a>
    3d26:	09c3      	lsrs	r3, r0, #7
    3d28:	428b      	cmp	r3, r1
    3d2a:	d301      	bcc.n	3d30 <__udivsi3+0xa8>
    3d2c:	01cb      	lsls	r3, r1, #7
    3d2e:	1ac0      	subs	r0, r0, r3
    3d30:	4152      	adcs	r2, r2
    3d32:	0983      	lsrs	r3, r0, #6
    3d34:	428b      	cmp	r3, r1
    3d36:	d301      	bcc.n	3d3c <__udivsi3+0xb4>
    3d38:	018b      	lsls	r3, r1, #6
    3d3a:	1ac0      	subs	r0, r0, r3
    3d3c:	4152      	adcs	r2, r2
    3d3e:	0943      	lsrs	r3, r0, #5
    3d40:	428b      	cmp	r3, r1
    3d42:	d301      	bcc.n	3d48 <__udivsi3+0xc0>
    3d44:	014b      	lsls	r3, r1, #5
    3d46:	1ac0      	subs	r0, r0, r3
    3d48:	4152      	adcs	r2, r2
    3d4a:	0903      	lsrs	r3, r0, #4
    3d4c:	428b      	cmp	r3, r1
    3d4e:	d301      	bcc.n	3d54 <__udivsi3+0xcc>
    3d50:	010b      	lsls	r3, r1, #4
    3d52:	1ac0      	subs	r0, r0, r3
    3d54:	4152      	adcs	r2, r2
    3d56:	08c3      	lsrs	r3, r0, #3
    3d58:	428b      	cmp	r3, r1
    3d5a:	d301      	bcc.n	3d60 <__udivsi3+0xd8>
    3d5c:	00cb      	lsls	r3, r1, #3
    3d5e:	1ac0      	subs	r0, r0, r3
    3d60:	4152      	adcs	r2, r2
    3d62:	0883      	lsrs	r3, r0, #2
    3d64:	428b      	cmp	r3, r1
    3d66:	d301      	bcc.n	3d6c <__udivsi3+0xe4>
    3d68:	008b      	lsls	r3, r1, #2
    3d6a:	1ac0      	subs	r0, r0, r3
    3d6c:	4152      	adcs	r2, r2
    3d6e:	0843      	lsrs	r3, r0, #1
    3d70:	428b      	cmp	r3, r1
    3d72:	d301      	bcc.n	3d78 <__udivsi3+0xf0>
    3d74:	004b      	lsls	r3, r1, #1
    3d76:	1ac0      	subs	r0, r0, r3
    3d78:	4152      	adcs	r2, r2
    3d7a:	1a41      	subs	r1, r0, r1
    3d7c:	d200      	bcs.n	3d80 <__udivsi3+0xf8>
    3d7e:	4601      	mov	r1, r0
    3d80:	4152      	adcs	r2, r2
    3d82:	4610      	mov	r0, r2
    3d84:	4770      	bx	lr
    3d86:	e7ff      	b.n	3d88 <__udivsi3+0x100>
    3d88:	b501      	push	{r0, lr}
    3d8a:	2000      	movs	r0, #0
    3d8c:	f7fe fa62 	bl	2254 <__aeabi_idiv0>
    3d90:	bd02      	pop	{r1, pc}
    3d92:	46c0      	nop			; (mov r8, r8)

00003d94 <__aeabi_uidivmod>:
    3d94:	2900      	cmp	r1, #0
    3d96:	d0f7      	beq.n	3d88 <__udivsi3+0x100>
    3d98:	e776      	b.n	3c88 <__udivsi3>
    3d9a:	4770      	bx	lr

00003d9c <__clzsi2>:
    3d9c:	211c      	movs	r1, #28
    3d9e:	2301      	movs	r3, #1
    3da0:	041b      	lsls	r3, r3, #16
    3da2:	4298      	cmp	r0, r3
    3da4:	d301      	bcc.n	3daa <__clzsi2+0xe>
    3da6:	0c00      	lsrs	r0, r0, #16
    3da8:	3910      	subs	r1, #16
    3daa:	0a1b      	lsrs	r3, r3, #8
    3dac:	4298      	cmp	r0, r3
    3dae:	d301      	bcc.n	3db4 <__clzsi2+0x18>
    3db0:	0a00      	lsrs	r0, r0, #8
    3db2:	3908      	subs	r1, #8
    3db4:	091b      	lsrs	r3, r3, #4
    3db6:	4298      	cmp	r0, r3
    3db8:	d301      	bcc.n	3dbe <__clzsi2+0x22>
    3dba:	0900      	lsrs	r0, r0, #4
    3dbc:	3904      	subs	r1, #4
    3dbe:	a202      	add	r2, pc, #8	; (adr r2, 3dc8 <__clzsi2+0x2c>)
    3dc0:	5c10      	ldrb	r0, [r2, r0]
    3dc2:	1840      	adds	r0, r0, r1
    3dc4:	4770      	bx	lr
    3dc6:	46c0      	nop			; (mov r8, r8)
    3dc8:	02020304 	.word	0x02020304
    3dcc:	01010101 	.word	0x01010101
	...

00003dd8 <__libc_init_array>:
    3dd8:	b570      	push	{r4, r5, r6, lr}
    3dda:	4e0d      	ldr	r6, [pc, #52]	; (3e10 <__libc_init_array+0x38>)
    3ddc:	4d0d      	ldr	r5, [pc, #52]	; (3e14 <__libc_init_array+0x3c>)
    3dde:	2400      	movs	r4, #0
    3de0:	1bad      	subs	r5, r5, r6
    3de2:	10ad      	asrs	r5, r5, #2
    3de4:	d005      	beq.n	3df2 <__libc_init_array+0x1a>
    3de6:	00a3      	lsls	r3, r4, #2
    3de8:	58f3      	ldr	r3, [r6, r3]
    3dea:	3401      	adds	r4, #1
    3dec:	4798      	blx	r3
    3dee:	42a5      	cmp	r5, r4
    3df0:	d1f9      	bne.n	3de6 <__libc_init_array+0xe>
    3df2:	f000 fc6d 	bl	46d0 <_init>
    3df6:	4e08      	ldr	r6, [pc, #32]	; (3e18 <__libc_init_array+0x40>)
    3df8:	4d08      	ldr	r5, [pc, #32]	; (3e1c <__libc_init_array+0x44>)
    3dfa:	2400      	movs	r4, #0
    3dfc:	1bad      	subs	r5, r5, r6
    3dfe:	10ad      	asrs	r5, r5, #2
    3e00:	d005      	beq.n	3e0e <__libc_init_array+0x36>
    3e02:	00a3      	lsls	r3, r4, #2
    3e04:	58f3      	ldr	r3, [r6, r3]
    3e06:	3401      	adds	r4, #1
    3e08:	4798      	blx	r3
    3e0a:	42a5      	cmp	r5, r4
    3e0c:	d1f9      	bne.n	3e02 <__libc_init_array+0x2a>
    3e0e:	bd70      	pop	{r4, r5, r6, pc}
    3e10:	000046dc 	.word	0x000046dc
    3e14:	000046dc 	.word	0x000046dc
    3e18:	000046dc 	.word	0x000046dc
    3e1c:	000046e4 	.word	0x000046e4

00003e20 <memcpy>:
    3e20:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e22:	0005      	movs	r5, r0
    3e24:	2a0f      	cmp	r2, #15
    3e26:	d92f      	bls.n	3e88 <memcpy+0x68>
    3e28:	000b      	movs	r3, r1
    3e2a:	4303      	orrs	r3, r0
    3e2c:	079b      	lsls	r3, r3, #30
    3e2e:	d134      	bne.n	3e9a <memcpy+0x7a>
    3e30:	0016      	movs	r6, r2
    3e32:	000c      	movs	r4, r1
    3e34:	0003      	movs	r3, r0
    3e36:	3e10      	subs	r6, #16
    3e38:	0935      	lsrs	r5, r6, #4
    3e3a:	3501      	adds	r5, #1
    3e3c:	012d      	lsls	r5, r5, #4
    3e3e:	1945      	adds	r5, r0, r5
    3e40:	6827      	ldr	r7, [r4, #0]
    3e42:	601f      	str	r7, [r3, #0]
    3e44:	6867      	ldr	r7, [r4, #4]
    3e46:	605f      	str	r7, [r3, #4]
    3e48:	68a7      	ldr	r7, [r4, #8]
    3e4a:	609f      	str	r7, [r3, #8]
    3e4c:	68e7      	ldr	r7, [r4, #12]
    3e4e:	3410      	adds	r4, #16
    3e50:	60df      	str	r7, [r3, #12]
    3e52:	3310      	adds	r3, #16
    3e54:	429d      	cmp	r5, r3
    3e56:	d1f3      	bne.n	3e40 <memcpy+0x20>
    3e58:	230f      	movs	r3, #15
    3e5a:	439e      	bics	r6, r3
    3e5c:	3610      	adds	r6, #16
    3e5e:	1985      	adds	r5, r0, r6
    3e60:	1989      	adds	r1, r1, r6
    3e62:	4013      	ands	r3, r2
    3e64:	2b03      	cmp	r3, #3
    3e66:	d91a      	bls.n	3e9e <memcpy+0x7e>
    3e68:	1f1e      	subs	r6, r3, #4
    3e6a:	2300      	movs	r3, #0
    3e6c:	08b4      	lsrs	r4, r6, #2
    3e6e:	3401      	adds	r4, #1
    3e70:	00a4      	lsls	r4, r4, #2
    3e72:	58cf      	ldr	r7, [r1, r3]
    3e74:	50ef      	str	r7, [r5, r3]
    3e76:	3304      	adds	r3, #4
    3e78:	42a3      	cmp	r3, r4
    3e7a:	d1fa      	bne.n	3e72 <memcpy+0x52>
    3e7c:	2403      	movs	r4, #3
    3e7e:	43a6      	bics	r6, r4
    3e80:	1d33      	adds	r3, r6, #4
    3e82:	4022      	ands	r2, r4
    3e84:	18c9      	adds	r1, r1, r3
    3e86:	18ed      	adds	r5, r5, r3
    3e88:	2a00      	cmp	r2, #0
    3e8a:	d005      	beq.n	3e98 <memcpy+0x78>
    3e8c:	2300      	movs	r3, #0
    3e8e:	5ccc      	ldrb	r4, [r1, r3]
    3e90:	54ec      	strb	r4, [r5, r3]
    3e92:	3301      	adds	r3, #1
    3e94:	4293      	cmp	r3, r2
    3e96:	d1fa      	bne.n	3e8e <memcpy+0x6e>
    3e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e9a:	0005      	movs	r5, r0
    3e9c:	e7f6      	b.n	3e8c <memcpy+0x6c>
    3e9e:	001a      	movs	r2, r3
    3ea0:	e7f2      	b.n	3e88 <memcpy+0x68>
    3ea2:	46c0      	nop			; (mov r8, r8)

00003ea4 <memset>:
    3ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ea6:	0783      	lsls	r3, r0, #30
    3ea8:	d043      	beq.n	3f32 <memset+0x8e>
    3eaa:	1e54      	subs	r4, r2, #1
    3eac:	2a00      	cmp	r2, #0
    3eae:	d03f      	beq.n	3f30 <memset+0x8c>
    3eb0:	b2ce      	uxtb	r6, r1
    3eb2:	0002      	movs	r2, r0
    3eb4:	2503      	movs	r5, #3
    3eb6:	e002      	b.n	3ebe <memset+0x1a>
    3eb8:	001a      	movs	r2, r3
    3eba:	3c01      	subs	r4, #1
    3ebc:	d338      	bcc.n	3f30 <memset+0x8c>
    3ebe:	1c53      	adds	r3, r2, #1
    3ec0:	7016      	strb	r6, [r2, #0]
    3ec2:	422b      	tst	r3, r5
    3ec4:	d1f8      	bne.n	3eb8 <memset+0x14>
    3ec6:	2c03      	cmp	r4, #3
    3ec8:	d92a      	bls.n	3f20 <memset+0x7c>
    3eca:	22ff      	movs	r2, #255	; 0xff
    3ecc:	400a      	ands	r2, r1
    3ece:	0215      	lsls	r5, r2, #8
    3ed0:	4315      	orrs	r5, r2
    3ed2:	042a      	lsls	r2, r5, #16
    3ed4:	4315      	orrs	r5, r2
    3ed6:	2c0f      	cmp	r4, #15
    3ed8:	d914      	bls.n	3f04 <memset+0x60>
    3eda:	0027      	movs	r7, r4
    3edc:	001a      	movs	r2, r3
    3ede:	3f10      	subs	r7, #16
    3ee0:	093e      	lsrs	r6, r7, #4
    3ee2:	3601      	adds	r6, #1
    3ee4:	0136      	lsls	r6, r6, #4
    3ee6:	199e      	adds	r6, r3, r6
    3ee8:	6015      	str	r5, [r2, #0]
    3eea:	6055      	str	r5, [r2, #4]
    3eec:	6095      	str	r5, [r2, #8]
    3eee:	60d5      	str	r5, [r2, #12]
    3ef0:	3210      	adds	r2, #16
    3ef2:	4296      	cmp	r6, r2
    3ef4:	d1f8      	bne.n	3ee8 <memset+0x44>
    3ef6:	220f      	movs	r2, #15
    3ef8:	4397      	bics	r7, r2
    3efa:	3710      	adds	r7, #16
    3efc:	19db      	adds	r3, r3, r7
    3efe:	4014      	ands	r4, r2
    3f00:	2c03      	cmp	r4, #3
    3f02:	d90d      	bls.n	3f20 <memset+0x7c>
    3f04:	001a      	movs	r2, r3
    3f06:	1f27      	subs	r7, r4, #4
    3f08:	08be      	lsrs	r6, r7, #2
    3f0a:	3601      	adds	r6, #1
    3f0c:	00b6      	lsls	r6, r6, #2
    3f0e:	199e      	adds	r6, r3, r6
    3f10:	c220      	stmia	r2!, {r5}
    3f12:	42b2      	cmp	r2, r6
    3f14:	d1fc      	bne.n	3f10 <memset+0x6c>
    3f16:	2203      	movs	r2, #3
    3f18:	4397      	bics	r7, r2
    3f1a:	3704      	adds	r7, #4
    3f1c:	19db      	adds	r3, r3, r7
    3f1e:	4014      	ands	r4, r2
    3f20:	2c00      	cmp	r4, #0
    3f22:	d005      	beq.n	3f30 <memset+0x8c>
    3f24:	b2c9      	uxtb	r1, r1
    3f26:	191c      	adds	r4, r3, r4
    3f28:	7019      	strb	r1, [r3, #0]
    3f2a:	3301      	adds	r3, #1
    3f2c:	429c      	cmp	r4, r3
    3f2e:	d1fb      	bne.n	3f28 <memset+0x84>
    3f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f32:	0014      	movs	r4, r2
    3f34:	0003      	movs	r3, r0
    3f36:	e7c6      	b.n	3ec6 <memset+0x22>

00003f38 <register_fini>:
    3f38:	4b03      	ldr	r3, [pc, #12]	; (3f48 <register_fini+0x10>)
    3f3a:	b510      	push	{r4, lr}
    3f3c:	2b00      	cmp	r3, #0
    3f3e:	d002      	beq.n	3f46 <register_fini+0xe>
    3f40:	4802      	ldr	r0, [pc, #8]	; (3f4c <register_fini+0x14>)
    3f42:	f000 f805 	bl	3f50 <atexit>
    3f46:	bd10      	pop	{r4, pc}
    3f48:	00000000 	.word	0x00000000
    3f4c:	00003f61 	.word	0x00003f61

00003f50 <atexit>:
    3f50:	b510      	push	{r4, lr}
    3f52:	0001      	movs	r1, r0
    3f54:	2300      	movs	r3, #0
    3f56:	2200      	movs	r2, #0
    3f58:	2000      	movs	r0, #0
    3f5a:	f000 f81f 	bl	3f9c <__register_exitproc>
    3f5e:	bd10      	pop	{r4, pc}

00003f60 <__libc_fini_array>:
    3f60:	b570      	push	{r4, r5, r6, lr}
    3f62:	4b09      	ldr	r3, [pc, #36]	; (3f88 <__libc_fini_array+0x28>)
    3f64:	4c09      	ldr	r4, [pc, #36]	; (3f8c <__libc_fini_array+0x2c>)
    3f66:	1ae4      	subs	r4, r4, r3
    3f68:	10a4      	asrs	r4, r4, #2
    3f6a:	d009      	beq.n	3f80 <__libc_fini_array+0x20>
    3f6c:	4a08      	ldr	r2, [pc, #32]	; (3f90 <__libc_fini_array+0x30>)
    3f6e:	18a5      	adds	r5, r4, r2
    3f70:	00ad      	lsls	r5, r5, #2
    3f72:	18ed      	adds	r5, r5, r3
    3f74:	682b      	ldr	r3, [r5, #0]
    3f76:	3c01      	subs	r4, #1
    3f78:	4798      	blx	r3
    3f7a:	3d04      	subs	r5, #4
    3f7c:	2c00      	cmp	r4, #0
    3f7e:	d1f9      	bne.n	3f74 <__libc_fini_array+0x14>
    3f80:	f000 fbb0 	bl	46e4 <_fini>
    3f84:	bd70      	pop	{r4, r5, r6, pc}
    3f86:	46c0      	nop			; (mov r8, r8)
    3f88:	000046f0 	.word	0x000046f0
    3f8c:	000046f4 	.word	0x000046f4
    3f90:	3fffffff 	.word	0x3fffffff

00003f94 <__retarget_lock_acquire_recursive>:
    3f94:	4770      	bx	lr
    3f96:	46c0      	nop			; (mov r8, r8)

00003f98 <__retarget_lock_release_recursive>:
    3f98:	4770      	bx	lr
    3f9a:	46c0      	nop			; (mov r8, r8)

00003f9c <__register_exitproc>:
    3f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f9e:	464e      	mov	r6, r9
    3fa0:	4645      	mov	r5, r8
    3fa2:	46de      	mov	lr, fp
    3fa4:	4657      	mov	r7, sl
    3fa6:	b5e0      	push	{r5, r6, r7, lr}
    3fa8:	4d36      	ldr	r5, [pc, #216]	; (4084 <__register_exitproc+0xe8>)
    3faa:	b083      	sub	sp, #12
    3fac:	0006      	movs	r6, r0
    3fae:	6828      	ldr	r0, [r5, #0]
    3fb0:	4698      	mov	r8, r3
    3fb2:	000f      	movs	r7, r1
    3fb4:	4691      	mov	r9, r2
    3fb6:	f7ff ffed 	bl	3f94 <__retarget_lock_acquire_recursive>
    3fba:	4b33      	ldr	r3, [pc, #204]	; (4088 <__register_exitproc+0xec>)
    3fbc:	681c      	ldr	r4, [r3, #0]
    3fbe:	23a4      	movs	r3, #164	; 0xa4
    3fc0:	005b      	lsls	r3, r3, #1
    3fc2:	58e0      	ldr	r0, [r4, r3]
    3fc4:	2800      	cmp	r0, #0
    3fc6:	d052      	beq.n	406e <__register_exitproc+0xd2>
    3fc8:	6843      	ldr	r3, [r0, #4]
    3fca:	2b1f      	cmp	r3, #31
    3fcc:	dc13      	bgt.n	3ff6 <__register_exitproc+0x5a>
    3fce:	1c5a      	adds	r2, r3, #1
    3fd0:	9201      	str	r2, [sp, #4]
    3fd2:	2e00      	cmp	r6, #0
    3fd4:	d128      	bne.n	4028 <__register_exitproc+0x8c>
    3fd6:	9a01      	ldr	r2, [sp, #4]
    3fd8:	3302      	adds	r3, #2
    3fda:	009b      	lsls	r3, r3, #2
    3fdc:	6042      	str	r2, [r0, #4]
    3fde:	501f      	str	r7, [r3, r0]
    3fe0:	6828      	ldr	r0, [r5, #0]
    3fe2:	f7ff ffd9 	bl	3f98 <__retarget_lock_release_recursive>
    3fe6:	2000      	movs	r0, #0
    3fe8:	b003      	add	sp, #12
    3fea:	bc3c      	pop	{r2, r3, r4, r5}
    3fec:	4690      	mov	r8, r2
    3fee:	4699      	mov	r9, r3
    3ff0:	46a2      	mov	sl, r4
    3ff2:	46ab      	mov	fp, r5
    3ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ff6:	4b25      	ldr	r3, [pc, #148]	; (408c <__register_exitproc+0xf0>)
    3ff8:	2b00      	cmp	r3, #0
    3ffa:	d03d      	beq.n	4078 <__register_exitproc+0xdc>
    3ffc:	20c8      	movs	r0, #200	; 0xc8
    3ffe:	0040      	lsls	r0, r0, #1
    4000:	e000      	b.n	4004 <__register_exitproc+0x68>
    4002:	bf00      	nop
    4004:	2800      	cmp	r0, #0
    4006:	d037      	beq.n	4078 <__register_exitproc+0xdc>
    4008:	22a4      	movs	r2, #164	; 0xa4
    400a:	2300      	movs	r3, #0
    400c:	0052      	lsls	r2, r2, #1
    400e:	58a1      	ldr	r1, [r4, r2]
    4010:	6043      	str	r3, [r0, #4]
    4012:	6001      	str	r1, [r0, #0]
    4014:	50a0      	str	r0, [r4, r2]
    4016:	3240      	adds	r2, #64	; 0x40
    4018:	5083      	str	r3, [r0, r2]
    401a:	3204      	adds	r2, #4
    401c:	5083      	str	r3, [r0, r2]
    401e:	3301      	adds	r3, #1
    4020:	9301      	str	r3, [sp, #4]
    4022:	2300      	movs	r3, #0
    4024:	2e00      	cmp	r6, #0
    4026:	d0d6      	beq.n	3fd6 <__register_exitproc+0x3a>
    4028:	009a      	lsls	r2, r3, #2
    402a:	4692      	mov	sl, r2
    402c:	4482      	add	sl, r0
    402e:	464a      	mov	r2, r9
    4030:	2188      	movs	r1, #136	; 0x88
    4032:	4654      	mov	r4, sl
    4034:	5062      	str	r2, [r4, r1]
    4036:	22c4      	movs	r2, #196	; 0xc4
    4038:	0052      	lsls	r2, r2, #1
    403a:	4691      	mov	r9, r2
    403c:	4481      	add	r9, r0
    403e:	464a      	mov	r2, r9
    4040:	3987      	subs	r1, #135	; 0x87
    4042:	4099      	lsls	r1, r3
    4044:	6812      	ldr	r2, [r2, #0]
    4046:	468b      	mov	fp, r1
    4048:	430a      	orrs	r2, r1
    404a:	4694      	mov	ip, r2
    404c:	464a      	mov	r2, r9
    404e:	4661      	mov	r1, ip
    4050:	6011      	str	r1, [r2, #0]
    4052:	2284      	movs	r2, #132	; 0x84
    4054:	4641      	mov	r1, r8
    4056:	0052      	lsls	r2, r2, #1
    4058:	50a1      	str	r1, [r4, r2]
    405a:	2e02      	cmp	r6, #2
    405c:	d1bb      	bne.n	3fd6 <__register_exitproc+0x3a>
    405e:	0002      	movs	r2, r0
    4060:	465c      	mov	r4, fp
    4062:	328d      	adds	r2, #141	; 0x8d
    4064:	32ff      	adds	r2, #255	; 0xff
    4066:	6811      	ldr	r1, [r2, #0]
    4068:	430c      	orrs	r4, r1
    406a:	6014      	str	r4, [r2, #0]
    406c:	e7b3      	b.n	3fd6 <__register_exitproc+0x3a>
    406e:	0020      	movs	r0, r4
    4070:	304d      	adds	r0, #77	; 0x4d
    4072:	30ff      	adds	r0, #255	; 0xff
    4074:	50e0      	str	r0, [r4, r3]
    4076:	e7a7      	b.n	3fc8 <__register_exitproc+0x2c>
    4078:	6828      	ldr	r0, [r5, #0]
    407a:	f7ff ff8d 	bl	3f98 <__retarget_lock_release_recursive>
    407e:	2001      	movs	r0, #1
    4080:	4240      	negs	r0, r0
    4082:	e7b1      	b.n	3fe8 <__register_exitproc+0x4c>
    4084:	20000600 	.word	0x20000600
    4088:	000046cc 	.word	0x000046cc
    408c:	00000000 	.word	0x00000000

00004090 <color_drg_g>:
    4090:	0000be32                                2...

00004094 <color_drg_r>:
    4094:	000028c8                                .(..

00004098 <color_drg_d>:
    4098:	00c84000                                .@..

0000409c <color_cplx_theta>:
    409c:	000000d2                                ....

000040a0 <color_cplx_r>:
    40a0:	0000be32                                2...

000040a4 <color_cplx_im>:
    40a4:	000028c8                                .(..

000040a8 <color_cplx_re>:
    40a8:	00c84000                                .@..

000040ac <color_shift_hyp_unavail>:
    40ac:	00040600                                ....

000040b0 <color_hyp_unavail>:
    40b0:	00000700                                ....

000040b4 <color_shift_unavail>:
    40b4:	00080200                                ....

000040b8 <color_normal_unavail>:
    40b8:	00030303                                ....

000040bc <color_shift_hyp>:
    40bc:	00a0c800                                ....

000040c0 <color_hyp>:
    40c0:	0000d200                                ....

000040c4 <color_shift>:
    40c4:	00c84000                                .@..

000040c8 <color_normal>:
    40c8:	003c3c3c                                <<<.

000040cc <color_off>:
    40cc:	00000105                                ....

000040d0 <cmd_decimal>:
    40d0:	20000000                                ... 

000040d4 <cmd_9>:
    40d4:	20000010                                ... 

000040d8 <cmd_8>:
    40d8:	20000020                                 .. 

000040dc <cmd_7>:
    40dc:	20000030                                0.. 

000040e0 <cmd_6>:
    40e0:	20000040                                @.. 

000040e4 <cmd_5>:
    40e4:	20000050                                P.. 

000040e8 <cmd_4>:
    40e8:	20000060                                `.. 

000040ec <cmd_3>:
    40ec:	20000070                                p.. 

000040f0 <cmd_2>:
    40f0:	20000080                                ... 

000040f4 <cmd_1>:
    40f4:	20000090                                ... 

000040f8 <cmd_0>:
    40f8:	200000a0                                ... 

000040fc <cmd_asinh>:
    40fc:	200000b0                                ... 

00004100 <cmd_asin>:
    4100:	200000c0                                ... 

00004104 <cmd_sinh>:
    4104:	200000d0                                ... 

00004108 <cmd_sin>:
    4108:	200000e0                                ... 

0000410c <cmd_div>:
    410c:	200000f0                                ... 

00004110 <cmd_mul>:
    4110:	20000100                                ... 

00004114 <cmd_sub>:
    4114:	20000110                                ... 

00004118 <cmd_add>:
    4118:	20000120                                 .. 

0000411c <cmd_chs>:
    411c:	20000130                                0.. 

00004120 <cmd_bksp>:
    4120:	20000140                                @.. 

00004124 <cmd_clearall>:
    4124:	20000150                                P.. 

00004128 <cmd_clear>:
    4128:	20000160                                `.. 

0000412c <cmd_drg_convert>:
    412c:	20000170                                p.. 

00004130 <cmd_drg_reint>:
    4130:	20000180                                ... 

00004134 <cmd_rec_pol>:
    4134:	20000190                                ... 

00004138 <cmd_re_im>:
    4138:	200001a0 00000009 00000000 00000000     ... ............
	...
    4150:	0000000c 00000000 00000001 00000000     ................
	...
    416c:	0000000d 00000000 00000001 00000000     ................
	...
    4188:	0000001a 00000000 00000010 00000000     ................
	...
    41a4:	0000001d 000010f5 00000001 00000000     ................
	...
    41c0:	00000019 00000000 00000020 00000000     ........ .......
	...
    41dc:	00000005 00001159                       ....Y...

000041e4 <colPorts>:
    41e4:	00000001 00000001 00000001 00000001     ................
	...

00004204 <colPins>:
    4204:	00000006 00000007 00000008 00000009     ................
    4214:	00000004 00000005 00000006 00000007     ................

00004224 <rowPorts>:
	...
    422c:	00000001 00000001 00000001              ............

00004238 <rowPins>:
    4238:	0000000a 0000000b 0000000a 0000000b     ................
    4248:	0000000c                                ....

0000424c <bit_expand>:
    424c:	00924924 00924926 00924934 00924936     $I..&I..4I..6I..
    425c:	009249a4 009249a6 009249b4 009249b6     .I...I...I...I..
    426c:	00924d24 00924d26 00924d34 00924d36     $M..&M..4M..6M..
    427c:	00924da4 00924da6 00924db4 00924db6     .M...M...M...M..
    428c:	00926924 00926926 00926934 00926936     $i..&i..4i..6i..
    429c:	009269a4 009269a6 009269b4 009269b6     .i...i...i...i..
    42ac:	00926d24 00926d26 00926d34 00926d36     $m..&m..4m..6m..
    42bc:	00926da4 00926da6 00926db4 00926db6     .m...m...m...m..
    42cc:	00934924 00934926 00934934 00934936     $I..&I..4I..6I..
    42dc:	009349a4 009349a6 009349b4 009349b6     .I...I...I...I..
    42ec:	00934d24 00934d26 00934d34 00934d36     $M..&M..4M..6M..
    42fc:	00934da4 00934da6 00934db4 00934db6     .M...M...M...M..
    430c:	00936924 00936926 00936934 00936936     $i..&i..4i..6i..
    431c:	009369a4 009369a6 009369b4 009369b6     .i...i...i...i..
    432c:	00936d24 00936d26 00936d34 00936d36     $m..&m..4m..6m..
    433c:	00936da4 00936da6 00936db4 00936db6     .m...m...m...m..
    434c:	009a4924 009a4926 009a4934 009a4936     $I..&I..4I..6I..
    435c:	009a49a4 009a49a6 009a49b4 009a49b6     .I...I...I...I..
    436c:	009a4d24 009a4d26 009a4d34 009a4d36     $M..&M..4M..6M..
    437c:	009a4da4 009a4da6 009a4db4 009a4db6     .M...M...M...M..
    438c:	009a6924 009a6926 009a6934 009a6936     $i..&i..4i..6i..
    439c:	009a69a4 009a69a6 009a69b4 009a69b6     .i...i...i...i..
    43ac:	009a6d24 009a6d26 009a6d34 009a6d36     $m..&m..4m..6m..
    43bc:	009a6da4 009a6da6 009a6db4 009a6db6     .m...m...m...m..
    43cc:	009b4924 009b4926 009b4934 009b4936     $I..&I..4I..6I..
    43dc:	009b49a4 009b49a6 009b49b4 009b49b6     .I...I...I...I..
    43ec:	009b4d24 009b4d26 009b4d34 009b4d36     $M..&M..4M..6M..
    43fc:	009b4da4 009b4da6 009b4db4 009b4db6     .M...M...M...M..
    440c:	009b6924 009b6926 009b6934 009b6936     $i..&i..4i..6i..
    441c:	009b69a4 009b69a6 009b69b4 009b69b6     .i...i...i...i..
    442c:	009b6d24 009b6d26 009b6d34 009b6d36     $m..&m..4m..6m..
    443c:	009b6da4 009b6da6 009b6db4 009b6db6     .m...m...m...m..
    444c:	00d24924 00d24926 00d24934 00d24936     $I..&I..4I..6I..
    445c:	00d249a4 00d249a6 00d249b4 00d249b6     .I...I...I...I..
    446c:	00d24d24 00d24d26 00d24d34 00d24d36     $M..&M..4M..6M..
    447c:	00d24da4 00d24da6 00d24db4 00d24db6     .M...M...M...M..
    448c:	00d26924 00d26926 00d26934 00d26936     $i..&i..4i..6i..
    449c:	00d269a4 00d269a6 00d269b4 00d269b6     .i...i...i...i..
    44ac:	00d26d24 00d26d26 00d26d34 00d26d36     $m..&m..4m..6m..
    44bc:	00d26da4 00d26da6 00d26db4 00d26db6     .m...m...m...m..
    44cc:	00d34924 00d34926 00d34934 00d34936     $I..&I..4I..6I..
    44dc:	00d349a4 00d349a6 00d349b4 00d349b6     .I...I...I...I..
    44ec:	00d34d24 00d34d26 00d34d34 00d34d36     $M..&M..4M..6M..
    44fc:	00d34da4 00d34da6 00d34db4 00d34db6     .M...M...M...M..
    450c:	00d36924 00d36926 00d36934 00d36936     $i..&i..4i..6i..
    451c:	00d369a4 00d369a6 00d369b4 00d369b6     .i...i...i...i..
    452c:	00d36d24 00d36d26 00d36d34 00d36d36     $m..&m..4m..6m..
    453c:	00d36da4 00d36da6 00d36db4 00d36db6     .m...m...m...m..
    454c:	00da4924 00da4926 00da4934 00da4936     $I..&I..4I..6I..
    455c:	00da49a4 00da49a6 00da49b4 00da49b6     .I...I...I...I..
    456c:	00da4d24 00da4d26 00da4d34 00da4d36     $M..&M..4M..6M..
    457c:	00da4da4 00da4da6 00da4db4 00da4db6     .M...M...M...M..
    458c:	00da6924 00da6926 00da6934 00da6936     $i..&i..4i..6i..
    459c:	00da69a4 00da69a6 00da69b4 00da69b6     .i...i...i...i..
    45ac:	00da6d24 00da6d26 00da6d34 00da6d36     $m..&m..4m..6m..
    45bc:	00da6da4 00da6da6 00da6db4 00da6db6     .m...m...m...m..
    45cc:	00db4924 00db4926 00db4934 00db4936     $I..&I..4I..6I..
    45dc:	00db49a4 00db49a6 00db49b4 00db49b6     .I...I...I...I..
    45ec:	00db4d24 00db4d26 00db4d34 00db4d36     $M..&M..4M..6M..
    45fc:	00db4da4 00db4da6 00db4db4 00db4db6     .M...M...M...M..
    460c:	00db6924 00db6926 00db6934 00db6936     $i..&i..4i..6i..
    461c:	00db69a4 00db69a6 00db69b4 00db69b6     .i...i...i...i..
    462c:	00db6d24 00db6d26 00db6d34 00db6d36     $m..&m..4m..6m..
    463c:	00db6da4 00db6da6 00db6db4 00db6db6     .m...m...m...m..
    464c:	00002aec 00002ace 00002a88 000029a6     .*...*...*...)..
    465c:	00002a88 00002ac0 00002a88 000029a6     .*...*...*...)..
    466c:	00002ace 00002ace 00002ac0 000029a6     .*...*...*...)..
    467c:	0000299e 0000299e 0000299e 00002d04     .)...)...)...-..
    468c:	0000334c 0000320c 0000320c 00003208     L3...2...2...2..
    469c:	00003324 00003324 00003316 00003208     $3..$3...3...2..
    46ac:	00003324 00003316 00003324 00003208     $3...3..$3...2..
    46bc:	0000332c 0000332c 0000332c 00003530     ,3..,3..,3..05..

000046cc <_global_impure_ptr>:
    46cc:	200001d8                                ... 

000046d0 <_init>:
    46d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46d2:	46c0      	nop			; (mov r8, r8)
    46d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    46d6:	bc08      	pop	{r3}
    46d8:	469e      	mov	lr, r3
    46da:	4770      	bx	lr

000046dc <__init_array_start>:
    46dc:	00003f39 	.word	0x00003f39

000046e0 <__frame_dummy_init_array_entry>:
    46e0:	000000e1                                ....

000046e4 <_fini>:
    46e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46e6:	46c0      	nop			; (mov r8, r8)
    46e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    46ea:	bc08      	pop	{r3}
    46ec:	469e      	mov	lr, r3
    46ee:	4770      	bx	lr

000046f0 <__fini_array_start>:
    46f0:	000000b9 	.word	0x000000b9
